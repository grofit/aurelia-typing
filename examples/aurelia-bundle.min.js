"bundle";
(function() {
var define = System.amdDefine;
define("npm:aurelia-pal-browser@1.0.0-beta.1.2.0/aurelia-pal-browser.js", ["exports", "aurelia-pal"], function(exports, _aureliaPal) {
  'use strict';
  Object.defineProperty(exports, "__esModule", {value: true});
  exports._PLATFORM = exports._DOM = exports._FEATURE = undefined;
  exports._ensureFunctionName = _ensureFunctionName;
  exports._ensureClassList = _ensureClassList;
  exports._ensurePerformance = _ensurePerformance;
  exports._ensureCustomEvent = _ensureCustomEvent;
  exports._ensureElementMatches = _ensureElementMatches;
  exports._ensureHTMLTemplateElement = _ensureHTMLTemplateElement;
  exports.initialize = initialize;
  function _ensureFunctionName() {
    function test() {}
    if (!test.name) {
      Object.defineProperty(Function.prototype, 'name', {get: function get() {
          var name = this.toString().match(/^\s*function\s*(\S*)\s*\(/)[1];
          Object.defineProperty(this, 'name', {value: name});
          return name;
        }});
    }
  }
  function _ensureClassList() {
    if (!('classList' in document.createElement('_')) || document.createElementNS && !('classList' in document.createElementNS('http://www.w3.org/2000/svg', 'g'))) {
      (function() {
        var protoProp = 'prototype';
        var strTrim = String.prototype.trim;
        var arrIndexOf = Array.prototype.indexOf;
        var emptyArray = [];
        var DOMEx = function DOMEx(type, message) {
          this.name = type;
          this.code = DOMException[type];
          this.message = message;
        };
        var checkTokenAndGetIndex = function checkTokenAndGetIndex(classList, token) {
          if (token === '') {
            throw new DOMEx('SYNTAX_ERR', 'An invalid or illegal string was specified');
          }
          if (/\s/.test(token)) {
            throw new DOMEx('INVALID_CHARACTER_ERR', 'String contains an invalid character');
          }
          return arrIndexOf.call(classList, token);
        };
        var ClassList = function ClassList(elem) {
          var trimmedClasses = strTrim.call(elem.getAttribute('class') || '');
          var classes = trimmedClasses ? trimmedClasses.split(/\s+/) : emptyArray;
          for (var i = 0,
              ii = classes.length; i < ii; ++i) {
            this.push(classes[i]);
          }
          this._updateClassName = function() {
            elem.setAttribute('class', this.toString());
          };
        };
        var classListProto = ClassList[protoProp] = [];
        DOMEx[protoProp] = Error[protoProp];
        classListProto.item = function(i) {
          return this[i] || null;
        };
        classListProto.contains = function(token) {
          token += '';
          return checkTokenAndGetIndex(this, token) !== -1;
        };
        classListProto.add = function() {
          var tokens = arguments;
          var i = 0;
          var ii = tokens.length;
          var token = void 0;
          var updated = false;
          do {
            token = tokens[i] + '';
            if (checkTokenAndGetIndex(this, token) === -1) {
              this.push(token);
              updated = true;
            }
          } while (++i < ii);
          if (updated) {
            this._updateClassName();
          }
        };
        classListProto.remove = function() {
          var tokens = arguments;
          var i = 0;
          var ii = tokens.length;
          var token = void 0;
          var updated = false;
          var index = void 0;
          do {
            token = tokens[i] + '';
            index = checkTokenAndGetIndex(this, token);
            while (index !== -1) {
              this.splice(index, 1);
              updated = true;
              index = checkTokenAndGetIndex(this, token);
            }
          } while (++i < ii);
          if (updated) {
            this._updateClassName();
          }
        };
        classListProto.toggle = function(token, force) {
          token += '';
          var result = this.contains(token);
          var method = result ? force !== true && 'remove' : force !== false && 'add';
          if (method) {
            this[method](token);
          }
          if (force === true || force === false) {
            return force;
          }
          return !result;
        };
        classListProto.toString = function() {
          return this.join(' ');
        };
        Object.defineProperty(Element.prototype, 'classList', {
          get: function get() {
            return new ClassList(this);
          },
          enumerable: true,
          configurable: true
        });
      })();
    } else {
      var testElement = document.createElement('_');
      testElement.classList.add('c1', 'c2');
      if (!testElement.classList.contains('c2')) {
        var createMethod = function createMethod(method) {
          var original = DOMTokenList.prototype[method];
          DOMTokenList.prototype[method] = function(token) {
            for (var i = 0,
                ii = arguments.length; i < ii; ++i) {
              token = arguments[i];
              original.call(this, token);
            }
          };
        };
        createMethod('add');
        createMethod('remove');
      }
      testElement.classList.toggle('c3', false);
      if (testElement.classList.contains('c3')) {
        (function() {
          var _toggle = DOMTokenList.prototype.toggle;
          DOMTokenList.prototype.toggle = function(token, force) {
            if (1 in arguments && !this.contains(token) === !force) {
              return force;
            }
            return _toggle.call(this, token);
          };
        })();
      }
      testElement = null;
    }
  }
  function _ensurePerformance() {
    if ('performance' in window === false) {
      window.performance = {};
    }
    Date.now = Date.now || function() {
      return new Date().getTime();
    };
    if ('now' in window.performance === false) {
      (function() {
        var nowOffset = Date.now();
        if (performance.timing && performance.timing.navigationStart) {
          nowOffset = performance.timing.navigationStart;
        }
        window.performance.now = function now() {
          return Date.now() - nowOffset;
        };
      })();
    }
  }
  function _ensureCustomEvent() {
    if (!window.CustomEvent || typeof window.CustomEvent !== 'function') {
      var _CustomEvent = function _CustomEvent(event, params) {
        params = params || {
          bubbles: false,
          cancelable: false,
          detail: undefined
        };
        var evt = document.createEvent('CustomEvent');
        evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);
        return evt;
      };
      _CustomEvent.prototype = window.Event.prototype;
      window.CustomEvent = _CustomEvent;
    }
  }
  function _ensureElementMatches() {
    if (Element && !Element.prototype.matches) {
      var proto = Element.prototype;
      proto.matches = proto.matchesSelector || proto.mozMatchesSelector || proto.msMatchesSelector || proto.oMatchesSelector || proto.webkitMatchesSelector;
    }
  }
  var _FEATURE = exports._FEATURE = {};
  _FEATURE.shadowDOM = function() {
    return !!HTMLElement.prototype.createShadowRoot;
  }();
  _FEATURE.scopedCSS = function() {
    return 'scoped' in document.createElement('style');
  }();
  _FEATURE.htmlTemplateElement = function() {
    return 'content' in document.createElement('template');
  }();
  _FEATURE.mutationObserver = function() {
    return !!(window.MutationObserver || window.WebKitMutationObserver);
  }();
  function _ensureHTMLTemplateElement() {
    function isSVGTemplate(el) {
      return el.tagName === 'template' && el.namespaceURI === 'http://www.w3.org/2000/svg';
    }
    function fixSVGTemplateElement(el) {
      var template = el.ownerDocument.createElement('template');
      var attrs = el.attributes;
      var length = attrs.length;
      var attr = void 0;
      el.parentNode.insertBefore(template, el);
      while (length-- > 0) {
        attr = attrs[length];
        template.setAttribute(attr.name, attr.value);
        el.removeAttribute(attr.name);
      }
      el.parentNode.removeChild(el);
      return fixHTMLTemplateElement(template);
    }
    function fixHTMLTemplateElement(template) {
      var content = template.content = document.createDocumentFragment();
      var child = void 0;
      while (child = template.firstChild) {
        content.appendChild(child);
      }
      return template;
    }
    function fixHTMLTemplateElementRoot(template) {
      var content = fixHTMLTemplateElement(template).content;
      var childTemplates = content.querySelectorAll('template');
      for (var i = 0,
          ii = childTemplates.length; i < ii; ++i) {
        var child = childTemplates[i];
        if (isSVGTemplate(child)) {
          fixSVGTemplateElement(child);
        } else {
          fixHTMLTemplateElement(child);
        }
      }
      return template;
    }
    if (_FEATURE.htmlTemplateElement) {
      _FEATURE.ensureHTMLTemplateElement = function(template) {
        return template;
      };
    } else {
      _FEATURE.ensureHTMLTemplateElement = fixHTMLTemplateElementRoot;
    }
  }
  var shadowPoly = window.ShadowDOMPolyfill || null;
  var _DOM = exports._DOM = {
    Element: Element,
    SVGElement: SVGElement,
    boundary: 'aurelia-dom-boundary',
    addEventListener: function addEventListener(eventName, callback, capture) {
      document.addEventListener(eventName, callback, capture);
    },
    removeEventListener: function removeEventListener(eventName, callback, capture) {
      document.removeEventListener(eventName, callback, capture);
    },
    adoptNode: function adoptNode(node) {
      return document.adoptNode(node, true);
    },
    createElement: function createElement(tagName) {
      return document.createElement(tagName);
    },
    createTextNode: function createTextNode(text) {
      return document.createTextNode(text);
    },
    createComment: function createComment(text) {
      return document.createComment(text);
    },
    createDocumentFragment: function createDocumentFragment() {
      return document.createDocumentFragment();
    },
    createMutationObserver: function createMutationObserver(callback) {
      return new (window.MutationObserver || window.WebKitMutationObserver)(callback);
    },
    createCustomEvent: function createCustomEvent(eventType, options) {
      return new window.CustomEvent(eventType, options);
    },
    dispatchEvent: function dispatchEvent(evt) {
      document.dispatchEvent(evt);
    },
    getComputedStyle: function getComputedStyle(element) {
      return window.getComputedStyle(element);
    },
    getElementById: function getElementById(id) {
      return document.getElementById(id);
    },
    querySelectorAll: function querySelectorAll(query) {
      return document.querySelectorAll(query);
    },
    nextElementSibling: function nextElementSibling(element) {
      if (element.nextElementSibling) {
        return element.nextElementSibling;
      }
      do {
        element = element.nextSibling;
      } while (element && element.nodeType !== 1);
      return element;
    },
    createTemplateFromMarkup: function createTemplateFromMarkup(markup) {
      var parser = document.createElement('div');
      parser.innerHTML = markup;
      var temp = parser.firstElementChild;
      if (!temp || temp.nodeName !== 'TEMPLATE') {
        throw new Error('Template markup must be wrapped in a <template> element e.g. <template> <!-- markup here --> </template>');
      }
      return _FEATURE.ensureHTMLTemplateElement(temp);
    },
    appendNode: function appendNode(newNode, parentNode) {
      (parentNode || document.body).appendChild(newNode);
    },
    replaceNode: function replaceNode(newNode, node, parentNode) {
      if (node.parentNode) {
        node.parentNode.replaceChild(newNode, node);
      } else if (shadowPoly !== null) {
        shadowPoly.unwrap(parentNode).replaceChild(shadowPoly.unwrap(newNode), shadowPoly.unwrap(node));
      } else {
        parentNode.replaceChild(newNode, node);
      }
    },
    removeNode: function removeNode(node, parentNode) {
      if (node.parentNode) {
        node.parentNode.removeChild(node);
      } else if (shadowPoly !== null) {
        shadowPoly.unwrap(parentNode).removeChild(shadowPoly.unwrap(node));
      } else {
        parentNode.removeChild(node);
      }
    },
    injectStyles: function injectStyles(styles, destination, prepend) {
      var node = document.createElement('style');
      node.innerHTML = styles;
      node.type = 'text/css';
      destination = destination || document.head;
      if (prepend && destination.childNodes.length > 0) {
        destination.insertBefore(node, destination.childNodes[0]);
      } else {
        destination.appendChild(node);
      }
      return node;
    }
  };
  var _PLATFORM = exports._PLATFORM = {
    location: window.location,
    history: window.history,
    addEventListener: function addEventListener(eventName, callback, capture) {
      this.global.addEventListener(eventName, callback, capture);
    },
    removeEventListener: function removeEventListener(eventName, callback, capture) {
      this.global.removeEventListener(eventName, callback, capture);
    },
    performance: window.performance,
    requestAnimationFrame: function requestAnimationFrame(callback) {
      return this.global.requestAnimationFrame(callback);
    }
  };
  var isInitialized = false;
  function initialize() {
    if (isInitialized) {
      return;
    }
    isInitialized = true;
    _ensureCustomEvent();
    _ensureFunctionName();
    _ensureHTMLTemplateElement();
    _ensureElementMatches();
    _ensureClassList();
    _ensurePerformance();
    (0, _aureliaPal.initializePAL)(function(platform, feature, dom) {
      Object.assign(platform, _PLATFORM);
      Object.assign(feature, _FEATURE);
      Object.assign(dom, _DOM);
      Object.defineProperty(dom, 'title', {
        get: function get() {
          return document.title;
        },
        set: function set(value) {
          document.title = value;
        }
      });
      Object.defineProperty(dom, 'activeElement', {get: function get() {
          return document.activeElement;
        }});
      Object.defineProperty(platform, 'XMLHttpRequest', {get: function get() {
          return platform.global.XMLHttpRequest;
        }});
    });
  }
});

})();
(function() {
var define = System.amdDefine;
define("npm:aurelia-pal-browser@1.0.0-beta.1.2.0.js", ["npm:aurelia-pal-browser@1.0.0-beta.1.2.0/aurelia-pal-browser"], function(main) {
  return main;
});

})();
(function() {
var define = System.amdDefine;
define("npm:aurelia-polyfills@1.0.0-beta.1.1.2/aurelia-polyfills.js", ["aurelia-pal"], function(_aureliaPal) {
  'use strict';
  (function(Object, GOPS) {
    'use strict';
    if (GOPS in Object)
      return;
    var setDescriptor,
        G = _aureliaPal.PLATFORM.global,
        id = 0,
        random = '' + Math.random(),
        prefix = '__\x01symbol:',
        prefixLength = prefix.length,
        internalSymbol = '__\x01symbol@@' + random,
        DP = 'defineProperty',
        DPies = 'defineProperties',
        GOPN = 'getOwnPropertyNames',
        GOPD = 'getOwnPropertyDescriptor',
        PIE = 'propertyIsEnumerable',
        gOPN = Object[GOPN],
        gOPD = Object[GOPD],
        create = Object.create,
        keys = Object.keys,
        defineProperty = Object[DP],
        $defineProperties = Object[DPies],
        descriptor = gOPD(Object, GOPN),
        ObjectProto = Object.prototype,
        hOP = ObjectProto.hasOwnProperty,
        pIE = ObjectProto[PIE],
        toString = ObjectProto.toString,
        indexOf = Array.prototype.indexOf || function(v) {
          for (var i = this.length; i-- && this[i] !== v; ) {}
          return i;
        },
        addInternalIfNeeded = function addInternalIfNeeded(o, uid, enumerable) {
          if (!hOP.call(o, internalSymbol)) {
            defineProperty(o, internalSymbol, {
              enumerable: false,
              configurable: false,
              writable: false,
              value: {}
            });
          }
          o[internalSymbol]['@@' + uid] = enumerable;
        },
        createWithSymbols = function createWithSymbols(proto, descriptors) {
          var self = create(proto);
          gOPN(descriptors).forEach(function(key) {
            if (propertyIsEnumerable.call(descriptors, key)) {
              $defineProperty(self, key, descriptors[key]);
            }
          });
          return self;
        },
        copyAsNonEnumerable = function copyAsNonEnumerable(descriptor) {
          var newDescriptor = create(descriptor);
          newDescriptor.enumerable = false;
          return newDescriptor;
        },
        get = function get() {},
        onlyNonSymbols = function onlyNonSymbols(name) {
          return name != internalSymbol && !hOP.call(source, name);
        },
        onlySymbols = function onlySymbols(name) {
          return name != internalSymbol && hOP.call(source, name);
        },
        propertyIsEnumerable = function propertyIsEnumerable(key) {
          var uid = '' + key;
          return onlySymbols(uid) ? hOP.call(this, uid) && this[internalSymbol]['@@' + uid] : pIE.call(this, key);
        },
        setAndGetSymbol = function setAndGetSymbol(uid) {
          var descriptor = {
            enumerable: false,
            configurable: true,
            get: get,
            set: function set(value) {
              setDescriptor(this, uid, {
                enumerable: false,
                configurable: true,
                writable: true,
                value: value
              });
              addInternalIfNeeded(this, uid, true);
            }
          };
          defineProperty(ObjectProto, uid, descriptor);
          return source[uid] = defineProperty(Object(uid), 'constructor', sourceConstructor);
        },
        _Symbol = function _Symbol2(description) {
          if (this && this !== G) {
            throw new TypeError('Symbol is not a constructor');
          }
          return setAndGetSymbol(prefix.concat(description || '', random, ++id));
        },
        source = create(null),
        sourceConstructor = {value: _Symbol},
        sourceMap = function sourceMap(uid) {
          return source[uid];
        },
        $defineProperty = function defineProp(o, key, descriptor) {
          var uid = '' + key;
          if (onlySymbols(uid)) {
            setDescriptor(o, uid, descriptor.enumerable ? copyAsNonEnumerable(descriptor) : descriptor);
            addInternalIfNeeded(o, uid, !!descriptor.enumerable);
          } else {
            defineProperty(o, key, descriptor);
          }
          return o;
        },
        $getOwnPropertySymbols = function getOwnPropertySymbols(o) {
          var cof = toString.call(o);
          o = cof === '[object String]' ? o.split('') : Object(o);
          return gOPN(o).filter(onlySymbols).map(sourceMap);
        };
    descriptor.value = $defineProperty;
    defineProperty(Object, DP, descriptor);
    descriptor.value = $getOwnPropertySymbols;
    defineProperty(Object, GOPS, descriptor);
    descriptor.value = function getOwnPropertyNames(o) {
      return gOPN(o).filter(onlyNonSymbols);
    };
    defineProperty(Object, GOPN, descriptor);
    descriptor.value = function defineProperties(o, descriptors) {
      var symbols = $getOwnPropertySymbols(descriptors);
      if (symbols.length) {
        keys(descriptors).concat(symbols).forEach(function(uid) {
          if (propertyIsEnumerable.call(descriptors, uid)) {
            $defineProperty(o, uid, descriptors[uid]);
          }
        });
      } else {
        $defineProperties(o, descriptors);
      }
      return o;
    };
    defineProperty(Object, DPies, descriptor);
    descriptor.value = propertyIsEnumerable;
    defineProperty(ObjectProto, PIE, descriptor);
    descriptor.value = _Symbol;
    defineProperty(G, 'Symbol', descriptor);
    descriptor.value = function(key) {
      var uid = prefix.concat(prefix, key, random);
      return uid in ObjectProto ? source[uid] : setAndGetSymbol(uid);
    };
    defineProperty(_Symbol, 'for', descriptor);
    descriptor.value = function(symbol) {
      return hOP.call(source, symbol) ? symbol.slice(prefixLength * 2, -random.length) : void 0;
    };
    defineProperty(_Symbol, 'keyFor', descriptor);
    descriptor.value = function getOwnPropertyDescriptor(o, key) {
      var descriptor = gOPD(o, key);
      if (descriptor && onlySymbols(key)) {
        descriptor.enumerable = propertyIsEnumerable.call(o, key);
      }
      return descriptor;
    };
    defineProperty(Object, GOPD, descriptor);
    descriptor.value = function(proto, descriptors) {
      return arguments.length === 1 ? create(proto) : createWithSymbols(proto, descriptors);
    };
    defineProperty(Object, 'create', descriptor);
    descriptor.value = function() {
      var str = toString.call(this);
      return str === '[object String]' && onlySymbols(this) ? '[object Symbol]' : str;
    };
    defineProperty(ObjectProto, 'toString', descriptor);
    try {
      setDescriptor = create(defineProperty({}, prefix, {get: function get() {
          return defineProperty(this, prefix, {value: false})[prefix];
        }}))[prefix] || defineProperty;
    } catch (o_O) {
      setDescriptor = function setDescriptor(o, key, descriptor) {
        var protoDescriptor = gOPD(ObjectProto, key);
        delete ObjectProto[key];
        defineProperty(o, key, descriptor);
        defineProperty(ObjectProto, key, protoDescriptor);
      };
    }
  })(Object, 'getOwnPropertySymbols');
  (function(O, S) {
    var dP = O.defineProperty,
        ObjectProto = O.prototype,
        toString = ObjectProto.toString,
        toStringTag = 'toStringTag',
        descriptor;
    ['iterator', 'match', 'replace', 'search', 'split', 'hasInstance', 'isConcatSpreadable', 'unscopables', 'species', 'toPrimitive', toStringTag].forEach(function(name) {
      if (!(name in Symbol)) {
        dP(Symbol, name, {value: Symbol(name)});
        switch (name) {
          case toStringTag:
            descriptor = O.getOwnPropertyDescriptor(ObjectProto, 'toString');
            descriptor.value = function() {
              var str = toString.call(this),
                  tst = typeof this === 'undefined' || this === null ? undefined : this[Symbol.toStringTag];
              return typeof tst === 'undefined' ? str : '[object ' + tst + ']';
            };
            dP(ObjectProto, 'toString', descriptor);
            break;
        }
      }
    });
  })(Object, Symbol);
  (function(Si, AP, SP) {
    function returnThis() {
      return this;
    }
    if (!AP[Si])
      AP[Si] = function() {
        var i = 0,
            self = this,
            iterator = {next: function next() {
                var done = self.length <= i;
                return done ? {done: done} : {
                  done: done,
                  value: self[i++]
                };
              }};
        iterator[Si] = returnThis;
        return iterator;
      };
    if (!SP[Si])
      SP[Si] = function() {
        var fromCodePoint = String.fromCodePoint,
            self = this,
            i = 0,
            length = self.length,
            iterator = {next: function next() {
                var done = length <= i,
                    c = done ? '' : fromCodePoint(self.codePointAt(i));
                i += c.length;
                return done ? {done: done} : {
                  done: done,
                  value: c
                };
              }};
        iterator[Si] = returnThis;
        return iterator;
      };
  })(Symbol.iterator, Array.prototype, String.prototype);
  Number.isNaN = Number.isNaN || function(value) {
    return value !== value;
  };
  Number.isFinite = Number.isFinite || function(value) {
    return typeof value === "number" && isFinite(value);
  };
  if (!String.prototype.endsWith) {
    String.prototype.endsWith = function(searchString, position) {
      var subjectString = this.toString();
      if (typeof position !== 'number' || !isFinite(position) || Math.floor(position) !== position || position > subjectString.length) {
        position = subjectString.length;
      }
      position -= searchString.length;
      var lastIndex = subjectString.indexOf(searchString, position);
      return lastIndex !== -1 && lastIndex === position;
    };
  }
  if (!String.prototype.startsWith) {
    String.prototype.startsWith = function(searchString, position) {
      position = position || 0;
      return this.substr(position, searchString.length) === searchString;
    };
  }
  if (!Array.from) {
    Array.from = function() {
      var toInteger = function toInteger(it) {
        return isNaN(it = +it) ? 0 : (it > 0 ? Math.floor : Math.ceil)(it);
      };
      var toLength = function toLength(it) {
        return it > 0 ? Math.min(toInteger(it), 0x1fffffffffffff) : 0;
      };
      var iterCall = function iterCall(iter, fn, a1, a2) {
        try {
          fn(a1, a2);
        } catch (E) {
          if (typeof iter.return == 'function')
            iter.return();
          throw E;
        }
      };
      return function from(arrayLike) {
        var O = Object(arrayLike),
            C = typeof this == 'function' ? this : Array,
            aLen = arguments.length,
            mapfn = aLen > 1 ? arguments[1] : undefined,
            mapping = mapfn !== undefined,
            index = 0,
            iterFn = O[Symbol.iterator],
            length,
            result,
            step,
            iterator;
        if (mapping)
          mapfn = mapfn.bind(aLen > 2 ? arguments[2] : undefined);
        if (iterFn != undefined && !Array.isArray(arrayLike)) {
          for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {
            result[index] = mapping ? iterCall(mapfn, step.value, index) : step.value;
          }
        } else {
          length = toLength(O.length);
          for (result = new C(length); length > index; index++) {
            result[index] = mapping ? mapfn(O[index], index) : O[index];
          }
        }
        result.length = index;
        return result;
      };
    }();
  }
  if (!Array.prototype.find) {
    Object.defineProperty(Array.prototype, 'find', {
      configurable: true,
      writable: true,
      enumerable: false,
      value: function value(predicate) {
        if (this === null) {
          throw new TypeError('Array.prototype.find called on null or undefined');
        }
        if (typeof predicate !== 'function') {
          throw new TypeError('predicate must be a function');
        }
        var list = Object(this);
        var length = list.length >>> 0;
        var thisArg = arguments[1];
        var value;
        for (var i = 0; i < length; i++) {
          value = list[i];
          if (predicate.call(thisArg, value, i, list)) {
            return value;
          }
        }
        return undefined;
      }
    });
  }
  if (!Array.prototype.findIndex) {
    Object.defineProperty(Array.prototype, 'findIndex', {
      configurable: true,
      writable: true,
      enumerable: false,
      value: function value(predicate) {
        if (this === null) {
          throw new TypeError('Array.prototype.findIndex called on null or undefined');
        }
        if (typeof predicate !== 'function') {
          throw new TypeError('predicate must be a function');
        }
        var list = Object(this);
        var length = list.length >>> 0;
        var thisArg = arguments[1];
        var value;
        for (var i = 0; i < length; i++) {
          value = list[i];
          if (predicate.call(thisArg, value, i, list)) {
            return i;
          }
        }
        return -1;
      }
    });
  }
  if (!Array.prototype.includes) {
    Object.defineProperty(Array.prototype, 'includes', {
      configurable: true,
      writable: true,
      enumerable: false,
      value: function value(searchElement) {
        var O = Object(this);
        var len = parseInt(O.length) || 0;
        if (len === 0) {
          return false;
        }
        var n = parseInt(arguments[1]) || 0;
        var k;
        if (n >= 0) {
          k = n;
        } else {
          k = len + n;
          if (k < 0) {
            k = 0;
          }
        }
        var currentElement;
        while (k < len) {
          currentElement = O[k];
          if (searchElement === currentElement || searchElement !== searchElement && currentElement !== currentElement) {
            return true;
          }
          k++;
        }
        return false;
      }
    });
  }
  (function() {
    var needsFix = false;
    try {
      var s = Object.keys('a');
      needsFix = s.length !== 1 || s[0] !== '0';
    } catch (e) {
      needsFix = true;
    }
    if (needsFix) {
      Object.keys = function() {
        var hasOwnProperty = Object.prototype.hasOwnProperty,
            hasDontEnumBug = !{toString: null}.propertyIsEnumerable('toString'),
            dontEnums = ['toString', 'toLocaleString', 'valueOf', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable', 'constructor'],
            dontEnumsLength = dontEnums.length;
        return function(obj) {
          if (obj === undefined || obj === null) {
            throw TypeError('Cannot convert undefined or null to object');
          }
          obj = Object(obj);
          var result = [],
              prop,
              i;
          for (prop in obj) {
            if (hasOwnProperty.call(obj, prop)) {
              result.push(prop);
            }
          }
          if (hasDontEnumBug) {
            for (i = 0; i < dontEnumsLength; i++) {
              if (hasOwnProperty.call(obj, dontEnums[i])) {
                result.push(dontEnums[i]);
              }
            }
          }
          return result;
        };
      }();
    }
  })();
  (function(O) {
    if ('assign' in O) {
      return;
    }
    O.defineProperty(O, 'assign', {
      configurable: true,
      writable: true,
      value: function() {
        var gOPS = O.getOwnPropertySymbols,
            pIE = O.propertyIsEnumerable,
            filterOS = gOPS ? function(self) {
              return gOPS(self).filter(pIE, self);
            } : function() {
              return Array.prototype;
            };
        return function assign(where) {
          if (gOPS && !(where instanceof O)) {
            console.warn('problematic Symbols', where);
          }
          function set(keyOrSymbol) {
            where[keyOrSymbol] = arg[keyOrSymbol];
          }
          for (var i = 1,
              ii = arguments.length; i < ii; ++i) {
            var arg = arguments[i];
            if (arg === null || arg === undefined) {
              continue;
            }
            O.keys(arg).concat(filterOS(arg)).forEach(set);
          }
          return where;
        };
      }()
    });
  })(Object);
  (function(global) {
    var i;
    var defineProperty = Object.defineProperty,
        is = function is(a, b) {
          return a === b || a !== a && b !== b;
        };
    if (typeof WeakMap == 'undefined') {
      global.WeakMap = createCollection({
        'delete': sharedDelete,
        clear: sharedClear,
        get: sharedGet,
        has: mapHas,
        set: sharedSet
      }, true);
    }
    if (typeof Map == 'undefined' || typeof new Map().values !== 'function' || !new Map().values().next) {
      var _createCollection;
      global.Map = createCollection((_createCollection = {
        'delete': sharedDelete,
        has: mapHas,
        get: sharedGet,
        set: sharedSet,
        keys: sharedKeys,
        values: sharedValues,
        entries: mapEntries,
        forEach: sharedForEach,
        clear: sharedClear
      }, _createCollection[Symbol.iterator] = mapEntries, _createCollection));
    }
    if (typeof Set == 'undefined' || typeof new Set().values !== 'function' || !new Set().values().next) {
      var _createCollection2;
      global.Set = createCollection((_createCollection2 = {
        has: setHas,
        add: sharedAdd,
        'delete': sharedDelete,
        clear: sharedClear,
        keys: sharedValues,
        values: sharedValues,
        entries: setEntries,
        forEach: sharedForEach
      }, _createCollection2[Symbol.iterator] = sharedValues, _createCollection2));
    }
    if (typeof WeakSet == 'undefined') {
      global.WeakSet = createCollection({
        'delete': sharedDelete,
        add: sharedAdd,
        clear: sharedClear,
        has: setHas
      }, true);
    }
    function createCollection(proto, objectOnly) {
      function Collection(a) {
        if (!this || this.constructor !== Collection)
          return new Collection(a);
        this._keys = [];
        this._values = [];
        this._itp = [];
        this.objectOnly = objectOnly;
        if (a)
          init.call(this, a);
      }
      if (!objectOnly) {
        defineProperty(proto, 'size', {get: sharedSize});
      }
      proto.constructor = Collection;
      Collection.prototype = proto;
      return Collection;
    }
    function init(a) {
      var i;
      if (this.add)
        a.forEach(this.add, this);
      else
        a.forEach(function(a) {
          this.set(a[0], a[1]);
        }, this);
    }
    function sharedDelete(key) {
      if (this.has(key)) {
        this._keys.splice(i, 1);
        this._values.splice(i, 1);
        this._itp.forEach(function(p) {
          if (i < p[0])
            p[0]--;
        });
      }
      return -1 < i;
    }
    ;
    function sharedGet(key) {
      return this.has(key) ? this._values[i] : undefined;
    }
    function has(list, key) {
      if (this.objectOnly && key !== Object(key))
        throw new TypeError("Invalid value used as weak collection key");
      if (key != key || key === 0)
        for (i = list.length; i-- && !is(list[i], key); ) {}
      else
        i = list.indexOf(key);
      return -1 < i;
    }
    function setHas(value) {
      return has.call(this, this._values, value);
    }
    function mapHas(value) {
      return has.call(this, this._keys, value);
    }
    function sharedSet(key, value) {
      this.has(key) ? this._values[i] = value : this._values[this._keys.push(key) - 1] = value;
      return this;
    }
    function sharedAdd(value) {
      if (!this.has(value))
        this._values.push(value);
      return this;
    }
    function sharedClear() {
      (this._keys || 0).length = this._values.length = 0;
    }
    function sharedKeys() {
      return sharedIterator(this._itp, this._keys);
    }
    function sharedValues() {
      return sharedIterator(this._itp, this._values);
    }
    function mapEntries() {
      return sharedIterator(this._itp, this._keys, this._values);
    }
    function setEntries() {
      return sharedIterator(this._itp, this._values, this._values);
    }
    function sharedIterator(itp, array, array2) {
      var _ref;
      var p = [0],
          done = false;
      itp.push(p);
      return _ref = {}, _ref[Symbol.iterator] = function() {
        return this;
      }, _ref.next = function next() {
        var v,
            k = p[0];
        if (!done && k < array.length) {
          v = array2 ? [array[k], array2[k]] : array[k];
          p[0]++;
        } else {
          done = true;
          itp.splice(itp.indexOf(p), 1);
        }
        return {
          done: done,
          value: v
        };
      }, _ref;
    }
    function sharedSize() {
      return this._values.length;
    }
    function sharedForEach(callback, context) {
      var it = this.entries();
      for (; ; ) {
        var r = it.next();
        if (r.done)
          break;
        callback.call(context, r.value[1], r.value[0], this);
      }
    }
  })(_aureliaPal.PLATFORM.global);
  var emptyMetadata = Object.freeze({});
  var metadataContainerKey = '__metadata__';
  var bind = Function.prototype.bind;
  if (typeof _aureliaPal.PLATFORM.global.Reflect === 'undefined') {
    _aureliaPal.PLATFORM.global.Reflect = {};
  }
  if (typeof Reflect.getOwnMetadata !== 'function') {
    Reflect.getOwnMetadata = function(metadataKey, target, targetKey) {
      if (target.hasOwnProperty(metadataContainerKey)) {
        return (target[metadataContainerKey][targetKey] || emptyMetadata)[metadataKey];
      }
    };
  }
  if (typeof Reflect.defineMetadata !== 'function') {
    Reflect.defineMetadata = function(metadataKey, metadataValue, target, targetKey) {
      var metadataContainer = target.hasOwnProperty(metadataContainerKey) ? target[metadataContainerKey] : target[metadataContainerKey] = {};
      var targetContainer = metadataContainer[targetKey] || (metadataContainer[targetKey] = {});
      targetContainer[metadataKey] = metadataValue;
    };
  }
  if (typeof Reflect.metadata !== 'function') {
    Reflect.metadata = function(metadataKey, metadataValue) {
      return function(target, targetKey) {
        Reflect.defineMetadata(metadataKey, metadataValue, target, targetKey);
      };
    };
  }
  if (typeof Reflect.construct !== 'function') {
    Reflect.construct = function(Target, args) {
      if (args) {
        switch (args.length) {
          case 0:
            return new Target();
          case 1:
            return new Target(args[0]);
          case 2:
            return new Target(args[0], args[1]);
          case 3:
            return new Target(args[0], args[1], args[2]);
          case 4:
            return new Target(args[0], args[1], args[2], args[3]);
        }
      }
      var a = [null];
      a.push.apply(a, args);
      return new (bind.apply(Target, a))();
    };
  }
});

})();
(function() {
var define = System.amdDefine;
define("npm:aurelia-polyfills@1.0.0-beta.1.1.2.js", ["npm:aurelia-polyfills@1.0.0-beta.1.1.2/aurelia-polyfills"], function(main) {
  return main;
});

})();
(function() {
var define = System.amdDefine;
define("npm:aurelia-bootstrapper@1.0.0-beta.1.2.0/aurelia-bootstrapper.js", ["exports", "aurelia-pal", "aurelia-pal-browser", "aurelia-polyfills"], function(exports, _aureliaPal, _aureliaPalBrowser) {
  'use strict';
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.bootstrap = bootstrap;
  var bootstrapQueue = [];
  var sharedLoader = null;
  var Aurelia = null;
  function onBootstrap(callback) {
    return new Promise(function(resolve, reject) {
      if (sharedLoader) {
        resolve(callback(sharedLoader));
      } else {
        bootstrapQueue.push(function() {
          try {
            resolve(callback(sharedLoader));
          } catch (e) {
            reject(e);
          }
        });
      }
    });
  }
  function ready(global) {
    return new Promise(function(resolve, reject) {
      if (global.document.readyState === 'complete') {
        resolve(global.document);
      } else {
        global.document.addEventListener('DOMContentLoaded', completed);
        global.addEventListener('load', completed);
      }
      function completed() {
        global.document.removeEventListener('DOMContentLoaded', completed);
        global.removeEventListener('load', completed);
        resolve(global.document);
      }
    });
  }
  function createLoader() {
    if (_aureliaPal.PLATFORM.Loader) {
      return Promise.resolve(new _aureliaPal.PLATFORM.Loader());
    }
    if (window.System && typeof window.System.import === 'function') {
      return System.normalize('aurelia-bootstrapper').then(function(bootstrapperName) {
        return System.normalize('aurelia-loader-default', bootstrapperName);
      }).then(function(loaderName) {
        return System.import(loaderName).then(function(m) {
          return new m.DefaultLoader();
        });
      });
    }
    if (typeof window.require === 'function') {
      return new Promise(function(resolve, reject) {
        return require(['aurelia-loader-default'], function(m) {
          return resolve(new m.DefaultLoader());
        }, reject);
      });
    }
    return Promise.reject('No PLATFORM.Loader is defined and there is neither a System API (ES6) or a Require API (AMD) globally available to load your app.');
  }
  function preparePlatform(loader) {
    return loader.normalize('aurelia-bootstrapper').then(function(bootstrapperName) {
      return loader.normalize('aurelia-framework', bootstrapperName).then(function(frameworkName) {
        loader.map('aurelia-framework', frameworkName);
        return Promise.all([loader.normalize('aurelia-dependency-injection', frameworkName).then(function(diName) {
          return loader.map('aurelia-dependency-injection', diName);
        }), loader.normalize('aurelia-router', bootstrapperName).then(function(routerName) {
          return loader.map('aurelia-router', routerName);
        }), loader.normalize('aurelia-logging-console', bootstrapperName).then(function(loggingConsoleName) {
          return loader.map('aurelia-logging-console', loggingConsoleName);
        })]).then(function() {
          return loader.loadModule(frameworkName).then(function(m) {
            return Aurelia = m.Aurelia;
          });
        });
      });
    });
  }
  function handleApp(loader, appHost) {
    return config(loader, appHost, appHost.getAttribute('aurelia-app'));
  }
  function config(loader, appHost, configModuleId) {
    var aurelia = new Aurelia(loader);
    aurelia.host = appHost;
    if (configModuleId) {
      return loader.loadModule(configModuleId).then(function(customConfig) {
        return customConfig.configure(aurelia);
      });
    }
    aurelia.use.standardConfiguration().developmentLogging();
    return aurelia.start().then(function() {
      return aurelia.setRoot();
    });
  }
  function run() {
    return ready(window).then(function(doc) {
      (0, _aureliaPalBrowser.initialize)();
      var appHost = doc.querySelectorAll('[aurelia-app]');
      return createLoader().then(function(loader) {
        return preparePlatform(loader).then(function() {
          for (var i = 0,
              ii = appHost.length; i < ii; ++i) {
            handleApp(loader, appHost[i]).catch(console.error.bind(console));
          }
          sharedLoader = loader;
          for (var _i = 0,
              _ii = bootstrapQueue.length; _i < _ii; ++_i) {
            bootstrapQueue[_i]();
          }
          bootstrapQueue = null;
        });
      });
    });
  }
  function bootstrap(configure) {
    return onBootstrap(function(loader) {
      var aurelia = new Aurelia(loader);
      return configure(aurelia);
    });
  }
  run();
});

})();
(function() {
var define = System.amdDefine;
define("npm:aurelia-bootstrapper@1.0.0-beta.1.2.0.js", ["npm:aurelia-bootstrapper@1.0.0-beta.1.2.0/aurelia-bootstrapper"], function(main) {
  return main;
});

})();
(function() {
var define = System.amdDefine;
define("npm:aurelia-framework@1.0.0-beta.1.2.2/aurelia-framework.js", ["exports", "aurelia-dependency-injection", "aurelia-binding", "aurelia-metadata", "aurelia-templating", "aurelia-loader", "aurelia-task-queue", "aurelia-path", "aurelia-pal", "aurelia-logging"], function(exports, _aureliaDependencyInjection, _aureliaBinding, _aureliaMetadata, _aureliaTemplating, _aureliaLoader, _aureliaTaskQueue, _aureliaPath, _aureliaPal, _aureliaLogging) {
  'use strict';
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.LogManager = exports.FrameworkConfiguration = exports.Aurelia = undefined;
  Object.keys(_aureliaDependencyInjection).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _aureliaDependencyInjection[key];
      }
    });
  });
  Object.keys(_aureliaBinding).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _aureliaBinding[key];
      }
    });
  });
  Object.keys(_aureliaMetadata).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _aureliaMetadata[key];
      }
    });
  });
  Object.keys(_aureliaTemplating).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _aureliaTemplating[key];
      }
    });
  });
  Object.keys(_aureliaLoader).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _aureliaLoader[key];
      }
    });
  });
  Object.keys(_aureliaTaskQueue).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _aureliaTaskQueue[key];
      }
    });
  });
  Object.keys(_aureliaPath).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _aureliaPath[key];
      }
    });
  });
  Object.keys(_aureliaPal).forEach(function(key) {
    if (key === "default" || key === "__esModule")
      return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function() {
        return _aureliaPal[key];
      }
    });
  });
  var TheLogManager = _interopRequireWildcard(_aureliaLogging);
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key))
            newObj[key] = obj[key];
        }
      }
      newObj.default = obj;
      return newObj;
    }
  }
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function preventActionlessFormSubmit() {
    _aureliaPal.DOM.addEventListener('submit', function(evt) {
      var target = evt.target;
      var action = target.action;
      if (target.tagName.toLowerCase() === 'form' && !action) {
        evt.preventDefault();
      }
    });
  }
  var Aurelia = exports.Aurelia = function() {
    function Aurelia(loader, container, resources) {
      _classCallCheck(this, Aurelia);
      this.loader = loader || new _aureliaPal.PLATFORM.Loader();
      this.container = container || new _aureliaDependencyInjection.Container().makeGlobal();
      this.resources = resources || new _aureliaTemplating.ViewResources();
      this.use = new FrameworkConfiguration(this);
      this.logger = TheLogManager.getLogger('aurelia');
      this.hostConfigured = false;
      this.host = null;
      this.use.instance(Aurelia, this);
      this.use.instance(_aureliaLoader.Loader, this.loader);
      this.use.instance(_aureliaTemplating.ViewResources, this.resources);
    }
    Aurelia.prototype.start = function start() {
      var _this = this;
      if (this.started) {
        return Promise.resolve(this);
      }
      this.started = true;
      this.logger.info('Aurelia Starting');
      return this.use.apply().then(function() {
        preventActionlessFormSubmit();
        if (!_this.container.hasResolver(_aureliaTemplating.BindingLanguage)) {
          var message = 'You must configure Aurelia with a BindingLanguage implementation.';
          _this.logger.error(message);
          throw new Error(message);
        }
        _this.logger.info('Aurelia Started');
        var evt = _aureliaPal.DOM.createCustomEvent('aurelia-started', {
          bubbles: true,
          cancelable: true
        });
        _aureliaPal.DOM.dispatchEvent(evt);
        return _this;
      });
    };
    Aurelia.prototype.enhance = function enhance() {
      var _this2 = this;
      var bindingContext = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
      var applicationHost = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];
      this._configureHost(applicationHost || _aureliaPal.DOM.querySelectorAll('body')[0]);
      return new Promise(function(resolve) {
        var engine = _this2.container.get(_aureliaTemplating.TemplatingEngine);
        _this2.root = engine.enhance({
          container: _this2.container,
          element: _this2.host,
          resources: _this2.resources,
          bindingContext: bindingContext
        });
        _this2.root.attached();
        _this2._onAureliaComposed();
        return _this2;
      });
    };
    Aurelia.prototype.setRoot = function setRoot() {
      var _this3 = this;
      var root = arguments.length <= 0 || arguments[0] === undefined ? 'app' : arguments[0];
      var applicationHost = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];
      var instruction = {};
      if (this.root && this.root.viewModel && this.root.viewModel.router) {
        this.root.viewModel.router.deactivate();
        this.root.viewModel.router.reset();
      }
      this._configureHost(applicationHost);
      var engine = this.container.get(_aureliaTemplating.TemplatingEngine);
      var transaction = this.container.get(_aureliaTemplating.CompositionTransaction);
      delete transaction.initialComposition;
      instruction.viewModel = root;
      instruction.container = instruction.childContainer = this.container;
      instruction.viewSlot = this.hostSlot;
      instruction.host = this.host;
      return engine.compose(instruction).then(function(r) {
        _this3.root = r;
        instruction.viewSlot.attached();
        _this3._onAureliaComposed();
        return _this3;
      });
    };
    Aurelia.prototype._configureHost = function _configureHost(applicationHost) {
      if (this.hostConfigured) {
        return;
      }
      applicationHost = applicationHost || this.host;
      if (!applicationHost || typeof applicationHost === 'string') {
        this.host = _aureliaPal.DOM.getElementById(applicationHost || 'applicationHost');
      } else {
        this.host = applicationHost;
      }
      if (!this.host) {
        throw new Error('No applicationHost was specified.');
      }
      this.hostConfigured = true;
      this.host.aurelia = this;
      this.hostSlot = new _aureliaTemplating.ViewSlot(this.host, true);
      this.hostSlot.transformChildNodesIntoView();
      this.container.registerInstance(_aureliaPal.DOM.boundary, this.host);
    };
    Aurelia.prototype._onAureliaComposed = function _onAureliaComposed() {
      var evt = _aureliaPal.DOM.createCustomEvent('aurelia-composed', {
        bubbles: true,
        cancelable: true
      });
      setTimeout(function() {
        return _aureliaPal.DOM.dispatchEvent(evt);
      }, 1);
    };
    return Aurelia;
  }();
  var logger = TheLogManager.getLogger('aurelia');
  var extPattern = /\.[^/.]+$/;
  function runTasks(config, tasks) {
    var current = void 0;
    var next = function next() {
      if (current = tasks.shift()) {
        return Promise.resolve(current(config)).then(next);
      }
      return Promise.resolve();
    };
    return next();
  }
  function loadPlugin(config, loader, info) {
    logger.debug('Loading plugin ' + info.moduleId + '.');
    config.resourcesRelativeTo = info.resourcesRelativeTo;
    var id = info.moduleId;
    if (info.resourcesRelativeTo.length > 1) {
      return loader.normalize(info.moduleId, info.resourcesRelativeTo[1]).then(function(normalizedId) {
        return _loadPlugin(normalizedId);
      });
    }
    return _loadPlugin(id);
    function _loadPlugin(moduleId) {
      return loader.loadModule(moduleId).then(function(m) {
        if ('configure' in m) {
          return Promise.resolve(m.configure(config, info.config || {})).then(function() {
            config.resourcesRelativeTo = null;
            logger.debug('Configured plugin ' + info.moduleId + '.');
          });
        }
        config.resourcesRelativeTo = null;
        logger.debug('Loaded plugin ' + info.moduleId + '.');
      });
    }
  }
  function loadResources(aurelia, resourcesToLoad, appResources) {
    var viewEngine = aurelia.container.get(_aureliaTemplating.ViewEngine);
    return Promise.all(Object.keys(resourcesToLoad).map(function(n) {
      return _normalize(resourcesToLoad[n]);
    })).then(function(loads) {
      var names = [];
      var importIds = [];
      loads.forEach(function(l) {
        names.push(undefined);
        importIds.push(l.importId);
      });
      return viewEngine.importViewResources(importIds, names, appResources);
    });
    function _normalize(load) {
      var moduleId = load.moduleId;
      var ext = getExt(moduleId);
      if (isOtherResource(moduleId)) {
        moduleId = removeExt(moduleId);
      }
      return aurelia.loader.normalize(moduleId, load.relativeTo).then(function(normalized) {
        return {
          name: load.moduleId,
          importId: isOtherResource(load.moduleId) ? addOriginalExt(normalized, ext) : normalized
        };
      });
    }
    function isOtherResource(name) {
      var ext = getExt(name);
      if (!ext)
        return false;
      if (ext === '')
        return false;
      if (ext === '.js' || ext === '.ts')
        return false;
      return true;
    }
    function removeExt(name) {
      return name.replace(extPattern, '');
    }
    function addOriginalExt(normalized, ext) {
      return removeExt(normalized) + '.' + ext;
    }
  }
  function getExt(name) {
    var match = name.match(extPattern);
    if (match && match.length > 0) {
      return match[0].split('.')[1];
    }
  }
  function assertProcessed(plugins) {
    if (plugins.processed) {
      throw new Error('This config instance has already been applied. To load more plugins or global resources, create a new FrameworkConfiguration instance.');
    }
  }
  var FrameworkConfiguration = function() {
    function FrameworkConfiguration(aurelia) {
      var _this4 = this;
      _classCallCheck(this, FrameworkConfiguration);
      this.aurelia = aurelia;
      this.container = aurelia.container;
      this.info = [];
      this.processed = false;
      this.preTasks = [];
      this.postTasks = [];
      this.resourcesToLoad = {};
      this.preTask(function() {
        return aurelia.loader.normalize('aurelia-bootstrapper').then(function(name) {
          return _this4.bootstrapperName = name;
        });
      });
      this.postTask(function() {
        return loadResources(aurelia, _this4.resourcesToLoad, aurelia.resources);
      });
    }
    FrameworkConfiguration.prototype.instance = function instance(type, _instance) {
      this.container.registerInstance(type, _instance);
      return this;
    };
    FrameworkConfiguration.prototype.singleton = function singleton(type, implementation) {
      this.container.registerSingleton(type, implementation);
      return this;
    };
    FrameworkConfiguration.prototype.transient = function transient(type, implementation) {
      this.container.registerTransient(type, implementation);
      return this;
    };
    FrameworkConfiguration.prototype.preTask = function preTask(task) {
      assertProcessed(this);
      this.preTasks.push(task);
      return this;
    };
    FrameworkConfiguration.prototype.postTask = function postTask(task) {
      assertProcessed(this);
      this.postTasks.push(task);
      return this;
    };
    FrameworkConfiguration.prototype.feature = function feature(plugin, config) {
      if (getExt(plugin)) {
        return this.plugin({
          moduleId: plugin,
          resourcesRelativeTo: [plugin, ''],
          config: config || {}
        });
      }
      return this.plugin({
        moduleId: plugin + '/index',
        resourcesRelativeTo: [plugin, ''],
        config: config || {}
      });
    };
    FrameworkConfiguration.prototype.globalResources = function globalResources(resources) {
      assertProcessed(this);
      var toAdd = Array.isArray(resources) ? resources : arguments;
      var resource = void 0;
      var path = void 0;
      var resourcesRelativeTo = this.resourcesRelativeTo || ['', ''];
      for (var i = 0,
          ii = toAdd.length; i < ii; ++i) {
        resource = toAdd[i];
        if (typeof resource !== 'string') {
          throw new Error('Invalid resource path [' + resource + ']. Resources must be specified as relative module IDs.');
        }
        var parent = resourcesRelativeTo[0];
        var grandParent = resourcesRelativeTo[1];
        var name = resource;
        if (resource.startsWith('./') && parent !== '') {
          name = parent + resource.substr(1);
        }
        this.resourcesToLoad[name] = {
          moduleId: name,
          relativeTo: grandParent
        };
      }
      return this;
    };
    FrameworkConfiguration.prototype.globalName = function globalName(resourcePath, newName) {
      assertProcessed(this);
      this.resourcesToLoad[resourcePath] = {
        moduleId: newName,
        relativeTo: ''
      };
      return this;
    };
    FrameworkConfiguration.prototype.plugin = function plugin(_plugin, config) {
      assertProcessed(this);
      if (typeof _plugin === 'string') {
        return this.plugin({
          moduleId: _plugin,
          resourcesRelativeTo: [_plugin, ''],
          config: config || {}
        });
      }
      this.info.push(_plugin);
      return this;
    };
    FrameworkConfiguration.prototype._addNormalizedPlugin = function _addNormalizedPlugin(name, config) {
      var _this5 = this;
      var plugin = {
        moduleId: name,
        resourcesRelativeTo: [name, ''],
        config: config || {}
      };
      this.plugin(plugin);
      this.preTask(function() {
        var relativeTo = [name, _this5.bootstrapperName];
        plugin.moduleId = name;
        plugin.resourcesRelativeTo = relativeTo;
        return Promise.resolve();
      });
      return this;
    };
    FrameworkConfiguration.prototype.defaultBindingLanguage = function defaultBindingLanguage() {
      return this._addNormalizedPlugin('aurelia-templating-binding');
    };
    FrameworkConfiguration.prototype.router = function router() {
      return this._addNormalizedPlugin('aurelia-templating-router');
    };
    FrameworkConfiguration.prototype.history = function history() {
      return this._addNormalizedPlugin('aurelia-history-browser');
    };
    FrameworkConfiguration.prototype.defaultResources = function defaultResources() {
      return this._addNormalizedPlugin('aurelia-templating-resources');
    };
    FrameworkConfiguration.prototype.eventAggregator = function eventAggregator() {
      return this._addNormalizedPlugin('aurelia-event-aggregator');
    };
    FrameworkConfiguration.prototype.standardConfiguration = function standardConfiguration() {
      return this.defaultBindingLanguage().defaultResources().history().router().eventAggregator();
    };
    FrameworkConfiguration.prototype.developmentLogging = function developmentLogging() {
      var _this6 = this;
      this.preTask(function() {
        return _this6.aurelia.loader.normalize('aurelia-logging-console', _this6.bootstrapperName).then(function(name) {
          return _this6.aurelia.loader.loadModule(name).then(function(m) {
            TheLogManager.addAppender(new m.ConsoleAppender());
            TheLogManager.setLevel(TheLogManager.logLevel.debug);
          });
        });
      });
      return this;
    };
    FrameworkConfiguration.prototype.apply = function apply() {
      var _this7 = this;
      if (this.processed) {
        return Promise.resolve();
      }
      return runTasks(this, this.preTasks).then(function() {
        var loader = _this7.aurelia.loader;
        var info = _this7.info;
        var current = void 0;
        var next = function next() {
          if (current = info.shift()) {
            return loadPlugin(_this7, loader, current).then(next);
          }
          _this7.processed = true;
          return Promise.resolve();
        };
        return next().then(function() {
          return runTasks(_this7, _this7.postTasks);
        });
      });
    };
    return FrameworkConfiguration;
  }();
  exports.FrameworkConfiguration = FrameworkConfiguration;
  var LogManager = exports.LogManager = TheLogManager;
});

})();
(function() {
var define = System.amdDefine;
define("npm:aurelia-framework@1.0.0-beta.1.2.2.js", ["npm:aurelia-framework@1.0.0-beta.1.2.2/aurelia-framework"], function(main) {
  return main;
});

})();
(function() {
var define = System.amdDefine;
define("npm:aurelia-history-browser@1.0.0-beta.1.2.0/aurelia-history-browser.js", ["exports", "aurelia-pal", "aurelia-history"], function(exports, _aureliaPal, _aureliaHistory) {
  'use strict';
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.BrowserHistory = exports.DefaultLinkHandler = exports.LinkHandler = undefined;
  exports.configure = configure;
  var _class,
      _temp;
  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }
  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }});
    if (superClass)
      Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  var LinkHandler = exports.LinkHandler = function() {
    function LinkHandler() {
      _classCallCheck(this, LinkHandler);
    }
    LinkHandler.prototype.activate = function activate(history) {};
    LinkHandler.prototype.deactivate = function deactivate() {};
    return LinkHandler;
  }();
  var DefaultLinkHandler = exports.DefaultLinkHandler = function(_LinkHandler) {
    _inherits(DefaultLinkHandler, _LinkHandler);
    function DefaultLinkHandler() {
      _classCallCheck(this, DefaultLinkHandler);
      var _this = _possibleConstructorReturn(this, _LinkHandler.call(this));
      _this.handler = function(e) {
        var _DefaultLinkHandler$g = DefaultLinkHandler.getEventInfo(e);
        var shouldHandleEvent = _DefaultLinkHandler$g.shouldHandleEvent;
        var href = _DefaultLinkHandler$g.href;
        if (shouldHandleEvent) {
          e.preventDefault();
          _this.history.navigate(href);
        }
      };
      return _this;
    }
    DefaultLinkHandler.prototype.activate = function activate(history) {
      if (history._hasPushState) {
        this.history = history;
        _aureliaPal.DOM.addEventListener('click', this.handler, true);
      }
    };
    DefaultLinkHandler.prototype.deactivate = function deactivate() {
      _aureliaPal.DOM.removeEventListener('click', this.handler);
    };
    DefaultLinkHandler.getEventInfo = function getEventInfo(event) {
      var info = {
        shouldHandleEvent: false,
        href: null,
        anchor: null
      };
      var target = DefaultLinkHandler.findClosestAnchor(event.target);
      if (!target || !DefaultLinkHandler.targetIsThisWindow(target)) {
        return info;
      }
      if (event.altKey || event.ctrlKey || event.metaKey || event.shiftKey) {
        return info;
      }
      var href = target.getAttribute('href');
      info.anchor = target;
      info.href = href;
      var leftButtonClicked = event.which === 1;
      var isRelative = href && !(href.charAt(0) === '#' || /^[a-z]+:/i.test(href));
      info.shouldHandleEvent = leftButtonClicked && isRelative;
      return info;
    };
    DefaultLinkHandler.findClosestAnchor = function findClosestAnchor(el) {
      while (el) {
        if (el.tagName === 'A') {
          return el;
        }
        el = el.parentNode;
      }
    };
    DefaultLinkHandler.targetIsThisWindow = function targetIsThisWindow(target) {
      var targetWindow = target.getAttribute('target');
      var win = _aureliaPal.PLATFORM.global;
      return !targetWindow || targetWindow === win.name || targetWindow === '_self' || targetWindow === 'top' && win === win.top;
    };
    return DefaultLinkHandler;
  }(LinkHandler);
  function configure(config) {
    config.singleton(_aureliaHistory.History, BrowserHistory);
    config.transient(LinkHandler, DefaultLinkHandler);
  }
  var BrowserHistory = exports.BrowserHistory = (_temp = _class = function(_History) {
    _inherits(BrowserHistory, _History);
    function BrowserHistory(linkHandler) {
      _classCallCheck(this, BrowserHistory);
      var _this2 = _possibleConstructorReturn(this, _History.call(this));
      _this2._isActive = false;
      _this2._checkUrlCallback = _this2._checkUrl.bind(_this2);
      _this2.location = _aureliaPal.PLATFORM.location;
      _this2.history = _aureliaPal.PLATFORM.history;
      _this2.linkHandler = linkHandler;
      return _this2;
    }
    BrowserHistory.prototype.activate = function activate(options) {
      if (this._isActive) {
        throw new Error('History has already been activated.');
      }
      var wantsPushState = !!options.pushState;
      this._isActive = true;
      this.options = Object.assign({}, {root: '/'}, this.options, options);
      this.root = ('/' + this.options.root + '/').replace(rootStripper, '/');
      this._wantsHashChange = this.options.hashChange !== false;
      this._hasPushState = !!(this.options.pushState && this.history && this.history.pushState);
      var eventName = void 0;
      if (this._hasPushState) {
        eventName = 'popstate';
      } else if (this._wantsHashChange) {
        eventName = 'hashchange';
      }
      _aureliaPal.PLATFORM.addEventListener(eventName, this._checkUrlCallback);
      if (this._wantsHashChange && wantsPushState) {
        var loc = this.location;
        var atRoot = loc.pathname.replace(/[^\/]$/, '$&/') === this.root;
        if (!this._hasPushState && !atRoot) {
          this.fragment = this._getFragment(null, true);
          this.location.replace(this.root + this.location.search + '#' + this.fragment);
          return true;
        } else if (this._hasPushState && atRoot && loc.hash) {
          this.fragment = this._getHash().replace(routeStripper, '');
          this.history.replaceState({}, _aureliaPal.DOM.title, this.root + this.fragment + loc.search);
        }
      }
      if (!this.fragment) {
        this.fragment = this._getFragment();
      }
      this.linkHandler.activate(this);
      if (!this.options.silent) {
        return this._loadUrl();
      }
    };
    BrowserHistory.prototype.deactivate = function deactivate() {
      _aureliaPal.PLATFORM.removeEventListener('popstate', this._checkUrlCallback);
      _aureliaPal.PLATFORM.removeEventListener('hashchange', this._checkUrlCallback);
      this._isActive = false;
      this.linkHandler.deactivate();
    };
    BrowserHistory.prototype.navigate = function navigate(fragment) {
      var _ref = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
      var _ref$trigger = _ref.trigger;
      var trigger = _ref$trigger === undefined ? true : _ref$trigger;
      var _ref$replace = _ref.replace;
      var replace = _ref$replace === undefined ? false : _ref$replace;
      if (fragment && absoluteUrl.test(fragment)) {
        this.location.href = fragment;
        return true;
      }
      if (!this._isActive) {
        return false;
      }
      fragment = this._getFragment(fragment || '');
      if (this.fragment === fragment && !replace) {
        return false;
      }
      this.fragment = fragment;
      var url = this.root + fragment;
      if (fragment === '' && url !== '/') {
        url = url.slice(0, -1);
      }
      if (this._hasPushState) {
        url = url.replace('//', '/');
        this.history[replace ? 'replaceState' : 'pushState']({}, _aureliaPal.DOM.title, url);
      } else if (this._wantsHashChange) {
        updateHash(this.location, fragment, replace);
      } else {
        return this.location.assign(url);
      }
      if (trigger) {
        return this._loadUrl(fragment);
      }
    };
    BrowserHistory.prototype.navigateBack = function navigateBack() {
      this.history.back();
    };
    BrowserHistory.prototype.setTitle = function setTitle(title) {
      _aureliaPal.DOM.title = title;
    };
    BrowserHistory.prototype._getHash = function _getHash() {
      return this.location.hash.substr(1);
    };
    BrowserHistory.prototype._getFragment = function _getFragment(fragment, forcePushState) {
      var root = void 0;
      if (!fragment) {
        if (this._hasPushState || !this._wantsHashChange || forcePushState) {
          fragment = this.location.pathname + this.location.search;
          root = this.root.replace(trailingSlash, '');
          if (!fragment.indexOf(root)) {
            fragment = fragment.substr(root.length);
          }
        } else {
          fragment = this._getHash();
        }
      }
      return '/' + fragment.replace(routeStripper, '');
    };
    BrowserHistory.prototype._checkUrl = function _checkUrl() {
      var current = this._getFragment();
      if (current !== this.fragment) {
        this._loadUrl();
      }
    };
    BrowserHistory.prototype._loadUrl = function _loadUrl(fragmentOverride) {
      var fragment = this.fragment = this._getFragment(fragmentOverride);
      return this.options.routeHandler ? this.options.routeHandler(fragment) : false;
    };
    return BrowserHistory;
  }(_aureliaHistory.History), _class.inject = [LinkHandler], _temp);
  var routeStripper = /^#?\/*|\s+$/g;
  var rootStripper = /^\/+|\/+$/g;
  var trailingSlash = /\/$/;
  var absoluteUrl = /^([a-z][a-z0-9+\-.]*:)?\/\//i;
  function updateHash(location, fragment, replace) {
    if (replace) {
      var href = location.href.replace(/(javascript:|#).*$/, '');
      location.replace(href + '#' + fragment);
    } else {
      location.hash = '#' + fragment;
    }
  }
});

})();
(function() {
var define = System.amdDefine;
define("npm:aurelia-history-browser@1.0.0-beta.1.2.0.js", ["npm:aurelia-history-browser@1.0.0-beta.1.2.0/aurelia-history-browser"], function(main) {
  return main;
});

})();
(function() {
var define = System.amdDefine;
define("npm:aurelia-loader-default@1.0.0-beta.1.2.1/aurelia-loader-default.js", ["exports", "aurelia-loader", "aurelia-pal", "aurelia-metadata"], function(exports, _aureliaLoader, _aureliaPal, _aureliaMetadata) {
  'use strict';
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.DefaultLoader = exports.TextTemplateLoader = undefined;
  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }
  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }});
    if (superClass)
      Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  var TextTemplateLoader = exports.TextTemplateLoader = function() {
    function TextTemplateLoader() {
      _classCallCheck(this, TextTemplateLoader);
    }
    TextTemplateLoader.prototype.loadTemplate = function loadTemplate(loader, entry) {
      return loader.loadText(entry.address).then(function(text) {
        entry.template = _aureliaPal.DOM.createTemplateFromMarkup(text);
      });
    };
    return TextTemplateLoader;
  }();
  function ensureOriginOnExports(executed, name) {
    var target = executed;
    var key = void 0;
    var exportedValue = void 0;
    if (target.__useDefault) {
      target = target['default'];
    }
    _aureliaMetadata.Origin.set(target, new _aureliaMetadata.Origin(name, 'default'));
    for (key in target) {
      exportedValue = target[key];
      if (typeof exportedValue === 'function') {
        _aureliaMetadata.Origin.set(exportedValue, new _aureliaMetadata.Origin(name, key));
      }
    }
    return executed;
  }
  var DefaultLoader = exports.DefaultLoader = function(_Loader) {
    _inherits(DefaultLoader, _Loader);
    function DefaultLoader() {
      _classCallCheck(this, DefaultLoader);
      var _this = _possibleConstructorReturn(this, _Loader.call(this));
      _this.textPluginName = 'text';
      _this.moduleRegistry = Object.create(null);
      _this.useTemplateLoader(new TextTemplateLoader());
      var that = _this;
      _this.addPlugin('template-registry-entry', {'fetch': function fetch(address) {
          var entry = that.getOrCreateTemplateRegistryEntry(address);
          return entry.templateIsLoaded ? entry : that.templateLoader.loadTemplate(that, entry).then(function(x) {
            return entry;
          });
        }});
      return _this;
    }
    DefaultLoader.prototype.useTemplateLoader = function useTemplateLoader(templateLoader) {
      this.templateLoader = templateLoader;
    };
    DefaultLoader.prototype.loadAllModules = function loadAllModules(ids) {
      var loads = [];
      for (var i = 0,
          ii = ids.length; i < ii; ++i) {
        loads.push(this.loadModule(ids[i]));
      }
      return Promise.all(loads);
    };
    DefaultLoader.prototype.loadTemplate = function loadTemplate(url) {
      return this._import(this.applyPluginToUrl(url, 'template-registry-entry'));
    };
    DefaultLoader.prototype.loadText = function loadText(url) {
      return this._import(this.applyPluginToUrl(url, this.textPluginName));
    };
    return DefaultLoader;
  }(_aureliaLoader.Loader);
  _aureliaPal.PLATFORM.Loader = DefaultLoader;
  if (!_aureliaPal.PLATFORM.global.System || !_aureliaPal.PLATFORM.global.System.import) {
    if (_aureliaPal.PLATFORM.global.requirejs && requirejs.s && requirejs.s.contexts && requirejs.s.contexts._ && requirejs.s.contexts._.defined) {
      _aureliaPal.PLATFORM.eachModule = function(callback) {
        var defined = requirejs.s.contexts._.defined;
        for (var key in defined) {
          try {
            if (callback(key, defined[key]))
              return;
          } catch (e) {}
        }
      };
    } else {
      _aureliaPal.PLATFORM.eachModule = function(callback) {};
    }
    DefaultLoader.prototype._import = function(moduleId) {
      return new Promise(function(resolve, reject) {
        require([moduleId], resolve, reject);
      });
    };
    DefaultLoader.prototype.loadModule = function(id) {
      var _this2 = this;
      var existing = this.moduleRegistry[id];
      if (existing !== undefined) {
        return Promise.resolve(existing);
      }
      return new Promise(function(resolve, reject) {
        require([id], function(m) {
          _this2.moduleRegistry[id] = m;
          resolve(ensureOriginOnExports(m, id));
        }, reject);
      });
    };
    DefaultLoader.prototype.map = function(id, source) {};
    DefaultLoader.prototype.normalize = function(moduleId, relativeTo) {
      return Promise.resolve(moduleId);
    };
    DefaultLoader.prototype.normalizeSync = function(moduleId, relativeTo) {
      return moduleId;
    };
    DefaultLoader.prototype.applyPluginToUrl = function(url, pluginName) {
      return pluginName + '!' + url;
    };
    DefaultLoader.prototype.addPlugin = function(pluginName, implementation) {
      var nonAnonDefine = define;
      nonAnonDefine(pluginName, [], {'load': function load(name, req, onload) {
          var result = implementation.fetch(name);
          Promise.resolve(result).then(onload);
        }});
    };
  } else {
    _aureliaPal.PLATFORM.eachModule = function(callback) {
      var modules = System._loader.modules;
      for (var key in modules) {
        try {
          if (callback(key, modules[key].module))
            return;
        } catch (e) {}
      }
    };
    System.set('text', System.newModule({'translate': function translate(load) {
        return 'module.exports = "' + load.source.replace(/(["\\])/g, '\\$1').replace(/[\f]/g, '\\f').replace(/[\b]/g, '\\b').replace(/[\n]/g, '\\n').replace(/[\t]/g, '\\t').replace(/[\r]/g, '\\r').replace(/[\u2028]/g, '\\u2028').replace(/[\u2029]/g, '\\u2029') + '";';
      }}));
    DefaultLoader.prototype._import = function(moduleId) {
      return System.import(moduleId);
    };
    DefaultLoader.prototype.loadModule = function(id) {
      var _this3 = this;
      return System.normalize(id).then(function(newId) {
        var existing = _this3.moduleRegistry[newId];
        if (existing !== undefined) {
          return Promise.resolve(existing);
        }
        return System.import(newId).then(function(m) {
          _this3.moduleRegistry[newId] = m;
          return ensureOriginOnExports(m, newId);
        });
      });
    };
    DefaultLoader.prototype.map = function(id, source) {
      System.map[id] = source;
    };
    DefaultLoader.prototype.normalizeSync = function(moduleId, relativeTo) {
      return System.normalizeSync(moduleId, relativeTo);
    };
    DefaultLoader.prototype.normalize = function(moduleId, relativeTo) {
      return System.normalize(moduleId, relativeTo);
    };
    DefaultLoader.prototype.applyPluginToUrl = function(url, pluginName) {
      return url + '!' + pluginName;
    };
    DefaultLoader.prototype.addPlugin = function(pluginName, implementation) {
      System.set(pluginName, System.newModule({
        'fetch': function fetch(load, _fetch) {
          var result = implementation.fetch(load.address);
          return Promise.resolve(result).then(function(x) {
            load.metadata.result = x;
            return '';
          });
        },
        'instantiate': function instantiate(load) {
          return load.metadata.result;
        }
      }));
    };
  }
});

})();
(function() {
var define = System.amdDefine;
define("npm:aurelia-loader-default@1.0.0-beta.1.2.1.js", ["npm:aurelia-loader-default@1.0.0-beta.1.2.1/aurelia-loader-default"], function(main) {
  return main;
});

})();
(function() {
var define = System.amdDefine;
define("npm:aurelia-logging-console@1.0.0-beta.1.2.0/aurelia-logging-console.js", ["exports", "aurelia-pal", "aurelia-logging"], function(exports, _aureliaPal, _aureliaLogging) {
  'use strict';
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.ConsoleAppender = undefined;
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
    return typeof obj;
  } : function(obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;
  };
  (function(global) {
    global.console = global.console || {};
    var con = global.console;
    var prop = void 0;
    var method = void 0;
    var empty = {};
    var dummy = function dummy() {};
    var properties = 'memory'.split(',');
    var methods = ('assert,clear,count,debug,dir,dirxml,error,exception,group,' + 'groupCollapsed,groupEnd,info,log,markTimeline,profile,profiles,profileEnd,' + 'show,table,time,timeEnd,timeline,timelineEnd,timeStamp,trace,warn').split(',');
    while (prop = properties.pop()) {
      if (!con[prop])
        con[prop] = empty;
    }
    while (method = methods.pop()) {
      if (!con[method])
        con[method] = dummy;
    }
  })(_aureliaPal.PLATFORM.global);
  if (_aureliaPal.PLATFORM.global.console && _typeof(console.log) === 'object') {
    ['log', 'info', 'warn', 'error', 'assert', 'dir', 'clear', 'profile', 'profileEnd'].forEach(function(method) {
      console[method] = this.bind(console[method], console);
    }, Function.prototype.call);
  }
  var ConsoleAppender = exports.ConsoleAppender = function() {
    function ConsoleAppender() {
      _classCallCheck(this, ConsoleAppender);
    }
    ConsoleAppender.prototype.debug = function debug(logger) {
      var _console;
      for (var _len = arguments.length,
          rest = Array(_len > 1 ? _len - 1 : 0),
          _key = 1; _key < _len; _key++) {
        rest[_key - 1] = arguments[_key];
      }
      (_console = console).debug.apply(_console, ['DEBUG [' + logger.id + ']'].concat(rest));
    };
    ConsoleAppender.prototype.info = function info(logger) {
      var _console2;
      for (var _len2 = arguments.length,
          rest = Array(_len2 > 1 ? _len2 - 1 : 0),
          _key2 = 1; _key2 < _len2; _key2++) {
        rest[_key2 - 1] = arguments[_key2];
      }
      (_console2 = console).info.apply(_console2, ['INFO [' + logger.id + ']'].concat(rest));
    };
    ConsoleAppender.prototype.warn = function warn(logger) {
      var _console3;
      for (var _len3 = arguments.length,
          rest = Array(_len3 > 1 ? _len3 - 1 : 0),
          _key3 = 1; _key3 < _len3; _key3++) {
        rest[_key3 - 1] = arguments[_key3];
      }
      (_console3 = console).warn.apply(_console3, ['WARN [' + logger.id + ']'].concat(rest));
    };
    ConsoleAppender.prototype.error = function error(logger) {
      var _console4;
      for (var _len4 = arguments.length,
          rest = Array(_len4 > 1 ? _len4 - 1 : 0),
          _key4 = 1; _key4 < _len4; _key4++) {
        rest[_key4 - 1] = arguments[_key4];
      }
      (_console4 = console).error.apply(_console4, ['ERROR [' + logger.id + ']'].concat(rest));
    };
    return ConsoleAppender;
  }();
});

})();
(function() {
var define = System.amdDefine;
define("npm:aurelia-logging-console@1.0.0-beta.1.2.0.js", ["npm:aurelia-logging-console@1.0.0-beta.1.2.0/aurelia-logging-console"], function(main) {
  return main;
});

})();
(function() {
var define = System.amdDefine;
define("npm:aurelia-templating-binding@1.0.0-beta.1.2.1/aurelia-templating-binding.js", ["exports", "aurelia-logging", "aurelia-binding", "aurelia-templating"], function(exports, _aureliaLogging, _aureliaBinding, _aureliaTemplating) {
  'use strict';
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.TemplatingBindingLanguage = exports.SyntaxInterpreter = exports.ChildInterpolationBinding = exports.InterpolationBinding = exports.InterpolationBindingExpression = undefined;
  exports.configure = configure;
  var LogManager = _interopRequireWildcard(_aureliaLogging);
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key))
            newObj[key] = obj[key];
        }
      }
      newObj.default = obj;
      return newObj;
    }
  }
  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }
  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }});
    if (superClass)
      Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }
  var _dec,
      _class;
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  var InterpolationBindingExpression = exports.InterpolationBindingExpression = function() {
    function InterpolationBindingExpression(observerLocator, targetProperty, parts, mode, lookupFunctions, attribute) {
      _classCallCheck(this, InterpolationBindingExpression);
      this.observerLocator = observerLocator;
      this.targetProperty = targetProperty;
      this.parts = parts;
      this.mode = mode;
      this.lookupFunctions = lookupFunctions;
      this.attribute = this.attrToRemove = attribute;
      this.discrete = false;
    }
    InterpolationBindingExpression.prototype.createBinding = function createBinding(target) {
      if (this.parts.length === 3) {
        return new ChildInterpolationBinding(target, this.observerLocator, this.parts[1], this.mode, this.lookupFunctions, this.targetProperty, this.parts[0], this.parts[2]);
      }
      return new InterpolationBinding(this.observerLocator, this.parts, target, this.targetProperty, this.mode, this.lookupFunctions);
    };
    return InterpolationBindingExpression;
  }();
  function validateTarget(target, propertyName) {
    if (propertyName === 'style') {
      LogManager.getLogger('templating-binding').info('Internet Explorer does not support interpolation in "style" attributes.  Use the style attribute\'s alias, "css" instead.');
    } else if (target.parentElement && target.parentElement.nodeName === 'TEXTAREA' && propertyName === 'textContent') {
      throw new Error('Interpolation binding cannot be used in the content of a textarea element.  Use <textarea value.bind="expression"></textarea> instead.');
    }
  }
  var InterpolationBinding = exports.InterpolationBinding = function() {
    function InterpolationBinding(observerLocator, parts, target, targetProperty, mode, lookupFunctions) {
      _classCallCheck(this, InterpolationBinding);
      validateTarget(target, targetProperty);
      this.observerLocator = observerLocator;
      this.parts = parts;
      this.target = target;
      this.targetProperty = targetProperty;
      this.targetAccessor = observerLocator.getAccessor(target, targetProperty);
      this.mode = mode;
      this.lookupFunctions = lookupFunctions;
    }
    InterpolationBinding.prototype.interpolate = function interpolate() {
      if (this.isBound) {
        var value = '';
        var parts = this.parts;
        for (var i = 0,
            ii = parts.length; i < ii; i++) {
          value += i % 2 === 0 ? parts[i] : this['childBinding' + i].value;
        }
        this.targetAccessor.setValue(value, this.target, this.targetProperty);
      }
    };
    InterpolationBinding.prototype.updateOneTimeBindings = function updateOneTimeBindings() {
      for (var i = 1,
          ii = this.parts.length; i < ii; i += 2) {
        var child = this['childBinding' + i];
        if (child.mode === _aureliaBinding.bindingMode.oneTime) {
          child.call();
        }
      }
    };
    InterpolationBinding.prototype.bind = function bind(source) {
      if (this.isBound) {
        if (this.source === source) {
          return;
        }
        this.unbind();
      }
      this.source = source;
      var parts = this.parts;
      for (var i = 1,
          ii = parts.length; i < ii; i += 2) {
        var binding = new ChildInterpolationBinding(this, this.observerLocator, parts[i], this.mode, this.lookupFunctions);
        binding.bind(source);
        this['childBinding' + i] = binding;
      }
      this.isBound = true;
      this.interpolate();
    };
    InterpolationBinding.prototype.unbind = function unbind() {
      if (!this.isBound) {
        return;
      }
      this.isBound = false;
      this.source = null;
      var parts = this.parts;
      for (var i = 1,
          ii = parts.length; i < ii; i += 2) {
        var name = 'childBinding' + i;
        this[name].unbind();
      }
    };
    return InterpolationBinding;
  }();
  var ChildInterpolationBinding = exports.ChildInterpolationBinding = (_dec = (0, _aureliaBinding.connectable)(), _dec(_class = function() {
    function ChildInterpolationBinding(target, observerLocator, sourceExpression, mode, lookupFunctions, targetProperty, left, right) {
      _classCallCheck(this, ChildInterpolationBinding);
      if (target instanceof InterpolationBinding) {
        this.parent = target;
      } else {
        validateTarget(target, targetProperty);
        this.target = target;
        this.targetProperty = targetProperty;
        this.targetAccessor = observerLocator.getAccessor(target, targetProperty);
      }
      this.observerLocator = observerLocator;
      this.sourceExpression = sourceExpression;
      this.mode = mode;
      this.lookupFunctions = lookupFunctions;
      this.left = left;
      this.right = right;
    }
    ChildInterpolationBinding.prototype.updateTarget = function updateTarget(value) {
      value = value === null || value === undefined ? '' : value.toString();
      if (value !== this.value) {
        this.value = value;
        if (this.parent) {
          this.parent.interpolate();
        } else {
          this.targetAccessor.setValue(this.left + value + this.right, this.target, this.targetProperty);
        }
      }
    };
    ChildInterpolationBinding.prototype.call = function call() {
      if (!this.isBound) {
        return;
      }
      var value = this.sourceExpression.evaluate(this.source, this.lookupFunctions);
      this.updateTarget(value);
      if (this.mode !== _aureliaBinding.bindingMode.oneTime) {
        this._version++;
        this.sourceExpression.connect(this, this.source);
        if (value instanceof Array) {
          this.observeArray(value);
        }
        this.unobserve(false);
      }
    };
    ChildInterpolationBinding.prototype.bind = function bind(source) {
      if (this.isBound) {
        if (this.source === source) {
          return;
        }
        this.unbind();
      }
      this.isBound = true;
      this.source = source;
      var sourceExpression = this.sourceExpression;
      if (sourceExpression.bind) {
        sourceExpression.bind(this, source, this.lookupFunctions);
      }
      var value = sourceExpression.evaluate(source, this.lookupFunctions);
      this.updateTarget(value);
      if (this.mode === _aureliaBinding.bindingMode.oneWay) {
        (0, _aureliaBinding.enqueueBindingConnect)(this);
      }
    };
    ChildInterpolationBinding.prototype.unbind = function unbind() {
      if (!this.isBound) {
        return;
      }
      this.isBound = false;
      var sourceExpression = this.sourceExpression;
      if (sourceExpression.unbind) {
        sourceExpression.unbind(this, this.source);
      }
      this.source = null;
      this.unobserve(true);
    };
    ChildInterpolationBinding.prototype.connect = function connect(evaluate) {
      if (!this.isBound) {
        return;
      }
      if (evaluate) {
        var value = this.sourceExpression.evaluate(this.source, this.lookupFunctions);
        this.updateTarget(value);
      }
      this.sourceExpression.connect(this, this.source);
      if (this.value instanceof Array) {
        this.observeArray(this.value);
      }
    };
    return ChildInterpolationBinding;
  }()) || _class);
  var SyntaxInterpreter = exports.SyntaxInterpreter = function() {
    SyntaxInterpreter.inject = function inject() {
      return [_aureliaBinding.Parser, _aureliaBinding.ObserverLocator, _aureliaBinding.EventManager];
    };
    function SyntaxInterpreter(parser, observerLocator, eventManager) {
      _classCallCheck(this, SyntaxInterpreter);
      this.parser = parser;
      this.observerLocator = observerLocator;
      this.eventManager = eventManager;
    }
    SyntaxInterpreter.prototype.interpret = function interpret(resources, element, info, existingInstruction, context) {
      if (info.command in this) {
        return this[info.command](resources, element, info, existingInstruction, context);
      }
      return this.handleUnknownCommand(resources, element, info, existingInstruction, context);
    };
    SyntaxInterpreter.prototype.handleUnknownCommand = function handleUnknownCommand(resources, element, info, existingInstruction, context) {
      LogManager.getLogger('templating-binding').warn('Unknown binding command.', info);
      return existingInstruction;
    };
    SyntaxInterpreter.prototype.determineDefaultBindingMode = function determineDefaultBindingMode(element, attrName, context) {
      var tagName = element.tagName.toLowerCase();
      if (tagName === 'input' && (attrName === 'value' || attrName === 'checked' || attrName === 'files') || (tagName === 'textarea' || tagName === 'select') && attrName === 'value' || (attrName === 'textcontent' || attrName === 'innerhtml') && element.contentEditable === 'true' || attrName === 'scrolltop' || attrName === 'scrollleft') {
        return _aureliaBinding.bindingMode.twoWay;
      }
      if (context && attrName in context.attributes && context.attributes[attrName] && context.attributes[attrName].defaultBindingMode >= _aureliaBinding.bindingMode.oneTime) {
        return context.attributes[attrName].defaultBindingMode;
      }
      return _aureliaBinding.bindingMode.oneWay;
    };
    SyntaxInterpreter.prototype.bind = function bind(resources, element, info, existingInstruction, context) {
      var instruction = existingInstruction || _aureliaTemplating.BehaviorInstruction.attribute(info.attrName);
      instruction.attributes[info.attrName] = new _aureliaBinding.BindingExpression(this.observerLocator, this.attributeMap[info.attrName] || info.attrName, this.parser.parse(info.attrValue), info.defaultBindingMode || this.determineDefaultBindingMode(element, info.attrName, context), resources.lookupFunctions);
      return instruction;
    };
    SyntaxInterpreter.prototype.trigger = function trigger(resources, element, info) {
      return new _aureliaBinding.ListenerExpression(this.eventManager, info.attrName, this.parser.parse(info.attrValue), false, true, resources.lookupFunctions);
    };
    SyntaxInterpreter.prototype.delegate = function delegate(resources, element, info) {
      return new _aureliaBinding.ListenerExpression(this.eventManager, info.attrName, this.parser.parse(info.attrValue), true, true, resources.lookupFunctions);
    };
    SyntaxInterpreter.prototype.call = function call(resources, element, info, existingInstruction) {
      var instruction = existingInstruction || _aureliaTemplating.BehaviorInstruction.attribute(info.attrName);
      instruction.attributes[info.attrName] = new _aureliaBinding.CallExpression(this.observerLocator, info.attrName, this.parser.parse(info.attrValue), resources.lookupFunctions);
      return instruction;
    };
    SyntaxInterpreter.prototype.options = function options(resources, element, info, existingInstruction, context) {
      var instruction = existingInstruction || _aureliaTemplating.BehaviorInstruction.attribute(info.attrName);
      var attrValue = info.attrValue;
      var language = this.language;
      var name = null;
      var target = '';
      var current = void 0;
      var i = void 0;
      var ii = void 0;
      var inString = false;
      var inEscape = false;
      for (i = 0, ii = attrValue.length; i < ii; ++i) {
        current = attrValue[i];
        if (current === ';' && !inString) {
          info = language.inspectAttribute(resources, name, target.trim());
          language.createAttributeInstruction(resources, element, info, instruction, context);
          if (!instruction.attributes[info.attrName]) {
            instruction.attributes[info.attrName] = info.attrValue;
          }
          target = '';
          name = null;
        } else if (current === ':' && name === null) {
          name = target.trim();
          target = '';
        } else if (current === '\\') {
          target += current;
          inEscape = true;
          continue;
        } else {
          target += current;
          if (name !== null && inEscape === false && current === '\'') {
            inString = !inString;
          }
        }
        inEscape = false;
      }
      if (name !== null) {
        info = language.inspectAttribute(resources, name, target.trim());
        language.createAttributeInstruction(resources, element, info, instruction, context);
        if (!instruction.attributes[info.attrName]) {
          instruction.attributes[info.attrName] = info.attrValue;
        }
      }
      return instruction;
    };
    SyntaxInterpreter.prototype['for'] = function _for(resources, element, info, existingInstruction) {
      var parts = void 0;
      var keyValue = void 0;
      var instruction = void 0;
      var attrValue = void 0;
      var isDestructuring = void 0;
      attrValue = info.attrValue;
      isDestructuring = attrValue.match(/^ *[[].+[\]]/);
      parts = isDestructuring ? attrValue.split('of ') : attrValue.split(' of ');
      if (parts.length !== 2) {
        throw new Error('Incorrect syntax for "for". The form is: "$local of $items" or "[$key, $value] of $items".');
      }
      instruction = existingInstruction || _aureliaTemplating.BehaviorInstruction.attribute(info.attrName);
      if (isDestructuring) {
        keyValue = parts[0].replace(/[[\]]/g, '').replace(/,/g, ' ').replace(/\s+/g, ' ').trim().split(' ');
        instruction.attributes.key = keyValue[0];
        instruction.attributes.value = keyValue[1];
      } else {
        instruction.attributes.local = parts[0];
      }
      instruction.attributes.items = new _aureliaBinding.BindingExpression(this.observerLocator, 'items', this.parser.parse(parts[1]), _aureliaBinding.bindingMode.oneWay, resources.lookupFunctions);
      return instruction;
    };
    SyntaxInterpreter.prototype['two-way'] = function twoWay(resources, element, info, existingInstruction) {
      var instruction = existingInstruction || _aureliaTemplating.BehaviorInstruction.attribute(info.attrName);
      instruction.attributes[info.attrName] = new _aureliaBinding.BindingExpression(this.observerLocator, this.attributeMap[info.attrName] || info.attrName, this.parser.parse(info.attrValue), _aureliaBinding.bindingMode.twoWay, resources.lookupFunctions);
      return instruction;
    };
    SyntaxInterpreter.prototype['one-way'] = function oneWay(resources, element, info, existingInstruction) {
      var instruction = existingInstruction || _aureliaTemplating.BehaviorInstruction.attribute(info.attrName);
      instruction.attributes[info.attrName] = new _aureliaBinding.BindingExpression(this.observerLocator, this.attributeMap[info.attrName] || info.attrName, this.parser.parse(info.attrValue), _aureliaBinding.bindingMode.oneWay, resources.lookupFunctions);
      return instruction;
    };
    SyntaxInterpreter.prototype['one-time'] = function oneTime(resources, element, info, existingInstruction) {
      var instruction = existingInstruction || _aureliaTemplating.BehaviorInstruction.attribute(info.attrName);
      instruction.attributes[info.attrName] = new _aureliaBinding.BindingExpression(this.observerLocator, this.attributeMap[info.attrName] || info.attrName, this.parser.parse(info.attrValue), _aureliaBinding.bindingMode.oneTime, resources.lookupFunctions);
      return instruction;
    };
    return SyntaxInterpreter;
  }();
  var info = {};
  var TemplatingBindingLanguage = exports.TemplatingBindingLanguage = function(_BindingLanguage) {
    _inherits(TemplatingBindingLanguage, _BindingLanguage);
    TemplatingBindingLanguage.inject = function inject() {
      return [_aureliaBinding.Parser, _aureliaBinding.ObserverLocator, SyntaxInterpreter];
    };
    function TemplatingBindingLanguage(parser, observerLocator, syntaxInterpreter) {
      _classCallCheck(this, TemplatingBindingLanguage);
      var _this = _possibleConstructorReturn(this, _BindingLanguage.call(this));
      _this.parser = parser;
      _this.observerLocator = observerLocator;
      _this.syntaxInterpreter = syntaxInterpreter;
      _this.emptyStringExpression = _this.parser.parse('\'\'');
      syntaxInterpreter.language = _this;
      _this.attributeMap = syntaxInterpreter.attributeMap = {
        'accesskey': 'accessKey',
        'contenteditable': 'contentEditable',
        'for': 'htmlFor',
        'tabindex': 'tabIndex',
        'textcontent': 'textContent',
        'innerhtml': 'innerHTML',
        'maxlength': 'maxLength',
        'minlength': 'minLength',
        'formaction': 'formAction',
        'formenctype': 'formEncType',
        'formmethod': 'formMethod',
        'formnovalidate': 'formNoValidate',
        'formtarget': 'formTarget',
        'rowspan': 'rowSpan',
        'colspan': 'colSpan',
        'scrolltop': 'scrollTop',
        'scrollleft': 'scrollLeft',
        'readonly': 'readOnly'
      };
      return _this;
    }
    TemplatingBindingLanguage.prototype.inspectAttribute = function inspectAttribute(resources, attrName, attrValue) {
      var parts = attrName.split('.');
      info.defaultBindingMode = null;
      if (parts.length === 2) {
        info.attrName = parts[0].trim();
        info.attrValue = attrValue;
        info.command = parts[1].trim();
        if (info.command === 'ref') {
          info.expression = new _aureliaBinding.NameExpression(this.parser.parse(attrValue), info.attrName);
          info.command = null;
          info.attrName = 'ref';
        } else {
          info.expression = null;
        }
      } else if (attrName === 'ref') {
        info.attrName = attrName;
        info.attrValue = attrValue;
        info.command = null;
        info.expression = new _aureliaBinding.NameExpression(this.parser.parse(attrValue), 'element');
      } else {
        info.attrName = attrName;
        info.attrValue = attrValue;
        info.command = null;
        info.expression = this.parseContent(resources, attrName, attrValue);
      }
      return info;
    };
    TemplatingBindingLanguage.prototype.createAttributeInstruction = function createAttributeInstruction(resources, element, theInfo, existingInstruction, context) {
      var instruction = void 0;
      if (theInfo.expression) {
        if (theInfo.attrName === 'ref') {
          return theInfo.expression;
        }
        instruction = existingInstruction || _aureliaTemplating.BehaviorInstruction.attribute(theInfo.attrName);
        instruction.attributes[theInfo.attrName] = theInfo.expression;
      } else if (theInfo.command) {
        instruction = this.syntaxInterpreter.interpret(resources, element, theInfo, existingInstruction, context);
      }
      return instruction;
    };
    TemplatingBindingLanguage.prototype.parseText = function parseText(resources, value) {
      return this.parseContent(resources, 'textContent', value);
    };
    TemplatingBindingLanguage.prototype.parseContent = function parseContent(resources, attrName, attrValue) {
      var i = attrValue.indexOf('${', 0);
      var ii = attrValue.length;
      var char = void 0;
      var pos = 0;
      var open = 0;
      var quote = null;
      var interpolationStart = void 0;
      var parts = void 0;
      var partIndex = 0;
      while (i >= 0 && i < ii - 2) {
        open = 1;
        interpolationStart = i;
        i += 2;
        do {
          char = attrValue[i];
          i++;
          if (char === "'" || char === '"') {
            if (quote === null) {
              quote = char;
            } else if (quote === char) {
              quote = null;
            }
            continue;
          }
          if (char === '\\') {
            i++;
            continue;
          }
          if (quote !== null) {
            continue;
          }
          if (char === '{') {
            open++;
          } else if (char === '}') {
            open--;
          }
        } while (open > 0 && i < ii);
        if (open === 0) {
          parts = parts || [];
          if (attrValue[interpolationStart - 1] === '\\' && attrValue[interpolationStart - 2] !== '\\') {
            parts[partIndex] = attrValue.substring(pos, interpolationStart - 1) + attrValue.substring(interpolationStart, i);
            partIndex++;
            parts[partIndex] = this.emptyStringExpression;
            partIndex++;
          } else {
            parts[partIndex] = attrValue.substring(pos, interpolationStart);
            partIndex++;
            parts[partIndex] = this.parser.parse(attrValue.substring(interpolationStart + 2, i - 1));
            partIndex++;
          }
          pos = i;
          i = attrValue.indexOf('${', i);
        } else {
          break;
        }
      }
      if (partIndex === 0) {
        return null;
      }
      parts[partIndex] = attrValue.substr(pos);
      return new InterpolationBindingExpression(this.observerLocator, this.attributeMap[attrName] || attrName, parts, _aureliaBinding.bindingMode.oneWay, resources.lookupFunctions, attrName);
    };
    return TemplatingBindingLanguage;
  }(_aureliaTemplating.BindingLanguage);
  function configure(config) {
    config.container.registerSingleton(_aureliaTemplating.BindingLanguage, TemplatingBindingLanguage);
    config.container.registerAlias(_aureliaTemplating.BindingLanguage, TemplatingBindingLanguage);
  }
});

})();
(function() {
var define = System.amdDefine;
define("npm:aurelia-templating-binding@1.0.0-beta.1.2.1.js", ["npm:aurelia-templating-binding@1.0.0-beta.1.2.1/aurelia-templating-binding"], function(main) {
  return main;
});

})();
(function() {
var define = System.amdDefine;
define("npm:aurelia-templating-resources@1.0.0-beta.1.2.2/compose.js", ["exports", "aurelia-dependency-injection", "aurelia-task-queue", "aurelia-templating", "aurelia-pal"], function(exports, _aureliaDependencyInjection, _aureliaTaskQueue, _aureliaTemplating, _aureliaPal) {
  'use strict';
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.Compose = undefined;
  function _initDefineProp(target, property, descriptor, context) {
    if (!descriptor)
      return;
    Object.defineProperty(target, property, {
      enumerable: descriptor.enumerable,
      configurable: descriptor.configurable,
      writable: descriptor.writable,
      value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
  }
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function(key) {
      desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;
    if ('value' in desc || desc.initializer) {
      desc.writable = true;
    }
    desc = decorators.slice().reverse().reduce(function(desc, decorator) {
      return decorator(target, property, desc) || desc;
    }, desc);
    if (context && desc.initializer !== void 0) {
      desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
      desc.initializer = undefined;
    }
    if (desc.initializer === void 0) {
      Object['define' + 'Property'](target, property, desc);
      desc = null;
    }
    return desc;
  }
  function _initializerWarningHelper(descriptor, context) {
    throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
  }
  var _dec,
      _dec2,
      _class,
      _desc,
      _value,
      _class2,
      _descriptor,
      _descriptor2,
      _descriptor3;
  var Compose = exports.Compose = (_dec = (0, _aureliaTemplating.customElement)('compose'), _dec2 = (0, _aureliaDependencyInjection.inject)(_aureliaPal.DOM.Element, _aureliaDependencyInjection.Container, _aureliaTemplating.CompositionEngine, _aureliaTemplating.ViewSlot, _aureliaTemplating.ViewResources, _aureliaTaskQueue.TaskQueue), _dec(_class = (0, _aureliaTemplating.noView)(_class = _dec2(_class = (_class2 = function() {
    function Compose(element, container, compositionEngine, viewSlot, viewResources, taskQueue) {
      _classCallCheck(this, Compose);
      _initDefineProp(this, 'model', _descriptor, this);
      _initDefineProp(this, 'view', _descriptor2, this);
      _initDefineProp(this, 'viewModel', _descriptor3, this);
      this.element = element;
      this.container = container;
      this.compositionEngine = compositionEngine;
      this.viewSlot = viewSlot;
      this.viewResources = viewResources;
      this.taskQueue = taskQueue;
      this.currentController = null;
      this.currentViewModel = null;
    }
    Compose.prototype.created = function created(owningView) {
      this.owningView = owningView;
    };
    Compose.prototype.bind = function bind(bindingContext, overrideContext) {
      this.bindingContext = bindingContext;
      this.overrideContext = overrideContext;
      processInstruction(this, createInstruction(this, {
        view: this.view,
        viewModel: this.viewModel,
        model: this.model
      }));
    };
    Compose.prototype.unbind = function unbind(bindingContext, overrideContext) {
      this.bindingContext = null;
      this.overrideContext = null;
      var returnToCache = true;
      var skipAnimation = true;
      this.viewSlot.removeAll(returnToCache, skipAnimation);
    };
    Compose.prototype.modelChanged = function modelChanged(newValue, oldValue) {
      var _this = this;
      if (this.currentInstruction) {
        this.currentInstruction.model = newValue;
        return;
      }
      this.taskQueue.queueMicroTask(function() {
        if (_this.currentInstruction) {
          _this.currentInstruction.model = newValue;
          return;
        }
        var vm = _this.currentViewModel;
        if (vm && typeof vm.activate === 'function') {
          vm.activate(newValue);
        }
      });
    };
    Compose.prototype.viewChanged = function viewChanged(newValue, oldValue) {
      var _this2 = this;
      var instruction = createInstruction(this, {
        view: newValue,
        viewModel: this.currentViewModel || this.viewModel,
        model: this.model
      });
      if (this.currentInstruction) {
        this.currentInstruction = instruction;
        return;
      }
      this.currentInstruction = instruction;
      this.taskQueue.queueMicroTask(function() {
        return processInstruction(_this2, _this2.currentInstruction);
      });
    };
    Compose.prototype.viewModelChanged = function viewModelChanged(newValue, oldValue) {
      var _this3 = this;
      var instruction = createInstruction(this, {
        viewModel: newValue,
        view: this.view,
        model: this.model
      });
      if (this.currentInstruction) {
        this.currentInstruction = instruction;
        return;
      }
      this.currentInstruction = instruction;
      this.taskQueue.queueMicroTask(function() {
        return processInstruction(_this3, _this3.currentInstruction);
      });
    };
    return Compose;
  }(), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, 'model', [_aureliaTemplating.bindable], {
    enumerable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, 'view', [_aureliaTemplating.bindable], {
    enumerable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, 'viewModel', [_aureliaTemplating.bindable], {
    enumerable: true,
    initializer: null
  })), _class2)) || _class) || _class) || _class);
  function createInstruction(composer, instruction) {
    return Object.assign(instruction, {
      bindingContext: composer.bindingContext,
      overrideContext: composer.overrideContext,
      owningView: composer.owningView,
      container: composer.container,
      viewSlot: composer.viewSlot,
      viewResources: composer.viewResources,
      currentController: composer.currentController,
      host: composer.element
    });
  }
  function processInstruction(composer, instruction) {
    composer.currentInstruction = null;
    composer.compositionEngine.compose(instruction).then(function(controller) {
      composer.currentController = controller;
      composer.currentViewModel = controller ? controller.viewModel : null;
    });
  }
});

})();
(function() {
var define = System.amdDefine;
define("npm:aurelia-templating-resources@1.0.0-beta.1.2.2/if.js", ["exports", "aurelia-templating", "aurelia-dependency-injection"], function(exports, _aureliaTemplating, _aureliaDependencyInjection) {
  'use strict';
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.If = undefined;
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  var _dec,
      _dec2,
      _class;
  var If = exports.If = (_dec = (0, _aureliaTemplating.customAttribute)('if'), _dec2 = (0, _aureliaDependencyInjection.inject)(_aureliaTemplating.BoundViewFactory, _aureliaTemplating.ViewSlot), _dec(_class = (0, _aureliaTemplating.templateController)(_class = _dec2(_class = function() {
    function If(viewFactory, viewSlot) {
      _classCallCheck(this, If);
      this.viewFactory = viewFactory;
      this.viewSlot = viewSlot;
      this.showing = false;
      this.view = null;
      this.bindingContext = null;
      this.overrideContext = null;
    }
    If.prototype.bind = function bind(bindingContext, overrideContext) {
      this.bindingContext = bindingContext;
      this.overrideContext = overrideContext;
      this.valueChanged(this.value);
    };
    If.prototype.valueChanged = function valueChanged(newValue) {
      var _this = this;
      if (this.__queuedChanges) {
        this.__queuedChanges.push(newValue);
        return;
      }
      var maybePromise = this._runValueChanged(newValue);
      if (maybePromise instanceof Promise) {
        (function() {
          var queuedChanges = _this.__queuedChanges = [];
          var runQueuedChanges = function runQueuedChanges() {
            if (!queuedChanges.length) {
              _this.__queuedChanges = undefined;
              return;
            }
            var nextPromise = _this._runValueChanged(queuedChanges.shift()) || Promise.resolve();
            nextPromise.then(runQueuedChanges);
          };
          maybePromise.then(runQueuedChanges);
        })();
      }
    };
    If.prototype._runValueChanged = function _runValueChanged(newValue) {
      var _this2 = this;
      if (!newValue) {
        var viewOrPromise = void 0;
        if (this.view !== null && this.showing) {
          viewOrPromise = this.viewSlot.remove(this.view);
          if (viewOrPromise instanceof Promise) {
            viewOrPromise.then(function() {
              return _this2.view.unbind();
            });
          } else {
            this.view.unbind();
          }
        }
        this.showing = false;
        return viewOrPromise;
      }
      if (this.view === null) {
        this.view = this.viewFactory.create();
      }
      if (!this.view.isBound) {
        this.view.bind(this.bindingContext, this.overrideContext);
      }
      if (!this.showing) {
        this.showing = true;
        return this.viewSlot.add(this.view);
      }
    };
    If.prototype.unbind = function unbind() {
      if (this.view === null) {
        return;
      }
      this.view.unbind();
      if (!this.viewFactory.isCaching) {
        return;
      }
      if (this.showing) {
        this.showing = false;
        this.viewSlot.remove(this.view, true, true);
      }
      this.view.returnToCache();
      this.view = null;
    };
    return If;
  }()) || _class) || _class) || _class);
});

})();
(function() {
var define = System.amdDefine;
define("npm:aurelia-templating-resources@1.0.0-beta.1.2.2/with.js", ["exports", "aurelia-dependency-injection", "aurelia-templating", "aurelia-binding"], function(exports, _aureliaDependencyInjection, _aureliaTemplating, _aureliaBinding) {
  'use strict';
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.With = undefined;
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  var _dec,
      _dec2,
      _class;
  var With = exports.With = (_dec = (0, _aureliaTemplating.customAttribute)('with'), _dec2 = (0, _aureliaDependencyInjection.inject)(_aureliaTemplating.BoundViewFactory, _aureliaTemplating.ViewSlot), _dec(_class = (0, _aureliaTemplating.templateController)(_class = _dec2(_class = function() {
    function With(viewFactory, viewSlot) {
      _classCallCheck(this, With);
      this.viewFactory = viewFactory;
      this.viewSlot = viewSlot;
      this.parentOverrideContext = null;
      this.view = null;
    }
    With.prototype.bind = function bind(bindingContext, overrideContext) {
      this.parentOverrideContext = overrideContext;
      this.valueChanged(this.value);
    };
    With.prototype.valueChanged = function valueChanged(newValue) {
      var overrideContext = (0, _aureliaBinding.createOverrideContext)(newValue, this.parentOverrideContext);
      if (!this.view) {
        this.view = this.viewFactory.create();
        this.view.bind(newValue, overrideContext);
        this.viewSlot.add(this.view);
      } else {
        this.view.bind(newValue, overrideContext);
      }
    };
    With.prototype.unbind = function unbind() {
      this.parentOverrideContext = null;
      if (this.view) {
        this.view.unbind();
      }
    };
    return With;
  }()) || _class) || _class) || _class);
});

})();
(function() {
var define = System.amdDefine;
define("npm:aurelia-templating-resources@1.0.0-beta.1.2.2/analyze-view-factory.js", ["exports"], function(exports) {
  'use strict';
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.viewsRequireLifecycle = viewsRequireLifecycle;
  var lifecycleOptionalBehaviors = exports.lifecycleOptionalBehaviors = ['focus', 'if', 'repeat', 'show', 'with'];
  function behaviorRequiresLifecycle(instruction) {
    var t = instruction.type;
    var name = t.elementName !== null ? t.elementName : t.attributeName;
    if (lifecycleOptionalBehaviors.indexOf(name) === -1) {
      return t.handlesAttached || t.handlesBind || t.handlesCreated || t.handlesDetached || t.handlesUnbind;
    }
    return instruction.viewFactory && viewsRequireLifecycle(instruction.viewFactory);
  }
  function targetRequiresLifecycle(instruction) {
    var behaviors = instruction.behaviorInstructions;
    if (behaviors) {
      var i = behaviors.length;
      while (i--) {
        if (behaviorRequiresLifecycle(behaviors[i])) {
          return true;
        }
      }
    }
    return instruction.viewFactory && viewsRequireLifecycle(instruction.viewFactory);
  }
  function viewsRequireLifecycle(viewFactory) {
    if ('_viewsRequireLifecycle' in viewFactory) {
      return viewFactory._viewsRequireLifecycle;
    }
    if (viewFactory.viewFactory) {
      viewFactory._viewsRequireLifecycle = viewsRequireLifecycle(viewFactory.viewFactory);
      return viewFactory._viewsRequireLifecycle;
    }
    if (viewFactory.template.querySelector('.au-animate')) {
      viewFactory._viewsRequireLifecycle = true;
      return true;
    }
    for (var id in viewFactory.instructions) {
      if (targetRequiresLifecycle(viewFactory.instructions[id])) {
        viewFactory._viewsRequireLifecycle = true;
        return true;
      }
    }
    viewFactory._viewsRequireLifecycle = false;
    return false;
  }
});

})();
(function() {
var define = System.amdDefine;
define("npm:aurelia-templating-resources@1.0.0-beta.1.2.2/repeat.js", ["exports", "aurelia-dependency-injection", "aurelia-binding", "aurelia-templating", "./repeat-strategy-locator", "./repeat-utilities", "./analyze-view-factory", "./abstract-repeater"], function(exports, _aureliaDependencyInjection, _aureliaBinding, _aureliaTemplating, _repeatStrategyLocator, _repeatUtilities, _analyzeViewFactory, _abstractRepeater) {
  'use strict';
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.Repeat = undefined;
  function _initDefineProp(target, property, descriptor, context) {
    if (!descriptor)
      return;
    Object.defineProperty(target, property, {
      enumerable: descriptor.enumerable,
      configurable: descriptor.configurable,
      writable: descriptor.writable,
      value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
  }
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }
  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }});
    if (superClass)
      Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function(key) {
      desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;
    if ('value' in desc || desc.initializer) {
      desc.writable = true;
    }
    desc = decorators.slice().reverse().reduce(function(desc, decorator) {
      return decorator(target, property, desc) || desc;
    }, desc);
    if (context && desc.initializer !== void 0) {
      desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
      desc.initializer = undefined;
    }
    if (desc.initializer === void 0) {
      Object['define' + 'Property'](target, property, desc);
      desc = null;
    }
    return desc;
  }
  function _initializerWarningHelper(descriptor, context) {
    throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
  }
  var _dec,
      _dec2,
      _class,
      _desc,
      _value,
      _class2,
      _descriptor,
      _descriptor2,
      _descriptor3,
      _descriptor4;
  var Repeat = exports.Repeat = (_dec = (0, _aureliaTemplating.customAttribute)('repeat'), _dec2 = (0, _aureliaDependencyInjection.inject)(_aureliaTemplating.BoundViewFactory, _aureliaTemplating.TargetInstruction, _aureliaTemplating.ViewSlot, _aureliaTemplating.ViewResources, _aureliaBinding.ObserverLocator, _repeatStrategyLocator.RepeatStrategyLocator), _dec(_class = (0, _aureliaTemplating.templateController)(_class = _dec2(_class = (_class2 = function(_AbstractRepeater) {
    _inherits(Repeat, _AbstractRepeater);
    function Repeat(viewFactory, instruction, viewSlot, viewResources, observerLocator, strategyLocator) {
      _classCallCheck(this, Repeat);
      var _this = _possibleConstructorReturn(this, _AbstractRepeater.call(this, {
        local: 'item',
        viewsRequireLifecycle: (0, _analyzeViewFactory.viewsRequireLifecycle)(viewFactory)
      }));
      _initDefineProp(_this, 'items', _descriptor, _this);
      _initDefineProp(_this, 'local', _descriptor2, _this);
      _initDefineProp(_this, 'key', _descriptor3, _this);
      _initDefineProp(_this, 'value', _descriptor4, _this);
      _this.viewFactory = viewFactory;
      _this.instruction = instruction;
      _this.viewSlot = viewSlot;
      _this.lookupFunctions = viewResources.lookupFunctions;
      _this.observerLocator = observerLocator;
      _this.key = 'key';
      _this.value = 'value';
      _this.strategyLocator = strategyLocator;
      _this.ignoreMutation = false;
      _this.sourceExpression = (0, _repeatUtilities.getItemsSourceExpression)(_this.instruction, 'repeat.for');
      _this.isOneTime = (0, _repeatUtilities.isOneTime)(_this.sourceExpression);
      _this.viewsRequireLifecycle = (0, _analyzeViewFactory.viewsRequireLifecycle)(viewFactory);
      return _this;
    }
    Repeat.prototype.call = function call(context, changes) {
      this[context](this.items, changes);
    };
    Repeat.prototype.bind = function bind(bindingContext, overrideContext) {
      this.scope = {
        bindingContext: bindingContext,
        overrideContext: overrideContext
      };
      this.itemsChanged();
    };
    Repeat.prototype.unbind = function unbind() {
      this.scope = null;
      this.items = null;
      this.viewSlot.removeAll(true);
      this._unsubscribeCollection();
    };
    Repeat.prototype._unsubscribeCollection = function _unsubscribeCollection() {
      if (this.collectionObserver) {
        this.collectionObserver.unsubscribe(this.callContext, this);
        this.collectionObserver = null;
        this.callContext = null;
      }
    };
    Repeat.prototype.itemsChanged = function itemsChanged() {
      this._unsubscribeCollection();
      if (!this.scope) {
        return;
      }
      var items = this.items;
      this.strategy = this.strategyLocator.getStrategy(items);
      if (!this.strategy) {
        throw new Error('Value for \'' + this.sourceExpression + '\' is non-repeatable');
      }
      if (!this.isOneTime && !this._observeInnerCollection()) {
        this._observeCollection();
      }
      this.strategy.instanceChanged(this, items);
    };
    Repeat.prototype._getInnerCollection = function _getInnerCollection() {
      var expression = (0, _repeatUtilities.unwrapExpression)(this.sourceExpression);
      if (!expression) {
        return null;
      }
      return expression.evaluate(this.scope, null);
    };
    Repeat.prototype.handleCollectionMutated = function handleCollectionMutated(collection, changes) {
      this.strategy.instanceMutated(this, collection, changes);
    };
    Repeat.prototype.handleInnerCollectionMutated = function handleInnerCollectionMutated(collection, changes) {
      var _this2 = this;
      if (this.ignoreMutation) {
        return;
      }
      this.ignoreMutation = true;
      var newItems = this.sourceExpression.evaluate(this.scope, this.lookupFunctions);
      this.observerLocator.taskQueue.queueMicroTask(function() {
        return _this2.ignoreMutation = false;
      });
      if (newItems === this.items) {
        this.itemsChanged();
      } else {
        this.items = newItems;
      }
    };
    Repeat.prototype._observeInnerCollection = function _observeInnerCollection() {
      var items = this._getInnerCollection();
      var strategy = this.strategyLocator.getStrategy(items);
      if (!strategy) {
        return false;
      }
      this.collectionObserver = strategy.getCollectionObserver(this.observerLocator, items);
      if (!this.collectionObserver) {
        return false;
      }
      this.callContext = 'handleInnerCollectionMutated';
      this.collectionObserver.subscribe(this.callContext, this);
      return true;
    };
    Repeat.prototype._observeCollection = function _observeCollection() {
      var items = this.items;
      this.collectionObserver = this.strategy.getCollectionObserver(this.observerLocator, items);
      if (this.collectionObserver) {
        this.callContext = 'handleCollectionMutated';
        this.collectionObserver.subscribe(this.callContext, this);
      }
    };
    Repeat.prototype.viewCount = function viewCount() {
      return this.viewSlot.children.length;
    };
    Repeat.prototype.views = function views() {
      return this.viewSlot.children;
    };
    Repeat.prototype.view = function view(index) {
      return this.viewSlot.children[index];
    };
    Repeat.prototype.addView = function addView(bindingContext, overrideContext) {
      var view = this.viewFactory.create();
      view.bind(bindingContext, overrideContext);
      this.viewSlot.add(view);
    };
    Repeat.prototype.insertView = function insertView(index, bindingContext, overrideContext) {
      var view = this.viewFactory.create();
      view.bind(bindingContext, overrideContext);
      this.viewSlot.insert(index, view);
    };
    Repeat.prototype.removeAllViews = function removeAllViews(returnToCache, skipAnimation) {
      return this.viewSlot.removeAll(returnToCache, skipAnimation);
    };
    Repeat.prototype.removeView = function removeView(index, returnToCache, skipAnimation) {
      return this.viewSlot.removeAt(index, returnToCache, skipAnimation);
    };
    Repeat.prototype.updateBindings = function updateBindings(view) {
      var j = view.bindings.length;
      while (j--) {
        (0, _repeatUtilities.updateOneTimeBinding)(view.bindings[j]);
      }
      j = view.controllers.length;
      while (j--) {
        var k = view.controllers[j].boundProperties.length;
        while (k--) {
          var binding = view.controllers[j].boundProperties[k].binding;
          (0, _repeatUtilities.updateOneTimeBinding)(binding);
        }
      }
    };
    return Repeat;
  }(_abstractRepeater.AbstractRepeater), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, 'items', [_aureliaTemplating.bindable], {
    enumerable: true,
    initializer: null
  }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, 'local', [_aureliaTemplating.bindable], {
    enumerable: true,
    initializer: null
  }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, 'key', [_aureliaTemplating.bindable], {
    enumerable: true,
    initializer: null
  }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, 'value', [_aureliaTemplating.bindable], {
    enumerable: true,
    initializer: null
  })), _class2)) || _class) || _class) || _class);
});

})();
(function() {
var define = System.amdDefine;
define("npm:aurelia-templating-resources@1.0.0-beta.1.2.2/show.js", ["exports", "aurelia-dependency-injection", "aurelia-templating", "aurelia-pal"], function(exports, _aureliaDependencyInjection, _aureliaTemplating, _aureliaPal) {
  'use strict';
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.Show = undefined;
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  var _dec,
      _dec2,
      _class;
  var Show = exports.Show = (_dec = (0, _aureliaTemplating.customAttribute)('show'), _dec2 = (0, _aureliaDependencyInjection.inject)(_aureliaPal.DOM.Element, _aureliaTemplating.Animator), _dec(_class = _dec2(_class = function() {
    function Show(element, animator) {
      _classCallCheck(this, Show);
      this.element = element;
      this.animator = animator;
    }
    Show.prototype.valueChanged = function valueChanged(newValue) {
      if (newValue) {
        this.animator.removeClass(this.element, 'aurelia-hide');
      } else {
        this.animator.addClass(this.element, 'aurelia-hide');
      }
    };
    Show.prototype.bind = function bind(bindingContext) {
      this.valueChanged(this.value);
    };
    return Show;
  }()) || _class) || _class);
});

})();
(function() {
var define = System.amdDefine;
define("npm:aurelia-templating-resources@1.0.0-beta.1.2.2/hide.js", ["exports", "aurelia-dependency-injection", "aurelia-templating", "aurelia-pal"], function(exports, _aureliaDependencyInjection, _aureliaTemplating, _aureliaPal) {
  'use strict';
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.Hide = undefined;
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  var _dec,
      _dec2,
      _class;
  var Hide = exports.Hide = (_dec = (0, _aureliaTemplating.customAttribute)('hide'), _dec2 = (0, _aureliaDependencyInjection.inject)(_aureliaPal.DOM.Element, _aureliaTemplating.Animator), _dec(_class = _dec2(_class = function() {
    function Hide(element, animator) {
      _classCallCheck(this, Hide);
      this.element = element;
      this.animator = animator;
    }
    Hide.prototype.valueChanged = function valueChanged(newValue) {
      if (newValue) {
        this.animator.addClass(this.element, 'aurelia-hide');
      } else {
        this.animator.removeClass(this.element, 'aurelia-hide');
      }
    };
    Hide.prototype.bind = function bind(bindingContext) {
      this.valueChanged(this.value);
    };
    return Hide;
  }()) || _class) || _class);
});

})();
(function() {
var define = System.amdDefine;
define("npm:aurelia-templating-resources@1.0.0-beta.1.2.2/sanitize-html.js", ["exports", "aurelia-binding", "aurelia-dependency-injection", "./html-sanitizer"], function(exports, _aureliaBinding, _aureliaDependencyInjection, _htmlSanitizer) {
  'use strict';
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.SanitizeHTMLValueConverter = undefined;
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  var _dec,
      _dec2,
      _class;
  var SanitizeHTMLValueConverter = exports.SanitizeHTMLValueConverter = (_dec = (0, _aureliaBinding.valueConverter)('sanitizeHTML'), _dec2 = (0, _aureliaDependencyInjection.inject)(_htmlSanitizer.HTMLSanitizer), _dec(_class = _dec2(_class = function() {
    function SanitizeHTMLValueConverter(sanitizer) {
      _classCallCheck(this, SanitizeHTMLValueConverter);
      this.sanitizer = sanitizer;
    }
    SanitizeHTMLValueConverter.prototype.toView = function toView(untrustedMarkup) {
      if (untrustedMarkup === null || untrustedMarkup === undefined) {
        return null;
      }
      return this.sanitizer.sanitize(untrustedMarkup);
    };
    return SanitizeHTMLValueConverter;
  }()) || _class) || _class);
});

})();
(function() {
var define = System.amdDefine;
define("npm:aurelia-templating-resources@1.0.0-beta.1.2.2/replaceable.js", ["exports", "aurelia-dependency-injection", "aurelia-templating"], function(exports, _aureliaDependencyInjection, _aureliaTemplating) {
  'use strict';
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.Replaceable = undefined;
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  var _dec,
      _dec2,
      _class;
  var Replaceable = exports.Replaceable = (_dec = (0, _aureliaTemplating.customAttribute)('replaceable'), _dec2 = (0, _aureliaDependencyInjection.inject)(_aureliaTemplating.BoundViewFactory, _aureliaTemplating.ViewSlot), _dec(_class = (0, _aureliaTemplating.templateController)(_class = _dec2(_class = function() {
    function Replaceable(viewFactory, viewSlot) {
      _classCallCheck(this, Replaceable);
      this.viewFactory = viewFactory;
      this.viewSlot = viewSlot;
      this.view = null;
    }
    Replaceable.prototype.bind = function bind(bindingContext, overrideContext) {
      if (this.view === null) {
        this.view = this.viewFactory.create();
        this.viewSlot.add(this.view);
      }
      this.view.bind(bindingContext, overrideContext);
    };
    Replaceable.prototype.unbind = function unbind() {
      this.view.unbind();
    };
    return Replaceable;
  }()) || _class) || _class) || _class);
});

})();
(function() {
var define = System.amdDefine;
define("npm:aurelia-templating-resources@1.0.0-beta.1.2.2/focus.js", ["exports", "aurelia-templating", "aurelia-binding", "aurelia-dependency-injection", "aurelia-task-queue", "aurelia-pal"], function(exports, _aureliaTemplating, _aureliaBinding, _aureliaDependencyInjection, _aureliaTaskQueue, _aureliaPal) {
  'use strict';
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.Focus = undefined;
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  var _dec,
      _dec2,
      _class;
  var Focus = exports.Focus = (_dec = (0, _aureliaTemplating.customAttribute)('focus', _aureliaBinding.bindingMode.twoWay), _dec2 = (0, _aureliaDependencyInjection.inject)(_aureliaPal.DOM.Element, _aureliaTaskQueue.TaskQueue), _dec(_class = _dec2(_class = function() {
    function Focus(element, taskQueue) {
      var _this = this;
      _classCallCheck(this, Focus);
      this.element = element;
      this.taskQueue = taskQueue;
      this.focusListener = function(e) {
        _this.value = true;
      };
      this.blurListener = function(e) {
        if (_aureliaPal.DOM.activeElement !== _this.element) {
          _this.value = false;
        }
      };
    }
    Focus.prototype.valueChanged = function valueChanged(newValue) {
      if (newValue) {
        this._giveFocus();
      } else {
        this.element.blur();
      }
    };
    Focus.prototype._giveFocus = function _giveFocus() {
      var _this2 = this;
      this.taskQueue.queueMicroTask(function() {
        if (_this2.value) {
          _this2.element.focus();
        }
      });
    };
    Focus.prototype.attached = function attached() {
      this.element.addEventListener('focus', this.focusListener);
      this.element.addEventListener('blur', this.blurListener);
    };
    Focus.prototype.detached = function detached() {
      this.element.removeEventListener('focus', this.focusListener);
      this.element.removeEventListener('blur', this.blurListener);
    };
    return Focus;
  }()) || _class) || _class);
});

})();
(function() {
var define = System.amdDefine;
define("npm:aurelia-templating-resources@1.0.0-beta.1.2.2/compile-spy.js", ["exports", "aurelia-templating", "aurelia-dependency-injection", "aurelia-logging", "aurelia-pal"], function(exports, _aureliaTemplating, _aureliaDependencyInjection, _aureliaLogging, _aureliaPal) {
  'use strict';
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.CompileSpy = undefined;
  var LogManager = _interopRequireWildcard(_aureliaLogging);
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key))
            newObj[key] = obj[key];
        }
      }
      newObj.default = obj;
      return newObj;
    }
  }
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  var _dec,
      _dec2,
      _class;
  var CompileSpy = exports.CompileSpy = (_dec = (0, _aureliaTemplating.customAttribute)('compile-spy'), _dec2 = (0, _aureliaDependencyInjection.inject)(_aureliaPal.DOM.Element, _aureliaTemplating.TargetInstruction), _dec(_class = _dec2(_class = function CompileSpy(element, instruction) {
    _classCallCheck(this, CompileSpy);
    LogManager.getLogger('compile-spy').info(element, instruction);
  }) || _class) || _class);
});

})();
(function() {
var define = System.amdDefine;
define("npm:aurelia-templating-resources@1.0.0-beta.1.2.2/view-spy.js", ["exports", "aurelia-templating", "aurelia-logging"], function(exports, _aureliaTemplating, _aureliaLogging) {
  'use strict';
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.ViewSpy = undefined;
  var LogManager = _interopRequireWildcard(_aureliaLogging);
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key))
            newObj[key] = obj[key];
        }
      }
      newObj.default = obj;
      return newObj;
    }
  }
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  var _dec,
      _class;
  var ViewSpy = exports.ViewSpy = (_dec = (0, _aureliaTemplating.customAttribute)('view-spy'), _dec(_class = function() {
    function ViewSpy() {
      _classCallCheck(this, ViewSpy);
      this.logger = LogManager.getLogger('view-spy');
    }
    ViewSpy.prototype._log = function _log(lifecycleName, context) {
      if (!this.value && lifecycleName === 'created') {
        this.logger.info(lifecycleName, this.view);
      } else if (this.value && this.value.indexOf(lifecycleName) !== -1) {
        this.logger.info(lifecycleName, this.view, context);
      }
    };
    ViewSpy.prototype.created = function created(view) {
      this.view = view;
      this._log('created');
    };
    ViewSpy.prototype.bind = function bind(bindingContext) {
      this._log('bind', bindingContext);
    };
    ViewSpy.prototype.attached = function attached() {
      this._log('attached');
    };
    ViewSpy.prototype.detached = function detached() {
      this._log('detached');
    };
    ViewSpy.prototype.unbind = function unbind() {
      this._log('unbind');
    };
    return ViewSpy;
  }()) || _class);
});

})();
(function() {
var define = System.amdDefine;
define("npm:aurelia-templating-resources@1.0.0-beta.1.2.2/css-resource.js", ["exports", "aurelia-templating", "aurelia-loader", "aurelia-dependency-injection", "aurelia-path", "aurelia-pal"], function(exports, _aureliaTemplating, _aureliaLoader, _aureliaDependencyInjection, _aureliaPath, _aureliaPal) {
  'use strict';
  Object.defineProperty(exports, "__esModule", {value: true});
  exports._createCSSResource = _createCSSResource;
  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }
  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }});
    if (superClass)
      Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  var cssUrlMatcher = /url\((?!['"]data)([^)]+)\)/gi;
  function fixupCSSUrls(address, css) {
    if (typeof css !== 'string') {
      throw new Error('Failed loading required CSS file: ' + address);
    }
    return css.replace(cssUrlMatcher, function(match, p1) {
      var quote = p1.charAt(0);
      if (quote === '\'' || quote === '"') {
        p1 = p1.substr(1, p1.length - 2);
      }
      return 'url(\'' + (0, _aureliaPath.relativeToFile)(p1, address) + '\')';
    });
  }
  var CSSResource = function() {
    function CSSResource(address) {
      _classCallCheck(this, CSSResource);
      this.address = address;
      this._global = null;
      this._scoped = null;
    }
    CSSResource.prototype.initialize = function initialize(container, target) {
      this._global = new target('global');
      this._scoped = new target('scoped');
    };
    CSSResource.prototype.register = function register(registry, name) {
      registry.registerViewEngineHooks(name === 'scoped' ? this._scoped : this._global);
    };
    CSSResource.prototype.load = function load(container) {
      var _this = this;
      return container.get(_aureliaLoader.Loader).loadText(this.address).catch(function(err) {
        return null;
      }).then(function(text) {
        text = fixupCSSUrls(_this.address, text);
        _this._global.css = text;
        _this._scoped.css = text;
      });
    };
    return CSSResource;
  }();
  var CSSViewEngineHooks = function() {
    function CSSViewEngineHooks(mode) {
      _classCallCheck(this, CSSViewEngineHooks);
      this.mode = mode;
      this.css = null;
      this._alreadyGloballyInjected = false;
    }
    CSSViewEngineHooks.prototype.beforeCompile = function beforeCompile(content, resources, instruction) {
      if (this.mode === 'scoped') {
        if (instruction.targetShadowDOM) {
          _aureliaPal.DOM.injectStyles(this.css, content, true);
        } else if (_aureliaPal.FEATURE.scopedCSS) {
          var styleNode = _aureliaPal.DOM.injectStyles(this.css, content, true);
          styleNode.setAttribute('scoped', 'scoped');
        } else if (!this._alreadyGloballyInjected) {
          _aureliaPal.DOM.injectStyles(this.css);
          this._alreadyGloballyInjected = true;
        }
      } else if (!this._alreadyGloballyInjected) {
        _aureliaPal.DOM.injectStyles(this.css);
        this._alreadyGloballyInjected = true;
      }
    };
    return CSSViewEngineHooks;
  }();
  function _createCSSResource(address) {
    var _dec,
        _class;
    var ViewCSS = (_dec = (0, _aureliaTemplating.resource)(new CSSResource(address)), _dec(_class = function(_CSSViewEngineHooks) {
      _inherits(ViewCSS, _CSSViewEngineHooks);
      function ViewCSS() {
        _classCallCheck(this, ViewCSS);
        return _possibleConstructorReturn(this, _CSSViewEngineHooks.apply(this, arguments));
      }
      return ViewCSS;
    }(CSSViewEngineHooks)) || _class);
    return ViewCSS;
  }
});

})();
(function() {
var define = System.amdDefine;
define("npm:aurelia-templating-resources@1.0.0-beta.1.2.2/html-sanitizer.js", ["exports"], function(exports) {
  'use strict';
  Object.defineProperty(exports, "__esModule", {value: true});
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  var SCRIPT_REGEX = /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi;
  var HTMLSanitizer = exports.HTMLSanitizer = function() {
    function HTMLSanitizer() {
      _classCallCheck(this, HTMLSanitizer);
    }
    HTMLSanitizer.prototype.sanitize = function sanitize(input) {
      return input.replace(SCRIPT_REGEX, '');
    };
    return HTMLSanitizer;
  }();
});

})();
(function() {
var define = System.amdDefine;
define("npm:aurelia-templating-resources@1.0.0-beta.1.2.2/binding-mode-behaviors.js", ["exports", "aurelia-binding", "aurelia-metadata"], function(exports, _aureliaBinding, _aureliaMetadata) {
  'use strict';
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.TwoWayBindingBehavior = exports.OneWayBindingBehavior = exports.OneTimeBindingBehavior = undefined;
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  var _dec,
      _class,
      _dec2,
      _class2,
      _dec3,
      _class3;
  var modeBindingBehavior = {
    bind: function bind(binding, source, lookupFunctions) {
      binding.originalMode = binding.mode;
      binding.mode = this.mode;
    },
    unbind: function unbind(binding, source) {
      binding.mode = binding.originalMode;
      binding.originalMode = null;
    }
  };
  var OneTimeBindingBehavior = exports.OneTimeBindingBehavior = (_dec = (0, _aureliaMetadata.mixin)(modeBindingBehavior), _dec(_class = function OneTimeBindingBehavior() {
    _classCallCheck(this, OneTimeBindingBehavior);
    this.mode = _aureliaBinding.bindingMode.oneTime;
  }) || _class);
  var OneWayBindingBehavior = exports.OneWayBindingBehavior = (_dec2 = (0, _aureliaMetadata.mixin)(modeBindingBehavior), _dec2(_class2 = function OneWayBindingBehavior() {
    _classCallCheck(this, OneWayBindingBehavior);
    this.mode = _aureliaBinding.bindingMode.oneWay;
  }) || _class2);
  var TwoWayBindingBehavior = exports.TwoWayBindingBehavior = (_dec3 = (0, _aureliaMetadata.mixin)(modeBindingBehavior), _dec3(_class3 = function TwoWayBindingBehavior() {
    _classCallCheck(this, TwoWayBindingBehavior);
    this.mode = _aureliaBinding.bindingMode.twoWay;
  }) || _class3);
});

})();
(function() {
var define = System.amdDefine;
define("npm:aurelia-templating-resources@1.0.0-beta.1.2.2/throttle-binding-behavior.js", ["exports", "aurelia-binding"], function(exports, _aureliaBinding) {
  'use strict';
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.ThrottleBindingBehavior = undefined;
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function throttle(newValue) {
    var _this = this;
    var state = this.throttleState;
    var elapsed = +new Date() - state.last;
    if (elapsed >= state.delay) {
      clearTimeout(state.timeoutId);
      state.timeoutId = null;
      state.last = +new Date();
      this.throttledMethod(newValue);
      return;
    }
    state.newValue = newValue;
    if (state.timeoutId === null) {
      state.timeoutId = setTimeout(function() {
        state.timeoutId = null;
        state.last = +new Date();
        _this.throttledMethod(state.newValue);
      }, state.delay - elapsed);
    }
  }
  var ThrottleBindingBehavior = exports.ThrottleBindingBehavior = function() {
    function ThrottleBindingBehavior() {
      _classCallCheck(this, ThrottleBindingBehavior);
    }
    ThrottleBindingBehavior.prototype.bind = function bind(binding, source) {
      var delay = arguments.length <= 2 || arguments[2] === undefined ? 200 : arguments[2];
      var methodToThrottle = 'updateTarget';
      if (binding.callSource) {
        methodToThrottle = 'callSource';
      } else if (binding.updateSource && binding.mode === _aureliaBinding.bindingMode.twoWay) {
        methodToThrottle = 'updateSource';
      }
      binding.throttledMethod = binding[methodToThrottle];
      binding.throttledMethod.originalName = methodToThrottle;
      binding[methodToThrottle] = throttle;
      binding.throttleState = {
        delay: delay,
        last: 0,
        timeoutId: null
      };
    };
    ThrottleBindingBehavior.prototype.unbind = function unbind(binding, source) {
      var methodToRestore = binding.throttledMethod.originalName;
      binding[methodToRestore] = binding.throttledMethod;
      binding.throttledMethod = null;
      clearTimeout(binding.throttleState.timeoutId);
      binding.throttleState = null;
    };
    return ThrottleBindingBehavior;
  }();
});

})();
(function() {
var define = System.amdDefine;
define("npm:aurelia-templating-resources@1.0.0-beta.1.2.2/debounce-binding-behavior.js", ["exports", "aurelia-binding"], function(exports, _aureliaBinding) {
  'use strict';
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.DebounceBindingBehavior = undefined;
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function debounce(newValue) {
    var _this = this;
    var state = this.debounceState;
    if (state.immediate) {
      state.immediate = false;
      this.debouncedMethod(newValue);
      return;
    }
    clearTimeout(state.timeoutId);
    state.timeoutId = setTimeout(function() {
      return _this.debouncedMethod(newValue);
    }, state.delay);
  }
  var DebounceBindingBehavior = exports.DebounceBindingBehavior = function() {
    function DebounceBindingBehavior() {
      _classCallCheck(this, DebounceBindingBehavior);
    }
    DebounceBindingBehavior.prototype.bind = function bind(binding, source) {
      var delay = arguments.length <= 2 || arguments[2] === undefined ? 200 : arguments[2];
      var methodToDebounce = 'updateTarget';
      if (binding.callSource) {
        methodToDebounce = 'callSource';
      } else if (binding.updateSource && binding.mode === _aureliaBinding.bindingMode.twoWay) {
        methodToDebounce = 'updateSource';
      }
      binding.debouncedMethod = binding[methodToDebounce];
      binding.debouncedMethod.originalName = methodToDebounce;
      binding[methodToDebounce] = debounce;
      binding.debounceState = {
        delay: delay,
        timeoutId: null,
        immediate: methodToDebounce === 'updateTarget'
      };
    };
    DebounceBindingBehavior.prototype.unbind = function unbind(binding, source) {
      var methodToRestore = binding.debouncedMethod.originalName;
      binding[methodToRestore] = binding.debouncedMethod;
      binding.debouncedMethod = null;
      clearTimeout(binding.debounceState.timeoutId);
      binding.debounceState = null;
    };
    return DebounceBindingBehavior;
  }();
});

})();
(function() {
var define = System.amdDefine;
define("npm:aurelia-templating-resources@1.0.0-beta.1.2.2/signal-binding-behavior.js", ["exports", "./binding-signaler"], function(exports, _bindingSignaler) {
  'use strict';
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.SignalBindingBehavior = undefined;
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  var SignalBindingBehavior = exports.SignalBindingBehavior = function() {
    SignalBindingBehavior.inject = function inject() {
      return [_bindingSignaler.BindingSignaler];
    };
    function SignalBindingBehavior(bindingSignaler) {
      _classCallCheck(this, SignalBindingBehavior);
      this.signals = bindingSignaler.signals;
    }
    SignalBindingBehavior.prototype.bind = function bind(binding, source) {
      if (!binding.updateTarget) {
        throw new Error('Only property bindings and string interpolation bindings can be signaled.  Trigger, delegate and call bindings cannot be signaled.');
      }
      if (arguments.length === 3) {
        var name = arguments[2];
        var bindings = this.signals[name] || (this.signals[name] = []);
        bindings.push(binding);
        binding.signalName = name;
      } else if (arguments.length > 3) {
        var names = Array.prototype.slice.call(arguments, 2);
        var i = names.length;
        while (i--) {
          var _name = names[i];
          var _bindings = this.signals[_name] || (this.signals[_name] = []);
          _bindings.push(binding);
        }
        binding.signalName = names;
      } else {
        throw new Error('Signal name is required.');
      }
    };
    SignalBindingBehavior.prototype.unbind = function unbind(binding, source) {
      var name = binding.signalName;
      binding.signalName = null;
      if (Array.isArray(name)) {
        var names = name;
        var i = names.length;
        while (i--) {
          var n = names[i];
          var bindings = this.signals[n];
          bindings.splice(bindings.indexOf(binding), 1);
        }
      } else {
        var _bindings2 = this.signals[name];
        _bindings2.splice(_bindings2.indexOf(binding), 1);
      }
    };
    return SignalBindingBehavior;
  }();
});

})();
(function() {
var define = System.amdDefine;
define("npm:aurelia-templating-resources@1.0.0-beta.1.2.2/binding-signaler.js", ["exports", "aurelia-binding"], function(exports, _aureliaBinding) {
  'use strict';
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.BindingSignaler = undefined;
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  var BindingSignaler = exports.BindingSignaler = function() {
    function BindingSignaler() {
      _classCallCheck(this, BindingSignaler);
      this.signals = {};
    }
    BindingSignaler.prototype.signal = function signal(name) {
      var bindings = this.signals[name];
      if (!bindings) {
        return;
      }
      var i = bindings.length;
      while (i--) {
        bindings[i].call(_aureliaBinding.sourceContext);
      }
    };
    return BindingSignaler;
  }();
});

})();
(function() {
var define = System.amdDefine;
define("npm:aurelia-templating-resources@1.0.0-beta.1.2.2/update-trigger-binding-behavior.js", ["exports", "aurelia-binding"], function(exports, _aureliaBinding) {
  'use strict';
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.UpdateTriggerBindingBehavior = undefined;
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  var _class,
      _temp;
  var eventNamesRequired = 'The updateTrigger binding behavior requires at least one event name argument: eg <input value.bind="firstName & updateTrigger:\'blur\'">';
  var notApplicableMessage = 'The updateTrigger binding behavior can only be applied to two-way bindings on input/select elements.';
  var UpdateTriggerBindingBehavior = exports.UpdateTriggerBindingBehavior = (_temp = _class = function() {
    function UpdateTriggerBindingBehavior(eventManager) {
      _classCallCheck(this, UpdateTriggerBindingBehavior);
      this.eventManager = eventManager;
    }
    UpdateTriggerBindingBehavior.prototype.bind = function bind(binding, source) {
      for (var _len = arguments.length,
          events = Array(_len > 2 ? _len - 2 : 0),
          _key = 2; _key < _len; _key++) {
        events[_key - 2] = arguments[_key];
      }
      if (events.length === 0) {
        throw new Error(eventNamesRequired);
      }
      if (binding.mode !== _aureliaBinding.bindingMode.twoWay) {
        throw new Error(notApplicableMessage);
      }
      var targetObserver = binding.observerLocator.getObserver(binding.target, binding.targetProperty);
      if (!targetObserver.handler) {
        throw new Error(notApplicableMessage);
      }
      binding.targetObserver = targetObserver;
      targetObserver.originalHandler = binding.targetObserver.handler;
      var handler = this.eventManager.createElementHandler(events);
      targetObserver.handler = handler;
    };
    UpdateTriggerBindingBehavior.prototype.unbind = function unbind(binding, source) {
      binding.targetObserver.handler = binding.targetObserver.originalHandler;
      binding.targetObserver.originalHandler = null;
    };
    return UpdateTriggerBindingBehavior;
  }(), _class.inject = [_aureliaBinding.EventManager], _temp);
});

})();
(function() {
var define = System.amdDefine;
define("npm:aurelia-templating-resources@1.0.0-beta.1.2.2/abstract-repeater.js", ["exports"], function(exports) {
  'use strict';
  Object.defineProperty(exports, "__esModule", {value: true});
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  var AbstractRepeater = exports.AbstractRepeater = function() {
    function AbstractRepeater(options) {
      _classCallCheck(this, AbstractRepeater);
      Object.assign(this, {
        local: 'items',
        viewsRequireLifecycle: true
      }, options);
    }
    AbstractRepeater.prototype.viewCount = function viewCount() {
      throw new Error('subclass must implement `viewCount`');
    };
    AbstractRepeater.prototype.views = function views() {
      throw new Error('subclass must implement `views`');
    };
    AbstractRepeater.prototype.view = function view(index) {
      throw new Error('subclass must implement `view`');
    };
    AbstractRepeater.prototype.addView = function addView(bindingContext, overrideContext) {
      throw new Error('subclass must implement `addView`');
    };
    AbstractRepeater.prototype.insertView = function insertView(index, bindingContext, overrideContext) {
      throw new Error('subclass must implement `insertView`');
    };
    AbstractRepeater.prototype.removeAllViews = function removeAllViews(returnToCache, skipAnimation) {
      throw new Error('subclass must implement `removeAllViews`');
    };
    AbstractRepeater.prototype.removeView = function removeView(index, returnToCache, skipAnimation) {
      throw new Error('subclass must implement `removeView`');
    };
    AbstractRepeater.prototype.updateBindings = function updateBindings(view) {
      throw new Error('subclass must implement `updateBindings`');
    };
    return AbstractRepeater;
  }();
});

})();
(function() {
var define = System.amdDefine;
define("npm:aurelia-templating-resources@1.0.0-beta.1.2.2/repeat-strategy-locator.js", ["exports", "./null-repeat-strategy", "./array-repeat-strategy", "./map-repeat-strategy", "./set-repeat-strategy", "./number-repeat-strategy"], function(exports, _nullRepeatStrategy, _arrayRepeatStrategy, _mapRepeatStrategy, _setRepeatStrategy, _numberRepeatStrategy) {
  'use strict';
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.RepeatStrategyLocator = undefined;
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  var RepeatStrategyLocator = exports.RepeatStrategyLocator = function() {
    function RepeatStrategyLocator() {
      _classCallCheck(this, RepeatStrategyLocator);
      this.matchers = [];
      this.strategies = [];
      this.addStrategy(function(items) {
        return items === null || items === undefined;
      }, new _nullRepeatStrategy.NullRepeatStrategy());
      this.addStrategy(function(items) {
        return items instanceof Array;
      }, new _arrayRepeatStrategy.ArrayRepeatStrategy());
      this.addStrategy(function(items) {
        return items instanceof Map;
      }, new _mapRepeatStrategy.MapRepeatStrategy());
      this.addStrategy(function(items) {
        return items instanceof Set;
      }, new _setRepeatStrategy.SetRepeatStrategy());
      this.addStrategy(function(items) {
        return typeof items === 'number';
      }, new _numberRepeatStrategy.NumberRepeatStrategy());
    }
    RepeatStrategyLocator.prototype.addStrategy = function addStrategy(matcher, strategy) {
      this.matchers.push(matcher);
      this.strategies.push(strategy);
    };
    RepeatStrategyLocator.prototype.getStrategy = function getStrategy(items) {
      var matchers = this.matchers;
      for (var i = 0,
          ii = matchers.length; i < ii; ++i) {
        if (matchers[i](items)) {
          return this.strategies[i];
        }
      }
      return null;
    };
    return RepeatStrategyLocator;
  }();
});

})();
(function() {
var define = System.amdDefine;
define("npm:aurelia-templating-resources@1.0.0-beta.1.2.2/dynamic-element.js", ["exports", "aurelia-templating"], function(exports, _aureliaTemplating) {
  'use strict';
  Object.defineProperty(exports, "__esModule", {value: true});
  exports._createDynamicElement = _createDynamicElement;
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _createDynamicElement(name, viewUrl, bindableNames) {
    var _dec,
        _dec2,
        _class;
    var DynamicElement = (_dec = (0, _aureliaTemplating.customElement)(name), _dec2 = (0, _aureliaTemplating.useView)(viewUrl), _dec(_class = _dec2(_class = function() {
      function DynamicElement() {
        _classCallCheck(this, DynamicElement);
      }
      DynamicElement.prototype.bind = function bind(bindingContext) {
        this.$parent = bindingContext;
      };
      return DynamicElement;
    }()) || _class) || _class);
    for (var i = 0,
        ii = bindableNames.length; i < ii; ++i) {
      (0, _aureliaTemplating.bindable)(bindableNames[i])(DynamicElement);
    }
    return DynamicElement;
  }
});

})();
(function() {
var define = System.amdDefine;
define("npm:aurelia-templating-resources@1.0.0-beta.1.2.2/html-resource-plugin.js", ["exports", "aurelia-templating", "./dynamic-element"], function(exports, _aureliaTemplating, _dynamicElement) {
  'use strict';
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.getElementName = getElementName;
  exports.configure = configure;
  function getElementName(address) {
    return (/([^\/^\?]+)\.html/i.exec(address)[1].toLowerCase());
  }
  function configure(config) {
    var viewEngine = config.container.get(_aureliaTemplating.ViewEngine);
    var loader = config.aurelia.loader;
    viewEngine.addResourcePlugin('.html', {'fetch': function fetch(address) {
        return loader.loadTemplate(address).then(function(registryEntry) {
          var _ref;
          var bindable = registryEntry.template.getAttribute('bindable');
          var elementName = getElementName(address);
          if (bindable) {
            bindable = bindable.split(',').map(function(x) {
              return x.trim();
            });
            registryEntry.template.removeAttribute('bindable');
          } else {
            bindable = [];
          }
          return _ref = {}, _ref[elementName] = (0, _dynamicElement._createDynamicElement)(elementName, address, bindable), _ref;
        });
      }});
  }
});

})();
(function() {
var define = System.amdDefine;
define("npm:aurelia-templating-resources@1.0.0-beta.1.2.2/null-repeat-strategy.js", ["exports"], function(exports) {
  "use strict";
  Object.defineProperty(exports, "__esModule", {value: true});
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  var NullRepeatStrategy = exports.NullRepeatStrategy = function() {
    function NullRepeatStrategy() {
      _classCallCheck(this, NullRepeatStrategy);
    }
    NullRepeatStrategy.prototype.instanceChanged = function instanceChanged(repeat, items) {
      repeat.removeAllViews(true);
    };
    NullRepeatStrategy.prototype.getCollectionObserver = function getCollectionObserver(observerLocator, items) {};
    return NullRepeatStrategy;
  }();
});

})();
(function() {
var define = System.amdDefine;
define("npm:aurelia-templating-resources@1.0.0-beta.1.2.2/array-repeat-strategy.js", ["exports", "./repeat-utilities", "aurelia-binding"], function(exports, _repeatUtilities, _aureliaBinding) {
  'use strict';
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.ArrayRepeatStrategy = undefined;
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  var ArrayRepeatStrategy = exports.ArrayRepeatStrategy = function() {
    function ArrayRepeatStrategy() {
      _classCallCheck(this, ArrayRepeatStrategy);
    }
    ArrayRepeatStrategy.prototype.getCollectionObserver = function getCollectionObserver(observerLocator, items) {
      return observerLocator.getArrayObserver(items);
    };
    ArrayRepeatStrategy.prototype.instanceChanged = function instanceChanged(repeat, items) {
      var _this = this;
      if (repeat.viewsRequireLifecycle) {
        var removePromise = repeat.removeAllViews(true);
        if (removePromise instanceof Promise) {
          removePromise.then(function() {
            return _this._standardProcessInstanceChanged(repeat, items);
          });
          return;
        }
        this._standardProcessInstanceChanged(repeat, items);
        return;
      }
      this._inPlaceProcessItems(repeat, items);
    };
    ArrayRepeatStrategy.prototype._standardProcessInstanceChanged = function _standardProcessInstanceChanged(repeat, items) {
      for (var i = 0,
          ii = items.length; i < ii; i++) {
        var overrideContext = (0, _repeatUtilities.createFullOverrideContext)(repeat, items[i], i, ii);
        repeat.addView(overrideContext.bindingContext, overrideContext);
      }
    };
    ArrayRepeatStrategy.prototype._inPlaceProcessItems = function _inPlaceProcessItems(repeat, items) {
      var itemsLength = items.length;
      var viewsLength = repeat.viewCount();
      while (viewsLength > itemsLength) {
        viewsLength--;
        repeat.removeView(viewsLength, true);
      }
      var local = repeat.local;
      for (var i = 0; i < viewsLength; i++) {
        var view = repeat.view(i);
        var last = i === itemsLength - 1;
        var middle = i !== 0 && !last;
        if (view.bindingContext[local] === items[i] && view.overrideContext.$middle === middle && view.overrideContext.$last === last) {
          continue;
        }
        view.bindingContext[local] = items[i];
        view.overrideContext.$middle = middle;
        view.overrideContext.$last = last;
        repeat.updateBindings(view);
      }
      for (var _i = viewsLength; _i < itemsLength; _i++) {
        var overrideContext = (0, _repeatUtilities.createFullOverrideContext)(repeat, items[_i], _i, itemsLength);
        repeat.addView(overrideContext.bindingContext, overrideContext);
      }
    };
    ArrayRepeatStrategy.prototype.instanceMutated = function instanceMutated(repeat, array, splices) {
      if (repeat.viewsRequireLifecycle) {
        this._standardProcessInstanceMutated(repeat, array, splices);
        return;
      }
      this._inPlaceProcessItems(repeat, array);
    };
    ArrayRepeatStrategy.prototype._standardProcessInstanceMutated = function _standardProcessInstanceMutated(repeat, array, splices) {
      var _this2 = this;
      if (repeat.__queuedSplices) {
        for (var i = 0,
            ii = splices.length; i < ii; ++i) {
          var _splices$i = splices[i];
          var index = _splices$i.index;
          var removed = _splices$i.removed;
          var addedCount = _splices$i.addedCount;
          (0, _aureliaBinding.mergeSplice)(repeat.__queuedSplices, index, removed, addedCount);
        }
        repeat.__array = array.slice(0);
        return;
      }
      var maybePromise = this._runSplices(repeat, array.slice(0), splices);
      if (maybePromise instanceof Promise) {
        (function() {
          var queuedSplices = repeat.__queuedSplices = [];
          var runQueuedSplices = function runQueuedSplices() {
            if (!queuedSplices.length) {
              repeat.__queuedSplices = undefined;
              repeat.__array = undefined;
              return;
            }
            var nextPromise = _this2._runSplices(repeat, repeat.__array, queuedSplices) || Promise.resolve();
            queuedSplices = repeat.__queuedSplices = [];
            nextPromise.then(runQueuedSplices);
          };
          maybePromise.then(runQueuedSplices);
        })();
      }
    };
    ArrayRepeatStrategy.prototype._runSplices = function _runSplices(repeat, array, splices) {
      var _this3 = this;
      var removeDelta = 0;
      var rmPromises = [];
      for (var i = 0,
          ii = splices.length; i < ii; ++i) {
        var splice = splices[i];
        var removed = splice.removed;
        for (var j = 0,
            jj = removed.length; j < jj; ++j) {
          var viewOrPromise = repeat.removeView(splice.index + removeDelta + rmPromises.length, true);
          if (viewOrPromise instanceof Promise) {
            rmPromises.push(viewOrPromise);
          }
        }
        removeDelta -= splice.addedCount;
      }
      if (rmPromises.length > 0) {
        return Promise.all(rmPromises).then(function() {
          var spliceIndexLow = _this3._handleAddedSplices(repeat, array, splices);
          (0, _repeatUtilities.updateOverrideContexts)(repeat.views(), spliceIndexLow);
        });
      }
      var spliceIndexLow = this._handleAddedSplices(repeat, array, splices);
      (0, _repeatUtilities.updateOverrideContexts)(repeat.views(), spliceIndexLow);
    };
    ArrayRepeatStrategy.prototype._handleAddedSplices = function _handleAddedSplices(repeat, array, splices) {
      var spliceIndex = void 0;
      var spliceIndexLow = void 0;
      var arrayLength = array.length;
      for (var i = 0,
          ii = splices.length; i < ii; ++i) {
        var splice = splices[i];
        var addIndex = spliceIndex = splice.index;
        var end = splice.index + splice.addedCount;
        if (typeof spliceIndexLow === 'undefined' || spliceIndexLow === null || spliceIndexLow > splice.index) {
          spliceIndexLow = spliceIndex;
        }
        for (; addIndex < end; ++addIndex) {
          var overrideContext = (0, _repeatUtilities.createFullOverrideContext)(repeat, array[addIndex], addIndex, arrayLength);
          repeat.insertView(addIndex, overrideContext.bindingContext, overrideContext);
        }
      }
      return spliceIndexLow;
    };
    return ArrayRepeatStrategy;
  }();
});

})();
(function() {
var define = System.amdDefine;
define("npm:aurelia-templating-resources@1.0.0-beta.1.2.2/map-repeat-strategy.js", ["exports", "./repeat-utilities"], function(exports, _repeatUtilities) {
  'use strict';
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.MapRepeatStrategy = undefined;
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  var MapRepeatStrategy = exports.MapRepeatStrategy = function() {
    function MapRepeatStrategy() {
      _classCallCheck(this, MapRepeatStrategy);
    }
    MapRepeatStrategy.prototype.getCollectionObserver = function getCollectionObserver(observerLocator, items) {
      return observerLocator.getMapObserver(items);
    };
    MapRepeatStrategy.prototype.instanceChanged = function instanceChanged(repeat, items) {
      var _this = this;
      var removePromise = repeat.removeAllViews(true);
      if (removePromise instanceof Promise) {
        removePromise.then(function() {
          return _this._standardProcessItems(repeat, items);
        });
        return;
      }
      this._standardProcessItems(repeat, items);
    };
    MapRepeatStrategy.prototype._standardProcessItems = function _standardProcessItems(repeat, items) {
      var index = 0;
      var overrideContext = void 0;
      items.forEach(function(value, key) {
        overrideContext = (0, _repeatUtilities.createFullOverrideContext)(repeat, value, index, items.size, key);
        repeat.addView(overrideContext.bindingContext, overrideContext);
        ++index;
      });
    };
    MapRepeatStrategy.prototype.instanceMutated = function instanceMutated(repeat, map, records) {
      var key = void 0;
      var i = void 0;
      var ii = void 0;
      var overrideContext = void 0;
      var removeIndex = void 0;
      var record = void 0;
      var rmPromises = [];
      var viewOrPromise = void 0;
      for (i = 0, ii = records.length; i < ii; ++i) {
        record = records[i];
        key = record.key;
        switch (record.type) {
          case 'update':
            removeIndex = this._getViewIndexByKey(repeat, key);
            viewOrPromise = repeat.removeView(removeIndex, true);
            if (viewOrPromise instanceof Promise) {
              rmPromises.push(viewOrPromise);
            }
            overrideContext = (0, _repeatUtilities.createFullOverrideContext)(repeat, map.get(key), removeIndex, map.size, key);
            repeat.insertView(removeIndex, overrideContext.bindingContext, overrideContext);
            break;
          case 'add':
            overrideContext = (0, _repeatUtilities.createFullOverrideContext)(repeat, map.get(key), map.size - 1, map.size, key);
            repeat.insertView(map.size - 1, overrideContext.bindingContext, overrideContext);
            break;
          case 'delete':
            if (record.oldValue === undefined) {
              return;
            }
            removeIndex = this._getViewIndexByKey(repeat, key);
            viewOrPromise = repeat.removeView(removeIndex, true);
            if (viewOrPromise instanceof Promise) {
              rmPromises.push(viewOrPromise);
            }
            break;
          case 'clear':
            repeat.removeAllViews(true);
            break;
          default:
            continue;
        }
      }
      if (rmPromises.length > 0) {
        Promise.all(rmPromises).then(function() {
          (0, _repeatUtilities.updateOverrideContexts)(repeat.views(), 0);
        });
      } else {
        (0, _repeatUtilities.updateOverrideContexts)(repeat.views(), 0);
      }
    };
    MapRepeatStrategy.prototype._getViewIndexByKey = function _getViewIndexByKey(repeat, key) {
      var i = void 0;
      var ii = void 0;
      var child = void 0;
      for (i = 0, ii = repeat.viewCount(); i < ii; ++i) {
        child = repeat.view(i);
        if (child.bindingContext[repeat.key] === key) {
          return i;
        }
      }
    };
    return MapRepeatStrategy;
  }();
});

})();
(function() {
var define = System.amdDefine;
define("npm:aurelia-templating-resources@1.0.0-beta.1.2.2/set-repeat-strategy.js", ["exports", "./repeat-utilities"], function(exports, _repeatUtilities) {
  'use strict';
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.SetRepeatStrategy = undefined;
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  var SetRepeatStrategy = exports.SetRepeatStrategy = function() {
    function SetRepeatStrategy() {
      _classCallCheck(this, SetRepeatStrategy);
    }
    SetRepeatStrategy.prototype.getCollectionObserver = function getCollectionObserver(observerLocator, items) {
      return observerLocator.getSetObserver(items);
    };
    SetRepeatStrategy.prototype.instanceChanged = function instanceChanged(repeat, items) {
      var _this = this;
      var removePromise = repeat.removeAllViews(true);
      if (removePromise instanceof Promise) {
        removePromise.then(function() {
          return _this._standardProcessItems(repeat, items);
        });
        return;
      }
      this._standardProcessItems(repeat, items);
    };
    SetRepeatStrategy.prototype._standardProcessItems = function _standardProcessItems(repeat, items) {
      var index = 0;
      var overrideContext = void 0;
      items.forEach(function(value) {
        overrideContext = (0, _repeatUtilities.createFullOverrideContext)(repeat, value, index, items.size);
        repeat.addView(overrideContext.bindingContext, overrideContext);
        ++index;
      });
    };
    SetRepeatStrategy.prototype.instanceMutated = function instanceMutated(repeat, set, records) {
      var value = void 0;
      var i = void 0;
      var ii = void 0;
      var overrideContext = void 0;
      var removeIndex = void 0;
      var record = void 0;
      var rmPromises = [];
      var viewOrPromise = void 0;
      for (i = 0, ii = records.length; i < ii; ++i) {
        record = records[i];
        value = record.value;
        switch (record.type) {
          case 'add':
            overrideContext = (0, _repeatUtilities.createFullOverrideContext)(repeat, value, set.size - 1, set.size);
            repeat.insertView(set.size - 1, overrideContext.bindingContext, overrideContext);
            break;
          case 'delete':
            removeIndex = this._getViewIndexByValue(repeat, value);
            viewOrPromise = repeat.removeView(removeIndex, true);
            if (viewOrPromise instanceof Promise) {
              rmPromises.push(viewOrPromise);
            }
            break;
          case 'clear':
            repeat.removeAllViews(true);
            break;
          default:
            continue;
        }
      }
      if (rmPromises.length > 0) {
        Promise.all(rmPromises).then(function() {
          (0, _repeatUtilities.updateOverrideContexts)(repeat.views(), 0);
        });
      } else {
        (0, _repeatUtilities.updateOverrideContexts)(repeat.views(), 0);
      }
    };
    SetRepeatStrategy.prototype._getViewIndexByValue = function _getViewIndexByValue(repeat, value) {
      var i = void 0;
      var ii = void 0;
      var child = void 0;
      for (i = 0, ii = repeat.viewCount(); i < ii; ++i) {
        child = repeat.view(i);
        if (child.bindingContext[repeat.local] === value) {
          return i;
        }
      }
    };
    return SetRepeatStrategy;
  }();
});

})();
(function() {
var define = System.amdDefine;
define("npm:aurelia-templating-resources@1.0.0-beta.1.2.2/repeat-utilities.js", ["exports", "aurelia-binding"], function(exports, _aureliaBinding) {
  'use strict';
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.updateOverrideContexts = updateOverrideContexts;
  exports.createFullOverrideContext = createFullOverrideContext;
  exports.updateOverrideContext = updateOverrideContext;
  exports.getItemsSourceExpression = getItemsSourceExpression;
  exports.unwrapExpression = unwrapExpression;
  exports.isOneTime = isOneTime;
  exports.updateOneTimeBinding = updateOneTimeBinding;
  var oneTime = _aureliaBinding.bindingMode.oneTime;
  function updateOverrideContexts(views, startIndex) {
    var length = views.length;
    if (startIndex > 0) {
      startIndex = startIndex - 1;
    }
    for (; startIndex < length; ++startIndex) {
      updateOverrideContext(views[startIndex].overrideContext, startIndex, length);
    }
  }
  function createFullOverrideContext(repeat, data, index, length, key) {
    var bindingContext = {};
    var overrideContext = (0, _aureliaBinding.createOverrideContext)(bindingContext, repeat.scope.overrideContext);
    if (typeof key !== 'undefined') {
      bindingContext[repeat.key] = key;
      bindingContext[repeat.value] = data;
    } else {
      bindingContext[repeat.local] = data;
    }
    updateOverrideContext(overrideContext, index, length);
    return overrideContext;
  }
  function updateOverrideContext(overrideContext, index, length) {
    var first = index === 0;
    var last = index === length - 1;
    var even = index % 2 === 0;
    overrideContext.$index = index;
    overrideContext.$first = first;
    overrideContext.$last = last;
    overrideContext.$middle = !(first || last);
    overrideContext.$odd = !even;
    overrideContext.$even = even;
  }
  function getItemsSourceExpression(instruction, attrName) {
    return instruction.behaviorInstructions.filter(function(bi) {
      return bi.originalAttrName === attrName;
    })[0].attributes.items.sourceExpression;
  }
  function unwrapExpression(expression) {
    var unwrapped = false;
    while (expression instanceof _aureliaBinding.BindingBehavior) {
      expression = expression.expression;
    }
    while (expression instanceof _aureliaBinding.ValueConverter) {
      expression = expression.expression;
      unwrapped = true;
    }
    return unwrapped ? expression : null;
  }
  function isOneTime(expression) {
    while (expression instanceof _aureliaBinding.BindingBehavior) {
      if (expression.name === 'oneTime') {
        return true;
      }
      expression = expression.expression;
    }
    return false;
  }
  function updateOneTimeBinding(binding) {
    if (binding.call && binding.mode === oneTime) {
      binding.call(_aureliaBinding.sourceContext);
    } else if (binding.updateOneTimeBindings) {
      binding.updateOneTimeBindings();
    }
  }
});

})();
(function() {
var define = System.amdDefine;
define("npm:aurelia-templating-resources@1.0.0-beta.1.2.2/number-repeat-strategy.js", ["exports", "./repeat-utilities"], function(exports, _repeatUtilities) {
  'use strict';
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.NumberRepeatStrategy = undefined;
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  var NumberRepeatStrategy = exports.NumberRepeatStrategy = function() {
    function NumberRepeatStrategy() {
      _classCallCheck(this, NumberRepeatStrategy);
    }
    NumberRepeatStrategy.prototype.getCollectionObserver = function getCollectionObserver() {
      return null;
    };
    NumberRepeatStrategy.prototype.instanceChanged = function instanceChanged(repeat, value) {
      var _this = this;
      var removePromise = repeat.removeAllViews(true);
      if (removePromise instanceof Promise) {
        removePromise.then(function() {
          return _this._standardProcessItems(repeat, value);
        });
        return;
      }
      this._standardProcessItems(repeat, value);
    };
    NumberRepeatStrategy.prototype._standardProcessItems = function _standardProcessItems(repeat, value) {
      var childrenLength = repeat.viewCount();
      var i = void 0;
      var ii = void 0;
      var overrideContext = void 0;
      var viewsToRemove = void 0;
      value = Math.floor(value);
      viewsToRemove = childrenLength - value;
      if (viewsToRemove > 0) {
        if (viewsToRemove > childrenLength) {
          viewsToRemove = childrenLength;
        }
        for (i = 0, ii = viewsToRemove; i < ii; ++i) {
          repeat.removeView(childrenLength - (i + 1), true);
        }
        return;
      }
      for (i = childrenLength, ii = value; i < ii; ++i) {
        overrideContext = (0, _repeatUtilities.createFullOverrideContext)(repeat, i, i, ii);
        repeat.addView(overrideContext.bindingContext, overrideContext);
      }
      (0, _repeatUtilities.updateOverrideContexts)(repeat.views(), 0);
    };
    return NumberRepeatStrategy;
  }();
});

})();
(function() {
var define = System.amdDefine;
define("npm:aurelia-templating-resources@1.0.0-beta.1.2.2/aurelia-templating-resources.js", ["exports", "./compose", "./if", "./with", "./repeat", "./show", "./hide", "./sanitize-html", "./replaceable", "./focus", "./compile-spy", "./view-spy", "aurelia-templating", "./css-resource", "aurelia-pal", "./html-sanitizer", "./binding-mode-behaviors", "./throttle-binding-behavior", "./debounce-binding-behavior", "./signal-binding-behavior", "./binding-signaler", "./update-trigger-binding-behavior", "./abstract-repeater", "./repeat-strategy-locator", "./html-resource-plugin", "./null-repeat-strategy", "./array-repeat-strategy", "./map-repeat-strategy", "./set-repeat-strategy", "./number-repeat-strategy"], function(exports, _compose, _if, _with, _repeat, _show, _hide, _sanitizeHtml, _replaceable, _focus, _compileSpy, _viewSpy, _aureliaTemplating, _cssResource, _aureliaPal, _htmlSanitizer, _bindingModeBehaviors, _throttleBindingBehavior, _debounceBindingBehavior, _signalBindingBehavior, _bindingSignaler, _updateTriggerBindingBehavior, _abstractRepeater, _repeatStrategyLocator, _htmlResourcePlugin, _nullRepeatStrategy, _arrayRepeatStrategy, _mapRepeatStrategy, _setRepeatStrategy, _numberRepeatStrategy) {
  'use strict';
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.NumberRepeatStrategy = exports.SetRepeatStrategy = exports.MapRepeatStrategy = exports.ArrayRepeatStrategy = exports.NullRepeatStrategy = exports.RepeatStrategyLocator = exports.AbstractRepeater = exports.UpdateTriggerBindingBehavior = exports.BindingSignaler = exports.SignalBindingBehavior = exports.DebounceBindingBehavior = exports.ThrottleBindingBehavior = exports.TwoWayBindingBehavior = exports.OneWayBindingBehavior = exports.OneTimeBindingBehavior = exports.configure = exports.ViewSpy = exports.CompileSpy = exports.Focus = exports.Replaceable = exports.SanitizeHTMLValueConverter = exports.HTMLSanitizer = exports.Hide = exports.Show = exports.Repeat = exports.With = exports.If = exports.Compose = undefined;
  function configure(config) {
    if (_aureliaPal.FEATURE.shadowDOM) {
      _aureliaPal.DOM.injectStyles('body /deep/ .aurelia-hide { display:none !important; }');
    } else {
      _aureliaPal.DOM.injectStyles('.aurelia-hide { display:none !important; }');
    }
    config.globalResources('./compose', './if', './with', './repeat', './show', './hide', './replaceable', './sanitize-html', './focus', './compile-spy', './view-spy', './binding-mode-behaviors', './throttle-binding-behavior', './debounce-binding-behavior', './signal-binding-behavior', './update-trigger-binding-behavior');
    (0, _htmlResourcePlugin.configure)(config);
    var viewEngine = config.container.get(_aureliaTemplating.ViewEngine);
    viewEngine.addResourcePlugin('.css', {'fetch': function fetch(address) {
        var _ref;
        return _ref = {}, _ref[address] = (0, _cssResource._createCSSResource)(address), _ref;
      }});
  }
  exports.Compose = _compose.Compose;
  exports.If = _if.If;
  exports.With = _with.With;
  exports.Repeat = _repeat.Repeat;
  exports.Show = _show.Show;
  exports.Hide = _hide.Hide;
  exports.HTMLSanitizer = _htmlSanitizer.HTMLSanitizer;
  exports.SanitizeHTMLValueConverter = _sanitizeHtml.SanitizeHTMLValueConverter;
  exports.Replaceable = _replaceable.Replaceable;
  exports.Focus = _focus.Focus;
  exports.CompileSpy = _compileSpy.CompileSpy;
  exports.ViewSpy = _viewSpy.ViewSpy;
  exports.configure = configure;
  exports.OneTimeBindingBehavior = _bindingModeBehaviors.OneTimeBindingBehavior;
  exports.OneWayBindingBehavior = _bindingModeBehaviors.OneWayBindingBehavior;
  exports.TwoWayBindingBehavior = _bindingModeBehaviors.TwoWayBindingBehavior;
  exports.ThrottleBindingBehavior = _throttleBindingBehavior.ThrottleBindingBehavior;
  exports.DebounceBindingBehavior = _debounceBindingBehavior.DebounceBindingBehavior;
  exports.SignalBindingBehavior = _signalBindingBehavior.SignalBindingBehavior;
  exports.BindingSignaler = _bindingSignaler.BindingSignaler;
  exports.UpdateTriggerBindingBehavior = _updateTriggerBindingBehavior.UpdateTriggerBindingBehavior;
  exports.AbstractRepeater = _abstractRepeater.AbstractRepeater;
  exports.RepeatStrategyLocator = _repeatStrategyLocator.RepeatStrategyLocator;
  exports.NullRepeatStrategy = _nullRepeatStrategy.NullRepeatStrategy;
  exports.ArrayRepeatStrategy = _arrayRepeatStrategy.ArrayRepeatStrategy;
  exports.MapRepeatStrategy = _mapRepeatStrategy.MapRepeatStrategy;
  exports.SetRepeatStrategy = _setRepeatStrategy.SetRepeatStrategy;
  exports.NumberRepeatStrategy = _numberRepeatStrategy.NumberRepeatStrategy;
});

})();
(function() {
var define = System.amdDefine;
define("npm:aurelia-templating-resources@1.0.0-beta.1.2.2.js", ["npm:aurelia-templating-resources@1.0.0-beta.1.2.2/aurelia-templating-resources"], function(main) {
  return main;
});

})();
(function() {
var define = System.amdDefine;
define("npm:aurelia-templating-router@1.0.0-beta.1.2.0/route-loader.js", ["exports", "aurelia-dependency-injection", "aurelia-templating", "aurelia-router", "aurelia-path", "aurelia-metadata"], function(exports, _aureliaDependencyInjection, _aureliaTemplating, _aureliaRouter, _aureliaPath, _aureliaMetadata) {
  'use strict';
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.TemplatingRouteLoader = undefined;
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }
  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }});
    if (superClass)
      Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }
  var _dec,
      _class;
  var TemplatingRouteLoader = exports.TemplatingRouteLoader = (_dec = (0, _aureliaDependencyInjection.inject)(_aureliaTemplating.CompositionEngine), _dec(_class = function(_RouteLoader) {
    _inherits(TemplatingRouteLoader, _RouteLoader);
    function TemplatingRouteLoader(compositionEngine) {
      _classCallCheck(this, TemplatingRouteLoader);
      var _this = _possibleConstructorReturn(this, _RouteLoader.call(this));
      _this.compositionEngine = compositionEngine;
      return _this;
    }
    TemplatingRouteLoader.prototype.loadRoute = function loadRoute(router, config) {
      var childContainer = router.container.createChild();
      var instruction = {
        viewModel: (0, _aureliaPath.relativeToFile)(config.moduleId, _aureliaMetadata.Origin.get(router.container.viewModel.constructor).moduleId),
        childContainer: childContainer,
        view: config.view || config.viewStrategy,
        router: router
      };
      childContainer.getChildRouter = function() {
        var childRouter = void 0;
        childContainer.registerHandler(_aureliaRouter.Router, function(c) {
          return childRouter || (childRouter = router.createChild(childContainer));
        });
        return childContainer.get(_aureliaRouter.Router);
      };
      return this.compositionEngine.ensureViewModel(instruction);
    };
    return TemplatingRouteLoader;
  }(_aureliaRouter.RouteLoader)) || _class);
});

})();
(function() {
var define = System.amdDefine;
define("npm:aurelia-templating-router@1.0.0-beta.1.2.0/router-view.js", ["exports", "aurelia-dependency-injection", "aurelia-templating", "aurelia-router", "aurelia-metadata", "aurelia-pal"], function(exports, _aureliaDependencyInjection, _aureliaTemplating, _aureliaRouter, _aureliaMetadata, _aureliaPal) {
  'use strict';
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.RouterView = undefined;
  function _initDefineProp(target, property, descriptor, context) {
    if (!descriptor)
      return;
    Object.defineProperty(target, property, {
      enumerable: descriptor.enumerable,
      configurable: descriptor.configurable,
      writable: descriptor.writable,
      value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
    });
  }
  function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
    var desc = {};
    Object['ke' + 'ys'](descriptor).forEach(function(key) {
      desc[key] = descriptor[key];
    });
    desc.enumerable = !!desc.enumerable;
    desc.configurable = !!desc.configurable;
    if ('value' in desc || desc.initializer) {
      desc.writable = true;
    }
    desc = decorators.slice().reverse().reduce(function(desc, decorator) {
      return decorator(target, property, desc) || desc;
    }, desc);
    if (context && desc.initializer !== void 0) {
      desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
      desc.initializer = undefined;
    }
    if (desc.initializer === void 0) {
      Object['define' + 'Property'](target, property, desc);
      desc = null;
    }
    return desc;
  }
  function _initializerWarningHelper(descriptor, context) {
    throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
  }
  var _dec,
      _dec2,
      _class,
      _desc,
      _value,
      _class2,
      _descriptor;
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  var SwapStrategies = function() {
    function SwapStrategies() {
      _classCallCheck(this, SwapStrategies);
    }
    SwapStrategies.prototype.before = function before(viewSlot, previousView, callback) {
      var promise = Promise.resolve(callback());
      if (previousView !== undefined) {
        return promise.then(function() {
          return viewSlot.remove(previousView, true);
        });
      }
      return promise;
    };
    SwapStrategies.prototype.with = function _with(viewSlot, previousView, callback) {
      var promise = Promise.resolve(callback());
      if (previousView !== undefined) {
        return Promise.all([viewSlot.remove(previousView, true), promise]);
      }
      return promise;
    };
    SwapStrategies.prototype.after = function after(viewSlot, previousView, callback) {
      return Promise.resolve(viewSlot.removeAll(true)).then(callback);
    };
    return SwapStrategies;
  }();
  var swapStrategies = new SwapStrategies();
  var RouterView = exports.RouterView = (_dec = (0, _aureliaTemplating.customElement)('router-view'), _dec2 = (0, _aureliaDependencyInjection.inject)(_aureliaPal.DOM.Element, _aureliaDependencyInjection.Container, _aureliaTemplating.ViewSlot, _aureliaRouter.Router, _aureliaTemplating.ViewLocator, _aureliaTemplating.CompositionTransaction), _dec(_class = (0, _aureliaTemplating.noView)(_class = _dec2(_class = (_class2 = function() {
    function RouterView(element, container, viewSlot, router, viewLocator, compositionTransaction) {
      _classCallCheck(this, RouterView);
      _initDefineProp(this, 'swapOrder', _descriptor, this);
      this.element = element;
      this.container = container;
      this.viewSlot = viewSlot;
      this.router = router;
      this.viewLocator = viewLocator;
      this.compositionTransaction = compositionTransaction;
      this.router.registerViewPort(this, this.element.getAttribute('name'));
      if (!('initialComposition' in compositionTransaction)) {
        compositionTransaction.initialComposition = true;
        this.compositionTransactionNotifier = compositionTransaction.enlist();
      }
    }
    RouterView.prototype.created = function created(owningView) {
      this.owningView = owningView;
    };
    RouterView.prototype.bind = function bind(bindingContext, overrideContext) {
      this.container.viewModel = bindingContext;
      this.overrideContext = overrideContext;
    };
    RouterView.prototype.process = function process(viewPortInstruction, waitToSwap) {
      var _this = this;
      var component = viewPortInstruction.component;
      var childContainer = component.childContainer;
      var viewModel = component.viewModel;
      var viewModelResource = component.viewModelResource;
      var metadata = viewModelResource.metadata;
      var viewStrategy = this.viewLocator.getViewStrategy(component.view || viewModel);
      if (viewStrategy) {
        viewStrategy.makeRelativeTo(_aureliaMetadata.Origin.get(component.router.container.viewModel.constructor).moduleId);
      }
      return metadata.load(childContainer, viewModelResource.value, null, viewStrategy, true).then(function(viewFactory) {
        if (!_this.compositionTransactionNotifier) {
          _this.compositionTransactionOwnershipToken = _this.compositionTransaction.tryCapture();
        }
        viewPortInstruction.controller = metadata.create(childContainer, _aureliaTemplating.BehaviorInstruction.dynamic(_this.element, viewModel, viewFactory));
        if (waitToSwap) {
          return;
        }
        _this.swap(viewPortInstruction);
      });
    };
    RouterView.prototype.swap = function swap(viewPortInstruction) {
      var _this2 = this;
      var work = function work() {
        var previousView = _this2.view;
        var viewSlot = _this2.viewSlot;
        var swapStrategy = void 0;
        swapStrategy = _this2.swapOrder in swapStrategies ? swapStrategies[_this2.swapOrder] : swapStrategies.after;
        swapStrategy(viewSlot, previousView, function() {
          return Promise.resolve(viewSlot.add(viewPortInstruction.controller.view)).then(function() {
            if (_this2.compositionTransactionNotifier) {
              _this2.compositionTransactionNotifier.done();
              _this2.compositionTransactionNotifier = null;
            }
          });
        });
        _this2.view = viewPortInstruction.controller.view;
      };
      viewPortInstruction.controller.automate(this.overrideContext, this.owningView);
      if (this.compositionTransactionOwnershipToken) {
        return this.compositionTransactionOwnershipToken.waitForCompositionComplete().then(function() {
          _this2.compositionTransactionOwnershipToken = null;
          work();
        });
      }
      work();
    };
    return RouterView;
  }(), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, 'swapOrder', [_aureliaTemplating.bindable], {
    enumerable: true,
    initializer: null
  })), _class2)) || _class) || _class) || _class);
});

})();
(function() {
var define = System.amdDefine;
define("npm:aurelia-loader@1.0.0-beta.1.2.0/aurelia-loader.js", ["exports", "aurelia-path", "aurelia-metadata"], function(exports, _aureliaPath, _aureliaMetadata) {
  'use strict';
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.Loader = exports.TemplateRegistryEntry = exports.TemplateDependency = undefined;
  var _createClass = function() {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    return function(Constructor, protoProps, staticProps) {
      if (protoProps)
        defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  var TemplateDependency = exports.TemplateDependency = function TemplateDependency(src, name) {
    _classCallCheck(this, TemplateDependency);
    this.src = src;
    this.name = name;
  };
  var TemplateRegistryEntry = exports.TemplateRegistryEntry = function() {
    function TemplateRegistryEntry(address) {
      _classCallCheck(this, TemplateRegistryEntry);
      this.templateIsLoaded = false;
      this.factoryIsReady = false;
      this.resources = null;
      this.dependencies = null;
      this.address = address;
      this.onReady = null;
      this._template = null;
      this._factory = null;
    }
    TemplateRegistryEntry.prototype.addDependency = function addDependency(src, name) {
      var finalSrc = typeof src === 'string' ? (0, _aureliaPath.relativeToFile)(src, this.address) : _aureliaMetadata.Origin.get(src).moduleId;
      this.dependencies.push(new TemplateDependency(finalSrc, name));
    };
    _createClass(TemplateRegistryEntry, [{
      key: 'template',
      get: function get() {
        return this._template;
      },
      set: function set(value) {
        var address = this.address;
        var requires = void 0;
        var current = void 0;
        var src = void 0;
        var dependencies = void 0;
        this._template = value;
        this.templateIsLoaded = true;
        requires = value.content.querySelectorAll('require');
        dependencies = this.dependencies = new Array(requires.length);
        for (var i = 0,
            ii = requires.length; i < ii; ++i) {
          current = requires[i];
          src = current.getAttribute('from');
          if (!src) {
            throw new Error('<require> element in ' + address + ' has no "from" attribute.');
          }
          dependencies[i] = new TemplateDependency((0, _aureliaPath.relativeToFile)(src, address), current.getAttribute('as'));
          if (current.parentNode) {
            current.parentNode.removeChild(current);
          }
        }
      }
    }, {
      key: 'factory',
      get: function get() {
        return this._factory;
      },
      set: function set(value) {
        this._factory = value;
        this.factoryIsReady = true;
      }
    }]);
    return TemplateRegistryEntry;
  }();
  var Loader = exports.Loader = function() {
    function Loader() {
      _classCallCheck(this, Loader);
      this.templateRegistry = {};
    }
    Loader.prototype.map = function map(id, source) {
      throw new Error('Loaders must implement map(id, source).');
    };
    Loader.prototype.normalizeSync = function normalizeSync(moduleId, relativeTo) {
      throw new Error('Loaders must implement normalizeSync(moduleId, relativeTo).');
    };
    Loader.prototype.normalize = function normalize(moduleId, relativeTo) {
      throw new Error('Loaders must implement normalize(moduleId: string, relativeTo: string): Promise<string>.');
    };
    Loader.prototype.loadModule = function loadModule(id) {
      throw new Error('Loaders must implement loadModule(id).');
    };
    Loader.prototype.loadAllModules = function loadAllModules(ids) {
      throw new Error('Loader must implement loadAllModules(ids).');
    };
    Loader.prototype.loadTemplate = function loadTemplate(url) {
      throw new Error('Loader must implement loadTemplate(url).');
    };
    Loader.prototype.loadText = function loadText(url) {
      throw new Error('Loader must implement loadText(url).');
    };
    Loader.prototype.applyPluginToUrl = function applyPluginToUrl(url, pluginName) {
      throw new Error('Loader must implement applyPluginToUrl(url, pluginName).');
    };
    Loader.prototype.addPlugin = function addPlugin(pluginName, implementation) {
      throw new Error('Loader must implement addPlugin(pluginName, implementation).');
    };
    Loader.prototype.getOrCreateTemplateRegistryEntry = function getOrCreateTemplateRegistryEntry(address) {
      return this.templateRegistry[address] || (this.templateRegistry[address] = new TemplateRegistryEntry(address));
    };
    return Loader;
  }();
});

})();
(function() {
var define = System.amdDefine;
define("npm:aurelia-loader@1.0.0-beta.1.2.0.js", ["npm:aurelia-loader@1.0.0-beta.1.2.0/aurelia-loader"], function(main) {
  return main;
});

})();
(function() {
var define = System.amdDefine;
define("npm:aurelia-binding@1.0.0-beta.1.3.2/aurelia-binding.js", ["exports", "aurelia-pal", "aurelia-task-queue", "aurelia-metadata"], function(exports, _aureliaPal, _aureliaTaskQueue, _aureliaMetadata) {
  'use strict';
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.getSetObserver = exports.BindingEngine = exports.NameExpression = exports.Listener = exports.ListenerExpression = exports.BindingBehaviorResource = exports.ValueConverterResource = exports.Call = exports.CallExpression = exports.Binding = exports.BindingExpression = exports.ObjectObservationAdapter = exports.ObserverLocator = exports.SVGAnalyzer = exports.presentationAttributes = exports.presentationElements = exports.elements = exports.ComputedExpression = exports.ClassObserver = exports.SelectValueObserver = exports.CheckedObserver = exports.ValueAttributeObserver = exports.StyleObserver = exports.DataAttributeObserver = exports.dataAttributeAccessor = exports.XLinkAttributeObserver = exports.SetterObserver = exports.PrimitiveObserver = exports.propertyAccessor = exports.DirtyCheckProperty = exports.DirtyChecker = exports.EventManager = exports.getMapObserver = exports.ParserImplementation = exports.Parser = exports.Scanner = exports.Lexer = exports.Token = exports.bindingMode = exports.ExpressionCloner = exports.Unparser = exports.LiteralObject = exports.LiteralArray = exports.LiteralString = exports.LiteralPrimitive = exports.PrefixNot = exports.Binary = exports.CallFunction = exports.CallMember = exports.CallScope = exports.AccessKeyed = exports.AccessMember = exports.AccessScope = exports.AccessThis = exports.Conditional = exports.Assign = exports.ValueConverter = exports.BindingBehavior = exports.Chain = exports.Expression = exports.getArrayObserver = exports.CollectionLengthObserver = exports.ModifyCollectionObserver = exports.ExpressionObserver = exports.sourceContext = undefined;
  exports.camelCase = camelCase;
  exports.createOverrideContext = createOverrideContext;
  exports.getContextFor = getContextFor;
  exports.createScopeForTest = createScopeForTest;
  exports.connectable = connectable;
  exports.enqueueBindingConnect = enqueueBindingConnect;
  exports.subscriberCollection = subscriberCollection;
  exports.calcSplices = calcSplices;
  exports.mergeSplice = mergeSplice;
  exports.projectArraySplices = projectArraySplices;
  exports.getChangeRecords = getChangeRecords;
  exports.cloneExpression = cloneExpression;
  exports.hasDeclaredDependencies = hasDeclaredDependencies;
  exports.declarePropertyDependencies = declarePropertyDependencies;
  exports.computedFrom = computedFrom;
  exports.createComputedObserver = createComputedObserver;
  exports.valueConverter = valueConverter;
  exports.bindingBehavior = bindingBehavior;
  exports.observable = observable;
  var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
    return typeof obj;
  } : function(obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;
  };
  var _createClass = function() {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    return function(Constructor, protoProps, staticProps) {
      if (protoProps)
        defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();
  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }
  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }});
    if (superClass)
      Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  var _dec,
      _dec2,
      _class,
      _dec3,
      _class2,
      _dec4,
      _class3,
      _dec5,
      _class5,
      _dec6,
      _class7,
      _dec7,
      _class8,
      _dec8,
      _class9,
      _dec9,
      _class10,
      _class11,
      _temp,
      _dec10,
      _class12,
      _class13,
      _temp2;
  function camelCase(name) {
    return name.charAt(0).toLowerCase() + name.slice(1);
  }
  function createOverrideContext(bindingContext, parentOverrideContext) {
    return {
      bindingContext: bindingContext,
      parentOverrideContext: parentOverrideContext || null
    };
  }
  function getContextFor(name, scope, ancestor) {
    var oc = scope.overrideContext;
    if (ancestor) {
      while (ancestor && oc) {
        ancestor--;
        oc = oc.parentOverrideContext;
      }
      if (ancestor || !oc) {
        return undefined;
      }
      return name in oc ? oc : oc.bindingContext;
    }
    while (oc && !(name in oc) && !(oc.bindingContext && name in oc.bindingContext)) {
      oc = oc.parentOverrideContext;
    }
    if (oc) {
      return name in oc ? oc : oc.bindingContext;
    }
    return scope.bindingContext || scope.overrideContext;
  }
  function createScopeForTest(bindingContext, parentBindingContext) {
    if (parentBindingContext) {
      return {
        bindingContext: bindingContext,
        overrideContext: createOverrideContext(bindingContext, createOverrideContext(parentBindingContext))
      };
    }
    return {
      bindingContext: bindingContext,
      overrideContext: createOverrideContext(bindingContext)
    };
  }
  var sourceContext = exports.sourceContext = 'Binding:source';
  var slotNames = [];
  var versionSlotNames = [];
  for (var i = 0; i < 100; i++) {
    slotNames.push('_observer' + i);
    versionSlotNames.push('_observerVersion' + i);
  }
  function addObserver(observer) {
    var observerSlots = this._observerSlots === undefined ? 0 : this._observerSlots;
    var i = observerSlots;
    while (i-- && this[slotNames[i]] !== observer) {}
    if (i === -1) {
      i = 0;
      while (this[slotNames[i]]) {
        i++;
      }
      this[slotNames[i]] = observer;
      observer.subscribe(sourceContext, this);
      if (i === observerSlots) {
        this._observerSlots = i + 1;
      }
    }
    if (this._version === undefined) {
      this._version = 0;
    }
    this[versionSlotNames[i]] = this._version;
  }
  function observeProperty(obj, propertyName) {
    var observer = this.observerLocator.getObserver(obj, propertyName);
    addObserver.call(this, observer);
  }
  function observeArray(array) {
    var observer = this.observerLocator.getArrayObserver(array);
    addObserver.call(this, observer);
  }
  function unobserve(all) {
    var i = this._observerSlots;
    while (i--) {
      if (all || this[versionSlotNames[i]] !== this._version) {
        var observer = this[slotNames[i]];
        this[slotNames[i]] = null;
        if (observer) {
          observer.unsubscribe(sourceContext, this);
        }
      }
    }
  }
  function connectable() {
    return function(target) {
      target.prototype.observeProperty = observeProperty;
      target.prototype.observeArray = observeArray;
      target.prototype.unobserve = unobserve;
      target.prototype.addObserver = addObserver;
    };
  }
  var bindings = new Map();
  var minimumImmediate = 100;
  var frameBudget = 15;
  var isFlushRequested = false;
  var immediate = 0;
  function flush(animationFrameStart) {
    var i = 0;
    var keys = bindings.keys();
    var item = void 0;
    while (item = keys.next()) {
      if (item.done) {
        break;
      }
      var binding = item.value;
      bindings.delete(binding);
      binding.connect(true);
      i++;
      if (i % 100 === 0 && _aureliaPal.PLATFORM.performance.now() - animationFrameStart > frameBudget) {
        break;
      }
    }
    if (bindings.size) {
      _aureliaPal.PLATFORM.requestAnimationFrame(flush);
    } else {
      isFlushRequested = false;
      immediate = 0;
    }
  }
  function enqueueBindingConnect(binding) {
    if (immediate < minimumImmediate) {
      immediate++;
      binding.connect(false);
    } else {
      bindings.set(binding);
    }
    if (!isFlushRequested) {
      isFlushRequested = true;
      _aureliaPal.PLATFORM.requestAnimationFrame(flush);
    }
  }
  function addSubscriber(context, callable) {
    if (this.hasSubscriber(context, callable)) {
      return false;
    }
    if (!this._context0) {
      this._context0 = context;
      this._callable0 = callable;
      return true;
    }
    if (!this._context1) {
      this._context1 = context;
      this._callable1 = callable;
      return true;
    }
    if (!this._context2) {
      this._context2 = context;
      this._callable2 = callable;
      return true;
    }
    if (!this._contextsRest) {
      this._contextsRest = [context];
      this._callablesRest = [callable];
      return true;
    }
    this._contextsRest.push(context);
    this._callablesRest.push(callable);
    return true;
  }
  function removeSubscriber(context, callable) {
    if (this._context0 === context && this._callable0 === callable) {
      this._context0 = null;
      this._callable0 = null;
      return true;
    }
    if (this._context1 === context && this._callable1 === callable) {
      this._context1 = null;
      this._callable1 = null;
      return true;
    }
    if (this._context2 === context && this._callable2 === callable) {
      this._context2 = null;
      this._callable2 = null;
      return true;
    }
    var rest = this._contextsRest;
    var index = void 0;
    if (!rest || !rest.length || (index = rest.indexOf(context)) === -1 || this._callablesRest[index] !== callable) {
      return false;
    }
    rest.splice(index, 1);
    this._callablesRest.splice(index, 1);
    return true;
  }
  var arrayPool1 = [];
  var arrayPool2 = [];
  var poolUtilization = [];
  function callSubscribers(newValue, oldValue) {
    var context0 = this._context0;
    var callable0 = this._callable0;
    var context1 = this._context1;
    var callable1 = this._callable1;
    var context2 = this._context2;
    var callable2 = this._callable2;
    var length = this._contextsRest ? this._contextsRest.length : 0;
    var contextsRest = void 0;
    var callablesRest = void 0;
    var poolIndex = void 0;
    var i = void 0;
    if (length) {
      poolIndex = poolUtilization.length;
      while (poolIndex-- && poolUtilization[poolIndex]) {}
      if (poolIndex < 0) {
        poolIndex = poolUtilization.length;
        contextsRest = [];
        callablesRest = [];
        poolUtilization.push(true);
        arrayPool1.push(contextsRest);
        arrayPool2.push(callablesRest);
      } else {
        poolUtilization[poolIndex] = true;
        contextsRest = arrayPool1[poolIndex];
        callablesRest = arrayPool2[poolIndex];
      }
      i = length;
      while (i--) {
        contextsRest[i] = this._contextsRest[i];
        callablesRest[i] = this._callablesRest[i];
      }
    }
    if (context0) {
      if (callable0) {
        callable0.call(context0, newValue, oldValue);
      } else {
        context0(newValue, oldValue);
      }
    }
    if (context1) {
      if (callable1) {
        callable1.call(context1, newValue, oldValue);
      } else {
        context1(newValue, oldValue);
      }
    }
    if (context2) {
      if (callable2) {
        callable2.call(context2, newValue, oldValue);
      } else {
        context2(newValue, oldValue);
      }
    }
    if (length) {
      for (i = 0; i < length; i++) {
        var callable = callablesRest[i];
        var context = contextsRest[i];
        if (callable) {
          callable.call(context, newValue, oldValue);
        } else {
          context(newValue, oldValue);
        }
        contextsRest[i] = null;
        callablesRest[i] = null;
      }
      poolUtilization[poolIndex] = false;
    }
  }
  function hasSubscribers() {
    return !!(this._context0 || this._context1 || this._context2 || this._contextsRest && this._contextsRest.length);
  }
  function hasSubscriber(context, callable) {
    var has = this._context0 === context && this._callable0 === callable || this._context1 === context && this._callable1 === callable || this._context2 === context && this._callable2 === callable;
    if (has) {
      return true;
    }
    var index = void 0;
    var contexts = this._contextsRest;
    if (!contexts || (index = contexts.length) === 0) {
      return false;
    }
    var callables = this._callablesRest;
    while (index--) {
      if (contexts[index] === context && callables[index] === callable) {
        return true;
      }
    }
    return false;
  }
  function subscriberCollection() {
    return function(target) {
      target.prototype.addSubscriber = addSubscriber;
      target.prototype.removeSubscriber = removeSubscriber;
      target.prototype.callSubscribers = callSubscribers;
      target.prototype.hasSubscribers = hasSubscribers;
      target.prototype.hasSubscriber = hasSubscriber;
    };
  }
  var ExpressionObserver = exports.ExpressionObserver = (_dec = connectable(), _dec2 = subscriberCollection(), _dec(_class = _dec2(_class = function() {
    function ExpressionObserver(scope, expression, observerLocator, lookupFunctions) {
      _classCallCheck(this, ExpressionObserver);
      this.scope = scope;
      this.expression = expression;
      this.observerLocator = observerLocator;
      this.lookupFunctions = lookupFunctions;
    }
    ExpressionObserver.prototype.getValue = function getValue() {
      return this.expression.evaluate(this.scope, this.lookupFunctions);
    };
    ExpressionObserver.prototype.setValue = function setValue(newValue) {
      this.expression.assign(this.scope, newValue);
    };
    ExpressionObserver.prototype.subscribe = function subscribe(context, callable) {
      var _this = this;
      if (!this.hasSubscribers()) {
        this.oldValue = this.expression.evaluate(this.scope, this.lookupFunctions);
        this.expression.connect(this, this.scope);
      }
      this.addSubscriber(context, callable);
      if (arguments.length === 1 && context instanceof Function) {
        return {dispose: function dispose() {
            _this.unsubscribe(context, callable);
          }};
      }
    };
    ExpressionObserver.prototype.unsubscribe = function unsubscribe(context, callable) {
      if (this.removeSubscriber(context, callable) && !this.hasSubscribers()) {
        this.unobserve(true);
        this.oldValue = undefined;
      }
    };
    ExpressionObserver.prototype.call = function call() {
      var newValue = this.expression.evaluate(this.scope, this.lookupFunctions);
      var oldValue = this.oldValue;
      if (newValue !== oldValue) {
        this.oldValue = newValue;
        this.callSubscribers(newValue, oldValue);
      }
      this._version++;
      this.expression.connect(this, this.scope);
      this.unobserve(false);
    };
    return ExpressionObserver;
  }()) || _class) || _class);
  function isIndex(s) {
    return +s === s >>> 0;
  }
  function toNumber(s) {
    return +s;
  }
  function newSplice(index, removed, addedCount) {
    return {
      index: index,
      removed: removed,
      addedCount: addedCount
    };
  }
  var EDIT_LEAVE = 0;
  var EDIT_UPDATE = 1;
  var EDIT_ADD = 2;
  var EDIT_DELETE = 3;
  function ArraySplice() {}
  ArraySplice.prototype = {
    calcEditDistances: function calcEditDistances(current, currentStart, currentEnd, old, oldStart, oldEnd) {
      var rowCount = oldEnd - oldStart + 1;
      var columnCount = currentEnd - currentStart + 1;
      var distances = new Array(rowCount);
      var north = void 0;
      var west = void 0;
      for (var _i = 0; _i < rowCount; ++_i) {
        distances[_i] = new Array(columnCount);
        distances[_i][0] = _i;
      }
      for (var j = 0; j < columnCount; ++j) {
        distances[0][j] = j;
      }
      for (var _i2 = 1; _i2 < rowCount; ++_i2) {
        for (var _j = 1; _j < columnCount; ++_j) {
          if (this.equals(current[currentStart + _j - 1], old[oldStart + _i2 - 1])) {
            distances[_i2][_j] = distances[_i2 - 1][_j - 1];
          } else {
            north = distances[_i2 - 1][_j] + 1;
            west = distances[_i2][_j - 1] + 1;
            distances[_i2][_j] = north < west ? north : west;
          }
        }
      }
      return distances;
    },
    spliceOperationsFromEditDistances: function spliceOperationsFromEditDistances(distances) {
      var i = distances.length - 1;
      var j = distances[0].length - 1;
      var current = distances[i][j];
      var edits = [];
      while (i > 0 || j > 0) {
        if (i === 0) {
          edits.push(EDIT_ADD);
          j--;
          continue;
        }
        if (j === 0) {
          edits.push(EDIT_DELETE);
          i--;
          continue;
        }
        var northWest = distances[i - 1][j - 1];
        var west = distances[i - 1][j];
        var north = distances[i][j - 1];
        var min = void 0;
        if (west < north) {
          min = west < northWest ? west : northWest;
        } else {
          min = north < northWest ? north : northWest;
        }
        if (min === northWest) {
          if (northWest === current) {
            edits.push(EDIT_LEAVE);
          } else {
            edits.push(EDIT_UPDATE);
            current = northWest;
          }
          i--;
          j--;
        } else if (min === west) {
          edits.push(EDIT_DELETE);
          i--;
          current = west;
        } else {
          edits.push(EDIT_ADD);
          j--;
          current = north;
        }
      }
      edits.reverse();
      return edits;
    },
    calcSplices: function calcSplices(current, currentStart, currentEnd, old, oldStart, oldEnd) {
      var prefixCount = 0;
      var suffixCount = 0;
      var minLength = Math.min(currentEnd - currentStart, oldEnd - oldStart);
      if (currentStart === 0 && oldStart === 0) {
        prefixCount = this.sharedPrefix(current, old, minLength);
      }
      if (currentEnd === current.length && oldEnd === old.length) {
        suffixCount = this.sharedSuffix(current, old, minLength - prefixCount);
      }
      currentStart += prefixCount;
      oldStart += prefixCount;
      currentEnd -= suffixCount;
      oldEnd -= suffixCount;
      if (currentEnd - currentStart === 0 && oldEnd - oldStart === 0) {
        return [];
      }
      if (currentStart === currentEnd) {
        var _splice = newSplice(currentStart, [], 0);
        while (oldStart < oldEnd) {
          _splice.removed.push(old[oldStart++]);
        }
        return [_splice];
      } else if (oldStart === oldEnd) {
        return [newSplice(currentStart, [], currentEnd - currentStart)];
      }
      var ops = this.spliceOperationsFromEditDistances(this.calcEditDistances(current, currentStart, currentEnd, old, oldStart, oldEnd));
      var splice = undefined;
      var splices = [];
      var index = currentStart;
      var oldIndex = oldStart;
      for (var _i3 = 0; _i3 < ops.length; ++_i3) {
        switch (ops[_i3]) {
          case EDIT_LEAVE:
            if (splice) {
              splices.push(splice);
              splice = undefined;
            }
            index++;
            oldIndex++;
            break;
          case EDIT_UPDATE:
            if (!splice) {
              splice = newSplice(index, [], 0);
            }
            splice.addedCount++;
            index++;
            splice.removed.push(old[oldIndex]);
            oldIndex++;
            break;
          case EDIT_ADD:
            if (!splice) {
              splice = newSplice(index, [], 0);
            }
            splice.addedCount++;
            index++;
            break;
          case EDIT_DELETE:
            if (!splice) {
              splice = newSplice(index, [], 0);
            }
            splice.removed.push(old[oldIndex]);
            oldIndex++;
            break;
        }
      }
      if (splice) {
        splices.push(splice);
      }
      return splices;
    },
    sharedPrefix: function sharedPrefix(current, old, searchLength) {
      for (var _i4 = 0; _i4 < searchLength; ++_i4) {
        if (!this.equals(current[_i4], old[_i4])) {
          return _i4;
        }
      }
      return searchLength;
    },
    sharedSuffix: function sharedSuffix(current, old, searchLength) {
      var index1 = current.length;
      var index2 = old.length;
      var count = 0;
      while (count < searchLength && this.equals(current[--index1], old[--index2])) {
        count++;
      }
      return count;
    },
    calculateSplices: function calculateSplices(current, previous) {
      return this.calcSplices(current, 0, current.length, previous, 0, previous.length);
    },
    equals: function equals(currentValue, previousValue) {
      return currentValue === previousValue;
    }
  };
  var arraySplice = new ArraySplice();
  function calcSplices(current, currentStart, currentEnd, old, oldStart, oldEnd) {
    return arraySplice.calcSplices(current, currentStart, currentEnd, old, oldStart, oldEnd);
  }
  function intersect(start1, end1, start2, end2) {
    if (end1 < start2 || end2 < start1) {
      return -1;
    }
    if (end1 === start2 || end2 === start1) {
      return 0;
    }
    if (start1 < start2) {
      if (end1 < end2) {
        return end1 - start2;
      }
      return end2 - start2;
    }
    if (end2 < end1) {
      return end2 - start1;
    }
    return end1 - start1;
  }
  function mergeSplice(splices, index, removed, addedCount) {
    var splice = newSplice(index, removed, addedCount);
    var inserted = false;
    var insertionOffset = 0;
    for (var _i5 = 0; _i5 < splices.length; _i5++) {
      var current = splices[_i5];
      current.index += insertionOffset;
      if (inserted) {
        continue;
      }
      var intersectCount = intersect(splice.index, splice.index + splice.removed.length, current.index, current.index + current.addedCount);
      if (intersectCount >= 0) {
        splices.splice(_i5, 1);
        _i5--;
        insertionOffset -= current.addedCount - current.removed.length;
        splice.addedCount += current.addedCount - intersectCount;
        var deleteCount = splice.removed.length + current.removed.length - intersectCount;
        if (!splice.addedCount && !deleteCount) {
          inserted = true;
        } else {
          var currentRemoved = current.removed;
          if (splice.index < current.index) {
            var prepend = splice.removed.slice(0, current.index - splice.index);
            Array.prototype.push.apply(prepend, currentRemoved);
            currentRemoved = prepend;
          }
          if (splice.index + splice.removed.length > current.index + current.addedCount) {
            var append = splice.removed.slice(current.index + current.addedCount - splice.index);
            Array.prototype.push.apply(currentRemoved, append);
          }
          splice.removed = currentRemoved;
          if (current.index < splice.index) {
            splice.index = current.index;
          }
        }
      } else if (splice.index < current.index) {
        inserted = true;
        splices.splice(_i5, 0, splice);
        _i5++;
        var offset = splice.addedCount - splice.removed.length;
        current.index += offset;
        insertionOffset += offset;
      }
    }
    if (!inserted) {
      splices.push(splice);
    }
  }
  function createInitialSplices(array, changeRecords) {
    var splices = [];
    for (var _i6 = 0; _i6 < changeRecords.length; _i6++) {
      var record = changeRecords[_i6];
      switch (record.type) {
        case 'splice':
          mergeSplice(splices, record.index, record.removed.slice(), record.addedCount);
          break;
        case 'add':
        case 'update':
        case 'delete':
          if (!isIndex(record.name)) {
            continue;
          }
          var index = toNumber(record.name);
          if (index < 0) {
            continue;
          }
          mergeSplice(splices, index, [record.oldValue], record.type === 'delete' ? 0 : 1);
          break;
        default:
          console.error('Unexpected record type: ' + JSON.stringify(record));
          break;
      }
    }
    return splices;
  }
  function projectArraySplices(array, changeRecords) {
    var splices = [];
    createInitialSplices(array, changeRecords).forEach(function(splice) {
      if (splice.addedCount === 1 && splice.removed.length === 1) {
        if (splice.removed[0] !== array[splice.index]) {
          splices.push(splice);
        }
        return;
      }
      splices = splices.concat(calcSplices(array, splice.index, splice.index + splice.addedCount, splice.removed, 0, splice.removed.length));
    });
    return splices;
  }
  function newRecord(type, object, key, oldValue) {
    return {
      type: type,
      object: object,
      key: key,
      oldValue: oldValue
    };
  }
  function getChangeRecords(map) {
    var entries = new Array(map.size);
    var keys = map.keys();
    var i = 0;
    var item = void 0;
    while (item = keys.next()) {
      if (item.done) {
        break;
      }
      entries[i] = newRecord('added', map, item.value);
      i++;
    }
    return entries;
  }
  var ModifyCollectionObserver = exports.ModifyCollectionObserver = (_dec3 = subscriberCollection(), _dec3(_class2 = function() {
    function ModifyCollectionObserver(taskQueue, collection) {
      _classCallCheck(this, ModifyCollectionObserver);
      this.taskQueue = taskQueue;
      this.queued = false;
      this.changeRecords = null;
      this.oldCollection = null;
      this.collection = collection;
      this.lengthPropertyName = collection instanceof Map || collection instanceof Set ? 'size' : 'length';
    }
    ModifyCollectionObserver.prototype.subscribe = function subscribe(context, callable) {
      this.addSubscriber(context, callable);
    };
    ModifyCollectionObserver.prototype.unsubscribe = function unsubscribe(context, callable) {
      this.removeSubscriber(context, callable);
    };
    ModifyCollectionObserver.prototype.addChangeRecord = function addChangeRecord(changeRecord) {
      if (!this.hasSubscribers() && !this.lengthObserver) {
        return;
      }
      if (changeRecord.type === 'splice') {
        var index = changeRecord.index;
        var arrayLength = changeRecord.object.length;
        if (index > arrayLength) {
          index = arrayLength - changeRecord.addedCount;
        } else if (index < 0) {
          index = arrayLength + changeRecord.removed.length + index - changeRecord.addedCount;
        }
        if (index < 0) {
          index = 0;
        }
        changeRecord.index = index;
      }
      if (this.changeRecords === null) {
        this.changeRecords = [changeRecord];
      } else {
        this.changeRecords.push(changeRecord);
      }
      if (!this.queued) {
        this.queued = true;
        this.taskQueue.queueMicroTask(this);
      }
    };
    ModifyCollectionObserver.prototype.flushChangeRecords = function flushChangeRecords() {
      if (this.changeRecords && this.changeRecords.length || this.oldCollection) {
        this.call();
      }
    };
    ModifyCollectionObserver.prototype.reset = function reset(oldCollection) {
      this.oldCollection = oldCollection;
      if (this.hasSubscribers() && !this.queued) {
        this.queued = true;
        this.taskQueue.queueMicroTask(this);
      }
    };
    ModifyCollectionObserver.prototype.getLengthObserver = function getLengthObserver() {
      return this.lengthObserver || (this.lengthObserver = new CollectionLengthObserver(this.collection));
    };
    ModifyCollectionObserver.prototype.call = function call() {
      var changeRecords = this.changeRecords;
      var oldCollection = this.oldCollection;
      var records = void 0;
      this.queued = false;
      this.changeRecords = [];
      this.oldCollection = null;
      if (this.hasSubscribers()) {
        if (oldCollection) {
          if (this.collection instanceof Map || this.collection instanceof Set) {
            records = getChangeRecords(oldCollection);
          } else {
            records = calcSplices(this.collection, 0, this.collection.length, oldCollection, 0, oldCollection.length);
          }
        } else {
          if (this.collection instanceof Map || this.collection instanceof Set) {
            records = changeRecords;
          } else {
            records = projectArraySplices(this.collection, changeRecords);
          }
        }
        this.callSubscribers(records);
      }
      if (this.lengthObserver) {
        this.lengthObserver.call(this.collection[this.lengthPropertyName]);
      }
    };
    return ModifyCollectionObserver;
  }()) || _class2);
  var CollectionLengthObserver = exports.CollectionLengthObserver = (_dec4 = subscriberCollection(), _dec4(_class3 = function() {
    function CollectionLengthObserver(collection) {
      _classCallCheck(this, CollectionLengthObserver);
      this.collection = collection;
      this.lengthPropertyName = collection instanceof Map || collection instanceof Set ? 'size' : 'length';
      this.currentValue = collection[this.lengthPropertyName];
    }
    CollectionLengthObserver.prototype.getValue = function getValue() {
      return this.collection[this.lengthPropertyName];
    };
    CollectionLengthObserver.prototype.setValue = function setValue(newValue) {
      this.collection[this.lengthPropertyName] = newValue;
    };
    CollectionLengthObserver.prototype.subscribe = function subscribe(context, callable) {
      this.addSubscriber(context, callable);
    };
    CollectionLengthObserver.prototype.unsubscribe = function unsubscribe(context, callable) {
      this.removeSubscriber(context, callable);
    };
    CollectionLengthObserver.prototype.call = function call(newValue) {
      var oldValue = this.currentValue;
      this.callSubscribers(newValue, oldValue);
      this.currentValue = newValue;
    };
    return CollectionLengthObserver;
  }()) || _class3);
  var pop = Array.prototype.pop;
  var push = Array.prototype.push;
  var reverse = Array.prototype.reverse;
  var shift = Array.prototype.shift;
  var sort = Array.prototype.sort;
  var splice = Array.prototype.splice;
  var unshift = Array.prototype.unshift;
  Array.prototype.pop = function() {
    var methodCallResult = pop.apply(this, arguments);
    if (this.__array_observer__ !== undefined) {
      this.__array_observer__.addChangeRecord({
        type: 'delete',
        object: this,
        name: this.length,
        oldValue: methodCallResult
      });
    }
    return methodCallResult;
  };
  Array.prototype.push = function() {
    var methodCallResult = push.apply(this, arguments);
    if (this.__array_observer__ !== undefined) {
      this.__array_observer__.addChangeRecord({
        type: 'splice',
        object: this,
        index: this.length - arguments.length,
        removed: [],
        addedCount: arguments.length
      });
    }
    return methodCallResult;
  };
  Array.prototype.reverse = function() {
    var oldArray = void 0;
    if (this.__array_observer__ !== undefined) {
      this.__array_observer__.flushChangeRecords();
      oldArray = this.slice();
    }
    var methodCallResult = reverse.apply(this, arguments);
    if (this.__array_observer__ !== undefined) {
      this.__array_observer__.reset(oldArray);
    }
    return methodCallResult;
  };
  Array.prototype.shift = function() {
    var methodCallResult = shift.apply(this, arguments);
    if (this.__array_observer__ !== undefined) {
      this.__array_observer__.addChangeRecord({
        type: 'delete',
        object: this,
        name: 0,
        oldValue: methodCallResult
      });
    }
    return methodCallResult;
  };
  Array.prototype.sort = function() {
    var oldArray = void 0;
    if (this.__array_observer__ !== undefined) {
      this.__array_observer__.flushChangeRecords();
      oldArray = this.slice();
    }
    var methodCallResult = sort.apply(this, arguments);
    if (this.__array_observer__ !== undefined) {
      this.__array_observer__.reset(oldArray);
    }
    return methodCallResult;
  };
  Array.prototype.splice = function() {
    var methodCallResult = splice.apply(this, arguments);
    if (this.__array_observer__ !== undefined) {
      this.__array_observer__.addChangeRecord({
        type: 'splice',
        object: this,
        index: arguments[0],
        removed: methodCallResult,
        addedCount: arguments.length > 2 ? arguments.length - 2 : 0
      });
    }
    return methodCallResult;
  };
  Array.prototype.unshift = function() {
    var methodCallResult = unshift.apply(this, arguments);
    if (this.__array_observer__ !== undefined) {
      this.__array_observer__.addChangeRecord({
        type: 'splice',
        object: this,
        index: 0,
        removed: [],
        addedCount: arguments.length
      });
    }
    return methodCallResult;
  };
  function _getArrayObserver(taskQueue, array) {
    return ModifyArrayObserver.for(taskQueue, array);
  }
  exports.getArrayObserver = _getArrayObserver;
  var ModifyArrayObserver = function(_ModifyCollectionObse) {
    _inherits(ModifyArrayObserver, _ModifyCollectionObse);
    function ModifyArrayObserver(taskQueue, array) {
      _classCallCheck(this, ModifyArrayObserver);
      return _possibleConstructorReturn(this, _ModifyCollectionObse.call(this, taskQueue, array));
    }
    ModifyArrayObserver.for = function _for(taskQueue, array) {
      if (!('__array_observer__' in array)) {
        var observer = ModifyArrayObserver.create(taskQueue, array);
        Object.defineProperty(array, '__array_observer__', {
          value: observer,
          enumerable: false,
          configurable: false
        });
      }
      return array.__array_observer__;
    };
    ModifyArrayObserver.create = function create(taskQueue, array) {
      var observer = new ModifyArrayObserver(taskQueue, array);
      return observer;
    };
    return ModifyArrayObserver;
  }(ModifyCollectionObserver);
  var Expression = exports.Expression = function() {
    function Expression() {
      _classCallCheck(this, Expression);
      this.isChain = false;
      this.isAssignable = false;
    }
    Expression.prototype.evaluate = function evaluate(scope, lookupFunctions, args) {
      throw new Error('Binding expression "' + this + '" cannot be evaluated.');
    };
    Expression.prototype.assign = function assign(scope, value, lookupFunctions) {
      throw new Error('Binding expression "' + this + '" cannot be assigned to.');
    };
    Expression.prototype.toString = function toString() {
      return Unparser.unparse(this);
    };
    return Expression;
  }();
  var Chain = exports.Chain = function(_Expression) {
    _inherits(Chain, _Expression);
    function Chain(expressions) {
      _classCallCheck(this, Chain);
      var _this3 = _possibleConstructorReturn(this, _Expression.call(this));
      _this3.expressions = expressions;
      _this3.isChain = true;
      return _this3;
    }
    Chain.prototype.evaluate = function evaluate(scope, lookupFunctions) {
      var result = void 0;
      var expressions = this.expressions;
      var last = void 0;
      for (var _i7 = 0,
          length = expressions.length; _i7 < length; ++_i7) {
        last = expressions[_i7].evaluate(scope, lookupFunctions);
        if (last !== null) {
          result = last;
        }
      }
      return result;
    };
    Chain.prototype.accept = function accept(visitor) {
      return visitor.visitChain(this);
    };
    return Chain;
  }(Expression);
  var BindingBehavior = exports.BindingBehavior = function(_Expression2) {
    _inherits(BindingBehavior, _Expression2);
    function BindingBehavior(expression, name, args) {
      _classCallCheck(this, BindingBehavior);
      var _this4 = _possibleConstructorReturn(this, _Expression2.call(this));
      _this4.expression = expression;
      _this4.name = name;
      _this4.args = args;
      return _this4;
    }
    BindingBehavior.prototype.evaluate = function evaluate(scope, lookupFunctions) {
      return this.expression.evaluate(scope, lookupFunctions);
    };
    BindingBehavior.prototype.assign = function assign(scope, value, lookupFunctions) {
      return this.expression.assign(scope, value, lookupFunctions);
    };
    BindingBehavior.prototype.accept = function accept(visitor) {
      return visitor.visitBindingBehavior(this);
    };
    BindingBehavior.prototype.connect = function connect(binding, scope) {
      this.expression.connect(binding, scope);
    };
    BindingBehavior.prototype.bind = function bind(binding, scope, lookupFunctions) {
      if (this.expression.expression && this.expression.bind) {
        this.expression.bind(binding, scope, lookupFunctions);
      }
      var behavior = lookupFunctions.bindingBehaviors(this.name);
      if (!behavior) {
        throw new Error('No BindingBehavior named "' + this.name + '" was found!');
      }
      var behaviorKey = 'behavior-' + this.name;
      if (binding[behaviorKey]) {
        throw new Error('A binding behavior named "' + this.name + '" has already been applied to "' + this.expression + '"');
      }
      binding[behaviorKey] = behavior;
      behavior.bind.apply(behavior, [binding, scope].concat(evalList(scope, this.args, binding.lookupFunctions)));
    };
    BindingBehavior.prototype.unbind = function unbind(binding, scope) {
      var behaviorKey = 'behavior-' + this.name;
      binding[behaviorKey].unbind(binding, scope);
      binding[behaviorKey] = null;
      if (this.expression.expression && this.expression.unbind) {
        this.expression.unbind(binding, scope);
      }
    };
    return BindingBehavior;
  }(Expression);
  var ValueConverter = exports.ValueConverter = function(_Expression3) {
    _inherits(ValueConverter, _Expression3);
    function ValueConverter(expression, name, args, allArgs) {
      _classCallCheck(this, ValueConverter);
      var _this5 = _possibleConstructorReturn(this, _Expression3.call(this));
      _this5.expression = expression;
      _this5.name = name;
      _this5.args = args;
      _this5.allArgs = allArgs;
      return _this5;
    }
    ValueConverter.prototype.evaluate = function evaluate(scope, lookupFunctions) {
      var converter = lookupFunctions.valueConverters(this.name);
      if (!converter) {
        throw new Error('No ValueConverter named "' + this.name + '" was found!');
      }
      if ('toView' in converter) {
        return converter.toView.apply(converter, evalList(scope, this.allArgs, lookupFunctions));
      }
      return this.allArgs[0].evaluate(scope, lookupFunctions);
    };
    ValueConverter.prototype.assign = function assign(scope, value, lookupFunctions) {
      var converter = lookupFunctions.valueConverters(this.name);
      if (!converter) {
        throw new Error('No ValueConverter named "' + this.name + '" was found!');
      }
      if ('fromView' in converter) {
        value = converter.fromView.apply(converter, [value].concat(evalList(scope, this.args, lookupFunctions)));
      }
      return this.allArgs[0].assign(scope, value, lookupFunctions);
    };
    ValueConverter.prototype.accept = function accept(visitor) {
      return visitor.visitValueConverter(this);
    };
    ValueConverter.prototype.connect = function connect(binding, scope) {
      var expressions = this.allArgs;
      var i = expressions.length;
      while (i--) {
        expressions[i].connect(binding, scope);
      }
    };
    return ValueConverter;
  }(Expression);
  var Assign = exports.Assign = function(_Expression4) {
    _inherits(Assign, _Expression4);
    function Assign(target, value) {
      _classCallCheck(this, Assign);
      var _this6 = _possibleConstructorReturn(this, _Expression4.call(this));
      _this6.target = target;
      _this6.value = value;
      return _this6;
    }
    Assign.prototype.evaluate = function evaluate(scope, lookupFunctions) {
      return this.target.assign(scope, this.value.evaluate(scope, lookupFunctions));
    };
    Assign.prototype.accept = function accept(vistor) {
      vistor.visitAssign(this);
    };
    Assign.prototype.connect = function connect(binding, scope) {};
    return Assign;
  }(Expression);
  var Conditional = exports.Conditional = function(_Expression5) {
    _inherits(Conditional, _Expression5);
    function Conditional(condition, yes, no) {
      _classCallCheck(this, Conditional);
      var _this7 = _possibleConstructorReturn(this, _Expression5.call(this));
      _this7.condition = condition;
      _this7.yes = yes;
      _this7.no = no;
      return _this7;
    }
    Conditional.prototype.evaluate = function evaluate(scope, lookupFunctions) {
      return !!this.condition.evaluate(scope) ? this.yes.evaluate(scope) : this.no.evaluate(scope);
    };
    Conditional.prototype.accept = function accept(visitor) {
      return visitor.visitConditional(this);
    };
    Conditional.prototype.connect = function connect(binding, scope) {
      this.condition.connect(binding, scope);
      if (this.condition.evaluate(scope)) {
        this.yes.connect(binding, scope);
      } else {
        this.no.connect(binding, scope);
      }
    };
    return Conditional;
  }(Expression);
  var AccessThis = exports.AccessThis = function(_Expression6) {
    _inherits(AccessThis, _Expression6);
    function AccessThis(ancestor) {
      _classCallCheck(this, AccessThis);
      var _this8 = _possibleConstructorReturn(this, _Expression6.call(this));
      _this8.ancestor = ancestor;
      return _this8;
    }
    AccessThis.prototype.evaluate = function evaluate(scope, lookupFunctions) {
      var oc = scope.overrideContext;
      var i = this.ancestor;
      while (i-- && oc) {
        oc = oc.parentOverrideContext;
      }
      return i < 1 && oc ? oc.bindingContext : undefined;
    };
    AccessThis.prototype.accept = function accept(visitor) {
      return visitor.visitAccessThis(this);
    };
    AccessThis.prototype.connect = function connect(binding, scope) {};
    return AccessThis;
  }(Expression);
  var AccessScope = exports.AccessScope = function(_Expression7) {
    _inherits(AccessScope, _Expression7);
    function AccessScope(name, ancestor) {
      _classCallCheck(this, AccessScope);
      var _this9 = _possibleConstructorReturn(this, _Expression7.call(this));
      _this9.name = name;
      _this9.ancestor = ancestor;
      _this9.isAssignable = true;
      return _this9;
    }
    AccessScope.prototype.evaluate = function evaluate(scope, lookupFunctions) {
      var context = getContextFor(this.name, scope, this.ancestor);
      return context[this.name];
    };
    AccessScope.prototype.assign = function assign(scope, value) {
      var context = getContextFor(this.name, scope, this.ancestor);
      return context ? context[this.name] = value : undefined;
    };
    AccessScope.prototype.accept = function accept(visitor) {
      return visitor.visitAccessScope(this);
    };
    AccessScope.prototype.connect = function connect(binding, scope) {
      var context = getContextFor(this.name, scope, this.ancestor);
      binding.observeProperty(context, this.name);
    };
    return AccessScope;
  }(Expression);
  var AccessMember = exports.AccessMember = function(_Expression8) {
    _inherits(AccessMember, _Expression8);
    function AccessMember(object, name) {
      _classCallCheck(this, AccessMember);
      var _this10 = _possibleConstructorReturn(this, _Expression8.call(this));
      _this10.object = object;
      _this10.name = name;
      _this10.isAssignable = true;
      return _this10;
    }
    AccessMember.prototype.evaluate = function evaluate(scope, lookupFunctions) {
      var instance = this.object.evaluate(scope, lookupFunctions);
      return instance === null || instance === undefined ? instance : instance[this.name];
    };
    AccessMember.prototype.assign = function assign(scope, value) {
      var instance = this.object.evaluate(scope);
      if (instance === null || instance === undefined) {
        instance = {};
        this.object.assign(scope, instance);
      }
      return instance[this.name] = value;
    };
    AccessMember.prototype.accept = function accept(visitor) {
      return visitor.visitAccessMember(this);
    };
    AccessMember.prototype.connect = function connect(binding, scope) {
      this.object.connect(binding, scope);
      var obj = this.object.evaluate(scope);
      if (obj) {
        binding.observeProperty(obj, this.name);
      }
    };
    return AccessMember;
  }(Expression);
  var AccessKeyed = exports.AccessKeyed = function(_Expression9) {
    _inherits(AccessKeyed, _Expression9);
    function AccessKeyed(object, key) {
      _classCallCheck(this, AccessKeyed);
      var _this11 = _possibleConstructorReturn(this, _Expression9.call(this));
      _this11.object = object;
      _this11.key = key;
      _this11.isAssignable = true;
      return _this11;
    }
    AccessKeyed.prototype.evaluate = function evaluate(scope, lookupFunctions) {
      var instance = this.object.evaluate(scope, lookupFunctions);
      var lookup = this.key.evaluate(scope, lookupFunctions);
      return getKeyed(instance, lookup);
    };
    AccessKeyed.prototype.assign = function assign(scope, value) {
      var instance = this.object.evaluate(scope);
      var lookup = this.key.evaluate(scope);
      return setKeyed(instance, lookup, value);
    };
    AccessKeyed.prototype.accept = function accept(visitor) {
      return visitor.visitAccessKeyed(this);
    };
    AccessKeyed.prototype.connect = function connect(binding, scope) {
      this.object.connect(binding, scope);
      var obj = this.object.evaluate(scope);
      if (obj instanceof Object) {
        this.key.connect(binding, scope);
        var key = this.key.evaluate(scope);
        if (key !== null && key !== undefined && !(Array.isArray(obj) && typeof key === 'number')) {
          binding.observeProperty(obj, key);
        }
      }
    };
    return AccessKeyed;
  }(Expression);
  var CallScope = exports.CallScope = function(_Expression10) {
    _inherits(CallScope, _Expression10);
    function CallScope(name, args, ancestor) {
      _classCallCheck(this, CallScope);
      var _this12 = _possibleConstructorReturn(this, _Expression10.call(this));
      _this12.name = name;
      _this12.args = args;
      _this12.ancestor = ancestor;
      return _this12;
    }
    CallScope.prototype.evaluate = function evaluate(scope, lookupFunctions, mustEvaluate) {
      var args = evalList(scope, this.args, lookupFunctions);
      var context = getContextFor(this.name, scope, this.ancestor);
      var func = getFunction(context, this.name, mustEvaluate);
      if (func) {
        return func.apply(context, args);
      }
      return undefined;
    };
    CallScope.prototype.accept = function accept(visitor) {
      return visitor.visitCallScope(this);
    };
    CallScope.prototype.connect = function connect(binding, scope) {
      var args = this.args;
      var i = args.length;
      while (i--) {
        args[i].connect(binding, scope);
      }
    };
    return CallScope;
  }(Expression);
  var CallMember = exports.CallMember = function(_Expression11) {
    _inherits(CallMember, _Expression11);
    function CallMember(object, name, args) {
      _classCallCheck(this, CallMember);
      var _this13 = _possibleConstructorReturn(this, _Expression11.call(this));
      _this13.object = object;
      _this13.name = name;
      _this13.args = args;
      return _this13;
    }
    CallMember.prototype.evaluate = function evaluate(scope, lookupFunctions, mustEvaluate) {
      var instance = this.object.evaluate(scope, lookupFunctions);
      var args = evalList(scope, this.args, lookupFunctions);
      var func = getFunction(instance, this.name, mustEvaluate);
      if (func) {
        return func.apply(instance, args);
      }
      return undefined;
    };
    CallMember.prototype.accept = function accept(visitor) {
      return visitor.visitCallMember(this);
    };
    CallMember.prototype.connect = function connect(binding, scope) {
      this.object.connect(binding, scope);
      var obj = this.object.evaluate(scope);
      if (getFunction(obj, this.name, false)) {
        var args = this.args;
        var _i8 = args.length;
        while (_i8--) {
          args[_i8].connect(binding, scope);
        }
      }
    };
    return CallMember;
  }(Expression);
  var CallFunction = exports.CallFunction = function(_Expression12) {
    _inherits(CallFunction, _Expression12);
    function CallFunction(func, args) {
      _classCallCheck(this, CallFunction);
      var _this14 = _possibleConstructorReturn(this, _Expression12.call(this));
      _this14.func = func;
      _this14.args = args;
      return _this14;
    }
    CallFunction.prototype.evaluate = function evaluate(scope, lookupFunctions, mustEvaluate) {
      var func = this.func.evaluate(scope, lookupFunctions);
      if (typeof func === 'function') {
        return func.apply(null, evalList(scope, this.args, lookupFunctions));
      }
      if (!mustEvaluate && (func === null || func === undefined)) {
        return undefined;
      }
      throw new Error(this.func + ' is not a function');
    };
    CallFunction.prototype.accept = function accept(visitor) {
      return visitor.visitCallFunction(this);
    };
    CallFunction.prototype.connect = function connect(binding, scope) {
      this.func.connect(binding, scope);
      var func = this.func.evaluate(scope);
      if (typeof func === 'function') {
        var args = this.args;
        var _i9 = args.length;
        while (_i9--) {
          args[_i9].connect(binding, scope);
        }
      }
    };
    return CallFunction;
  }(Expression);
  var Binary = exports.Binary = function(_Expression13) {
    _inherits(Binary, _Expression13);
    function Binary(operation, left, right) {
      _classCallCheck(this, Binary);
      var _this15 = _possibleConstructorReturn(this, _Expression13.call(this));
      _this15.operation = operation;
      _this15.left = left;
      _this15.right = right;
      return _this15;
    }
    Binary.prototype.evaluate = function evaluate(scope, lookupFunctions) {
      var left = this.left.evaluate(scope);
      switch (this.operation) {
        case '&&':
          return left && this.right.evaluate(scope);
        case '||':
          return left || this.right.evaluate(scope);
      }
      var right = this.right.evaluate(scope);
      switch (this.operation) {
        case '==':
          return left == right;
        case '===':
          return left === right;
        case '!=':
          return left != right;
        case '!==':
          return left !== right;
      }
      if (left === null || right === null) {
        switch (this.operation) {
          case '+':
            if (left !== null)
              return left;
            if (right !== null)
              return right;
            return 0;
          case '-':
            if (left !== null)
              return left;
            if (right !== null)
              return 0 - right;
            return 0;
        }
        return null;
      }
      switch (this.operation) {
        case '+':
          return autoConvertAdd(left, right);
        case '-':
          return left - right;
        case '*':
          return left * right;
        case '/':
          return left / right;
        case '%':
          return left % right;
        case '<':
          return left < right;
        case '>':
          return left > right;
        case '<=':
          return left <= right;
        case '>=':
          return left >= right;
        case '^':
          return left ^ right;
      }
      throw new Error('Internal error [' + this.operation + '] not handled');
    };
    Binary.prototype.accept = function accept(visitor) {
      return visitor.visitBinary(this);
    };
    Binary.prototype.connect = function connect(binding, scope) {
      this.left.connect(binding, scope);
      var left = this.left.evaluate(scope);
      if (this.operation === '&&' && !left || this.operation === '||' && left) {
        return;
      }
      this.right.connect(binding, scope);
    };
    return Binary;
  }(Expression);
  var PrefixNot = exports.PrefixNot = function(_Expression14) {
    _inherits(PrefixNot, _Expression14);
    function PrefixNot(operation, expression) {
      _classCallCheck(this, PrefixNot);
      var _this16 = _possibleConstructorReturn(this, _Expression14.call(this));
      _this16.operation = operation;
      _this16.expression = expression;
      return _this16;
    }
    PrefixNot.prototype.evaluate = function evaluate(scope, lookupFunctions) {
      return !this.expression.evaluate(scope);
    };
    PrefixNot.prototype.accept = function accept(visitor) {
      return visitor.visitPrefix(this);
    };
    PrefixNot.prototype.connect = function connect(binding, scope) {
      this.expression.connect(binding, scope);
    };
    return PrefixNot;
  }(Expression);
  var LiteralPrimitive = exports.LiteralPrimitive = function(_Expression15) {
    _inherits(LiteralPrimitive, _Expression15);
    function LiteralPrimitive(value) {
      _classCallCheck(this, LiteralPrimitive);
      var _this17 = _possibleConstructorReturn(this, _Expression15.call(this));
      _this17.value = value;
      return _this17;
    }
    LiteralPrimitive.prototype.evaluate = function evaluate(scope, lookupFunctions) {
      return this.value;
    };
    LiteralPrimitive.prototype.accept = function accept(visitor) {
      return visitor.visitLiteralPrimitive(this);
    };
    LiteralPrimitive.prototype.connect = function connect(binding, scope) {};
    return LiteralPrimitive;
  }(Expression);
  var LiteralString = exports.LiteralString = function(_Expression16) {
    _inherits(LiteralString, _Expression16);
    function LiteralString(value) {
      _classCallCheck(this, LiteralString);
      var _this18 = _possibleConstructorReturn(this, _Expression16.call(this));
      _this18.value = value;
      return _this18;
    }
    LiteralString.prototype.evaluate = function evaluate(scope, lookupFunctions) {
      return this.value;
    };
    LiteralString.prototype.accept = function accept(visitor) {
      return visitor.visitLiteralString(this);
    };
    LiteralString.prototype.connect = function connect(binding, scope) {};
    return LiteralString;
  }(Expression);
  var LiteralArray = exports.LiteralArray = function(_Expression17) {
    _inherits(LiteralArray, _Expression17);
    function LiteralArray(elements) {
      _classCallCheck(this, LiteralArray);
      var _this19 = _possibleConstructorReturn(this, _Expression17.call(this));
      _this19.elements = elements;
      return _this19;
    }
    LiteralArray.prototype.evaluate = function evaluate(scope, lookupFunctions) {
      var elements = this.elements;
      var result = [];
      for (var _i10 = 0,
          length = elements.length; _i10 < length; ++_i10) {
        result[_i10] = elements[_i10].evaluate(scope, lookupFunctions);
      }
      return result;
    };
    LiteralArray.prototype.accept = function accept(visitor) {
      return visitor.visitLiteralArray(this);
    };
    LiteralArray.prototype.connect = function connect(binding, scope) {
      var length = this.elements.length;
      for (var _i11 = 0; _i11 < length; _i11++) {
        this.elements[_i11].connect(binding, scope);
      }
    };
    return LiteralArray;
  }(Expression);
  var LiteralObject = exports.LiteralObject = function(_Expression18) {
    _inherits(LiteralObject, _Expression18);
    function LiteralObject(keys, values) {
      _classCallCheck(this, LiteralObject);
      var _this20 = _possibleConstructorReturn(this, _Expression18.call(this));
      _this20.keys = keys;
      _this20.values = values;
      return _this20;
    }
    LiteralObject.prototype.evaluate = function evaluate(scope, lookupFunctions) {
      var instance = {};
      var keys = this.keys;
      var values = this.values;
      for (var _i12 = 0,
          length = keys.length; _i12 < length; ++_i12) {
        instance[keys[_i12]] = values[_i12].evaluate(scope, lookupFunctions);
      }
      return instance;
    };
    LiteralObject.prototype.accept = function accept(visitor) {
      return visitor.visitLiteralObject(this);
    };
    LiteralObject.prototype.connect = function connect(binding, scope) {
      var length = this.keys.length;
      for (var _i13 = 0; _i13 < length; _i13++) {
        this.values[_i13].connect(binding, scope);
      }
    };
    return LiteralObject;
  }(Expression);
  var evalListCache = [[], [0], [0, 0], [0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0, 0]];
  function evalList(scope, list, lookupFunctions) {
    var length = list.length;
    for (var cacheLength = evalListCache.length; cacheLength <= length; ++cacheLength) {
      evalListCache.push([]);
    }
    var result = evalListCache[length];
    for (var _i14 = 0; _i14 < length; ++_i14) {
      result[_i14] = list[_i14].evaluate(scope, lookupFunctions);
    }
    return result;
  }
  function autoConvertAdd(a, b) {
    if (a !== null && b !== null) {
      if (typeof a === 'string' && typeof b !== 'string') {
        return a + b.toString();
      }
      if (typeof a !== 'string' && typeof b === 'string') {
        return a.toString() + b;
      }
      return a + b;
    }
    if (a !== null) {
      return a;
    }
    if (b !== null) {
      return b;
    }
    return 0;
  }
  function getFunction(obj, name, mustExist) {
    var func = obj === null || obj === undefined ? null : obj[name];
    if (typeof func === 'function') {
      return func;
    }
    if (!mustExist && (func === null || func === undefined)) {
      return null;
    }
    throw new Error(name + ' is not a function');
  }
  function getKeyed(obj, key) {
    if (Array.isArray(obj)) {
      return obj[parseInt(key, 10)];
    } else if (obj) {
      return obj[key];
    } else if (obj === null || obj === undefined) {
      return undefined;
    }
    return obj[key];
  }
  function setKeyed(obj, key, value) {
    if (Array.isArray(obj)) {
      var index = parseInt(key, 10);
      if (obj.length <= index) {
        obj.length = index + 1;
      }
      obj[index] = value;
    } else {
      obj[key] = value;
    }
    return value;
  }
  var Unparser = exports.Unparser = function() {
    function Unparser(buffer) {
      _classCallCheck(this, Unparser);
      this.buffer = buffer;
    }
    Unparser.unparse = function unparse(expression) {
      var buffer = [];
      var visitor = new Unparser(buffer);
      expression.accept(visitor);
      return buffer.join('');
    };
    Unparser.prototype.write = function write(text) {
      this.buffer.push(text);
    };
    Unparser.prototype.writeArgs = function writeArgs(args) {
      this.write('(');
      for (var _i15 = 0,
          length = args.length; _i15 < length; ++_i15) {
        if (_i15 !== 0) {
          this.write(',');
        }
        args[_i15].accept(this);
      }
      this.write(')');
    };
    Unparser.prototype.visitChain = function visitChain(chain) {
      var expressions = chain.expressions;
      for (var _i16 = 0,
          length = expression.length; _i16 < length; ++_i16) {
        if (_i16 !== 0) {
          this.write(';');
        }
        expressions[_i16].accept(this);
      }
    };
    Unparser.prototype.visitBindingBehavior = function visitBindingBehavior(behavior) {
      var args = behavior.args;
      behavior.expression.accept(this);
      this.write('&' + behavior.name);
      for (var _i17 = 0,
          length = args.length; _i17 < length; ++_i17) {
        this.write(':');
        args[_i17].accept(this);
      }
    };
    Unparser.prototype.visitValueConverter = function visitValueConverter(converter) {
      var args = converter.args;
      converter.expression.accept(this);
      this.write('|' + converter.name);
      for (var _i18 = 0,
          length = args.length; _i18 < length; ++_i18) {
        this.write(':');
        args[_i18].accept(this);
      }
    };
    Unparser.prototype.visitAssign = function visitAssign(assign) {
      assign.target.accept(this);
      this.write('=');
      assign.value.accept(this);
    };
    Unparser.prototype.visitConditional = function visitConditional(conditional) {
      conditional.condition.accept(this);
      this.write('?');
      conditional.yes.accept(this);
      this.write(':');
      conditional.no.accept(this);
    };
    Unparser.prototype.visitAccessThis = function visitAccessThis(access) {
      if (access.ancestor === 0) {
        this.write('$this');
        return;
      }
      this.write('$parent');
      var i = access.ancestor - 1;
      while (i--) {
        this.write('.$parent');
      }
    };
    Unparser.prototype.visitAccessScope = function visitAccessScope(access) {
      var i = access.ancestor;
      while (i--) {
        this.write('$parent.');
      }
      this.write(access.name);
    };
    Unparser.prototype.visitAccessMember = function visitAccessMember(access) {
      access.object.accept(this);
      this.write('.' + access.name);
    };
    Unparser.prototype.visitAccessKeyed = function visitAccessKeyed(access) {
      access.object.accept(this);
      this.write('[');
      access.key.accept(this);
      this.write(']');
    };
    Unparser.prototype.visitCallScope = function visitCallScope(call) {
      var i = call.ancestor;
      while (i--) {
        this.write('$parent.');
      }
      this.write(call.name);
      this.writeArgs(call.args);
    };
    Unparser.prototype.visitCallFunction = function visitCallFunction(call) {
      call.func.accept(this);
      this.writeArgs(call.args);
    };
    Unparser.prototype.visitCallMember = function visitCallMember(call) {
      call.object.accept(this);
      this.write('.' + call.name);
      this.writeArgs(call.args);
    };
    Unparser.prototype.visitPrefix = function visitPrefix(prefix) {
      this.write('(' + prefix.operation);
      prefix.expression.accept(this);
      this.write(')');
    };
    Unparser.prototype.visitBinary = function visitBinary(binary) {
      binary.left.accept(this);
      this.write(binary.operation);
      binary.right.accept(this);
    };
    Unparser.prototype.visitLiteralPrimitive = function visitLiteralPrimitive(literal) {
      this.write('' + literal.value);
    };
    Unparser.prototype.visitLiteralArray = function visitLiteralArray(literal) {
      var elements = literal.elements;
      this.write('[');
      for (var _i19 = 0,
          length = elements.length; _i19 < length; ++_i19) {
        if (_i19 !== 0) {
          this.write(',');
        }
        elements[_i19].accept(this);
      }
      this.write(']');
    };
    Unparser.prototype.visitLiteralObject = function visitLiteralObject(literal) {
      var keys = literal.keys;
      var values = literal.values;
      this.write('{');
      for (var _i20 = 0,
          length = keys.length; _i20 < length; ++_i20) {
        if (_i20 !== 0) {
          this.write(',');
        }
        this.write('\'' + keys[_i20] + '\':');
        values[_i20].accept(this);
      }
      this.write('}');
    };
    Unparser.prototype.visitLiteralString = function visitLiteralString(literal) {
      var escaped = literal.value.replace(/'/g, "\'");
      this.write('\'' + escaped + '\'');
    };
    return Unparser;
  }();
  var ExpressionCloner = exports.ExpressionCloner = function() {
    function ExpressionCloner() {
      _classCallCheck(this, ExpressionCloner);
    }
    ExpressionCloner.prototype.cloneExpressionArray = function cloneExpressionArray(array) {
      var clonedArray = [];
      var i = array.length;
      while (i--) {
        clonedArray[i] = array[i].accept(this);
      }
      return clonedArray;
    };
    ExpressionCloner.prototype.visitChain = function visitChain(chain) {
      return new Chain(this.cloneExpressionArray(chain.expressions));
    };
    ExpressionCloner.prototype.visitBindingBehavior = function visitBindingBehavior(behavior) {
      return new BindingBehavior(behavior.expression.accept(this), behavior.name, this.cloneExpressionArray(behavior.args));
    };
    ExpressionCloner.prototype.visitValueConverter = function visitValueConverter(converter) {
      return new ValueConverter(converter.expression.accept(this), converter.name, this.cloneExpressionArray(converter.args));
    };
    ExpressionCloner.prototype.visitAssign = function visitAssign(assign) {
      return new Assign(assign.target.accept(this), assign.value.accept(this));
    };
    ExpressionCloner.prototype.visitConditional = function visitConditional(conditional) {
      return new Conditional(conditional.condition.accept(this), conditional.yes.accept(this), conditional.no.accept(this));
    };
    ExpressionCloner.prototype.visitAccessThis = function visitAccessThis(access) {
      return new AccessThis(access.ancestor);
    };
    ExpressionCloner.prototype.visitAccessScope = function visitAccessScope(access) {
      return new AccessScope(access.name, access.ancestor);
    };
    ExpressionCloner.prototype.visitAccessMember = function visitAccessMember(access) {
      return new AccessMember(access.object.accept(this), access.name);
    };
    ExpressionCloner.prototype.visitAccessKeyed = function visitAccessKeyed(access) {
      return new AccessKeyed(access.object.accept(this), access.key.accept(this));
    };
    ExpressionCloner.prototype.visitCallScope = function visitCallScope(call) {
      return new CallScope(call.name, this.cloneExpressionArray(call.args), call.ancestor);
    };
    ExpressionCloner.prototype.visitCallFunction = function visitCallFunction(call) {
      return new CallFunction(call.func.accept(this), this.cloneExpressionArray(call.args));
    };
    ExpressionCloner.prototype.visitCallMember = function visitCallMember(call) {
      return new CallMember(call.object.accept(this), call.name, this.cloneExpressionArray(call.args));
    };
    ExpressionCloner.prototype.visitPrefix = function visitPrefix(prefix) {
      return new PrefixNot(prefix.operation, prefix.expression.accept(this));
    };
    ExpressionCloner.prototype.visitBinary = function visitBinary(binary) {
      return new Binary(binary.operation, binary.left.accept(this), binary.right.accept(this));
    };
    ExpressionCloner.prototype.visitLiteralPrimitive = function visitLiteralPrimitive(literal) {
      return new LiteralPrimitive(literal);
    };
    ExpressionCloner.prototype.visitLiteralArray = function visitLiteralArray(literal) {
      return new LiteralArray(this.cloneExpressionArray(literal.elements));
    };
    ExpressionCloner.prototype.visitLiteralObject = function visitLiteralObject(literal) {
      return new LiteralObject(literal.keys, this.cloneExpressionArray(literal.values));
    };
    ExpressionCloner.prototype.visitLiteralString = function visitLiteralString(literal) {
      return new LiteralString(literal.value);
    };
    return ExpressionCloner;
  }();
  function cloneExpression(expression) {
    var visitor = new ExpressionCloner();
    return expression.accept(visitor);
  }
  var bindingMode = exports.bindingMode = {
    oneTime: 0,
    oneWay: 1,
    twoWay: 2
  };
  var Token = exports.Token = function() {
    function Token(index, text) {
      _classCallCheck(this, Token);
      this.index = index;
      this.text = text;
    }
    Token.prototype.withOp = function withOp(op) {
      this.opKey = op;
      return this;
    };
    Token.prototype.withGetterSetter = function withGetterSetter(key) {
      this.key = key;
      return this;
    };
    Token.prototype.withValue = function withValue(value) {
      this.value = value;
      return this;
    };
    Token.prototype.toString = function toString() {
      return 'Token(' + this.text + ')';
    };
    return Token;
  }();
  var Lexer = exports.Lexer = function() {
    function Lexer() {
      _classCallCheck(this, Lexer);
    }
    Lexer.prototype.lex = function lex(text) {
      var scanner = new Scanner(text);
      var tokens = [];
      var token = scanner.scanToken();
      while (token) {
        tokens.push(token);
        token = scanner.scanToken();
      }
      return tokens;
    };
    return Lexer;
  }();
  var Scanner = exports.Scanner = function() {
    function Scanner(input) {
      _classCallCheck(this, Scanner);
      this.input = input;
      this.length = input.length;
      this.peek = 0;
      this.index = -1;
      this.advance();
    }
    Scanner.prototype.scanToken = function scanToken() {
      while (this.peek <= $SPACE) {
        if (++this.index >= this.length) {
          this.peek = $EOF;
          return null;
        }
        this.peek = this.input.charCodeAt(this.index);
      }
      if (isIdentifierStart(this.peek)) {
        return this.scanIdentifier();
      }
      if (isDigit(this.peek)) {
        return this.scanNumber(this.index);
      }
      var start = this.index;
      switch (this.peek) {
        case $PERIOD:
          this.advance();
          return isDigit(this.peek) ? this.scanNumber(start) : new Token(start, '.');
        case $LPAREN:
        case $RPAREN:
        case $LBRACE:
        case $RBRACE:
        case $LBRACKET:
        case $RBRACKET:
        case $COMMA:
        case $COLON:
        case $SEMICOLON:
          return this.scanCharacter(start, String.fromCharCode(this.peek));
        case $SQ:
        case $DQ:
          return this.scanString();
        case $PLUS:
        case $MINUS:
        case $STAR:
        case $SLASH:
        case $PERCENT:
        case $CARET:
        case $QUESTION:
          return this.scanOperator(start, String.fromCharCode(this.peek));
        case $LT:
        case $GT:
        case $BANG:
        case $EQ:
          return this.scanComplexOperator(start, $EQ, String.fromCharCode(this.peek), '=');
        case $AMPERSAND:
          return this.scanComplexOperator(start, $AMPERSAND, '&', '&');
        case $BAR:
          return this.scanComplexOperator(start, $BAR, '|', '|');
        case $NBSP:
          while (isWhitespace(this.peek)) {
            this.advance();
          }
          return this.scanToken();
      }
      var character = String.fromCharCode(this.peek);
      this.error('Unexpected character [' + character + ']');
      return null;
    };
    Scanner.prototype.scanCharacter = function scanCharacter(start, text) {
      assert(this.peek === text.charCodeAt(0));
      this.advance();
      return new Token(start, text);
    };
    Scanner.prototype.scanOperator = function scanOperator(start, text) {
      assert(this.peek === text.charCodeAt(0));
      assert(OPERATORS.indexOf(text) !== -1);
      this.advance();
      return new Token(start, text).withOp(text);
    };
    Scanner.prototype.scanComplexOperator = function scanComplexOperator(start, code, one, two) {
      assert(this.peek === one.charCodeAt(0));
      this.advance();
      var text = one;
      if (this.peek === code) {
        this.advance();
        text += two;
      }
      if (this.peek === code) {
        this.advance();
        text += two;
      }
      assert(OPERATORS.indexOf(text) !== -1);
      return new Token(start, text).withOp(text);
    };
    Scanner.prototype.scanIdentifier = function scanIdentifier() {
      assert(isIdentifierStart(this.peek));
      var start = this.index;
      this.advance();
      while (isIdentifierPart(this.peek)) {
        this.advance();
      }
      var text = this.input.substring(start, this.index);
      var result = new Token(start, text);
      if (OPERATORS.indexOf(text) !== -1) {
        result.withOp(text);
      } else {
        result.withGetterSetter(text);
      }
      return result;
    };
    Scanner.prototype.scanNumber = function scanNumber(start) {
      assert(isDigit(this.peek));
      var simple = this.index === start;
      this.advance();
      while (true) {
        if (isDigit(this.peek)) {} else if (this.peek === $PERIOD) {
          simple = false;
        } else if (isExponentStart(this.peek)) {
          this.advance();
          if (isExponentSign(this.peek)) {
            this.advance();
          }
          if (!isDigit(this.peek)) {
            this.error('Invalid exponent', -1);
          }
          simple = false;
        } else {
          break;
        }
        this.advance();
      }
      var text = this.input.substring(start, this.index);
      var value = simple ? parseInt(text, 10) : parseFloat(text);
      return new Token(start, text).withValue(value);
    };
    Scanner.prototype.scanString = function scanString() {
      assert(this.peek === $SQ || this.peek === $DQ);
      var start = this.index;
      var quote = this.peek;
      this.advance();
      var buffer = void 0;
      var marker = this.index;
      while (this.peek !== quote) {
        if (this.peek === $BACKSLASH) {
          if (!buffer) {
            buffer = [];
          }
          buffer.push(this.input.substring(marker, this.index));
          this.advance();
          var _unescaped = void 0;
          if (this.peek === $u) {
            var hex = this.input.substring(this.index + 1, this.index + 5);
            if (!/[A-Z0-9]{4}/.test(hex)) {
              this.error('Invalid unicode escape [\\u' + hex + ']');
            }
            _unescaped = parseInt(hex, 16);
            for (var _i21 = 0; _i21 < 5; ++_i21) {
              this.advance();
            }
          } else {
            _unescaped = unescape(this.peek);
            this.advance();
          }
          buffer.push(String.fromCharCode(_unescaped));
          marker = this.index;
        } else if (this.peek === $EOF) {
          this.error('Unterminated quote');
        } else {
          this.advance();
        }
      }
      var last = this.input.substring(marker, this.index);
      this.advance();
      var text = this.input.substring(start, this.index);
      var unescaped = last;
      if (buffer !== null && buffer !== undefined) {
        buffer.push(last);
        unescaped = buffer.join('');
      }
      return new Token(start, text).withValue(unescaped);
    };
    Scanner.prototype.advance = function advance() {
      if (++this.index >= this.length) {
        this.peek = $EOF;
      } else {
        this.peek = this.input.charCodeAt(this.index);
      }
    };
    Scanner.prototype.error = function error(message) {
      var offset = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];
      var position = this.index + offset;
      throw new Error('Lexer Error: ' + message + ' at column ' + position + ' in expression [' + this.input + ']');
    };
    return Scanner;
  }();
  var OPERATORS = ['undefined', 'null', 'true', 'false', '+', '-', '*', '/', '%', '^', '=', '==', '===', '!=', '!==', '<', '>', '<=', '>=', '&&', '||', '&', '|', '!', '?'];
  var $EOF = 0;
  var $TAB = 9;
  var $LF = 10;
  var $VTAB = 11;
  var $FF = 12;
  var $CR = 13;
  var $SPACE = 32;
  var $BANG = 33;
  var $DQ = 34;
  var $$ = 36;
  var $PERCENT = 37;
  var $AMPERSAND = 38;
  var $SQ = 39;
  var $LPAREN = 40;
  var $RPAREN = 41;
  var $STAR = 42;
  var $PLUS = 43;
  var $COMMA = 44;
  var $MINUS = 45;
  var $PERIOD = 46;
  var $SLASH = 47;
  var $COLON = 58;
  var $SEMICOLON = 59;
  var $LT = 60;
  var $EQ = 61;
  var $GT = 62;
  var $QUESTION = 63;
  var $0 = 48;
  var $9 = 57;
  var $A = 65;
  var $E = 69;
  var $Z = 90;
  var $LBRACKET = 91;
  var $BACKSLASH = 92;
  var $RBRACKET = 93;
  var $CARET = 94;
  var $_ = 95;
  var $a = 97;
  var $e = 101;
  var $f = 102;
  var $n = 110;
  var $r = 114;
  var $t = 116;
  var $u = 117;
  var $v = 118;
  var $z = 122;
  var $LBRACE = 123;
  var $BAR = 124;
  var $RBRACE = 125;
  var $NBSP = 160;
  function isWhitespace(code) {
    return code >= $TAB && code <= $SPACE || code === $NBSP;
  }
  function isIdentifierStart(code) {
    return $a <= code && code <= $z || $A <= code && code <= $Z || code === $_ || code === $$;
  }
  function isIdentifierPart(code) {
    return $a <= code && code <= $z || $A <= code && code <= $Z || $0 <= code && code <= $9 || code === $_ || code === $$;
  }
  function isDigit(code) {
    return $0 <= code && code <= $9;
  }
  function isExponentStart(code) {
    return code === $e || code === $E;
  }
  function isExponentSign(code) {
    return code === $MINUS || code === $PLUS;
  }
  function unescape(code) {
    switch (code) {
      case $n:
        return $LF;
      case $f:
        return $FF;
      case $r:
        return $CR;
      case $t:
        return $TAB;
      case $v:
        return $VTAB;
      default:
        return code;
    }
  }
  function assert(condition, message) {
    if (!condition) {
      throw message || 'Assertion failed';
    }
  }
  var EOF = new Token(-1, null);
  var Parser = exports.Parser = function() {
    function Parser() {
      _classCallCheck(this, Parser);
      this.cache = {};
      this.lexer = new Lexer();
    }
    Parser.prototype.parse = function parse(input) {
      input = input || '';
      return this.cache[input] || (this.cache[input] = new ParserImplementation(this.lexer, input).parseChain());
    };
    return Parser;
  }();
  var ParserImplementation = exports.ParserImplementation = function() {
    function ParserImplementation(lexer, input) {
      _classCallCheck(this, ParserImplementation);
      this.index = 0;
      this.input = input;
      this.tokens = lexer.lex(input);
    }
    ParserImplementation.prototype.parseChain = function parseChain() {
      var isChain = false;
      var expressions = [];
      while (this.optional(';')) {
        isChain = true;
      }
      while (this.index < this.tokens.length) {
        if (this.peek.text === ')' || this.peek.text === '}' || this.peek.text === ']') {
          this.error('Unconsumed token ' + this.peek.text);
        }
        var expr = this.parseBindingBehavior();
        expressions.push(expr);
        while (this.optional(';')) {
          isChain = true;
        }
        if (isChain) {
          this.error('Multiple expressions are not allowed.');
        }
      }
      return expressions.length === 1 ? expressions[0] : new Chain(expressions);
    };
    ParserImplementation.prototype.parseBindingBehavior = function parseBindingBehavior() {
      var result = this.parseValueConverter();
      while (this.optional('&')) {
        var name = this.peek.text;
        var args = [];
        this.advance();
        while (this.optional(':')) {
          args.push(this.parseExpression());
        }
        result = new BindingBehavior(result, name, args);
      }
      return result;
    };
    ParserImplementation.prototype.parseValueConverter = function parseValueConverter() {
      var result = this.parseExpression();
      while (this.optional('|')) {
        var name = this.peek.text;
        var args = [];
        this.advance();
        while (this.optional(':')) {
          args.push(this.parseExpression());
        }
        result = new ValueConverter(result, name, args, [result].concat(args));
      }
      return result;
    };
    ParserImplementation.prototype.parseExpression = function parseExpression() {
      var start = this.peek.index;
      var result = this.parseConditional();
      while (this.peek.text === '=') {
        if (!result.isAssignable) {
          var end = this.index < this.tokens.length ? this.peek.index : this.input.length;
          var _expression = this.input.substring(start, end);
          this.error('Expression ' + _expression + ' is not assignable');
        }
        this.expect('=');
        result = new Assign(result, this.parseConditional());
      }
      return result;
    };
    ParserImplementation.prototype.parseConditional = function parseConditional() {
      var start = this.peek.index;
      var result = this.parseLogicalOr();
      if (this.optional('?')) {
        var yes = this.parseExpression();
        if (!this.optional(':')) {
          var end = this.index < this.tokens.length ? this.peek.index : this.input.length;
          var _expression2 = this.input.substring(start, end);
          this.error('Conditional expression ' + _expression2 + ' requires all 3 expressions');
        }
        var no = this.parseExpression();
        result = new Conditional(result, yes, no);
      }
      return result;
    };
    ParserImplementation.prototype.parseLogicalOr = function parseLogicalOr() {
      var result = this.parseLogicalAnd();
      while (this.optional('||')) {
        result = new Binary('||', result, this.parseLogicalAnd());
      }
      return result;
    };
    ParserImplementation.prototype.parseLogicalAnd = function parseLogicalAnd() {
      var result = this.parseEquality();
      while (this.optional('&&')) {
        result = new Binary('&&', result, this.parseEquality());
      }
      return result;
    };
    ParserImplementation.prototype.parseEquality = function parseEquality() {
      var result = this.parseRelational();
      while (true) {
        if (this.optional('==')) {
          result = new Binary('==', result, this.parseRelational());
        } else if (this.optional('!=')) {
          result = new Binary('!=', result, this.parseRelational());
        } else if (this.optional('===')) {
          result = new Binary('===', result, this.parseRelational());
        } else if (this.optional('!==')) {
          result = new Binary('!==', result, this.parseRelational());
        } else {
          return result;
        }
      }
    };
    ParserImplementation.prototype.parseRelational = function parseRelational() {
      var result = this.parseAdditive();
      while (true) {
        if (this.optional('<')) {
          result = new Binary('<', result, this.parseAdditive());
        } else if (this.optional('>')) {
          result = new Binary('>', result, this.parseAdditive());
        } else if (this.optional('<=')) {
          result = new Binary('<=', result, this.parseAdditive());
        } else if (this.optional('>=')) {
          result = new Binary('>=', result, this.parseAdditive());
        } else {
          return result;
        }
      }
    };
    ParserImplementation.prototype.parseAdditive = function parseAdditive() {
      var result = this.parseMultiplicative();
      while (true) {
        if (this.optional('+')) {
          result = new Binary('+', result, this.parseMultiplicative());
        } else if (this.optional('-')) {
          result = new Binary('-', result, this.parseMultiplicative());
        } else {
          return result;
        }
      }
    };
    ParserImplementation.prototype.parseMultiplicative = function parseMultiplicative() {
      var result = this.parsePrefix();
      while (true) {
        if (this.optional('*')) {
          result = new Binary('*', result, this.parsePrefix());
        } else if (this.optional('%')) {
          result = new Binary('%', result, this.parsePrefix());
        } else if (this.optional('/')) {
          result = new Binary('/', result, this.parsePrefix());
        } else {
          return result;
        }
      }
    };
    ParserImplementation.prototype.parsePrefix = function parsePrefix() {
      if (this.optional('+')) {
        return this.parsePrefix();
      } else if (this.optional('-')) {
        return new Binary('-', new LiteralPrimitive(0), this.parsePrefix());
      } else if (this.optional('!')) {
        return new PrefixNot('!', this.parsePrefix());
      }
      return this.parseAccessOrCallMember();
    };
    ParserImplementation.prototype.parseAccessOrCallMember = function parseAccessOrCallMember() {
      var result = this.parsePrimary();
      while (true) {
        if (this.optional('.')) {
          var name = this.peek.text;
          this.advance();
          if (this.optional('(')) {
            var args = this.parseExpressionList(')');
            this.expect(')');
            if (result instanceof AccessThis) {
              result = new CallScope(name, args, result.ancestor);
            } else {
              result = new CallMember(result, name, args);
            }
          } else {
            if (result instanceof AccessThis) {
              result = new AccessScope(name, result.ancestor);
            } else {
              result = new AccessMember(result, name);
            }
          }
        } else if (this.optional('[')) {
          var key = this.parseExpression();
          this.expect(']');
          result = new AccessKeyed(result, key);
        } else if (this.optional('(')) {
          var _args = this.parseExpressionList(')');
          this.expect(')');
          result = new CallFunction(result, _args);
        } else {
          return result;
        }
      }
    };
    ParserImplementation.prototype.parsePrimary = function parsePrimary() {
      if (this.optional('(')) {
        var result = this.parseExpression();
        this.expect(')');
        return result;
      } else if (this.optional('null')) {
        return new LiteralPrimitive(null);
      } else if (this.optional('undefined')) {
        return new LiteralPrimitive(undefined);
      } else if (this.optional('true')) {
        return new LiteralPrimitive(true);
      } else if (this.optional('false')) {
        return new LiteralPrimitive(false);
      } else if (this.optional('[')) {
        var elements = this.parseExpressionList(']');
        this.expect(']');
        return new LiteralArray(elements);
      } else if (this.peek.text === '{') {
        return this.parseObject();
      } else if (this.peek.key !== null && this.peek.key !== undefined) {
        return this.parseAccessOrCallScope();
      } else if (this.peek.value !== null && this.peek.value !== undefined) {
        var value = this.peek.value;
        this.advance();
        return value instanceof String || typeof value === 'string' ? new LiteralString(value) : new LiteralPrimitive(value);
      } else if (this.index >= this.tokens.length) {
        throw new Error('Unexpected end of expression: ' + this.input);
      } else {
        this.error('Unexpected token ' + this.peek.text);
      }
    };
    ParserImplementation.prototype.parseAccessOrCallScope = function parseAccessOrCallScope() {
      var name = this.peek.key;
      this.advance();
      if (name === '$this') {
        return new AccessThis(0);
      }
      var ancestor = 0;
      while (name === '$parent') {
        ancestor++;
        if (this.optional('.')) {
          name = this.peek.key;
          this.advance();
        } else if (this.peek === EOF || this.peek.text === '(' || this.peek.text === '[' || this.peek.text === '}') {
          return new AccessThis(ancestor);
        } else {
          this.error('Unexpected token ' + this.peek.text);
        }
      }
      if (this.optional('(')) {
        var args = this.parseExpressionList(')');
        this.expect(')');
        return new CallScope(name, args, ancestor);
      }
      return new AccessScope(name, ancestor);
    };
    ParserImplementation.prototype.parseObject = function parseObject() {
      var keys = [];
      var values = [];
      this.expect('{');
      if (this.peek.text !== '}') {
        do {
          var peek = this.peek;
          var value = peek.value;
          keys.push(typeof value === 'string' ? value : peek.text);
          this.advance();
          if (peek.key && (this.peek.text === ',' || this.peek.text === '}')) {
            --this.index;
            values.push(this.parseAccessOrCallScope());
          } else {
            this.expect(':');
            values.push(this.parseExpression());
          }
        } while (this.optional(','));
      }
      this.expect('}');
      return new LiteralObject(keys, values);
    };
    ParserImplementation.prototype.parseExpressionList = function parseExpressionList(terminator) {
      var result = [];
      if (this.peek.text !== terminator) {
        do {
          result.push(this.parseExpression());
        } while (this.optional(','));
      }
      return result;
    };
    ParserImplementation.prototype.optional = function optional(text) {
      if (this.peek.text === text) {
        this.advance();
        return true;
      }
      return false;
    };
    ParserImplementation.prototype.expect = function expect(text) {
      if (this.peek.text === text) {
        this.advance();
      } else {
        this.error('Missing expected ' + text);
      }
    };
    ParserImplementation.prototype.advance = function advance() {
      this.index++;
    };
    ParserImplementation.prototype.error = function error(message) {
      var location = this.index < this.tokens.length ? 'at column ' + (this.tokens[this.index].index + 1) + ' in' : 'at the end of the expression';
      throw new Error('Parser Error: ' + message + ' ' + location + ' [' + this.input + ']');
    };
    _createClass(ParserImplementation, [{
      key: 'peek',
      get: function get() {
        return this.index < this.tokens.length ? this.tokens[this.index] : EOF;
      }
    }]);
    return ParserImplementation;
  }();
  var mapProto = Map.prototype;
  function _getMapObserver(taskQueue, map) {
    return ModifyMapObserver.for(taskQueue, map);
  }
  exports.getMapObserver = _getMapObserver;
  var ModifyMapObserver = function(_ModifyCollectionObse2) {
    _inherits(ModifyMapObserver, _ModifyCollectionObse2);
    function ModifyMapObserver(taskQueue, map) {
      _classCallCheck(this, ModifyMapObserver);
      return _possibleConstructorReturn(this, _ModifyCollectionObse2.call(this, taskQueue, map));
    }
    ModifyMapObserver.for = function _for(taskQueue, map) {
      if (!('__map_observer__' in map)) {
        var observer = ModifyMapObserver.create(taskQueue, map);
        Object.defineProperty(map, '__map_observer__', {
          value: observer,
          enumerable: false,
          configurable: false
        });
      }
      return map.__map_observer__;
    };
    ModifyMapObserver.create = function create(taskQueue, map) {
      var observer = new ModifyMapObserver(taskQueue, map);
      var proto = mapProto;
      if (proto.add !== map.add || proto.delete !== map.delete || proto.clear !== map.clear) {
        proto = {
          add: map.add,
          delete: map.delete,
          clear: map.clear
        };
      }
      map.set = function() {
        var hasValue = map.has(arguments[0]);
        var type = hasValue ? 'update' : 'add';
        var oldValue = map.get(arguments[0]);
        var methodCallResult = proto.set.apply(map, arguments);
        if (!hasValue || oldValue !== map.get(arguments[0])) {
          observer.addChangeRecord({
            type: type,
            object: map,
            key: arguments[0],
            oldValue: oldValue
          });
        }
        return methodCallResult;
      };
      map.delete = function() {
        var hasValue = map.has(arguments[0]);
        var oldValue = map.get(arguments[0]);
        var methodCallResult = proto.delete.apply(map, arguments);
        if (hasValue) {
          observer.addChangeRecord({
            type: 'delete',
            object: map,
            key: arguments[0],
            oldValue: oldValue
          });
        }
        return methodCallResult;
      };
      map.clear = function() {
        var methodCallResult = proto.clear.apply(map, arguments);
        observer.addChangeRecord({
          type: 'clear',
          object: map
        });
        return methodCallResult;
      };
      return observer;
    };
    return ModifyMapObserver;
  }(ModifyCollectionObserver);
  function findOriginalEventTarget(event) {
    return event.path && event.path[0] || event.deepPath && event.deepPath[0] || event.target;
  }
  function handleDelegatedEvent(event) {
    var target = findOriginalEventTarget(event);
    var callback = void 0;
    while (target && !callback) {
      if (target.delegatedCallbacks) {
        callback = target.delegatedCallbacks[event.type];
      }
      if (!callback) {
        target = target.parentNode;
      }
    }
    if (callback) {
      callback(event);
    }
  }
  var DelegateHandlerEntry = function() {
    function DelegateHandlerEntry(eventName) {
      _classCallCheck(this, DelegateHandlerEntry);
      this.eventName = eventName;
      this.count = 0;
    }
    DelegateHandlerEntry.prototype.increment = function increment() {
      this.count++;
      if (this.count === 1) {
        _aureliaPal.DOM.addEventListener(this.eventName, handleDelegatedEvent, false);
      }
    };
    DelegateHandlerEntry.prototype.decrement = function decrement() {
      this.count--;
      if (this.count === 0) {
        _aureliaPal.DOM.removeEventListener(this.eventName, handleDelegatedEvent);
      }
    };
    return DelegateHandlerEntry;
  }();
  var DefaultEventStrategy = function() {
    function DefaultEventStrategy() {
      _classCallCheck(this, DefaultEventStrategy);
      this.delegatedHandlers = [];
    }
    DefaultEventStrategy.prototype.subscribe = function subscribe(target, targetEvent, callback, delegate) {
      var _this22 = this;
      if (delegate) {
        var _ret = function() {
          var delegatedHandlers = _this22.delegatedHandlers;
          var handlerEntry = delegatedHandlers[targetEvent] || (delegatedHandlers[targetEvent] = new DelegateHandlerEntry(targetEvent));
          var delegatedCallbacks = target.delegatedCallbacks || (target.delegatedCallbacks = {});
          handlerEntry.increment();
          delegatedCallbacks[targetEvent] = callback;
          return {v: function v() {
              handlerEntry.decrement();
              delegatedCallbacks[targetEvent] = null;
            }};
        }();
        if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object")
          return _ret.v;
      }
      target.addEventListener(targetEvent, callback, false);
      return function() {
        target.removeEventListener(targetEvent, callback);
      };
    };
    return DefaultEventStrategy;
  }();
  var EventManager = exports.EventManager = function() {
    function EventManager() {
      _classCallCheck(this, EventManager);
      this.elementHandlerLookup = {};
      this.eventStrategyLookup = {};
      this.registerElementConfig({
        tagName: 'input',
        properties: {
          value: ['change', 'input'],
          checked: ['change', 'input'],
          files: ['change', 'input']
        }
      });
      this.registerElementConfig({
        tagName: 'textarea',
        properties: {value: ['change', 'input']}
      });
      this.registerElementConfig({
        tagName: 'select',
        properties: {value: ['change']}
      });
      this.registerElementConfig({
        tagName: 'content editable',
        properties: {value: ['change', 'input', 'blur', 'keyup', 'paste']}
      });
      this.registerElementConfig({
        tagName: 'scrollable element',
        properties: {
          scrollTop: ['scroll'],
          scrollLeft: ['scroll']
        }
      });
      this.defaultEventStrategy = new DefaultEventStrategy();
    }
    EventManager.prototype.registerElementConfig = function registerElementConfig(config) {
      var tagName = config.tagName.toLowerCase();
      var properties = config.properties;
      var propertyName = void 0;
      this.elementHandlerLookup[tagName] = {};
      for (propertyName in properties) {
        if (properties.hasOwnProperty(propertyName)) {
          this.registerElementPropertyConfig(tagName, propertyName, properties[propertyName]);
        }
      }
    };
    EventManager.prototype.registerElementPropertyConfig = function registerElementPropertyConfig(tagName, propertyName, events) {
      this.elementHandlerLookup[tagName][propertyName] = this.createElementHandler(events);
    };
    EventManager.prototype.createElementHandler = function createElementHandler(events) {
      return {subscribe: function subscribe(target, callback) {
          events.forEach(function(changeEvent) {
            target.addEventListener(changeEvent, callback, false);
          });
          return function() {
            events.forEach(function(changeEvent) {
              target.removeEventListener(changeEvent, callback);
            });
          };
        }};
    };
    EventManager.prototype.registerElementHandler = function registerElementHandler(tagName, handler) {
      this.elementHandlerLookup[tagName.toLowerCase()] = handler;
    };
    EventManager.prototype.registerEventStrategy = function registerEventStrategy(eventName, strategy) {
      this.eventStrategyLookup[eventName] = strategy;
    };
    EventManager.prototype.getElementHandler = function getElementHandler(target, propertyName) {
      var tagName = void 0;
      var lookup = this.elementHandlerLookup;
      if (target.tagName) {
        tagName = target.tagName.toLowerCase();
        if (lookup[tagName] && lookup[tagName][propertyName]) {
          return lookup[tagName][propertyName];
        }
        if (propertyName === 'textContent' || propertyName === 'innerHTML') {
          return lookup['content editable'].value;
        }
        if (propertyName === 'scrollTop' || propertyName === 'scrollLeft') {
          return lookup['scrollable element'][propertyName];
        }
      }
      return null;
    };
    EventManager.prototype.addEventListener = function addEventListener(target, targetEvent, callback, delegate) {
      return (this.eventStrategyLookup[targetEvent] || this.defaultEventStrategy).subscribe(target, targetEvent, callback, delegate);
    };
    return EventManager;
  }();
  var DirtyChecker = exports.DirtyChecker = function() {
    function DirtyChecker() {
      _classCallCheck(this, DirtyChecker);
      this.tracked = [];
      this.checkDelay = 120;
    }
    DirtyChecker.prototype.addProperty = function addProperty(property) {
      var tracked = this.tracked;
      tracked.push(property);
      if (tracked.length === 1) {
        this.scheduleDirtyCheck();
      }
    };
    DirtyChecker.prototype.removeProperty = function removeProperty(property) {
      var tracked = this.tracked;
      tracked.splice(tracked.indexOf(property), 1);
    };
    DirtyChecker.prototype.scheduleDirtyCheck = function scheduleDirtyCheck() {
      var _this23 = this;
      setTimeout(function() {
        return _this23.check();
      }, this.checkDelay);
    };
    DirtyChecker.prototype.check = function check() {
      var tracked = this.tracked;
      var i = tracked.length;
      while (i--) {
        var current = tracked[i];
        if (current.isDirty()) {
          current.call();
        }
      }
      if (tracked.length) {
        this.scheduleDirtyCheck();
      }
    };
    return DirtyChecker;
  }();
  var DirtyCheckProperty = exports.DirtyCheckProperty = (_dec5 = subscriberCollection(), _dec5(_class5 = function() {
    function DirtyCheckProperty(dirtyChecker, obj, propertyName) {
      _classCallCheck(this, DirtyCheckProperty);
      this.dirtyChecker = dirtyChecker;
      this.obj = obj;
      this.propertyName = propertyName;
    }
    DirtyCheckProperty.prototype.getValue = function getValue() {
      return this.obj[this.propertyName];
    };
    DirtyCheckProperty.prototype.setValue = function setValue(newValue) {
      this.obj[this.propertyName] = newValue;
    };
    DirtyCheckProperty.prototype.call = function call() {
      var oldValue = this.oldValue;
      var newValue = this.getValue();
      this.callSubscribers(newValue, oldValue);
      this.oldValue = newValue;
    };
    DirtyCheckProperty.prototype.isDirty = function isDirty() {
      return this.oldValue !== this.obj[this.propertyName];
    };
    DirtyCheckProperty.prototype.subscribe = function subscribe(context, callable) {
      if (!this.hasSubscribers()) {
        this.oldValue = this.getValue();
        this.dirtyChecker.addProperty(this);
      }
      this.addSubscriber(context, callable);
    };
    DirtyCheckProperty.prototype.unsubscribe = function unsubscribe(context, callable) {
      if (this.removeSubscriber(context, callable) && !this.hasSubscribers()) {
        this.dirtyChecker.removeProperty(this);
      }
    };
    return DirtyCheckProperty;
  }()) || _class5);
  var propertyAccessor = exports.propertyAccessor = {
    getValue: function getValue(obj, propertyName) {
      return obj[propertyName];
    },
    setValue: function setValue(value, obj, propertyName) {
      obj[propertyName] = value;
    }
  };
  var PrimitiveObserver = exports.PrimitiveObserver = function() {
    function PrimitiveObserver(primitive, propertyName) {
      _classCallCheck(this, PrimitiveObserver);
      this.doNotCache = true;
      this.primitive = primitive;
      this.propertyName = propertyName;
    }
    PrimitiveObserver.prototype.getValue = function getValue() {
      return this.primitive[this.propertyName];
    };
    PrimitiveObserver.prototype.setValue = function setValue() {
      var type = _typeof(this.primitive);
      throw new Error('The ' + this.propertyName + ' property of a ' + type + ' (' + this.primitive + ') cannot be assigned.');
    };
    PrimitiveObserver.prototype.subscribe = function subscribe() {};
    PrimitiveObserver.prototype.unsubscribe = function unsubscribe() {};
    return PrimitiveObserver;
  }();
  var SetterObserver = exports.SetterObserver = (_dec6 = subscriberCollection(), _dec6(_class7 = function() {
    function SetterObserver(taskQueue, obj, propertyName) {
      _classCallCheck(this, SetterObserver);
      this.taskQueue = taskQueue;
      this.obj = obj;
      this.propertyName = propertyName;
      this.queued = false;
      this.observing = false;
    }
    SetterObserver.prototype.getValue = function getValue() {
      return this.obj[this.propertyName];
    };
    SetterObserver.prototype.setValue = function setValue(newValue) {
      this.obj[this.propertyName] = newValue;
    };
    SetterObserver.prototype.getterValue = function getterValue() {
      return this.currentValue;
    };
    SetterObserver.prototype.setterValue = function setterValue(newValue) {
      var oldValue = this.currentValue;
      if (oldValue !== newValue) {
        if (!this.queued) {
          this.oldValue = oldValue;
          this.queued = true;
          this.taskQueue.queueMicroTask(this);
        }
        this.currentValue = newValue;
      }
    };
    SetterObserver.prototype.call = function call() {
      var oldValue = this.oldValue;
      var newValue = this.currentValue;
      this.queued = false;
      this.callSubscribers(newValue, oldValue);
    };
    SetterObserver.prototype.subscribe = function subscribe(context, callable) {
      if (!this.observing) {
        this.convertProperty();
      }
      this.addSubscriber(context, callable);
    };
    SetterObserver.prototype.unsubscribe = function unsubscribe(context, callable) {
      this.removeSubscriber(context, callable);
    };
    SetterObserver.prototype.convertProperty = function convertProperty() {
      this.observing = true;
      this.currentValue = this.obj[this.propertyName];
      this.setValue = this.setterValue;
      this.getValue = this.getterValue;
      try {
        Object.defineProperty(this.obj, this.propertyName, {
          configurable: true,
          enumerable: true,
          get: this.getValue.bind(this),
          set: this.setValue.bind(this)
        });
      } catch (_) {}
    };
    return SetterObserver;
  }()) || _class7);
  var XLinkAttributeObserver = exports.XLinkAttributeObserver = function() {
    function XLinkAttributeObserver(element, propertyName, attributeName) {
      _classCallCheck(this, XLinkAttributeObserver);
      this.element = element;
      this.propertyName = propertyName;
      this.attributeName = attributeName;
    }
    XLinkAttributeObserver.prototype.getValue = function getValue() {
      return this.element.getAttributeNS('http://www.w3.org/1999/xlink', this.attributeName);
    };
    XLinkAttributeObserver.prototype.setValue = function setValue(newValue) {
      return this.element.setAttributeNS('http://www.w3.org/1999/xlink', this.attributeName, newValue);
    };
    XLinkAttributeObserver.prototype.subscribe = function subscribe() {
      throw new Error('Observation of a "' + this.element.nodeName + '" element\'s "' + this.propertyName + '" property is not supported.');
    };
    return XLinkAttributeObserver;
  }();
  var dataAttributeAccessor = exports.dataAttributeAccessor = {
    getValue: function getValue(obj, propertyName) {
      return obj.getAttribute(propertyName);
    },
    setValue: function setValue(value, obj, propertyName) {
      return obj.setAttribute(propertyName, value);
    }
  };
  var DataAttributeObserver = exports.DataAttributeObserver = function() {
    function DataAttributeObserver(element, propertyName) {
      _classCallCheck(this, DataAttributeObserver);
      this.element = element;
      this.propertyName = propertyName;
    }
    DataAttributeObserver.prototype.getValue = function getValue() {
      return this.element.getAttribute(this.propertyName);
    };
    DataAttributeObserver.prototype.setValue = function setValue(newValue) {
      return this.element.setAttribute(this.propertyName, newValue);
    };
    DataAttributeObserver.prototype.subscribe = function subscribe() {
      throw new Error('Observation of a "' + this.element.nodeName + '" element\'s "' + this.propertyName + '" property is not supported.');
    };
    return DataAttributeObserver;
  }();
  var StyleObserver = exports.StyleObserver = function() {
    function StyleObserver(element, propertyName) {
      _classCallCheck(this, StyleObserver);
      this.element = element;
      this.propertyName = propertyName;
      this.styles = null;
      this.version = 0;
    }
    StyleObserver.prototype.getValue = function getValue() {
      return this.element.style.cssText;
    };
    StyleObserver.prototype.setValue = function setValue(newValue) {
      var styles = this.styles || {};
      var style = void 0;
      var version = this.version;
      if (newValue !== null && newValue !== undefined) {
        if (newValue instanceof Object) {
          for (style in newValue) {
            if (newValue.hasOwnProperty(style)) {
              styles[style] = version;
              this.element.style[style] = newValue[style];
            }
          }
        } else if (newValue.length) {
          var pairs = newValue.split(/(?:;|:(?!\/))\s*/);
          for (var _i22 = 0,
              length = pairs.length; _i22 < length; _i22++) {
            style = pairs[_i22].trim();
            if (!style) {
              continue;
            }
            styles[style] = version;
            this.element.style[style] = pairs[++_i22];
          }
        }
      }
      this.styles = styles;
      this.version += 1;
      if (version === 0) {
        return;
      }
      version -= 1;
      for (style in styles) {
        if (!styles.hasOwnProperty(style) || styles[style] !== version) {
          continue;
        }
        this.element.style[style] = '';
      }
    };
    StyleObserver.prototype.subscribe = function subscribe() {
      throw new Error('Observation of a "' + this.element.nodeName + '" element\'s "' + this.propertyName + '" property is not supported.');
    };
    return StyleObserver;
  }();
  var ValueAttributeObserver = exports.ValueAttributeObserver = (_dec7 = subscriberCollection(), _dec7(_class8 = function() {
    function ValueAttributeObserver(element, propertyName, handler) {
      _classCallCheck(this, ValueAttributeObserver);
      this.element = element;
      this.propertyName = propertyName;
      this.handler = handler;
      if (propertyName === 'files') {
        this.setValue = function() {};
      }
    }
    ValueAttributeObserver.prototype.getValue = function getValue() {
      return this.element[this.propertyName];
    };
    ValueAttributeObserver.prototype.setValue = function setValue(newValue) {
      newValue = newValue === undefined || newValue === null ? '' : newValue;
      if (this.element[this.propertyName] !== newValue) {
        this.element[this.propertyName] = newValue;
        this.notify();
      }
    };
    ValueAttributeObserver.prototype.notify = function notify() {
      var oldValue = this.oldValue;
      var newValue = this.getValue();
      this.callSubscribers(newValue, oldValue);
      this.oldValue = newValue;
    };
    ValueAttributeObserver.prototype.subscribe = function subscribe(context, callable) {
      if (!this.hasSubscribers()) {
        this.oldValue = this.getValue();
        this.disposeHandler = this.handler.subscribe(this.element, this.notify.bind(this));
      }
      this.addSubscriber(context, callable);
    };
    ValueAttributeObserver.prototype.unsubscribe = function unsubscribe(context, callable) {
      if (this.removeSubscriber(context, callable) && !this.hasSubscribers()) {
        this.disposeHandler();
        this.disposeHandler = null;
      }
    };
    return ValueAttributeObserver;
  }()) || _class8);
  var checkedArrayContext = 'CheckedObserver:array';
  var CheckedObserver = exports.CheckedObserver = (_dec8 = subscriberCollection(), _dec8(_class9 = function() {
    function CheckedObserver(element, handler, observerLocator) {
      _classCallCheck(this, CheckedObserver);
      this.element = element;
      this.handler = handler;
      this.observerLocator = observerLocator;
    }
    CheckedObserver.prototype.getValue = function getValue() {
      return this.value;
    };
    CheckedObserver.prototype.setValue = function setValue(newValue) {
      if (this.value === newValue) {
        return;
      }
      if (this.arrayObserver) {
        this.arrayObserver.unsubscribe(checkedArrayContext, this);
        this.arrayObserver = null;
      }
      if (this.element.type === 'checkbox' && Array.isArray(newValue)) {
        this.arrayObserver = this.observerLocator.getArrayObserver(newValue);
        this.arrayObserver.subscribe(checkedArrayContext, this);
      }
      this.oldValue = this.value;
      this.value = newValue;
      this.synchronizeElement();
      this.notify();
      if (!this.initialSync) {
        this.initialSync = true;
        this.observerLocator.taskQueue.queueMicroTask(this);
      }
    };
    CheckedObserver.prototype.call = function call(context, splices) {
      this.synchronizeElement();
    };
    CheckedObserver.prototype.synchronizeElement = function synchronizeElement() {
      var value = this.value;
      var element = this.element;
      var elementValue = element.hasOwnProperty('model') ? element.model : element.value;
      var isRadio = element.type === 'radio';
      var matcher = element.matcher || function(a, b) {
        return a === b;
      };
      element.checked = isRadio && !!matcher(value, elementValue) || !isRadio && value === true || !isRadio && Array.isArray(value) && !!value.find(function(item) {
        return !!matcher(item, elementValue);
      });
    };
    CheckedObserver.prototype.synchronizeValue = function synchronizeValue() {
      var value = this.value;
      var element = this.element;
      var elementValue = element.hasOwnProperty('model') ? element.model : element.value;
      var index = void 0;
      var matcher = element.matcher || function(a, b) {
        return a === b;
      };
      if (element.type === 'checkbox') {
        if (Array.isArray(value)) {
          index = value.findIndex(function(item) {
            return !!matcher(item, elementValue);
          });
          if (element.checked && index === -1) {
            value.push(elementValue);
          } else if (!element.checked && index !== -1) {
            value.splice(index, 1);
          }
          return;
        }
        value = element.checked;
      } else if (element.checked) {
        value = elementValue;
      } else {
        return;
      }
      this.oldValue = this.value;
      this.value = value;
      this.notify();
    };
    CheckedObserver.prototype.notify = function notify() {
      var oldValue = this.oldValue;
      var newValue = this.value;
      this.callSubscribers(newValue, oldValue);
    };
    CheckedObserver.prototype.subscribe = function subscribe(context, callable) {
      if (!this.hasSubscribers()) {
        this.disposeHandler = this.handler.subscribe(this.element, this.synchronizeValue.bind(this, false));
      }
      this.addSubscriber(context, callable);
    };
    CheckedObserver.prototype.unsubscribe = function unsubscribe(context, callable) {
      if (this.removeSubscriber(context, callable) && !this.hasSubscribers()) {
        this.disposeHandler();
        this.disposeHandler = null;
      }
    };
    CheckedObserver.prototype.unbind = function unbind() {
      if (this.arrayObserver) {
        this.arrayObserver.unsubscribe(checkedArrayContext, this);
        this.arrayObserver = null;
      }
    };
    return CheckedObserver;
  }()) || _class9);
  var selectArrayContext = 'SelectValueObserver:array';
  var SelectValueObserver = exports.SelectValueObserver = (_dec9 = subscriberCollection(), _dec9(_class10 = function() {
    function SelectValueObserver(element, handler, observerLocator) {
      _classCallCheck(this, SelectValueObserver);
      this.element = element;
      this.handler = handler;
      this.observerLocator = observerLocator;
    }
    SelectValueObserver.prototype.getValue = function getValue() {
      return this.value;
    };
    SelectValueObserver.prototype.setValue = function setValue(newValue) {
      if (newValue !== null && newValue !== undefined && this.element.multiple && !Array.isArray(newValue)) {
        throw new Error('Only null or Array instances can be bound to a multi-select.');
      }
      if (this.value === newValue) {
        return;
      }
      if (this.arrayObserver) {
        this.arrayObserver.unsubscribe(selectArrayContext, this);
        this.arrayObserver = null;
      }
      if (Array.isArray(newValue)) {
        this.arrayObserver = this.observerLocator.getArrayObserver(newValue);
        this.arrayObserver.subscribe(selectArrayContext, this);
      }
      this.oldValue = this.value;
      this.value = newValue;
      this.synchronizeOptions();
      this.notify();
      if (!this.initialSync) {
        this.initialSync = true;
        this.observerLocator.taskQueue.queueMicroTask(this);
      }
    };
    SelectValueObserver.prototype.call = function call(context, splices) {
      this.synchronizeOptions();
    };
    SelectValueObserver.prototype.synchronizeOptions = function synchronizeOptions() {
      var value = this.value;
      var clear = void 0;
      var isArray = void 0;
      if (value === null || value === undefined) {
        clear = true;
      } else if (Array.isArray(value)) {
        isArray = true;
      }
      var options = this.element.options;
      var i = options.length;
      var matcher = this.element.matcher || function(a, b) {
        return a === b;
      };
      var _loop = function _loop() {
        var option = options.item(i);
        if (clear) {
          option.selected = false;
          return 'continue';
        }
        var optionValue = option.hasOwnProperty('model') ? option.model : option.value;
        if (isArray) {
          option.selected = !!value.find(function(item) {
            return !!matcher(optionValue, item);
          });
          return 'continue';
        }
        option.selected = !!matcher(optionValue, value);
      };
      while (i--) {
        var _ret2 = _loop();
        if (_ret2 === 'continue')
          continue;
      }
    };
    SelectValueObserver.prototype.synchronizeValue = function synchronizeValue() {
      var _this24 = this;
      var options = this.element.options;
      var count = 0;
      var value = [];
      for (var _i23 = 0,
          ii = options.length; _i23 < ii; _i23++) {
        var _option = options.item(_i23);
        if (!_option.selected) {
          continue;
        }
        value.push(_option.hasOwnProperty('model') ? _option.model : _option.value);
        count++;
      }
      if (this.element.multiple) {
        if (Array.isArray(this.value)) {
          var _ret3 = function() {
            var matcher = _this24.element.matcher || function(a, b) {
              return a === b;
            };
            var i = 0;
            var _loop2 = function _loop2() {
              var a = _this24.value[i];
              if (value.findIndex(function(b) {
                return matcher(a, b);
              }) === -1) {
                _this24.value.splice(i, 1);
              } else {
                i++;
              }
            };
            while (i < _this24.value.length) {
              _loop2();
            }
            i = 0;
            var _loop3 = function _loop3() {
              var a = value[i];
              if (_this24.value.findIndex(function(b) {
                return matcher(a, b);
              }) === -1) {
                _this24.value.push(a);
              }
              i++;
            };
            while (i < value.length) {
              _loop3();
            }
            return {v: void 0};
          }();
          if ((typeof _ret3 === 'undefined' ? 'undefined' : _typeof(_ret3)) === "object")
            return _ret3.v;
        }
      } else {
        if (count === 0) {
          value = null;
        } else {
          value = value[0];
        }
      }
      if (value !== this.value) {
        this.oldValue = this.value;
        this.value = value;
        this.notify();
      }
    };
    SelectValueObserver.prototype.notify = function notify() {
      var oldValue = this.oldValue;
      var newValue = this.value;
      this.callSubscribers(newValue, oldValue);
    };
    SelectValueObserver.prototype.subscribe = function subscribe(context, callable) {
      if (!this.hasSubscribers()) {
        this.disposeHandler = this.handler.subscribe(this.element, this.synchronizeValue.bind(this, false));
      }
      this.addSubscriber(context, callable);
    };
    SelectValueObserver.prototype.unsubscribe = function unsubscribe(context, callable) {
      if (this.removeSubscriber(context, callable) && !this.hasSubscribers()) {
        this.disposeHandler();
        this.disposeHandler = null;
      }
    };
    SelectValueObserver.prototype.bind = function bind() {
      var _this25 = this;
      this.domObserver = _aureliaPal.DOM.createMutationObserver(function() {
        _this25.synchronizeOptions();
        _this25.synchronizeValue();
      });
      this.domObserver.observe(this.element, {
        childList: true,
        subtree: true
      });
    };
    SelectValueObserver.prototype.unbind = function unbind() {
      this.domObserver.disconnect();
      this.domObserver = null;
      if (this.arrayObserver) {
        this.arrayObserver.unsubscribe(selectArrayContext, this);
        this.arrayObserver = null;
      }
    };
    return SelectValueObserver;
  }()) || _class10);
  var ClassObserver = exports.ClassObserver = function() {
    function ClassObserver(element) {
      _classCallCheck(this, ClassObserver);
      this.element = element;
      this.doNotCache = true;
      this.value = '';
      this.version = 0;
    }
    ClassObserver.prototype.getValue = function getValue() {
      return this.value;
    };
    ClassObserver.prototype.setValue = function setValue(newValue) {
      var nameIndex = this.nameIndex || {};
      var version = this.version;
      var names = void 0;
      var name = void 0;
      if (newValue !== null && newValue !== undefined && newValue.length) {
        names = newValue.split(/\s+/);
        for (var _i24 = 0,
            length = names.length; _i24 < length; _i24++) {
          name = names[_i24];
          if (name === '') {
            continue;
          }
          nameIndex[name] = version;
          this.element.classList.add(name);
        }
      }
      this.value = newValue;
      this.nameIndex = nameIndex;
      this.version += 1;
      if (version === 0) {
        return;
      }
      version -= 1;
      for (name in nameIndex) {
        if (!nameIndex.hasOwnProperty(name) || nameIndex[name] !== version) {
          continue;
        }
        this.element.classList.remove(name);
      }
    };
    ClassObserver.prototype.subscribe = function subscribe() {
      throw new Error('Observation of a "' + this.element.nodeName + '" element\'s "class" property is not supported.');
    };
    return ClassObserver;
  }();
  function hasDeclaredDependencies(descriptor) {
    return !!(descriptor && descriptor.get && descriptor.get.dependencies);
  }
  function declarePropertyDependencies(ctor, propertyName, dependencies) {
    var descriptor = Object.getOwnPropertyDescriptor(ctor.prototype, propertyName);
    descriptor.get.dependencies = dependencies;
  }
  function computedFrom() {
    for (var _len = arguments.length,
        rest = Array(_len),
        _key = 0; _key < _len; _key++) {
      rest[_key] = arguments[_key];
    }
    return function(target, key, descriptor) {
      descriptor.get.dependencies = rest;
      return descriptor;
    };
  }
  var ComputedExpression = exports.ComputedExpression = function(_Expression19) {
    _inherits(ComputedExpression, _Expression19);
    function ComputedExpression(name, dependencies) {
      _classCallCheck(this, ComputedExpression);
      var _this26 = _possibleConstructorReturn(this, _Expression19.call(this));
      _this26.name = name;
      _this26.dependencies = dependencies;
      _this26.isAssignable = true;
      return _this26;
    }
    ComputedExpression.prototype.evaluate = function evaluate(scope, lookupFunctions) {
      return scope.bindingContext[this.name];
    };
    ComputedExpression.prototype.assign = function assign(scope, value) {
      scope.bindingContext[this.name] = value;
    };
    ComputedExpression.prototype.accept = function accept(visitor) {
      throw new Error('not implemented');
    };
    ComputedExpression.prototype.connect = function connect(binding, scope) {
      var dependencies = this.dependencies;
      var i = dependencies.length;
      while (i--) {
        dependencies[i].connect(binding, scope);
      }
    };
    return ComputedExpression;
  }(Expression);
  function createComputedObserver(obj, propertyName, descriptor, observerLocator) {
    var dependencies = descriptor.get.dependencies;
    if (!(dependencies instanceof ComputedExpression)) {
      var _i25 = dependencies.length;
      while (_i25--) {
        dependencies[_i25] = observerLocator.parser.parse(dependencies[_i25]);
      }
      dependencies = descriptor.get.dependencies = new ComputedExpression(propertyName, dependencies);
    }
    var scope = {
      bindingContext: obj,
      overrideContext: createOverrideContext(obj)
    };
    return new ExpressionObserver(scope, dependencies, observerLocator);
  }
  var elements = exports.elements = {
    a: ['class', 'externalResourcesRequired', 'id', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'requiredExtensions', 'requiredFeatures', 'style', 'systemLanguage', 'target', 'transform', 'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space'],
    altGlyph: ['class', 'dx', 'dy', 'externalResourcesRequired', 'format', 'glyphRef', 'id', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'requiredExtensions', 'requiredFeatures', 'rotate', 'style', 'systemLanguage', 'x', 'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space', 'y'],
    altGlyphDef: ['id', 'xml:base', 'xml:lang', 'xml:space'],
    altGlyphItem: ['id', 'xml:base', 'xml:lang', 'xml:space'],
    animate: ['accumulate', 'additive', 'attributeName', 'attributeType', 'begin', 'by', 'calcMode', 'dur', 'end', 'externalResourcesRequired', 'fill', 'from', 'id', 'keySplines', 'keyTimes', 'max', 'min', 'onbegin', 'onend', 'onload', 'onrepeat', 'repeatCount', 'repeatDur', 'requiredExtensions', 'requiredFeatures', 'restart', 'systemLanguage', 'to', 'values', 'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space'],
    animateColor: ['accumulate', 'additive', 'attributeName', 'attributeType', 'begin', 'by', 'calcMode', 'dur', 'end', 'externalResourcesRequired', 'fill', 'from', 'id', 'keySplines', 'keyTimes', 'max', 'min', 'onbegin', 'onend', 'onload', 'onrepeat', 'repeatCount', 'repeatDur', 'requiredExtensions', 'requiredFeatures', 'restart', 'systemLanguage', 'to', 'values', 'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space'],
    animateMotion: ['accumulate', 'additive', 'begin', 'by', 'calcMode', 'dur', 'end', 'externalResourcesRequired', 'fill', 'from', 'id', 'keyPoints', 'keySplines', 'keyTimes', 'max', 'min', 'onbegin', 'onend', 'onload', 'onrepeat', 'origin', 'path', 'repeatCount', 'repeatDur', 'requiredExtensions', 'requiredFeatures', 'restart', 'rotate', 'systemLanguage', 'to', 'values', 'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space'],
    animateTransform: ['accumulate', 'additive', 'attributeName', 'attributeType', 'begin', 'by', 'calcMode', 'dur', 'end', 'externalResourcesRequired', 'fill', 'from', 'id', 'keySplines', 'keyTimes', 'max', 'min', 'onbegin', 'onend', 'onload', 'onrepeat', 'repeatCount', 'repeatDur', 'requiredExtensions', 'requiredFeatures', 'restart', 'systemLanguage', 'to', 'type', 'values', 'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space'],
    circle: ['class', 'cx', 'cy', 'externalResourcesRequired', 'id', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'r', 'requiredExtensions', 'requiredFeatures', 'style', 'systemLanguage', 'transform', 'xml:base', 'xml:lang', 'xml:space'],
    clipPath: ['class', 'clipPathUnits', 'externalResourcesRequired', 'id', 'requiredExtensions', 'requiredFeatures', 'style', 'systemLanguage', 'transform', 'xml:base', 'xml:lang', 'xml:space'],
    'color-profile': ['id', 'local', 'name', 'rendering-intent', 'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space'],
    cursor: ['externalResourcesRequired', 'id', 'requiredExtensions', 'requiredFeatures', 'systemLanguage', 'x', 'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space', 'y'],
    defs: ['class', 'externalResourcesRequired', 'id', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'requiredExtensions', 'requiredFeatures', 'style', 'systemLanguage', 'transform', 'xml:base', 'xml:lang', 'xml:space'],
    desc: ['class', 'id', 'style', 'xml:base', 'xml:lang', 'xml:space'],
    ellipse: ['class', 'cx', 'cy', 'externalResourcesRequired', 'id', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'requiredExtensions', 'requiredFeatures', 'rx', 'ry', 'style', 'systemLanguage', 'transform', 'xml:base', 'xml:lang', 'xml:space'],
    feBlend: ['class', 'height', 'id', 'in', 'in2', 'mode', 'result', 'style', 'width', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y'],
    feColorMatrix: ['class', 'height', 'id', 'in', 'result', 'style', 'type', 'values', 'width', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y'],
    feComponentTransfer: ['class', 'height', 'id', 'in', 'result', 'style', 'width', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y'],
    feComposite: ['class', 'height', 'id', 'in', 'in2', 'k1', 'k2', 'k3', 'k4', 'operator', 'result', 'style', 'width', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y'],
    feConvolveMatrix: ['bias', 'class', 'divisor', 'edgeMode', 'height', 'id', 'in', 'kernelMatrix', 'kernelUnitLength', 'order', 'preserveAlpha', 'result', 'style', 'targetX', 'targetY', 'width', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y'],
    feDiffuseLighting: ['class', 'diffuseConstant', 'height', 'id', 'in', 'kernelUnitLength', 'result', 'style', 'surfaceScale', 'width', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y'],
    feDisplacementMap: ['class', 'height', 'id', 'in', 'in2', 'result', 'scale', 'style', 'width', 'x', 'xChannelSelector', 'xml:base', 'xml:lang', 'xml:space', 'y', 'yChannelSelector'],
    feDistantLight: ['azimuth', 'elevation', 'id', 'xml:base', 'xml:lang', 'xml:space'],
    feFlood: ['class', 'height', 'id', 'result', 'style', 'width', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y'],
    feFuncA: ['amplitude', 'exponent', 'id', 'intercept', 'offset', 'slope', 'tableValues', 'type', 'xml:base', 'xml:lang', 'xml:space'],
    feFuncB: ['amplitude', 'exponent', 'id', 'intercept', 'offset', 'slope', 'tableValues', 'type', 'xml:base', 'xml:lang', 'xml:space'],
    feFuncG: ['amplitude', 'exponent', 'id', 'intercept', 'offset', 'slope', 'tableValues', 'type', 'xml:base', 'xml:lang', 'xml:space'],
    feFuncR: ['amplitude', 'exponent', 'id', 'intercept', 'offset', 'slope', 'tableValues', 'type', 'xml:base', 'xml:lang', 'xml:space'],
    feGaussianBlur: ['class', 'height', 'id', 'in', 'result', 'stdDeviation', 'style', 'width', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y'],
    feImage: ['class', 'externalResourcesRequired', 'height', 'id', 'preserveAspectRatio', 'result', 'style', 'width', 'x', 'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space', 'y'],
    feMerge: ['class', 'height', 'id', 'result', 'style', 'width', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y'],
    feMergeNode: ['id', 'xml:base', 'xml:lang', 'xml:space'],
    feMorphology: ['class', 'height', 'id', 'in', 'operator', 'radius', 'result', 'style', 'width', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y'],
    feOffset: ['class', 'dx', 'dy', 'height', 'id', 'in', 'result', 'style', 'width', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y'],
    fePointLight: ['id', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y', 'z'],
    feSpecularLighting: ['class', 'height', 'id', 'in', 'kernelUnitLength', 'result', 'specularConstant', 'specularExponent', 'style', 'surfaceScale', 'width', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y'],
    feSpotLight: ['id', 'limitingConeAngle', 'pointsAtX', 'pointsAtY', 'pointsAtZ', 'specularExponent', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y', 'z'],
    feTile: ['class', 'height', 'id', 'in', 'result', 'style', 'width', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y'],
    feTurbulence: ['baseFrequency', 'class', 'height', 'id', 'numOctaves', 'result', 'seed', 'stitchTiles', 'style', 'type', 'width', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y'],
    filter: ['class', 'externalResourcesRequired', 'filterRes', 'filterUnits', 'height', 'id', 'primitiveUnits', 'style', 'width', 'x', 'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space', 'y'],
    font: ['class', 'externalResourcesRequired', 'horiz-adv-x', 'horiz-origin-x', 'horiz-origin-y', 'id', 'style', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'xml:base', 'xml:lang', 'xml:space'],
    'font-face': ['accent-height', 'alphabetic', 'ascent', 'bbox', 'cap-height', 'descent', 'font-family', 'font-size', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'hanging', 'id', 'ideographic', 'mathematical', 'overline-position', 'overline-thickness', 'panose-1', 'slope', 'stemh', 'stemv', 'strikethrough-position', 'strikethrough-thickness', 'underline-position', 'underline-thickness', 'unicode-range', 'units-per-em', 'v-alphabetic', 'v-hanging', 'v-ideographic', 'v-mathematical', 'widths', 'x-height', 'xml:base', 'xml:lang', 'xml:space'],
    'font-face-format': ['id', 'string', 'xml:base', 'xml:lang', 'xml:space'],
    'font-face-name': ['id', 'name', 'xml:base', 'xml:lang', 'xml:space'],
    'font-face-src': ['id', 'xml:base', 'xml:lang', 'xml:space'],
    'font-face-uri': ['id', 'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space'],
    foreignObject: ['class', 'externalResourcesRequired', 'height', 'id', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'requiredExtensions', 'requiredFeatures', 'style', 'systemLanguage', 'transform', 'width', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y'],
    g: ['class', 'externalResourcesRequired', 'id', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'requiredExtensions', 'requiredFeatures', 'style', 'systemLanguage', 'transform', 'xml:base', 'xml:lang', 'xml:space'],
    glyph: ['arabic-form', 'class', 'd', 'glyph-name', 'horiz-adv-x', 'id', 'lang', 'orientation', 'style', 'unicode', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'xml:base', 'xml:lang', 'xml:space'],
    glyphRef: ['class', 'dx', 'dy', 'format', 'glyphRef', 'id', 'style', 'x', 'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space', 'y'],
    hkern: ['g1', 'g2', 'id', 'k', 'u1', 'u2', 'xml:base', 'xml:lang', 'xml:space'],
    image: ['class', 'externalResourcesRequired', 'height', 'id', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'preserveAspectRatio', 'requiredExtensions', 'requiredFeatures', 'style', 'systemLanguage', 'transform', 'width', 'x', 'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space', 'y'],
    line: ['class', 'externalResourcesRequired', 'id', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'requiredExtensions', 'requiredFeatures', 'style', 'systemLanguage', 'transform', 'x1', 'x2', 'xml:base', 'xml:lang', 'xml:space', 'y1', 'y2'],
    linearGradient: ['class', 'externalResourcesRequired', 'gradientTransform', 'gradientUnits', 'id', 'spreadMethod', 'style', 'x1', 'x2', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space', 'y1', 'y2'],
    marker: ['class', 'externalResourcesRequired', 'id', 'markerHeight', 'markerUnits', 'markerWidth', 'orient', 'preserveAspectRatio', 'refX', 'refY', 'style', 'viewBox', 'xml:base', 'xml:lang', 'xml:space'],
    mask: ['class', 'externalResourcesRequired', 'height', 'id', 'maskContentUnits', 'maskUnits', 'requiredExtensions', 'requiredFeatures', 'style', 'systemLanguage', 'width', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y'],
    metadata: ['id', 'xml:base', 'xml:lang', 'xml:space'],
    'missing-glyph': ['class', 'd', 'horiz-adv-x', 'id', 'style', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'xml:base', 'xml:lang', 'xml:space'],
    mpath: ['externalResourcesRequired', 'id', 'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space'],
    path: ['class', 'd', 'externalResourcesRequired', 'id', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'pathLength', 'requiredExtensions', 'requiredFeatures', 'style', 'systemLanguage', 'transform', 'xml:base', 'xml:lang', 'xml:space'],
    pattern: ['class', 'externalResourcesRequired', 'height', 'id', 'patternContentUnits', 'patternTransform', 'patternUnits', 'preserveAspectRatio', 'requiredExtensions', 'requiredFeatures', 'style', 'systemLanguage', 'viewBox', 'width', 'x', 'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space', 'y'],
    polygon: ['class', 'externalResourcesRequired', 'id', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'points', 'requiredExtensions', 'requiredFeatures', 'style', 'systemLanguage', 'transform', 'xml:base', 'xml:lang', 'xml:space'],
    polyline: ['class', 'externalResourcesRequired', 'id', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'points', 'requiredExtensions', 'requiredFeatures', 'style', 'systemLanguage', 'transform', 'xml:base', 'xml:lang', 'xml:space'],
    radialGradient: ['class', 'cx', 'cy', 'externalResourcesRequired', 'fx', 'fy', 'gradientTransform', 'gradientUnits', 'id', 'r', 'spreadMethod', 'style', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space'],
    rect: ['class', 'externalResourcesRequired', 'height', 'id', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'requiredExtensions', 'requiredFeatures', 'rx', 'ry', 'style', 'systemLanguage', 'transform', 'width', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y'],
    script: ['externalResourcesRequired', 'id', 'type', 'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space'],
    set: ['attributeName', 'attributeType', 'begin', 'dur', 'end', 'externalResourcesRequired', 'fill', 'id', 'max', 'min', 'onbegin', 'onend', 'onload', 'onrepeat', 'repeatCount', 'repeatDur', 'requiredExtensions', 'requiredFeatures', 'restart', 'systemLanguage', 'to', 'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space'],
    stop: ['class', 'id', 'offset', 'style', 'xml:base', 'xml:lang', 'xml:space'],
    style: ['id', 'media', 'title', 'type', 'xml:base', 'xml:lang', 'xml:space'],
    svg: ['baseProfile', 'class', 'contentScriptType', 'contentStyleType', 'externalResourcesRequired', 'height', 'id', 'onabort', 'onactivate', 'onclick', 'onerror', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'onresize', 'onscroll', 'onunload', 'onzoom', 'preserveAspectRatio', 'requiredExtensions', 'requiredFeatures', 'style', 'systemLanguage', 'version', 'viewBox', 'width', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y', 'zoomAndPan'],
    switch: ['class', 'externalResourcesRequired', 'id', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'requiredExtensions', 'requiredFeatures', 'style', 'systemLanguage', 'transform', 'xml:base', 'xml:lang', 'xml:space'],
    symbol: ['class', 'externalResourcesRequired', 'id', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'preserveAspectRatio', 'style', 'viewBox', 'xml:base', 'xml:lang', 'xml:space'],
    text: ['class', 'dx', 'dy', 'externalResourcesRequired', 'id', 'lengthAdjust', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'requiredExtensions', 'requiredFeatures', 'rotate', 'style', 'systemLanguage', 'textLength', 'transform', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y'],
    textPath: ['class', 'externalResourcesRequired', 'id', 'lengthAdjust', 'method', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'requiredExtensions', 'requiredFeatures', 'spacing', 'startOffset', 'style', 'systemLanguage', 'textLength', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space'],
    title: ['class', 'id', 'style', 'xml:base', 'xml:lang', 'xml:space'],
    tref: ['class', 'dx', 'dy', 'externalResourcesRequired', 'id', 'lengthAdjust', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'requiredExtensions', 'requiredFeatures', 'rotate', 'style', 'systemLanguage', 'textLength', 'x', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space', 'y'],
    tspan: ['class', 'dx', 'dy', 'externalResourcesRequired', 'id', 'lengthAdjust', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'requiredExtensions', 'requiredFeatures', 'rotate', 'style', 'systemLanguage', 'textLength', 'x', 'xml:base', 'xml:lang', 'xml:space', 'y'],
    use: ['class', 'externalResourcesRequired', 'height', 'id', 'onactivate', 'onclick', 'onfocusin', 'onfocusout', 'onload', 'onmousedown', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'requiredExtensions', 'requiredFeatures', 'style', 'systemLanguage', 'transform', 'width', 'x', 'xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type', 'xml:base', 'xml:lang', 'xml:space', 'y'],
    view: ['externalResourcesRequired', 'id', 'preserveAspectRatio', 'viewBox', 'viewTarget', 'xml:base', 'xml:lang', 'xml:space', 'zoomAndPan'],
    vkern: ['g1', 'g2', 'id', 'k', 'u1', 'u2', 'xml:base', 'xml:lang', 'xml:space']
  };
  var presentationElements = exports.presentationElements = {
    'a': true,
    'altGlyph': true,
    'animate': true,
    'animateColor': true,
    'circle': true,
    'clipPath': true,
    'defs': true,
    'ellipse': true,
    'feBlend': true,
    'feColorMatrix': true,
    'feComponentTransfer': true,
    'feComposite': true,
    'feConvolveMatrix': true,
    'feDiffuseLighting': true,
    'feDisplacementMap': true,
    'feFlood': true,
    'feGaussianBlur': true,
    'feImage': true,
    'feMerge': true,
    'feMorphology': true,
    'feOffset': true,
    'feSpecularLighting': true,
    'feTile': true,
    'feTurbulence': true,
    'filter': true,
    'font': true,
    'foreignObject': true,
    'g': true,
    'glyph': true,
    'glyphRef': true,
    'image': true,
    'line': true,
    'linearGradient': true,
    'marker': true,
    'mask': true,
    'missing-glyph': true,
    'path': true,
    'pattern': true,
    'polygon': true,
    'polyline': true,
    'radialGradient': true,
    'rect': true,
    'stop': true,
    'svg': true,
    'switch': true,
    'symbol': true,
    'text': true,
    'textPath': true,
    'tref': true,
    'tspan': true,
    'use': true
  };
  var presentationAttributes = exports.presentationAttributes = {
    'alignment-baseline': true,
    'baseline-shift': true,
    'clip-path': true,
    'clip-rule': true,
    'clip': true,
    'color-interpolation-filters': true,
    'color-interpolation': true,
    'color-profile': true,
    'color-rendering': true,
    'color': true,
    'cursor': true,
    'direction': true,
    'display': true,
    'dominant-baseline': true,
    'enable-background': true,
    'fill-opacity': true,
    'fill-rule': true,
    'fill': true,
    'filter': true,
    'flood-color': true,
    'flood-opacity': true,
    'font-family': true,
    'font-size-adjust': true,
    'font-size': true,
    'font-stretch': true,
    'font-style': true,
    'font-variant': true,
    'font-weight': true,
    'glyph-orientation-horizontal': true,
    'glyph-orientation-vertical': true,
    'image-rendering': true,
    'kerning': true,
    'letter-spacing': true,
    'lighting-color': true,
    'marker-end': true,
    'marker-mid': true,
    'marker-start': true,
    'mask': true,
    'opacity': true,
    'overflow': true,
    'pointer-events': true,
    'shape-rendering': true,
    'stop-color': true,
    'stop-opacity': true,
    'stroke-dasharray': true,
    'stroke-dashoffset': true,
    'stroke-linecap': true,
    'stroke-linejoin': true,
    'stroke-miterlimit': true,
    'stroke-opacity': true,
    'stroke-width': true,
    'stroke': true,
    'text-anchor': true,
    'text-decoration': true,
    'text-rendering': true,
    'unicode-bidi': true,
    'visibility': true,
    'word-spacing': true,
    'writing-mode': true
  };
  function createElement(html) {
    var div = _aureliaPal.DOM.createElement('div');
    div.innerHTML = html;
    return div.firstChild;
  }
  var SVGAnalyzer = exports.SVGAnalyzer = function() {
    function SVGAnalyzer() {
      _classCallCheck(this, SVGAnalyzer);
      if (createElement('<svg><altGlyph /></svg>').firstElementChild.nodeName === 'altglyph' && elements.altGlyph) {
        elements.altglyph = elements.altGlyph;
        delete elements.altGlyph;
        elements.altglyphdef = elements.altGlyphDef;
        delete elements.altGlyphDef;
        elements.altglyphitem = elements.altGlyphItem;
        delete elements.altGlyphItem;
        elements.glyphref = elements.glyphRef;
        delete elements.glyphRef;
      }
    }
    SVGAnalyzer.prototype.isStandardSvgAttribute = function isStandardSvgAttribute(nodeName, attributeName) {
      return presentationElements[nodeName] && presentationAttributes[attributeName] || elements[nodeName] && elements[nodeName].indexOf(attributeName) !== -1;
    };
    return SVGAnalyzer;
  }();
  var ObserverLocator = exports.ObserverLocator = (_temp = _class11 = function() {
    function ObserverLocator(taskQueue, eventManager, dirtyChecker, svgAnalyzer, parser) {
      _classCallCheck(this, ObserverLocator);
      this.taskQueue = taskQueue;
      this.eventManager = eventManager;
      this.dirtyChecker = dirtyChecker;
      this.svgAnalyzer = svgAnalyzer;
      this.parser = parser;
      this.adapters = [];
    }
    ObserverLocator.prototype.getObserver = function getObserver(obj, propertyName) {
      var observersLookup = obj.__observers__;
      var observer = void 0;
      if (observersLookup && propertyName in observersLookup) {
        return observersLookup[propertyName];
      }
      observer = this.createPropertyObserver(obj, propertyName);
      if (!observer.doNotCache) {
        if (observersLookup === undefined) {
          observersLookup = this.getOrCreateObserversLookup(obj);
        }
        observersLookup[propertyName] = observer;
      }
      return observer;
    };
    ObserverLocator.prototype.getOrCreateObserversLookup = function getOrCreateObserversLookup(obj) {
      return obj.__observers__ || this.createObserversLookup(obj);
    };
    ObserverLocator.prototype.createObserversLookup = function createObserversLookup(obj) {
      var value = {};
      try {
        Object.defineProperty(obj, '__observers__', {
          enumerable: false,
          configurable: false,
          writable: false,
          value: value
        });
      } catch (_) {}
      return value;
    };
    ObserverLocator.prototype.addAdapter = function addAdapter(adapter) {
      this.adapters.push(adapter);
    };
    ObserverLocator.prototype.getAdapterObserver = function getAdapterObserver(obj, propertyName, descriptor) {
      for (var _i26 = 0,
          ii = this.adapters.length; _i26 < ii; _i26++) {
        var adapter = this.adapters[_i26];
        var observer = adapter.getObserver(obj, propertyName, descriptor);
        if (observer) {
          return observer;
        }
      }
      return null;
    };
    ObserverLocator.prototype.createPropertyObserver = function createPropertyObserver(obj, propertyName) {
      var descriptor = void 0;
      var handler = void 0;
      var xlinkResult = void 0;
      if (!(obj instanceof Object)) {
        return new PrimitiveObserver(obj, propertyName);
      }
      if (obj instanceof _aureliaPal.DOM.Element) {
        if (propertyName === 'class') {
          return new ClassObserver(obj);
        }
        if (propertyName === 'style' || propertyName === 'css') {
          return new StyleObserver(obj, propertyName);
        }
        handler = this.eventManager.getElementHandler(obj, propertyName);
        if (propertyName === 'value' && obj.tagName.toLowerCase() === 'select') {
          return new SelectValueObserver(obj, handler, this);
        }
        if (propertyName === 'checked' && obj.tagName.toLowerCase() === 'input') {
          return new CheckedObserver(obj, handler, this);
        }
        if (handler) {
          return new ValueAttributeObserver(obj, propertyName, handler);
        }
        xlinkResult = /^xlink:(.+)$/.exec(propertyName);
        if (xlinkResult) {
          return new XLinkAttributeObserver(obj, propertyName, xlinkResult[1]);
        }
        if (/^\w+:|^data-|^aria-/.test(propertyName) || obj instanceof _aureliaPal.DOM.SVGElement && this.svgAnalyzer.isStandardSvgAttribute(obj.nodeName, propertyName)) {
          return new DataAttributeObserver(obj, propertyName);
        }
      }
      descriptor = Object.getPropertyDescriptor(obj, propertyName);
      if (hasDeclaredDependencies(descriptor)) {
        return createComputedObserver(obj, propertyName, descriptor, this);
      }
      var existingGetterOrSetter = void 0;
      if (descriptor && (existingGetterOrSetter = descriptor.get || descriptor.set)) {
        if (existingGetterOrSetter.getObserver) {
          return existingGetterOrSetter.getObserver(obj);
        }
        var adapterObserver = this.getAdapterObserver(obj, propertyName, descriptor);
        if (adapterObserver) {
          return adapterObserver;
        }
        return new DirtyCheckProperty(this.dirtyChecker, obj, propertyName);
      }
      if (obj instanceof Array) {
        if (propertyName === 'length') {
          return this.getArrayObserver(obj).getLengthObserver();
        }
        return new DirtyCheckProperty(this.dirtyChecker, obj, propertyName);
      } else if (obj instanceof Map) {
        if (propertyName === 'size') {
          return this.getMapObserver(obj).getLengthObserver();
        }
        return new DirtyCheckProperty(this.dirtyChecker, obj, propertyName);
      } else if (obj instanceof Set) {
        if (propertyName === 'size') {
          return this.getSetObserver(obj).getLengthObserver();
        }
        return new DirtyCheckProperty(this.dirtyChecker, obj, propertyName);
      }
      return new SetterObserver(this.taskQueue, obj, propertyName);
    };
    ObserverLocator.prototype.getAccessor = function getAccessor(obj, propertyName) {
      if (obj instanceof _aureliaPal.DOM.Element) {
        if (propertyName === 'class' || propertyName === 'style' || propertyName === 'css' || propertyName === 'value' && (obj.tagName.toLowerCase() === 'input' || obj.tagName.toLowerCase() === 'select') || propertyName === 'checked' && obj.tagName.toLowerCase() === 'input' || /^xlink:.+$/.exec(propertyName)) {
          return this.getObserver(obj, propertyName);
        }
        if (/^\w+:|^data-|^aria-/.test(propertyName) || obj instanceof _aureliaPal.DOM.SVGElement && this.svgAnalyzer.isStandardSvgAttribute(obj.nodeName, propertyName)) {
          return dataAttributeAccessor;
        }
      }
      return propertyAccessor;
    };
    ObserverLocator.prototype.getArrayObserver = function getArrayObserver(array) {
      return _getArrayObserver(this.taskQueue, array);
    };
    ObserverLocator.prototype.getMapObserver = function getMapObserver(map) {
      return _getMapObserver(this.taskQueue, map);
    };
    ObserverLocator.prototype.getSetObserver = function getSetObserver(set) {
      return _getSetObserver(this.taskQueue, set);
    };
    return ObserverLocator;
  }(), _class11.inject = [_aureliaTaskQueue.TaskQueue, EventManager, DirtyChecker, SVGAnalyzer, Parser], _temp);
  var ObjectObservationAdapter = exports.ObjectObservationAdapter = function() {
    function ObjectObservationAdapter() {
      _classCallCheck(this, ObjectObservationAdapter);
    }
    ObjectObservationAdapter.prototype.getObserver = function getObserver(object, propertyName, descriptor) {
      throw new Error('BindingAdapters must implement getObserver(object, propertyName).');
    };
    return ObjectObservationAdapter;
  }();
  var BindingExpression = exports.BindingExpression = function() {
    function BindingExpression(observerLocator, targetProperty, sourceExpression, mode, lookupFunctions, attribute) {
      _classCallCheck(this, BindingExpression);
      this.observerLocator = observerLocator;
      this.targetProperty = targetProperty;
      this.sourceExpression = sourceExpression;
      this.mode = mode;
      this.lookupFunctions = lookupFunctions;
      this.attribute = attribute;
      this.discrete = false;
    }
    BindingExpression.prototype.createBinding = function createBinding(target) {
      return new Binding(this.observerLocator, this.sourceExpression, target, this.targetProperty, this.mode, this.lookupFunctions);
    };
    return BindingExpression;
  }();
  var targetContext = 'Binding:target';
  var Binding = exports.Binding = (_dec10 = connectable(), _dec10(_class12 = function() {
    function Binding(observerLocator, sourceExpression, target, targetProperty, mode, lookupFunctions) {
      _classCallCheck(this, Binding);
      this.observerLocator = observerLocator;
      this.sourceExpression = sourceExpression;
      this.target = target;
      this.targetProperty = targetProperty;
      this.mode = mode;
      this.lookupFunctions = lookupFunctions;
    }
    Binding.prototype.updateTarget = function updateTarget(value) {
      this.targetObserver.setValue(value, this.target, this.targetProperty);
    };
    Binding.prototype.updateSource = function updateSource(value) {
      this.sourceExpression.assign(this.source, value, this.lookupFunctions);
    };
    Binding.prototype.call = function call(context, newValue, oldValue) {
      if (!this.isBound) {
        return;
      }
      if (context === sourceContext) {
        oldValue = this.targetObserver.getValue(this.target, this.targetProperty);
        newValue = this.sourceExpression.evaluate(this.source, this.lookupFunctions);
        if (newValue !== oldValue) {
          this.updateTarget(newValue);
        }
        if (this.mode !== bindingMode.oneTime) {
          this._version++;
          this.sourceExpression.connect(this, this.source);
          this.unobserve(false);
        }
        return;
      }
      if (context === targetContext) {
        if (newValue !== this.sourceExpression.evaluate(this.source, this.lookupFunctions)) {
          this.updateSource(newValue);
        }
        return;
      }
      throw new Error('Unexpected call context ' + context);
    };
    Binding.prototype.bind = function bind(source) {
      if (this.isBound) {
        if (this.source === source) {
          return;
        }
        this.unbind();
      }
      this.isBound = true;
      this.source = source;
      if (this.sourceExpression.bind) {
        this.sourceExpression.bind(this, source, this.lookupFunctions);
      }
      var mode = this.mode;
      if (!this.targetObserver) {
        var method = mode === bindingMode.twoWay ? 'getObserver' : 'getAccessor';
        this.targetObserver = this.observerLocator[method](this.target, this.targetProperty);
      }
      if ('bind' in this.targetObserver) {
        this.targetObserver.bind();
      }
      var value = this.sourceExpression.evaluate(source, this.lookupFunctions);
      this.updateTarget(value);
      if (mode === bindingMode.oneWay) {
        enqueueBindingConnect(this);
      } else if (mode === bindingMode.twoWay) {
        this.sourceExpression.connect(this, source);
        this.targetObserver.subscribe(targetContext, this);
      }
    };
    Binding.prototype.unbind = function unbind() {
      if (!this.isBound) {
        return;
      }
      this.isBound = false;
      if (this.sourceExpression.unbind) {
        this.sourceExpression.unbind(this, this.source);
      }
      this.source = null;
      if ('unbind' in this.targetObserver) {
        this.targetObserver.unbind();
      }
      if (this.targetObserver.unsubscribe) {
        this.targetObserver.unsubscribe(targetContext, this);
      }
      this.unobserve(true);
    };
    Binding.prototype.connect = function connect(evaluate) {
      if (!this.isBound) {
        return;
      }
      if (evaluate) {
        var value = this.sourceExpression.evaluate(this.source, this.lookupFunctions);
        this.updateTarget(value);
      }
      this.sourceExpression.connect(this, this.source);
    };
    return Binding;
  }()) || _class12);
  var CallExpression = exports.CallExpression = function() {
    function CallExpression(observerLocator, targetProperty, sourceExpression, lookupFunctions) {
      _classCallCheck(this, CallExpression);
      this.observerLocator = observerLocator;
      this.targetProperty = targetProperty;
      this.sourceExpression = sourceExpression;
      this.lookupFunctions = lookupFunctions;
    }
    CallExpression.prototype.createBinding = function createBinding(target) {
      return new Call(this.observerLocator, this.sourceExpression, target, this.targetProperty, this.lookupFunctions);
    };
    return CallExpression;
  }();
  var Call = exports.Call = function() {
    function Call(observerLocator, sourceExpression, target, targetProperty, lookupFunctions) {
      _classCallCheck(this, Call);
      this.sourceExpression = sourceExpression;
      this.target = target;
      this.targetProperty = observerLocator.getObserver(target, targetProperty);
      this.lookupFunctions = lookupFunctions;
    }
    Call.prototype.callSource = function callSource($event) {
      var overrideContext = this.source.overrideContext;
      Object.assign(overrideContext, $event);
      overrideContext.$event = $event;
      var mustEvaluate = true;
      var result = this.sourceExpression.evaluate(this.source, this.lookupFunctions, mustEvaluate);
      delete overrideContext.$event;
      for (var prop in $event) {
        delete overrideContext[prop];
      }
      return result;
    };
    Call.prototype.bind = function bind(source) {
      var _this27 = this;
      if (this.isBound) {
        if (this.source === source) {
          return;
        }
        this.unbind();
      }
      this.isBound = true;
      this.source = source;
      if (this.sourceExpression.bind) {
        this.sourceExpression.bind(this, source, this.lookupFunctions);
      }
      this.targetProperty.setValue(function($event) {
        return _this27.callSource($event);
      });
    };
    Call.prototype.unbind = function unbind() {
      if (!this.isBound) {
        return;
      }
      this.isBound = false;
      if (this.sourceExpression.unbind) {
        this.sourceExpression.unbind(this, this.source);
      }
      this.source = null;
      this.targetProperty.setValue(null);
    };
    return Call;
  }();
  var ValueConverterResource = exports.ValueConverterResource = function() {
    function ValueConverterResource(name) {
      _classCallCheck(this, ValueConverterResource);
      this.name = name;
    }
    ValueConverterResource.convention = function convention(name) {
      if (name.endsWith('ValueConverter')) {
        return new ValueConverterResource(camelCase(name.substring(0, name.length - 14)));
      }
    };
    ValueConverterResource.prototype.initialize = function initialize(container, target) {
      this.instance = container.get(target);
    };
    ValueConverterResource.prototype.register = function register(registry, name) {
      registry.registerValueConverter(name || this.name, this.instance);
    };
    ValueConverterResource.prototype.load = function load(container, target) {};
    return ValueConverterResource;
  }();
  function valueConverter(nameOrTarget) {
    if (nameOrTarget === undefined || typeof nameOrTarget === 'string') {
      return function(target) {
        _aureliaMetadata.metadata.define(_aureliaMetadata.metadata.resource, new ValueConverterResource(nameOrTarget), target);
      };
    }
    _aureliaMetadata.metadata.define(_aureliaMetadata.metadata.resource, new ValueConverterResource(), nameOrTarget);
  }
  var BindingBehaviorResource = exports.BindingBehaviorResource = function() {
    function BindingBehaviorResource(name) {
      _classCallCheck(this, BindingBehaviorResource);
      this.name = name;
    }
    BindingBehaviorResource.convention = function convention(name) {
      if (name.endsWith('BindingBehavior')) {
        return new BindingBehaviorResource(camelCase(name.substring(0, name.length - 15)));
      }
    };
    BindingBehaviorResource.prototype.initialize = function initialize(container, target) {
      this.instance = container.get(target);
    };
    BindingBehaviorResource.prototype.register = function register(registry, name) {
      registry.registerBindingBehavior(name || this.name, this.instance);
    };
    BindingBehaviorResource.prototype.load = function load(container, target) {};
    return BindingBehaviorResource;
  }();
  function bindingBehavior(nameOrTarget) {
    if (nameOrTarget === undefined || typeof nameOrTarget === 'string') {
      return function(target) {
        _aureliaMetadata.metadata.define(_aureliaMetadata.metadata.resource, new BindingBehaviorResource(nameOrTarget), target);
      };
    }
    _aureliaMetadata.metadata.define(_aureliaMetadata.metadata.resource, new BindingBehaviorResource(), nameOrTarget);
  }
  var ListenerExpression = exports.ListenerExpression = function() {
    function ListenerExpression(eventManager, targetEvent, sourceExpression, delegate, preventDefault, lookupFunctions) {
      _classCallCheck(this, ListenerExpression);
      this.eventManager = eventManager;
      this.targetEvent = targetEvent;
      this.sourceExpression = sourceExpression;
      this.delegate = delegate;
      this.discrete = true;
      this.preventDefault = preventDefault;
      this.lookupFunctions = lookupFunctions;
    }
    ListenerExpression.prototype.createBinding = function createBinding(target) {
      return new Listener(this.eventManager, this.targetEvent, this.delegate, this.sourceExpression, target, this.preventDefault, this.lookupFunctions);
    };
    return ListenerExpression;
  }();
  var Listener = exports.Listener = function() {
    function Listener(eventManager, targetEvent, delegate, sourceExpression, target, preventDefault, lookupFunctions) {
      _classCallCheck(this, Listener);
      this.eventManager = eventManager;
      this.targetEvent = targetEvent;
      this.delegate = delegate;
      this.sourceExpression = sourceExpression;
      this.target = target;
      this.preventDefault = preventDefault;
      this.lookupFunctions = lookupFunctions;
    }
    Listener.prototype.callSource = function callSource(event) {
      var overrideContext = this.source.overrideContext;
      overrideContext.$event = event;
      var mustEvaluate = true;
      var result = this.sourceExpression.evaluate(this.source, this.lookupFunctions, mustEvaluate);
      delete overrideContext.$event;
      if (result !== true && this.preventDefault) {
        event.preventDefault();
      }
      return result;
    };
    Listener.prototype.bind = function bind(source) {
      var _this28 = this;
      if (this.isBound) {
        if (this.source === source) {
          return;
        }
        this.unbind();
      }
      this.isBound = true;
      this.source = source;
      if (this.sourceExpression.bind) {
        this.sourceExpression.bind(this, source, this.lookupFunctions);
      }
      this._disposeListener = this.eventManager.addEventListener(this.target, this.targetEvent, function(event) {
        return _this28.callSource(event);
      }, this.delegate);
    };
    Listener.prototype.unbind = function unbind() {
      if (!this.isBound) {
        return;
      }
      this.isBound = false;
      if (this.sourceExpression.unbind) {
        this.sourceExpression.unbind(this, this.source);
      }
      this.source = null;
      this._disposeListener();
      this._disposeListener = null;
    };
    return Listener;
  }();
  function getAU(element) {
    var au = element.au;
    if (au === undefined) {
      throw new Error('No Aurelia APIs are defined for the referenced element.');
    }
    return au;
  }
  var NameExpression = exports.NameExpression = function() {
    function NameExpression(sourceExpression, apiName, lookupFunctions) {
      _classCallCheck(this, NameExpression);
      this.sourceExpression = sourceExpression;
      this.apiName = apiName;
      this.lookupFunctions = lookupFunctions;
      this.discrete = true;
    }
    NameExpression.prototype.createBinding = function createBinding(target) {
      return new NameBinder(this.sourceExpression, NameExpression.locateAPI(target, this.apiName), this.lookupFunctions);
    };
    NameExpression.locateAPI = function locateAPI(element, apiName) {
      switch (apiName) {
        case 'element':
          return element;
        case 'controller':
          return getAU(element).controller;
        case 'view-model':
          return getAU(element).controller.viewModel;
        case 'view':
          return getAU(element).controller.view;
        default:
          var target = getAU(element)[apiName];
          if (target === undefined) {
            throw new Error('Attempted to reference "' + apiName + '", but it was not found amongst the target\'s API.');
          }
          return target.viewModel;
      }
    };
    return NameExpression;
  }();
  var NameBinder = function() {
    function NameBinder(sourceExpression, target, lookupFunctions) {
      _classCallCheck(this, NameBinder);
      this.sourceExpression = sourceExpression;
      this.target = target;
      this.lookupFunctions = lookupFunctions;
    }
    NameBinder.prototype.bind = function bind(source) {
      if (this.isBound) {
        if (this.source === source) {
          return;
        }
        this.unbind();
      }
      this.isBound = true;
      this.source = source;
      if (this.sourceExpression.bind) {
        this.sourceExpression.bind(this, source, this.lookupFunctions);
      }
      this.sourceExpression.assign(this.source, this.target, this.lookupFunctions);
    };
    NameBinder.prototype.unbind = function unbind() {
      if (!this.isBound) {
        return;
      }
      this.isBound = false;
      this.sourceExpression.assign(this.source, null, this.lookupFunctions);
      if (this.sourceExpression.unbind) {
        this.sourceExpression.unbind(this, this.source);
      }
      this.source = null;
    };
    return NameBinder;
  }();
  var LookupFunctions = {
    bindingBehaviors: function bindingBehaviors(name) {
      return null;
    },
    valueConverters: function valueConverters(name) {
      return null;
    }
  };
  var BindingEngine = exports.BindingEngine = (_temp2 = _class13 = function() {
    function BindingEngine(observerLocator, parser) {
      _classCallCheck(this, BindingEngine);
      this.observerLocator = observerLocator;
      this.parser = parser;
    }
    BindingEngine.prototype.createBindingExpression = function createBindingExpression(targetProperty, sourceExpression) {
      var mode = arguments.length <= 2 || arguments[2] === undefined ? bindingMode.oneWay : arguments[2];
      var lookupFunctions = arguments.length <= 3 || arguments[3] === undefined ? LookupFunctions : arguments[3];
      return new BindingExpression(this.observerLocator, targetProperty, this.parser.parse(sourceExpression), mode, lookupFunctions);
    };
    BindingEngine.prototype.propertyObserver = function propertyObserver(obj, propertyName) {
      var _this29 = this;
      return {subscribe: function subscribe(callback) {
          var observer = _this29.observerLocator.getObserver(obj, propertyName);
          observer.subscribe(callback);
          return {dispose: function dispose() {
              return observer.unsubscribe(callback);
            }};
        }};
    };
    BindingEngine.prototype.collectionObserver = function collectionObserver(collection) {
      var _this30 = this;
      return {subscribe: function subscribe(callback) {
          var observer = void 0;
          if (collection instanceof Array) {
            observer = _this30.observerLocator.getArrayObserver(collection);
          } else if (collection instanceof Map) {
            observer = _this30.observerLocator.getMapObserver(collection);
          } else if (collection instanceof Set) {
            observer = _this30.observerLocator.getSetObserver(collection);
          } else {
            throw new Error('collection must be an instance of Array, Map or Set.');
          }
          observer.subscribe(callback);
          return {dispose: function dispose() {
              return observer.unsubscribe(callback);
            }};
        }};
    };
    BindingEngine.prototype.expressionObserver = function expressionObserver(bindingContext, expression) {
      var scope = {
        bindingContext: bindingContext,
        overrideContext: createOverrideContext(bindingContext)
      };
      return new ExpressionObserver(scope, this.parser.parse(expression), this.observerLocator, LookupFunctions);
    };
    BindingEngine.prototype.parseExpression = function parseExpression(expression) {
      return this.parser.parse(expression);
    };
    BindingEngine.prototype.registerAdapter = function registerAdapter(adapter) {
      this.observerLocator.addAdapter(adapter);
    };
    return BindingEngine;
  }(), _class13.inject = [ObserverLocator, Parser], _temp2);
  var setProto = Set.prototype;
  function _getSetObserver(taskQueue, set) {
    return ModifySetObserver.for(taskQueue, set);
  }
  exports.getSetObserver = _getSetObserver;
  var ModifySetObserver = function(_ModifyCollectionObse3) {
    _inherits(ModifySetObserver, _ModifyCollectionObse3);
    function ModifySetObserver(taskQueue, set) {
      _classCallCheck(this, ModifySetObserver);
      return _possibleConstructorReturn(this, _ModifyCollectionObse3.call(this, taskQueue, set));
    }
    ModifySetObserver.for = function _for(taskQueue, set) {
      if (!('__set_observer__' in set)) {
        var observer = ModifySetObserver.create(taskQueue, set);
        Object.defineProperty(set, '__set_observer__', {
          value: observer,
          enumerable: false,
          configurable: false
        });
      }
      return set.__set_observer__;
    };
    ModifySetObserver.create = function create(taskQueue, set) {
      var observer = new ModifySetObserver(taskQueue, set);
      var proto = setProto;
      if (proto.add !== set.add || proto.delete !== set.delete || proto.clear !== set.clear) {
        proto = {
          add: set.add,
          delete: set.delete,
          clear: set.clear
        };
      }
      set.add = function() {
        var type = 'add';
        var oldSize = set.size;
        var methodCallResult = proto.add.apply(set, arguments);
        var hasValue = set.size === oldSize;
        if (!hasValue) {
          observer.addChangeRecord({
            type: type,
            object: set,
            value: Array.from(set).pop()
          });
        }
        return methodCallResult;
      };
      set.delete = function() {
        var hasValue = set.has(arguments[0]);
        var methodCallResult = proto.delete.apply(set, arguments);
        if (hasValue) {
          observer.addChangeRecord({
            type: 'delete',
            object: set,
            value: arguments[0]
          });
        }
        return methodCallResult;
      };
      set.clear = function() {
        var methodCallResult = proto.clear.apply(set, arguments);
        observer.addChangeRecord({
          type: 'clear',
          object: set
        });
        return methodCallResult;
      };
      return observer;
    };
    return ModifySetObserver;
  }(ModifyCollectionObserver);
  function observable(targetOrConfig, key, descriptor) {
    var deco = function deco(target, key2, descriptor2) {
      var innerPropertyName = '_' + key2;
      var callbackName = targetOrConfig && targetOrConfig.changeHandler || key2 + 'Changed';
      var babel = descriptor2 !== undefined;
      if (babel) {
        if (typeof descriptor2.initializer === 'function') {
          target[innerPropertyName] = descriptor2.initializer();
        }
      } else {
        descriptor2 = {};
      }
      delete descriptor2.writable;
      delete descriptor2.initializer;
      descriptor2.get = function() {
        return this[innerPropertyName];
      };
      descriptor2.set = function(newValue) {
        var oldValue = this[innerPropertyName];
        this[innerPropertyName] = newValue;
        if (this[callbackName]) {
          this[callbackName](newValue, oldValue);
        }
      };
      descriptor2.get.dependencies = [innerPropertyName];
      if (!babel) {
        Object.defineProperty(target, key2, descriptor2);
      }
    };
    if (key) {
      var target = targetOrConfig;
      targetOrConfig = null;
      return deco(target, key, descriptor);
    }
    return deco;
  }
});

})();
(function() {
var define = System.amdDefine;
define("npm:aurelia-binding@1.0.0-beta.1.3.2.js", ["npm:aurelia-binding@1.0.0-beta.1.3.2/aurelia-binding"], function(main) {
  return main;
});

})();
(function() {
var define = System.amdDefine;
define("npm:aurelia-task-queue@1.0.0-beta.1.2.0/aurelia-task-queue.js", ["exports", "aurelia-pal"], function(exports, _aureliaPal) {
  'use strict';
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.TaskQueue = undefined;
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  var hasSetImmediate = typeof setImmediate === 'function';
  function makeRequestFlushFromMutationObserver(flush) {
    var toggle = 1;
    var observer = _aureliaPal.DOM.createMutationObserver(flush);
    var node = _aureliaPal.DOM.createTextNode('');
    observer.observe(node, {characterData: true});
    return function requestFlush() {
      toggle = -toggle;
      node.data = toggle;
    };
  }
  function makeRequestFlushFromTimer(flush) {
    return function requestFlush() {
      var timeoutHandle = setTimeout(handleFlushTimer, 0);
      var intervalHandle = setInterval(handleFlushTimer, 50);
      function handleFlushTimer() {
        clearTimeout(timeoutHandle);
        clearInterval(intervalHandle);
        flush();
      }
    };
  }
  function onError(error, task) {
    if ('onError' in task) {
      task.onError(error);
    } else if (hasSetImmediate) {
      setImmediate(function() {
        throw error;
      });
    } else {
      setTimeout(function() {
        throw error;
      }, 0);
    }
  }
  var TaskQueue = exports.TaskQueue = function() {
    function TaskQueue() {
      var _this = this;
      _classCallCheck(this, TaskQueue);
      this.microTaskQueue = [];
      this.microTaskQueueCapacity = 1024;
      this.taskQueue = [];
      if (_aureliaPal.FEATURE.mutationObserver) {
        this.requestFlushMicroTaskQueue = makeRequestFlushFromMutationObserver(function() {
          return _this.flushMicroTaskQueue();
        });
      } else {
        this.requestFlushMicroTaskQueue = makeRequestFlushFromTimer(function() {
          return _this.flushMicroTaskQueue();
        });
      }
      this.requestFlushTaskQueue = makeRequestFlushFromTimer(function() {
        return _this.flushTaskQueue();
      });
    }
    TaskQueue.prototype.queueMicroTask = function queueMicroTask(task) {
      if (this.microTaskQueue.length < 1) {
        this.requestFlushMicroTaskQueue();
      }
      this.microTaskQueue.push(task);
    };
    TaskQueue.prototype.queueTask = function queueTask(task) {
      if (this.taskQueue.length < 1) {
        this.requestFlushTaskQueue();
      }
      this.taskQueue.push(task);
    };
    TaskQueue.prototype.flushTaskQueue = function flushTaskQueue() {
      var queue = this.taskQueue;
      var index = 0;
      var task = void 0;
      this.taskQueue = [];
      try {
        while (index < queue.length) {
          task = queue[index];
          task.call();
          index++;
        }
      } catch (error) {
        onError(error, task);
      }
    };
    TaskQueue.prototype.flushMicroTaskQueue = function flushMicroTaskQueue() {
      var queue = this.microTaskQueue;
      var capacity = this.microTaskQueueCapacity;
      var index = 0;
      var task = void 0;
      try {
        while (index < queue.length) {
          task = queue[index];
          task.call();
          index++;
          if (index > capacity) {
            for (var scan = 0,
                newLength = queue.length - index; scan < newLength; scan++) {
              queue[scan] = queue[scan + index];
            }
            queue.length -= index;
            index = 0;
          }
        }
      } catch (error) {
        onError(error, task);
      }
      queue.length = 0;
    };
    return TaskQueue;
  }();
});

})();
(function() {
var define = System.amdDefine;
define("npm:aurelia-task-queue@1.0.0-beta.1.2.0.js", ["npm:aurelia-task-queue@1.0.0-beta.1.2.0/aurelia-task-queue"], function(main) {
  return main;
});

})();
(function() {
var define = System.amdDefine;
define("npm:aurelia-templating@1.0.0-beta.1.2.2/aurelia-templating.js", ["exports", "aurelia-logging", "aurelia-pal", "aurelia-metadata", "aurelia-path", "aurelia-loader", "aurelia-binding", "aurelia-dependency-injection", "aurelia-task-queue"], function(exports, _aureliaLogging, _aureliaPal, _aureliaMetadata, _aureliaPath, _aureliaLoader, _aureliaBinding, _aureliaDependencyInjection, _aureliaTaskQueue) {
  'use strict';
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.TemplatingEngine = exports.ElementConfigResource = exports.CompositionEngine = exports.HtmlBehaviorResource = exports.BindableProperty = exports.BehaviorPropertyObserver = exports.Controller = exports.ViewEngine = exports.ModuleAnalyzer = exports.ResourceDescription = exports.ResourceModule = exports.ViewCompiler = exports.ViewFactory = exports.BoundViewFactory = exports.ViewSlot = exports._ContentSelector = exports.View = exports.ViewResources = exports.BindingLanguage = exports.ViewLocator = exports.InlineViewStrategy = exports.TemplateRegistryViewStrategy = exports.NoViewStrategy = exports.ConventionalViewStrategy = exports.RelativeViewStrategy = exports.viewStrategy = exports.TargetInstruction = exports.BehaviorInstruction = exports.ViewCompileInstruction = exports.ResourceLoadContext = exports.ElementEvents = exports.CompositionTransaction = exports.Animator = exports.animationEvent = undefined;
  exports._hyphenate = _hyphenate;
  exports.children = children;
  exports.child = child;
  exports.resource = resource;
  exports.behavior = behavior;
  exports.customElement = customElement;
  exports.customAttribute = customAttribute;
  exports.templateController = templateController;
  exports.bindable = bindable;
  exports.dynamicOptions = dynamicOptions;
  exports.useShadowDOM = useShadowDOM;
  exports.processAttributes = processAttributes;
  exports.processContent = processContent;
  exports.containerless = containerless;
  exports.useViewStrategy = useViewStrategy;
  exports.useView = useView;
  exports.inlineView = inlineView;
  exports.noView = noView;
  exports.elementConfig = elementConfig;
  var LogManager = _interopRequireWildcard(_aureliaLogging);
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key))
            newObj[key] = obj[key];
        }
      }
      newObj.default = obj;
      return newObj;
    }
  }
  var _createClass = function() {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    return function(Constructor, protoProps, staticProps) {
      if (protoProps)
        defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();
  var _class3,
      _temp,
      _dec,
      _class4,
      _dec2,
      _class5,
      _dec3,
      _class6,
      _dec4,
      _class7,
      _dec5,
      _class8,
      _class9,
      _temp2,
      _class11,
      _dec6,
      _class13,
      _dec7,
      _class14,
      _dec8,
      _class16,
      _dec9,
      _class17,
      _dec10,
      _class18;
  var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
    return typeof obj;
  } : function(obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;
  };
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  var animationEvent = exports.animationEvent = {
    enterBegin: 'animation:enter:begin',
    enterActive: 'animation:enter:active',
    enterDone: 'animation:enter:done',
    enterTimeout: 'animation:enter:timeout',
    leaveBegin: 'animation:leave:begin',
    leaveActive: 'animation:leave:active',
    leaveDone: 'animation:leave:done',
    leaveTimeout: 'animation:leave:timeout',
    staggerNext: 'animation:stagger:next',
    removeClassBegin: 'animation:remove-class:begin',
    removeClassActive: 'animation:remove-class:active',
    removeClassDone: 'animation:remove-class:done',
    removeClassTimeout: 'animation:remove-class:timeout',
    addClassBegin: 'animation:add-class:begin',
    addClassActive: 'animation:add-class:active',
    addClassDone: 'animation:add-class:done',
    addClassTimeout: 'animation:add-class:timeout',
    animateBegin: 'animation:animate:begin',
    animateActive: 'animation:animate:active',
    animateDone: 'animation:animate:done',
    animateTimeout: 'animation:animate:timeout',
    sequenceBegin: 'animation:sequence:begin',
    sequenceDone: 'animation:sequence:done'
  };
  var Animator = exports.Animator = function() {
    function Animator() {
      _classCallCheck(this, Animator);
    }
    Animator.prototype.enter = function enter(element) {
      return Promise.resolve(false);
    };
    Animator.prototype.leave = function leave(element) {
      return Promise.resolve(false);
    };
    Animator.prototype.removeClass = function removeClass(element, className) {
      element.classList.remove(className);
      return Promise.resolve(false);
    };
    Animator.prototype.addClass = function addClass(element, className) {
      element.classList.add(className);
      return Promise.resolve(false);
    };
    Animator.prototype.animate = function animate(element, className) {
      return Promise.resolve(false);
    };
    Animator.prototype.runSequence = function runSequence(animations) {};
    Animator.prototype.registerEffect = function registerEffect(effectName, properties) {};
    Animator.prototype.unregisterEffect = function unregisterEffect(effectName) {};
    return Animator;
  }();
  var CompositionTransaction = exports.CompositionTransaction = function() {
    function CompositionTransaction() {
      _classCallCheck(this, CompositionTransaction);
      this._ownershipToken = null;
      this._compositionCount = 0;
    }
    CompositionTransaction.prototype.tryCapture = function tryCapture() {
      if (this._ownershipToken !== null) {
        return null;
      }
      return this._ownershipToken = this._createOwnershipToken();
    };
    CompositionTransaction.prototype.enlist = function enlist() {
      var that = this;
      that._compositionCount++;
      return {done: function done() {
          that._compositionCount--;
          that._tryCompleteTransaction();
        }};
    };
    CompositionTransaction.prototype._tryCompleteTransaction = function _tryCompleteTransaction() {
      if (this._compositionCount <= 0) {
        this._compositionCount = 0;
        if (this._ownershipToken !== null) {
          var capture = this._ownershipToken;
          this._ownershipToken = null;
          capture._resolve();
        }
      }
    };
    CompositionTransaction.prototype._createOwnershipToken = function _createOwnershipToken() {
      var _this = this;
      var token = {};
      var promise = new Promise(function(resolve, reject) {
        token._resolve = resolve;
      });
      token.waitForCompositionComplete = function() {
        _this._tryCompleteTransaction();
        return promise;
      };
      return token;
    };
    return CompositionTransaction;
  }();
  var capitalMatcher = /([A-Z])/g;
  function addHyphenAndLower(char) {
    return '-' + char.toLowerCase();
  }
  function _hyphenate(name) {
    return (name.charAt(0).toLowerCase() + name.slice(1)).replace(capitalMatcher, addHyphenAndLower);
  }
  var ElementEvents = exports.ElementEvents = function() {
    function ElementEvents(element) {
      _classCallCheck(this, ElementEvents);
      this.element = element;
      this.subscriptions = {};
    }
    ElementEvents.prototype._enqueueHandler = function _enqueueHandler(handler) {
      this.subscriptions[handler.eventName] = this.subscriptions[handler.eventName] || [];
      this.subscriptions[handler.eventName].push(handler);
    };
    ElementEvents.prototype._dequeueHandler = function _dequeueHandler(handler) {
      var index = void 0;
      var subscriptions = this.subscriptions[handler.eventName];
      if (subscriptions) {
        index = subscriptions.indexOf(handler);
        if (index > -1) {
          subscriptions.splice(index, 1);
        }
      }
      return handler;
    };
    ElementEvents.prototype.publish = function publish(eventName) {
      var detail = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
      var bubbles = arguments.length <= 2 || arguments[2] === undefined ? true : arguments[2];
      var cancelable = arguments.length <= 3 || arguments[3] === undefined ? true : arguments[3];
      var event = _aureliaPal.DOM.createCustomEvent(eventName, {
        cancelable: cancelable,
        bubbles: bubbles,
        detail: detail
      });
      this.element.dispatchEvent(event);
    };
    ElementEvents.prototype.subscribe = function subscribe(eventName, handler) {
      var _this2 = this;
      var bubbles = arguments.length <= 2 || arguments[2] === undefined ? true : arguments[2];
      if (handler && typeof handler === 'function') {
        handler.eventName = eventName;
        handler.handler = handler;
        handler.bubbles = bubbles;
        handler.dispose = function() {
          _this2.element.removeEventListener(eventName, handler, bubbles);
          _this2._dequeueHandler(handler);
        };
        this.element.addEventListener(eventName, handler, bubbles);
        this._enqueueHandler(handler);
        return handler;
      }
    };
    ElementEvents.prototype.subscribeOnce = function subscribeOnce(eventName, handler) {
      var _this3 = this;
      var bubbles = arguments.length <= 2 || arguments[2] === undefined ? true : arguments[2];
      if (handler && typeof handler === 'function') {
        var _ret = function() {
          var _handler = function _handler(event) {
            handler(event);
            _handler.dispose();
          };
          return {v: _this3.subscribe(eventName, _handler, bubbles)};
        }();
        if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object")
          return _ret.v;
      }
    };
    ElementEvents.prototype.dispose = function dispose(eventName) {
      if (eventName && typeof eventName === 'string') {
        var subscriptions = this.subscriptions[eventName];
        if (subscriptions) {
          while (subscriptions.length) {
            var subscription = subscriptions.pop();
            if (subscription) {
              subscription.dispose();
            }
          }
        }
      } else {
        this.disposeAll();
      }
    };
    ElementEvents.prototype.disposeAll = function disposeAll() {
      for (var key in this.subscriptions) {
        this.dispose(key);
      }
    };
    return ElementEvents;
  }();
  var ResourceLoadContext = exports.ResourceLoadContext = function() {
    function ResourceLoadContext() {
      _classCallCheck(this, ResourceLoadContext);
      this.dependencies = {};
    }
    ResourceLoadContext.prototype.addDependency = function addDependency(url) {
      this.dependencies[url] = true;
    };
    ResourceLoadContext.prototype.hasDependency = function hasDependency(url) {
      return url in this.dependencies;
    };
    return ResourceLoadContext;
  }();
  var ViewCompileInstruction = exports.ViewCompileInstruction = function ViewCompileInstruction() {
    var targetShadowDOM = arguments.length <= 0 || arguments[0] === undefined ? false : arguments[0];
    var compileSurrogate = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];
    _classCallCheck(this, ViewCompileInstruction);
    this.targetShadowDOM = targetShadowDOM;
    this.compileSurrogate = compileSurrogate;
    this.associatedModuleId = null;
  };
  ViewCompileInstruction.normal = new ViewCompileInstruction();
  var BehaviorInstruction = exports.BehaviorInstruction = function() {
    BehaviorInstruction.enhance = function enhance() {
      var instruction = new BehaviorInstruction();
      instruction.enhance = true;
      return instruction;
    };
    BehaviorInstruction.unitTest = function unitTest(type, attributes) {
      var instruction = new BehaviorInstruction();
      instruction.type = type;
      instruction.attributes = attributes || {};
      return instruction;
    };
    BehaviorInstruction.element = function element(node, type) {
      var instruction = new BehaviorInstruction();
      instruction.type = type;
      instruction.attributes = {};
      instruction.anchorIsContainer = !(node.hasAttribute('containerless') || type.containerless);
      instruction.initiatedByBehavior = true;
      return instruction;
    };
    BehaviorInstruction.attribute = function attribute(attrName, type) {
      var instruction = new BehaviorInstruction();
      instruction.attrName = attrName;
      instruction.type = type || null;
      instruction.attributes = {};
      return instruction;
    };
    BehaviorInstruction.dynamic = function dynamic(host, viewModel, viewFactory) {
      var instruction = new BehaviorInstruction();
      instruction.host = host;
      instruction.viewModel = viewModel;
      instruction.viewFactory = viewFactory;
      instruction.inheritBindingContext = true;
      return instruction;
    };
    function BehaviorInstruction() {
      _classCallCheck(this, BehaviorInstruction);
      this.initiatedByBehavior = false;
      this.enhance = false;
      this.partReplacements = null;
      this.viewFactory = null;
      this.originalAttrName = null;
      this.skipContentProcessing = false;
      this.contentFactory = null;
      this.viewModel = null;
      this.anchorIsContainer = false;
      this.host = null;
      this.attributes = null;
      this.type = null;
      this.attrName = null;
      this.inheritBindingContext = false;
    }
    return BehaviorInstruction;
  }();
  BehaviorInstruction.normal = new BehaviorInstruction();
  var TargetInstruction = exports.TargetInstruction = (_temp = _class3 = function() {
    TargetInstruction.contentSelector = function contentSelector(node, parentInjectorId) {
      var instruction = new TargetInstruction();
      instruction.parentInjectorId = parentInjectorId;
      instruction.contentSelector = true;
      instruction.selector = node.getAttribute('select');
      return instruction;
    };
    TargetInstruction.contentExpression = function contentExpression(expression) {
      var instruction = new TargetInstruction();
      instruction.contentExpression = expression;
      return instruction;
    };
    TargetInstruction.lifting = function lifting(parentInjectorId, liftingInstruction) {
      var instruction = new TargetInstruction();
      instruction.parentInjectorId = parentInjectorId;
      instruction.expressions = TargetInstruction.noExpressions;
      instruction.behaviorInstructions = [liftingInstruction];
      instruction.viewFactory = liftingInstruction.viewFactory;
      instruction.providers = [liftingInstruction.type.target];
      instruction.lifting = true;
      return instruction;
    };
    TargetInstruction.normal = function normal(injectorId, parentInjectorId, providers, behaviorInstructions, expressions, elementInstruction) {
      var instruction = new TargetInstruction();
      instruction.injectorId = injectorId;
      instruction.parentInjectorId = parentInjectorId;
      instruction.providers = providers;
      instruction.behaviorInstructions = behaviorInstructions;
      instruction.expressions = expressions;
      instruction.anchorIsContainer = elementInstruction ? elementInstruction.anchorIsContainer : true;
      instruction.elementInstruction = elementInstruction;
      return instruction;
    };
    TargetInstruction.surrogate = function surrogate(providers, behaviorInstructions, expressions, values) {
      var instruction = new TargetInstruction();
      instruction.expressions = expressions;
      instruction.behaviorInstructions = behaviorInstructions;
      instruction.providers = providers;
      instruction.values = values;
      return instruction;
    };
    function TargetInstruction() {
      _classCallCheck(this, TargetInstruction);
      this.injectorId = null;
      this.parentInjectorId = null;
      this.contentSelector = false;
      this.selector = null;
      this.contentExpression = null;
      this.expressions = null;
      this.behaviorInstructions = null;
      this.providers = null;
      this.viewFactory = null;
      this.anchorIsContainer = false;
      this.elementInstruction = null;
      this.lifting = false;
      this.values = null;
    }
    return TargetInstruction;
  }(), _class3.noExpressions = Object.freeze([]), _temp);
  var viewStrategy = exports.viewStrategy = _aureliaMetadata.protocol.create('aurelia:view-strategy', {
    validate: function validate(target) {
      if (!(typeof target.loadViewFactory === 'function')) {
        return 'View strategies must implement: loadViewFactory(viewEngine: ViewEngine, compileInstruction: ViewCompileInstruction, loadContext?: ResourceLoadContext): Promise<ViewFactory>';
      }
      return true;
    },
    compose: function compose(target) {
      if (!(typeof target.makeRelativeTo === 'function')) {
        target.makeRelativeTo = _aureliaPal.PLATFORM.noop;
      }
    }
  });
  var RelativeViewStrategy = exports.RelativeViewStrategy = (_dec = viewStrategy(), _dec(_class4 = function() {
    function RelativeViewStrategy(path) {
      _classCallCheck(this, RelativeViewStrategy);
      this.path = path;
      this.absolutePath = null;
    }
    RelativeViewStrategy.prototype.loadViewFactory = function loadViewFactory(viewEngine, compileInstruction, loadContext) {
      if (this.absolutePath === null && this.moduleId) {
        this.absolutePath = (0, _aureliaPath.relativeToFile)(this.path, this.moduleId);
      }
      compileInstruction.associatedModuleId = this.moduleId;
      return viewEngine.loadViewFactory(this.absolutePath || this.path, compileInstruction, loadContext);
    };
    RelativeViewStrategy.prototype.makeRelativeTo = function makeRelativeTo(file) {
      if (this.absolutePath === null) {
        this.absolutePath = (0, _aureliaPath.relativeToFile)(this.path, file);
      }
    };
    return RelativeViewStrategy;
  }()) || _class4);
  var ConventionalViewStrategy = exports.ConventionalViewStrategy = (_dec2 = viewStrategy(), _dec2(_class5 = function() {
    function ConventionalViewStrategy(viewLocator, origin) {
      _classCallCheck(this, ConventionalViewStrategy);
      this.moduleId = origin.moduleId;
      this.viewUrl = viewLocator.convertOriginToViewUrl(origin);
    }
    ConventionalViewStrategy.prototype.loadViewFactory = function loadViewFactory(viewEngine, compileInstruction, loadContext) {
      compileInstruction.associatedModuleId = this.moduleId;
      return viewEngine.loadViewFactory(this.viewUrl, compileInstruction, loadContext);
    };
    return ConventionalViewStrategy;
  }()) || _class5);
  var NoViewStrategy = exports.NoViewStrategy = (_dec3 = viewStrategy(), _dec3(_class6 = function() {
    function NoViewStrategy() {
      _classCallCheck(this, NoViewStrategy);
    }
    NoViewStrategy.prototype.loadViewFactory = function loadViewFactory(viewEngine, compileInstruction, loadContext) {
      return Promise.resolve(null);
    };
    return NoViewStrategy;
  }()) || _class6);
  var TemplateRegistryViewStrategy = exports.TemplateRegistryViewStrategy = (_dec4 = viewStrategy(), _dec4(_class7 = function() {
    function TemplateRegistryViewStrategy(moduleId, entry) {
      _classCallCheck(this, TemplateRegistryViewStrategy);
      this.moduleId = moduleId;
      this.entry = entry;
    }
    TemplateRegistryViewStrategy.prototype.loadViewFactory = function loadViewFactory(viewEngine, compileInstruction, loadContext) {
      var entry = this.entry;
      if (entry.factoryIsReady) {
        return Promise.resolve(entry.factory);
      }
      compileInstruction.associatedModuleId = this.moduleId;
      return viewEngine.loadViewFactory(entry, compileInstruction, loadContext);
    };
    return TemplateRegistryViewStrategy;
  }()) || _class7);
  var InlineViewStrategy = exports.InlineViewStrategy = (_dec5 = viewStrategy(), _dec5(_class8 = function() {
    function InlineViewStrategy(markup, dependencies, dependencyBaseUrl) {
      _classCallCheck(this, InlineViewStrategy);
      this.markup = markup;
      this.dependencies = dependencies || null;
      this.dependencyBaseUrl = dependencyBaseUrl || '';
    }
    InlineViewStrategy.prototype.loadViewFactory = function loadViewFactory(viewEngine, compileInstruction, loadContext) {
      var entry = this.entry;
      var dependencies = this.dependencies;
      if (entry && entry.factoryIsReady) {
        return Promise.resolve(entry.factory);
      }
      this.entry = entry = new _aureliaLoader.TemplateRegistryEntry(this.moduleId || this.dependencyBaseUrl);
      entry.template = _aureliaPal.DOM.createTemplateFromMarkup(this.markup);
      if (dependencies !== null) {
        for (var i = 0,
            ii = dependencies.length; i < ii; ++i) {
          var current = dependencies[i];
          if (typeof current === 'string' || typeof current === 'function') {
            entry.addDependency(current);
          } else {
            entry.addDependency(current.from, current.as);
          }
        }
      }
      compileInstruction.associatedModuleId = this.moduleId;
      return viewEngine.loadViewFactory(entry, compileInstruction, loadContext);
    };
    return InlineViewStrategy;
  }()) || _class8);
  var ViewLocator = exports.ViewLocator = (_temp2 = _class9 = function() {
    function ViewLocator() {
      _classCallCheck(this, ViewLocator);
    }
    ViewLocator.prototype.getViewStrategy = function getViewStrategy(value) {
      if (!value) {
        return null;
      }
      if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && 'getViewStrategy' in value) {
        var _origin = _aureliaMetadata.Origin.get(value.constructor);
        value = value.getViewStrategy();
        if (typeof value === 'string') {
          value = new RelativeViewStrategy(value);
        }
        viewStrategy.assert(value);
        if (_origin) {
          value.makeRelativeTo(_origin.moduleId);
        }
        return value;
      }
      if (typeof value === 'string') {
        value = new RelativeViewStrategy(value);
      }
      if (viewStrategy.validate(value)) {
        return value;
      }
      if (typeof value !== 'function') {
        value = value.constructor;
      }
      var origin = _aureliaMetadata.Origin.get(value);
      var strategy = _aureliaMetadata.metadata.get(ViewLocator.viewStrategyMetadataKey, value);
      if (!strategy) {
        if (!origin) {
          throw new Error('Cannot determinte default view strategy for object.', value);
        }
        strategy = this.createFallbackViewStrategy(origin);
      } else if (origin) {
        strategy.moduleId = origin.moduleId;
      }
      return strategy;
    };
    ViewLocator.prototype.createFallbackViewStrategy = function createFallbackViewStrategy(origin) {
      return new ConventionalViewStrategy(this, origin);
    };
    ViewLocator.prototype.convertOriginToViewUrl = function convertOriginToViewUrl(origin) {
      var moduleId = origin.moduleId;
      var id = moduleId.endsWith('.js') || moduleId.endsWith('.ts') ? moduleId.substring(0, moduleId.length - 3) : moduleId;
      return id + '.html';
    };
    return ViewLocator;
  }(), _class9.viewStrategyMetadataKey = 'aurelia:view-strategy', _temp2);
  var BindingLanguage = exports.BindingLanguage = function() {
    function BindingLanguage() {
      _classCallCheck(this, BindingLanguage);
    }
    BindingLanguage.prototype.inspectAttribute = function inspectAttribute(resources, attrName, attrValue) {
      throw new Error('A BindingLanguage must implement inspectAttribute(...)');
    };
    BindingLanguage.prototype.createAttributeInstruction = function createAttributeInstruction(resources, element, info, existingInstruction) {
      throw new Error('A BindingLanguage must implement createAttributeInstruction(...)');
    };
    BindingLanguage.prototype.parseText = function parseText(resources, value) {
      throw new Error('A BindingLanguage must implement parseText(...)');
    };
    return BindingLanguage;
  }();
  function register(lookup, name, resource, type) {
    if (!name) {
      return;
    }
    var existing = lookup[name];
    if (existing) {
      if (existing !== resource) {
        throw new Error('Attempted to register ' + type + ' when one with the same name already exists. Name: ' + name + '.');
      }
      return;
    }
    lookup[name] = resource;
  }
  var ViewResources = exports.ViewResources = function() {
    function ViewResources(parent, viewUrl) {
      _classCallCheck(this, ViewResources);
      this.bindingLanguage = null;
      this.parent = parent || null;
      this.hasParent = this.parent !== null;
      this.viewUrl = viewUrl || '';
      this.lookupFunctions = {
        valueConverters: this.getValueConverter.bind(this),
        bindingBehaviors: this.getBindingBehavior.bind(this)
      };
      this.attributes = Object.create(null);
      this.elements = Object.create(null);
      this.valueConverters = Object.create(null);
      this.bindingBehaviors = Object.create(null);
      this.attributeMap = Object.create(null);
      this.beforeCompile = this.afterCompile = this.beforeCreate = this.afterCreate = this.beforeBind = this.beforeUnbind = false;
    }
    ViewResources.prototype._tryAddHook = function _tryAddHook(obj, name) {
      if (typeof obj[name] === 'function') {
        var func = obj[name].bind(obj);
        var counter = 1;
        var callbackName = void 0;
        while (this[callbackName = name + counter.toString()] !== undefined) {
          counter++;
        }
        this[name] = true;
        this[callbackName] = func;
      }
    };
    ViewResources.prototype._invokeHook = function _invokeHook(name, one, two, three, four) {
      if (this.hasParent) {
        this.parent._invokeHook(name, one, two, three, four);
      }
      if (this[name]) {
        this[name + '1'](one, two, three, four);
        var callbackName = name + '2';
        if (this[callbackName]) {
          this[callbackName](one, two, three, four);
          callbackName = name + '3';
          if (this[callbackName]) {
            this[callbackName](one, two, three, four);
            var counter = 4;
            while (this[callbackName = name + counter.toString()] !== undefined) {
              this[callbackName](one, two, three, four);
              counter++;
            }
          }
        }
      }
    };
    ViewResources.prototype.registerViewEngineHooks = function registerViewEngineHooks(hooks) {
      this._tryAddHook(hooks, 'beforeCompile');
      this._tryAddHook(hooks, 'afterCompile');
      this._tryAddHook(hooks, 'beforeCreate');
      this._tryAddHook(hooks, 'afterCreate');
      this._tryAddHook(hooks, 'beforeBind');
      this._tryAddHook(hooks, 'beforeUnbind');
    };
    ViewResources.prototype.getBindingLanguage = function getBindingLanguage(bindingLanguageFallback) {
      return this.bindingLanguage || (this.bindingLanguage = bindingLanguageFallback);
    };
    ViewResources.prototype.patchInParent = function patchInParent(newParent) {
      var originalParent = this.parent;
      this.parent = newParent || null;
      this.hasParent = this.parent !== null;
      if (newParent.parent === null) {
        newParent.parent = originalParent;
        newParent.hasParent = originalParent !== null;
      }
    };
    ViewResources.prototype.relativeToView = function relativeToView(path) {
      return (0, _aureliaPath.relativeToFile)(path, this.viewUrl);
    };
    ViewResources.prototype.registerElement = function registerElement(tagName, behavior) {
      register(this.elements, tagName, behavior, 'an Element');
    };
    ViewResources.prototype.getElement = function getElement(tagName) {
      return this.elements[tagName] || (this.hasParent ? this.parent.getElement(tagName) : null);
    };
    ViewResources.prototype.mapAttribute = function mapAttribute(attribute) {
      return this.attributeMap[attribute] || (this.hasParent ? this.parent.mapAttribute(attribute) : null);
    };
    ViewResources.prototype.registerAttribute = function registerAttribute(attribute, behavior, knownAttribute) {
      this.attributeMap[attribute] = knownAttribute;
      register(this.attributes, attribute, behavior, 'an Attribute');
    };
    ViewResources.prototype.getAttribute = function getAttribute(attribute) {
      return this.attributes[attribute] || (this.hasParent ? this.parent.getAttribute(attribute) : null);
    };
    ViewResources.prototype.registerValueConverter = function registerValueConverter(name, valueConverter) {
      register(this.valueConverters, name, valueConverter, 'a ValueConverter');
    };
    ViewResources.prototype.getValueConverter = function getValueConverter(name) {
      return this.valueConverters[name] || (this.hasParent ? this.parent.getValueConverter(name) : null);
    };
    ViewResources.prototype.registerBindingBehavior = function registerBindingBehavior(name, bindingBehavior) {
      register(this.bindingBehaviors, name, bindingBehavior, 'a BindingBehavior');
    };
    ViewResources.prototype.getBindingBehavior = function getBindingBehavior(name) {
      return this.bindingBehaviors[name] || (this.hasParent ? this.parent.getBindingBehavior(name) : null);
    };
    return ViewResources;
  }();
  var View = exports.View = function() {
    function View(viewFactory, fragment, controllers, bindings, children, contentSelectors) {
      _classCallCheck(this, View);
      this.viewFactory = viewFactory;
      this.resources = viewFactory.resources;
      this.fragment = fragment;
      this.controllers = controllers;
      this.bindings = bindings;
      this.children = children;
      this.contentSelectors = contentSelectors;
      this.firstChild = fragment.firstChild;
      this.lastChild = fragment.lastChild;
      this.fromCache = false;
      this.isBound = false;
      this.isAttached = false;
      this.fromCache = false;
      this.bindingContext = null;
      this.overrideContext = null;
      this.controller = null;
      this.viewModelScope = null;
      this._isUserControlled = false;
    }
    View.prototype.returnToCache = function returnToCache() {
      this.viewFactory.returnViewToCache(this);
    };
    View.prototype.created = function created() {
      var i = void 0;
      var ii = void 0;
      var controllers = this.controllers;
      for (i = 0, ii = controllers.length; i < ii; ++i) {
        controllers[i].created(this);
      }
    };
    View.prototype.bind = function bind(bindingContext, overrideContext, _systemUpdate) {
      var controllers = void 0;
      var bindings = void 0;
      var children = void 0;
      var i = void 0;
      var ii = void 0;
      if (_systemUpdate && this._isUserControlled) {
        return;
      }
      if (this.isBound) {
        if (this.bindingContext === bindingContext) {
          return;
        }
        this.unbind();
      }
      this.isBound = true;
      this.bindingContext = bindingContext;
      this.overrideContext = overrideContext || (0, _aureliaBinding.createOverrideContext)(bindingContext);
      this.resources._invokeHook('beforeBind', this);
      bindings = this.bindings;
      for (i = 0, ii = bindings.length; i < ii; ++i) {
        bindings[i].bind(this);
      }
      if (this.viewModelScope !== null) {
        bindingContext.bind(this.viewModelScope.bindingContext, this.viewModelScope.overrideContext);
        this.viewModelScope = null;
      }
      controllers = this.controllers;
      for (i = 0, ii = controllers.length; i < ii; ++i) {
        controllers[i].bind(this);
      }
      children = this.children;
      for (i = 0, ii = children.length; i < ii; ++i) {
        children[i].bind(bindingContext, overrideContext, true);
      }
    };
    View.prototype.addBinding = function addBinding(binding) {
      this.bindings.push(binding);
      if (this.isBound) {
        binding.bind(this);
      }
    };
    View.prototype.unbind = function unbind() {
      var controllers = void 0;
      var bindings = void 0;
      var children = void 0;
      var i = void 0;
      var ii = void 0;
      if (this.isBound) {
        this.isBound = false;
        this.resources._invokeHook('beforeUnbind', this);
        if (this.controller !== null) {
          this.controller.unbind();
        }
        bindings = this.bindings;
        for (i = 0, ii = bindings.length; i < ii; ++i) {
          bindings[i].unbind();
        }
        controllers = this.controllers;
        for (i = 0, ii = controllers.length; i < ii; ++i) {
          controllers[i].unbind();
        }
        children = this.children;
        for (i = 0, ii = children.length; i < ii; ++i) {
          children[i].unbind();
        }
        this.bindingContext = null;
        this.overrideContext = null;
      }
    };
    View.prototype.insertNodesBefore = function insertNodesBefore(refNode) {
      var parent = refNode.parentNode;
      parent.insertBefore(this.fragment, refNode);
    };
    View.prototype.appendNodesTo = function appendNodesTo(parent) {
      parent.appendChild(this.fragment);
    };
    View.prototype.removeNodes = function removeNodes() {
      var start = this.firstChild;
      var end = this.lastChild;
      var fragment = this.fragment;
      var next = void 0;
      var current = start;
      var loop = true;
      while (loop) {
        if (current === end) {
          loop = false;
        }
        next = current.nextSibling;
        fragment.appendChild(current);
        current = next;
      }
    };
    View.prototype.attached = function attached() {
      var controllers = void 0;
      var children = void 0;
      var i = void 0;
      var ii = void 0;
      if (this.isAttached) {
        return;
      }
      this.isAttached = true;
      if (this.controller !== null) {
        this.controller.attached();
      }
      controllers = this.controllers;
      for (i = 0, ii = controllers.length; i < ii; ++i) {
        controllers[i].attached();
      }
      children = this.children;
      for (i = 0, ii = children.length; i < ii; ++i) {
        children[i].attached();
      }
    };
    View.prototype.detached = function detached() {
      var controllers = void 0;
      var children = void 0;
      var i = void 0;
      var ii = void 0;
      if (this.isAttached) {
        this.isAttached = false;
        if (this.controller !== null) {
          this.controller.detached();
        }
        controllers = this.controllers;
        for (i = 0, ii = controllers.length; i < ii; ++i) {
          controllers[i].detached();
        }
        children = this.children;
        for (i = 0, ii = children.length; i < ii; ++i) {
          children[i].detached();
        }
      }
    };
    return View;
  }();
  var placeholder = [];
  function findInsertionPoint(groups, index) {
    var insertionPoint = void 0;
    while (!insertionPoint && index >= 0) {
      insertionPoint = groups[index][0];
      index--;
    }
    return insertionPoint;
  }
  var _ContentSelector = exports._ContentSelector = function() {
    _ContentSelector.applySelectors = function applySelectors(view, contentSelectors, callback) {
      var currentChild = view.fragment.firstChild;
      var contentMap = new Map();
      var nextSibling = void 0;
      var i = void 0;
      var ii = void 0;
      var contentSelector = void 0;
      while (currentChild) {
        nextSibling = currentChild.nextSibling;
        if (currentChild.isContentProjectionSource) {
          var viewSlotSelectors = contentSelectors.map(function(x) {
            return x.copyForViewSlot();
          });
          currentChild.viewSlot._installContentSelectors(viewSlotSelectors);
        } else {
          for (i = 0, ii = contentSelectors.length; i < ii; i++) {
            contentSelector = contentSelectors[i];
            if (contentSelector.matches(currentChild)) {
              var elements = contentMap.get(contentSelector);
              if (!elements) {
                elements = [];
                contentMap.set(contentSelector, elements);
              }
              elements.push(currentChild);
              break;
            }
          }
        }
        currentChild = nextSibling;
      }
      for (i = 0, ii = contentSelectors.length; i < ii; ++i) {
        contentSelector = contentSelectors[i];
        callback(contentSelector, contentMap.get(contentSelector) || placeholder);
      }
    };
    function _ContentSelector(anchor, selector) {
      _classCallCheck(this, _ContentSelector);
      this.anchor = anchor;
      this.selector = selector;
      this.all = !this.selector;
      this.groups = [];
    }
    _ContentSelector.prototype.copyForViewSlot = function copyForViewSlot() {
      return new _ContentSelector(this.anchor, this.selector);
    };
    _ContentSelector.prototype.matches = function matches(node) {
      return this.all || node.nodeType === 1 && node.matches(this.selector);
    };
    _ContentSelector.prototype.add = function add(group) {
      var anchor = this.anchor;
      var parent = anchor.parentNode;
      var i = void 0;
      var ii = void 0;
      for (i = 0, ii = group.length; i < ii; ++i) {
        parent.insertBefore(group[i], anchor);
      }
      this.groups.push(group);
    };
    _ContentSelector.prototype.insert = function insert(index, group) {
      if (group.length) {
        var anchor = findInsertionPoint(this.groups, index) || this.anchor;
        var parent = anchor.parentNode;
        var i = void 0;
        var ii = void 0;
        for (i = 0, ii = group.length; i < ii; ++i) {
          parent.insertBefore(group[i], anchor);
        }
      }
      this.groups.splice(index, 0, group);
    };
    _ContentSelector.prototype.removeAt = function removeAt(index, fragment) {
      var group = this.groups[index];
      var i = void 0;
      var ii = void 0;
      for (i = 0, ii = group.length; i < ii; ++i) {
        fragment.appendChild(group[i]);
      }
      this.groups.splice(index, 1);
    };
    return _ContentSelector;
  }();
  function getAnimatableElement(view) {
    var firstChild = view.firstChild;
    if (firstChild !== null && firstChild !== undefined && firstChild.nodeType === 8) {
      var _element = _aureliaPal.DOM.nextElementSibling(firstChild);
      if (_element !== null && _element !== undefined && _element.nodeType === 1 && _element.classList.contains('au-animate')) {
        return _element;
      }
    }
    return null;
  }
  var ViewSlot = exports.ViewSlot = function() {
    function ViewSlot(anchor, anchorIsContainer) {
      var animator = arguments.length <= 2 || arguments[2] === undefined ? Animator.instance : arguments[2];
      _classCallCheck(this, ViewSlot);
      this.anchor = anchor;
      this.viewAddMethod = anchorIsContainer ? 'appendNodesTo' : 'insertNodesBefore';
      this.bindingContext = null;
      this.overrideContext = null;
      this.animator = animator;
      this.children = [];
      this.isBound = false;
      this.isAttached = false;
      this.contentSelectors = null;
      anchor.viewSlot = this;
      anchor.isContentProjectionSource = false;
    }
    ViewSlot.prototype.transformChildNodesIntoView = function transformChildNodesIntoView() {
      var parent = this.anchor;
      this.children.push({
        fragment: parent,
        firstChild: parent.firstChild,
        lastChild: parent.lastChild,
        returnToCache: function returnToCache() {},
        removeNodes: function removeNodes() {
          var last = void 0;
          while (last = parent.lastChild) {
            parent.removeChild(last);
          }
        },
        created: function created() {},
        bind: function bind() {},
        unbind: function unbind() {},
        attached: function attached() {},
        detached: function detached() {}
      });
    };
    ViewSlot.prototype.bind = function bind(bindingContext, overrideContext) {
      var i = void 0;
      var ii = void 0;
      var children = void 0;
      if (this.isBound) {
        if (this.bindingContext === bindingContext) {
          return;
        }
        this.unbind();
      }
      this.isBound = true;
      this.bindingContext = bindingContext = bindingContext || this.bindingContext;
      this.overrideContext = overrideContext = overrideContext || this.overrideContext;
      children = this.children;
      for (i = 0, ii = children.length; i < ii; ++i) {
        children[i].bind(bindingContext, overrideContext, true);
      }
    };
    ViewSlot.prototype.unbind = function unbind() {
      if (this.isBound) {
        var i = void 0;
        var ii = void 0;
        var _children = this.children;
        this.isBound = false;
        this.bindingContext = null;
        this.overrideContext = null;
        for (i = 0, ii = _children.length; i < ii; ++i) {
          _children[i].unbind();
        }
      }
    };
    ViewSlot.prototype.add = function add(view) {
      view[this.viewAddMethod](this.anchor);
      this.children.push(view);
      if (this.isAttached) {
        view.attached();
        var animatableElement = getAnimatableElement(view);
        if (animatableElement !== null) {
          return this.animator.enter(animatableElement);
        }
      }
    };
    ViewSlot.prototype.insert = function insert(index, view) {
      var children = this.children;
      var length = children.length;
      if (index === 0 && length === 0 || index >= length) {
        return this.add(view);
      }
      view.insertNodesBefore(children[index].firstChild);
      children.splice(index, 0, view);
      if (this.isAttached) {
        view.attached();
        var animatableElement = getAnimatableElement(view);
        if (animatableElement !== null) {
          return this.animator.enter(animatableElement);
        }
      }
    };
    ViewSlot.prototype.remove = function remove(view, returnToCache, skipAnimation) {
      return this.removeAt(this.children.indexOf(view), returnToCache, skipAnimation);
    };
    ViewSlot.prototype.removeAt = function removeAt(index, returnToCache, skipAnimation) {
      var _this4 = this;
      var view = this.children[index];
      var removeAction = function removeAction() {
        index = _this4.children.indexOf(view);
        view.removeNodes();
        _this4.children.splice(index, 1);
        if (_this4.isAttached) {
          view.detached();
        }
        if (returnToCache) {
          view.returnToCache();
        }
        return view;
      };
      if (!skipAnimation) {
        var animatableElement = getAnimatableElement(view);
        if (animatableElement !== null) {
          return this.animator.leave(animatableElement).then(function() {
            return removeAction();
          });
        }
      }
      return removeAction();
    };
    ViewSlot.prototype.removeAll = function removeAll(returnToCache, skipAnimation) {
      var _this5 = this;
      var children = this.children;
      var ii = children.length;
      var i = void 0;
      var rmPromises = [];
      children.forEach(function(child) {
        if (skipAnimation) {
          child.removeNodes();
          return;
        }
        var animatableElement = getAnimatableElement(child);
        if (animatableElement !== null) {
          rmPromises.push(_this5.animator.leave(animatableElement).then(function() {
            return child.removeNodes();
          }));
        } else {
          child.removeNodes();
        }
      });
      var removeAction = function removeAction() {
        if (_this5.isAttached) {
          for (i = 0; i < ii; ++i) {
            children[i].detached();
          }
        }
        if (returnToCache) {
          for (i = 0; i < ii; ++i) {
            children[i].returnToCache();
          }
        }
        _this5.children = [];
      };
      if (rmPromises.length > 0) {
        return Promise.all(rmPromises).then(function() {
          return removeAction();
        });
      }
      removeAction();
    };
    ViewSlot.prototype.attached = function attached() {
      var i = void 0;
      var ii = void 0;
      var children = void 0;
      var child = void 0;
      if (this.isAttached) {
        return;
      }
      this.isAttached = true;
      children = this.children;
      for (i = 0, ii = children.length; i < ii; ++i) {
        child = children[i];
        child.attached();
        var _element2 = child.firstChild ? _aureliaPal.DOM.nextElementSibling(child.firstChild) : null;
        if (child.firstChild && child.firstChild.nodeType === 8 && _element2 && _element2.nodeType === 1 && _element2.classList.contains('au-animate')) {
          this.animator.enter(_element2);
        }
      }
    };
    ViewSlot.prototype.detached = function detached() {
      var i = void 0;
      var ii = void 0;
      var children = void 0;
      if (this.isAttached) {
        this.isAttached = false;
        children = this.children;
        for (i = 0, ii = children.length; i < ii; ++i) {
          children[i].detached();
        }
      }
    };
    ViewSlot.prototype._installContentSelectors = function _installContentSelectors(contentSelectors) {
      this.contentSelectors = contentSelectors;
      this.add = this._contentSelectorAdd;
      this.insert = this._contentSelectorInsert;
      this.remove = this._contentSelectorRemove;
      this.removeAt = this._contentSelectorRemoveAt;
      this.removeAll = this._contentSelectorRemoveAll;
    };
    ViewSlot.prototype._contentSelectorAdd = function _contentSelectorAdd(view) {
      _ContentSelector.applySelectors(view, this.contentSelectors, function(contentSelector, group) {
        return contentSelector.add(group);
      });
      this.children.push(view);
      if (this.isAttached) {
        view.attached();
      }
    };
    ViewSlot.prototype._contentSelectorInsert = function _contentSelectorInsert(index, view) {
      if (index === 0 && !this.children.length || index >= this.children.length) {
        this.add(view);
      } else {
        _ContentSelector.applySelectors(view, this.contentSelectors, function(contentSelector, group) {
          return contentSelector.insert(index, group);
        });
        this.children.splice(index, 0, view);
        if (this.isAttached) {
          view.attached();
        }
      }
    };
    ViewSlot.prototype._contentSelectorRemove = function _contentSelectorRemove(view) {
      var index = this.children.indexOf(view);
      var contentSelectors = this.contentSelectors;
      var i = void 0;
      var ii = void 0;
      for (i = 0, ii = contentSelectors.length; i < ii; ++i) {
        contentSelectors[i].removeAt(index, view.fragment);
      }
      this.children.splice(index, 1);
      if (this.isAttached) {
        view.detached();
      }
    };
    ViewSlot.prototype._contentSelectorRemoveAt = function _contentSelectorRemoveAt(index) {
      var view = this.children[index];
      var contentSelectors = this.contentSelectors;
      var i = void 0;
      var ii = void 0;
      for (i = 0, ii = contentSelectors.length; i < ii; ++i) {
        contentSelectors[i].removeAt(index, view.fragment);
      }
      this.children.splice(index, 1);
      if (this.isAttached) {
        view.detached();
      }
      return view;
    };
    ViewSlot.prototype._contentSelectorRemoveAll = function _contentSelectorRemoveAll() {
      var children = this.children;
      var contentSelectors = this.contentSelectors;
      var ii = children.length;
      var jj = contentSelectors.length;
      var i = void 0;
      var j = void 0;
      var view = void 0;
      for (i = 0; i < ii; ++i) {
        view = children[i];
        for (j = 0; j < jj; ++j) {
          contentSelectors[j].removeAt(0, view.fragment);
        }
      }
      if (this.isAttached) {
        for (i = 0; i < ii; ++i) {
          children[i].detached();
        }
      }
      this.children = [];
    };
    return ViewSlot;
  }();
  var ProviderResolver = (0, _aureliaDependencyInjection.resolver)(_class11 = function() {
    function ProviderResolver() {
      _classCallCheck(this, ProviderResolver);
    }
    ProviderResolver.prototype.get = function get(container, key) {
      var id = key.__providerId__;
      return id in container ? container[id] : container[id] = container.invoke(key);
    };
    return ProviderResolver;
  }()) || _class11;
  var providerResolverInstance = new ProviderResolver();
  function elementContainerGet(key) {
    if (key === _aureliaPal.DOM.Element) {
      return this.element;
    }
    if (key === BoundViewFactory) {
      if (this.boundViewFactory) {
        return this.boundViewFactory;
      }
      var factory = this.instruction.viewFactory;
      var _partReplacements = this.partReplacements;
      if (_partReplacements) {
        factory = _partReplacements[factory.part] || factory;
      }
      this.boundViewFactory = new BoundViewFactory(this, factory, _partReplacements);
      return this.boundViewFactory;
    }
    if (key === ViewSlot) {
      if (this.viewSlot === undefined) {
        this.viewSlot = new ViewSlot(this.element, this.instruction.anchorIsContainer);
        this.element.isContentProjectionSource = this.instruction.lifting;
        this.children.push(this.viewSlot);
      }
      return this.viewSlot;
    }
    if (key === ElementEvents) {
      return this.elementEvents || (this.elementEvents = new ElementEvents(this.element));
    }
    if (key === CompositionTransaction) {
      return this.compositionTransaction || (this.compositionTransaction = this.parent.get(key));
    }
    if (key === ViewResources) {
      return this.viewResources;
    }
    if (key === TargetInstruction) {
      return this.instruction;
    }
    return this.superGet(key);
  }
  function createElementContainer(parent, element, instruction, children, partReplacements, resources) {
    var container = parent.createChild();
    var providers = void 0;
    var i = void 0;
    container.element = element;
    container.instruction = instruction;
    container.children = children;
    container.viewResources = resources;
    container.partReplacements = partReplacements;
    providers = instruction.providers;
    i = providers.length;
    while (i--) {
      container._resolvers.set(providers[i], providerResolverInstance);
    }
    container.superGet = container.get;
    container.get = elementContainerGet;
    return container;
  }
  function makeElementIntoAnchor(element, elementInstruction) {
    var anchor = _aureliaPal.DOM.createComment('anchor');
    if (elementInstruction) {
      anchor.hasAttribute = function(name) {
        return element.hasAttribute(name);
      };
      anchor.getAttribute = function(name) {
        return element.getAttribute(name);
      };
      anchor.setAttribute = function(name, value) {
        element.setAttribute(name, value);
      };
    }
    _aureliaPal.DOM.replaceNode(anchor, element);
    return anchor;
  }
  function applyInstructions(containers, element, instruction, controllers, bindings, children, contentSelectors, partReplacements, resources) {
    var behaviorInstructions = instruction.behaviorInstructions;
    var expressions = instruction.expressions;
    var elementContainer = void 0;
    var i = void 0;
    var ii = void 0;
    var current = void 0;
    var instance = void 0;
    if (instruction.contentExpression) {
      bindings.push(instruction.contentExpression.createBinding(element.nextSibling));
      element.parentNode.removeChild(element);
      return;
    }
    if (instruction.contentSelector) {
      var commentAnchor = _aureliaPal.DOM.createComment('anchor');
      _aureliaPal.DOM.replaceNode(commentAnchor, element);
      contentSelectors.push(new _ContentSelector(commentAnchor, instruction.selector));
      return;
    }
    if (behaviorInstructions.length) {
      if (!instruction.anchorIsContainer) {
        element = makeElementIntoAnchor(element, instruction.elementInstruction);
      }
      containers[instruction.injectorId] = elementContainer = createElementContainer(containers[instruction.parentInjectorId], element, instruction, children, partReplacements, resources);
      for (i = 0, ii = behaviorInstructions.length; i < ii; ++i) {
        current = behaviorInstructions[i];
        instance = current.type.create(elementContainer, current, element, bindings);
        if (instance.contentView) {
          children.push(instance.contentView);
        }
        controllers.push(instance);
      }
    }
    for (i = 0, ii = expressions.length; i < ii; ++i) {
      bindings.push(expressions[i].createBinding(element));
    }
  }
  function styleStringToObject(style, target) {
    var attributes = style.split(';');
    var firstIndexOfColon = void 0;
    var i = void 0;
    var current = void 0;
    var key = void 0;
    var value = void 0;
    target = target || {};
    for (i = 0; i < attributes.length; i++) {
      current = attributes[i];
      firstIndexOfColon = current.indexOf(':');
      key = current.substring(0, firstIndexOfColon).trim();
      value = current.substring(firstIndexOfColon + 1).trim();
      target[key] = value;
    }
    return target;
  }
  function styleObjectToString(obj) {
    var result = '';
    for (var key in obj) {
      result += key + ':' + obj[key] + ';';
    }
    return result;
  }
  function applySurrogateInstruction(container, element, instruction, controllers, bindings, children) {
    var behaviorInstructions = instruction.behaviorInstructions;
    var expressions = instruction.expressions;
    var providers = instruction.providers;
    var values = instruction.values;
    var i = void 0;
    var ii = void 0;
    var current = void 0;
    var instance = void 0;
    var currentAttributeValue = void 0;
    i = providers.length;
    while (i--) {
      container._resolvers.set(providers[i], providerResolverInstance);
    }
    for (var key in values) {
      currentAttributeValue = element.getAttribute(key);
      if (currentAttributeValue) {
        if (key === 'class') {
          element.setAttribute('class', currentAttributeValue + ' ' + values[key]);
        } else if (key === 'style') {
          var styleObject = styleStringToObject(values[key]);
          styleStringToObject(currentAttributeValue, styleObject);
          element.setAttribute('style', styleObjectToString(styleObject));
        }
      } else {
        element.setAttribute(key, values[key]);
      }
    }
    if (behaviorInstructions.length) {
      for (i = 0, ii = behaviorInstructions.length; i < ii; ++i) {
        current = behaviorInstructions[i];
        instance = current.type.create(container, current, element, bindings);
        if (instance.contentView) {
          children.push(instance.contentView);
        }
        controllers.push(instance);
      }
    }
    for (i = 0, ii = expressions.length; i < ii; ++i) {
      bindings.push(expressions[i].createBinding(element));
    }
  }
  var BoundViewFactory = exports.BoundViewFactory = function() {
    function BoundViewFactory(parentContainer, viewFactory, partReplacements) {
      _classCallCheck(this, BoundViewFactory);
      this.parentContainer = parentContainer;
      this.viewFactory = viewFactory;
      this.factoryCreateInstruction = {partReplacements: partReplacements};
    }
    BoundViewFactory.prototype.create = function create() {
      var view = this.viewFactory.create(this.parentContainer.createChild(), this.factoryCreateInstruction);
      view._isUserControlled = true;
      return view;
    };
    BoundViewFactory.prototype.setCacheSize = function setCacheSize(size, doNotOverrideIfAlreadySet) {
      this.viewFactory.setCacheSize(size, doNotOverrideIfAlreadySet);
    };
    BoundViewFactory.prototype.getCachedView = function getCachedView() {
      return this.viewFactory.getCachedView();
    };
    BoundViewFactory.prototype.returnViewToCache = function returnViewToCache(view) {
      this.viewFactory.returnViewToCache(view);
    };
    _createClass(BoundViewFactory, [{
      key: 'isCaching',
      get: function get() {
        return this.viewFactory.isCaching;
      }
    }]);
    return BoundViewFactory;
  }();
  var ViewFactory = exports.ViewFactory = function() {
    function ViewFactory(template, instructions, resources) {
      _classCallCheck(this, ViewFactory);
      this.isCaching = false;
      this.template = template;
      this.instructions = instructions;
      this.resources = resources;
      this.cacheSize = -1;
      this.cache = null;
    }
    ViewFactory.prototype.setCacheSize = function setCacheSize(size, doNotOverrideIfAlreadySet) {
      if (size) {
        if (size === '*') {
          size = Number.MAX_VALUE;
        } else if (typeof size === 'string') {
          size = parseInt(size, 10);
        }
      }
      if (this.cacheSize === -1 || !doNotOverrideIfAlreadySet) {
        this.cacheSize = size;
      }
      if (this.cacheSize > 0) {
        this.cache = [];
      } else {
        this.cache = null;
      }
      this.isCaching = this.cacheSize > 0;
    };
    ViewFactory.prototype.getCachedView = function getCachedView() {
      return this.cache !== null ? this.cache.pop() || null : null;
    };
    ViewFactory.prototype.returnViewToCache = function returnViewToCache(view) {
      if (view.isAttached) {
        view.detached();
      }
      if (view.isBound) {
        view.unbind();
      }
      if (this.cache !== null && this.cache.length < this.cacheSize) {
        view.fromCache = true;
        this.cache.push(view);
      }
    };
    ViewFactory.prototype.create = function create(container, createInstruction, element) {
      createInstruction = createInstruction || BehaviorInstruction.normal;
      element = element || null;
      var cachedView = this.getCachedView();
      if (cachedView !== null) {
        return cachedView;
      }
      var fragment = createInstruction.enhance ? this.template : this.template.cloneNode(true);
      var instructables = fragment.querySelectorAll('.au-target');
      var instructions = this.instructions;
      var resources = this.resources;
      var controllers = [];
      var bindings = [];
      var children = [];
      var contentSelectors = [];
      var containers = {root: container};
      var partReplacements = createInstruction.partReplacements;
      var i = void 0;
      var ii = void 0;
      var view = void 0;
      var instructable = void 0;
      var instruction = void 0;
      this.resources._invokeHook('beforeCreate', this, container, fragment, createInstruction);
      if (element !== null && this.surrogateInstruction !== null) {
        applySurrogateInstruction(container, element, this.surrogateInstruction, controllers, bindings, children);
      }
      for (i = 0, ii = instructables.length; i < ii; ++i) {
        instructable = instructables[i];
        instruction = instructions[instructable.getAttribute('au-target-id')];
        applyInstructions(containers, instructable, instruction, controllers, bindings, children, contentSelectors, partReplacements, resources);
      }
      view = new View(this, fragment, controllers, bindings, children, contentSelectors);
      if (!createInstruction.initiatedByBehavior) {
        view.created();
      }
      this.resources._invokeHook('afterCreate', view);
      return view;
    };
    return ViewFactory;
  }();
  var nextInjectorId = 0;
  function getNextInjectorId() {
    return ++nextInjectorId;
  }
  function configureProperties(instruction, resources) {
    var type = instruction.type;
    var attrName = instruction.attrName;
    var attributes = instruction.attributes;
    var property = void 0;
    var key = void 0;
    var value = void 0;
    var knownAttribute = resources.mapAttribute(attrName);
    if (knownAttribute && attrName in attributes && knownAttribute !== attrName) {
      attributes[knownAttribute] = attributes[attrName];
      delete attributes[attrName];
    }
    for (key in attributes) {
      value = attributes[key];
      if (value !== null && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {
        property = type.attributes[key];
        if (property !== undefined) {
          value.targetProperty = property.name;
        } else {
          value.targetProperty = key;
        }
      }
    }
  }
  var lastAUTargetID = 0;
  function getNextAUTargetID() {
    return (++lastAUTargetID).toString();
  }
  function makeIntoInstructionTarget(element) {
    var value = element.getAttribute('class');
    var auTargetID = getNextAUTargetID();
    element.setAttribute('class', value ? value += ' au-target' : 'au-target');
    element.setAttribute('au-target-id', auTargetID);
    return auTargetID;
  }
  var ViewCompiler = exports.ViewCompiler = (_dec6 = (0, _aureliaDependencyInjection.inject)(BindingLanguage, ViewResources), _dec6(_class13 = function() {
    function ViewCompiler(bindingLanguage, resources) {
      _classCallCheck(this, ViewCompiler);
      this.bindingLanguage = bindingLanguage;
      this.resources = resources;
    }
    ViewCompiler.prototype.compile = function compile(source, resources, compileInstruction) {
      resources = resources || this.resources;
      compileInstruction = compileInstruction || ViewCompileInstruction.normal;
      source = typeof source === 'string' ? _aureliaPal.DOM.createTemplateFromMarkup(source) : source;
      var content = void 0;
      var part = void 0;
      var cacheSize = void 0;
      if (source.content) {
        part = source.getAttribute('part');
        cacheSize = source.getAttribute('view-cache');
        content = _aureliaPal.DOM.adoptNode(source.content);
      } else {
        content = source;
      }
      compileInstruction.targetShadowDOM = compileInstruction.targetShadowDOM && _aureliaPal.FEATURE.shadowDOM;
      resources._invokeHook('beforeCompile', content, resources, compileInstruction);
      var instructions = {};
      this._compileNode(content, resources, instructions, source, 'root', !compileInstruction.targetShadowDOM);
      content.insertBefore(_aureliaPal.DOM.createComment('<view>'), content.firstChild);
      content.appendChild(_aureliaPal.DOM.createComment('</view>'));
      var factory = new ViewFactory(content, instructions, resources);
      factory.surrogateInstruction = compileInstruction.compileSurrogate ? this._compileSurrogate(source, resources) : null;
      factory.part = part;
      if (cacheSize) {
        factory.setCacheSize(cacheSize);
      }
      resources._invokeHook('afterCompile', factory);
      return factory;
    };
    ViewCompiler.prototype._compileNode = function _compileNode(node, resources, instructions, parentNode, parentInjectorId, targetLightDOM) {
      switch (node.nodeType) {
        case 1:
          return this._compileElement(node, resources, instructions, parentNode, parentInjectorId, targetLightDOM);
        case 3:
          var expression = resources.getBindingLanguage(this.bindingLanguage).parseText(resources, node.wholeText);
          if (expression) {
            var marker = _aureliaPal.DOM.createElement('au-marker');
            var auTargetID = makeIntoInstructionTarget(marker);
            (node.parentNode || parentNode).insertBefore(marker, node);
            node.textContent = ' ';
            instructions[auTargetID] = TargetInstruction.contentExpression(expression);
            while (node.nextSibling && node.nextSibling.nodeType === 3) {
              (node.parentNode || parentNode).removeChild(node.nextSibling);
            }
          } else {
            while (node.nextSibling && node.nextSibling.nodeType === 3) {
              node = node.nextSibling;
            }
          }
          return node.nextSibling;
        case 11:
          var currentChild = node.firstChild;
          while (currentChild) {
            currentChild = this._compileNode(currentChild, resources, instructions, node, parentInjectorId, targetLightDOM);
          }
          break;
        default:
          break;
      }
      return node.nextSibling;
    };
    ViewCompiler.prototype._compileSurrogate = function _compileSurrogate(node, resources) {
      var attributes = node.attributes;
      var bindingLanguage = resources.getBindingLanguage(this.bindingLanguage);
      var knownAttribute = void 0;
      var property = void 0;
      var instruction = void 0;
      var i = void 0;
      var ii = void 0;
      var attr = void 0;
      var attrName = void 0;
      var attrValue = void 0;
      var info = void 0;
      var type = void 0;
      var expressions = [];
      var expression = void 0;
      var behaviorInstructions = [];
      var values = {};
      var hasValues = false;
      var providers = [];
      for (i = 0, ii = attributes.length; i < ii; ++i) {
        attr = attributes[i];
        attrName = attr.name;
        attrValue = attr.value;
        info = bindingLanguage.inspectAttribute(resources, attrName, attrValue);
        type = resources.getAttribute(info.attrName);
        if (type) {
          knownAttribute = resources.mapAttribute(info.attrName);
          if (knownAttribute) {
            property = type.attributes[knownAttribute];
            if (property) {
              info.defaultBindingMode = property.defaultBindingMode;
              if (!info.command && !info.expression) {
                info.command = property.hasOptions ? 'options' : null;
              }
            }
          }
        }
        instruction = bindingLanguage.createAttributeInstruction(resources, node, info, undefined, type);
        if (instruction) {
          if (instruction.alteredAttr) {
            type = resources.getAttribute(instruction.attrName);
          }
          if (instruction.discrete) {
            expressions.push(instruction);
          } else {
            if (type) {
              instruction.type = type;
              configureProperties(instruction, resources);
              if (type.liftsContent) {
                throw new Error('You cannot place a template controller on a surrogate element.');
              } else {
                behaviorInstructions.push(instruction);
              }
            } else {
              expressions.push(instruction.attributes[instruction.attrName]);
            }
          }
        } else {
          if (type) {
            instruction = BehaviorInstruction.attribute(attrName, type);
            instruction.attributes[resources.mapAttribute(attrName)] = attrValue;
            if (type.liftsContent) {
              throw new Error('You cannot place a template controller on a surrogate element.');
            } else {
              behaviorInstructions.push(instruction);
            }
          } else if (attrName !== 'id' && attrName !== 'part' && attrName !== 'replace-part') {
            hasValues = true;
            values[attrName] = attrValue;
          }
        }
      }
      if (expressions.length || behaviorInstructions.length || hasValues) {
        for (i = 0, ii = behaviorInstructions.length; i < ii; ++i) {
          instruction = behaviorInstructions[i];
          instruction.type.compile(this, resources, node, instruction);
          providers.push(instruction.type.target);
        }
        for (i = 0, ii = expressions.length; i < ii; ++i) {
          expression = expressions[i];
          if (expression.attrToRemove !== undefined) {
            node.removeAttribute(expression.attrToRemove);
          }
        }
        return TargetInstruction.surrogate(providers, behaviorInstructions, expressions, values);
      }
      return null;
    };
    ViewCompiler.prototype._compileElement = function _compileElement(node, resources, instructions, parentNode, parentInjectorId, targetLightDOM) {
      var tagName = node.tagName.toLowerCase();
      var attributes = node.attributes;
      var expressions = [];
      var expression = void 0;
      var behaviorInstructions = [];
      var providers = [];
      var bindingLanguage = resources.getBindingLanguage(this.bindingLanguage);
      var liftingInstruction = void 0;
      var viewFactory = void 0;
      var type = void 0;
      var elementInstruction = void 0;
      var elementProperty = void 0;
      var i = void 0;
      var ii = void 0;
      var attr = void 0;
      var attrName = void 0;
      var attrValue = void 0;
      var instruction = void 0;
      var info = void 0;
      var property = void 0;
      var knownAttribute = void 0;
      var auTargetID = void 0;
      var injectorId = void 0;
      if (tagName === 'content') {
        if (targetLightDOM) {
          auTargetID = makeIntoInstructionTarget(node);
          instructions[auTargetID] = TargetInstruction.contentSelector(node, parentInjectorId);
        }
        return node.nextSibling;
      } else if (tagName === 'template') {
        viewFactory = this.compile(node, resources);
        viewFactory.part = node.getAttribute('part');
      } else {
        type = resources.getElement(node.getAttribute('as-element') || tagName);
        if (type) {
          elementInstruction = BehaviorInstruction.element(node, type);
          type.processAttributes(this, resources, attributes, elementInstruction);
          behaviorInstructions.push(elementInstruction);
        }
      }
      for (i = 0, ii = attributes.length; i < ii; ++i) {
        attr = attributes[i];
        attrName = attr.name;
        attrValue = attr.value;
        info = bindingLanguage.inspectAttribute(resources, attrName, attrValue);
        type = resources.getAttribute(info.attrName);
        elementProperty = null;
        if (type) {
          knownAttribute = resources.mapAttribute(info.attrName);
          if (knownAttribute) {
            property = type.attributes[knownAttribute];
            if (property) {
              info.defaultBindingMode = property.defaultBindingMode;
              if (!info.command && !info.expression) {
                info.command = property.hasOptions ? 'options' : null;
              }
            }
          }
        } else if (elementInstruction) {
          elementProperty = elementInstruction.type.attributes[info.attrName];
          if (elementProperty) {
            info.defaultBindingMode = elementProperty.defaultBindingMode;
          }
        }
        if (elementProperty) {
          instruction = bindingLanguage.createAttributeInstruction(resources, node, info, elementInstruction);
        } else {
          instruction = bindingLanguage.createAttributeInstruction(resources, node, info, undefined, type);
        }
        if (instruction) {
          if (instruction.alteredAttr) {
            type = resources.getAttribute(instruction.attrName);
          }
          if (instruction.discrete) {
            expressions.push(instruction);
          } else {
            if (type) {
              instruction.type = type;
              configureProperties(instruction, resources);
              if (type.liftsContent) {
                instruction.originalAttrName = attrName;
                liftingInstruction = instruction;
                break;
              } else {
                behaviorInstructions.push(instruction);
              }
            } else if (elementProperty) {
              elementInstruction.attributes[info.attrName].targetProperty = elementProperty.name;
            } else {
              expressions.push(instruction.attributes[instruction.attrName]);
            }
          }
        } else {
          if (type) {
            instruction = BehaviorInstruction.attribute(attrName, type);
            instruction.attributes[resources.mapAttribute(attrName)] = attrValue;
            if (type.liftsContent) {
              instruction.originalAttrName = attrName;
              liftingInstruction = instruction;
              break;
            } else {
              behaviorInstructions.push(instruction);
            }
          } else if (elementProperty) {
            elementInstruction.attributes[attrName] = attrValue;
          }
        }
      }
      if (liftingInstruction) {
        liftingInstruction.viewFactory = viewFactory;
        node = liftingInstruction.type.compile(this, resources, node, liftingInstruction, parentNode);
        auTargetID = makeIntoInstructionTarget(node);
        instructions[auTargetID] = TargetInstruction.lifting(parentInjectorId, liftingInstruction);
      } else {
        if (expressions.length || behaviorInstructions.length) {
          injectorId = behaviorInstructions.length ? getNextInjectorId() : false;
          for (i = 0, ii = behaviorInstructions.length; i < ii; ++i) {
            instruction = behaviorInstructions[i];
            instruction.type.compile(this, resources, node, instruction, parentNode);
            providers.push(instruction.type.target);
          }
          for (i = 0, ii = expressions.length; i < ii; ++i) {
            expression = expressions[i];
            if (expression.attrToRemove !== undefined) {
              node.removeAttribute(expression.attrToRemove);
            }
          }
          auTargetID = makeIntoInstructionTarget(node);
          instructions[auTargetID] = TargetInstruction.normal(injectorId, parentInjectorId, providers, behaviorInstructions, expressions, elementInstruction);
        }
        if (elementInstruction && elementInstruction.skipContentProcessing) {
          return node.nextSibling;
        }
        var currentChild = node.firstChild;
        while (currentChild) {
          currentChild = this._compileNode(currentChild, resources, instructions, node, injectorId || parentInjectorId, targetLightDOM);
        }
      }
      return node.nextSibling;
    };
    return ViewCompiler;
  }()) || _class13);
  var ResourceModule = exports.ResourceModule = function() {
    function ResourceModule(moduleId) {
      _classCallCheck(this, ResourceModule);
      this.id = moduleId;
      this.moduleInstance = null;
      this.mainResource = null;
      this.resources = null;
      this.viewStrategy = null;
      this.isInitialized = false;
      this.onLoaded = null;
    }
    ResourceModule.prototype.initialize = function initialize(container) {
      var current = this.mainResource;
      var resources = this.resources;
      var vs = this.viewStrategy;
      if (this.isInitialized) {
        return;
      }
      this.isInitialized = true;
      if (current !== undefined) {
        current.metadata.viewStrategy = vs;
        current.initialize(container);
      }
      for (var i = 0,
          ii = resources.length; i < ii; ++i) {
        current = resources[i];
        current.metadata.viewStrategy = vs;
        current.initialize(container);
      }
    };
    ResourceModule.prototype.register = function register(registry, name) {
      var main = this.mainResource;
      var resources = this.resources;
      if (main !== undefined) {
        main.register(registry, name);
        name = null;
      }
      for (var i = 0,
          ii = resources.length; i < ii; ++i) {
        resources[i].register(registry, name);
        name = null;
      }
    };
    ResourceModule.prototype.load = function load(container, loadContext) {
      if (this.onLoaded !== null) {
        return this.onLoaded;
      }
      var main = this.mainResource;
      var resources = this.resources;
      var loads = void 0;
      if (main !== undefined) {
        loads = new Array(resources.length + 1);
        loads[0] = main.load(container, loadContext);
        for (var i = 0,
            ii = resources.length; i < ii; ++i) {
          loads[i + 1] = resources[i].load(container, loadContext);
        }
      } else {
        loads = new Array(resources.length);
        for (var _i = 0,
            _ii = resources.length; _i < _ii; ++_i) {
          loads[_i] = resources[_i].load(container, loadContext);
        }
      }
      this.onLoaded = Promise.all(loads);
      return this.onLoaded;
    };
    return ResourceModule;
  }();
  var ResourceDescription = exports.ResourceDescription = function() {
    function ResourceDescription(key, exportedValue, resourceTypeMeta) {
      _classCallCheck(this, ResourceDescription);
      if (!resourceTypeMeta) {
        resourceTypeMeta = _aureliaMetadata.metadata.get(_aureliaMetadata.metadata.resource, exportedValue);
        if (!resourceTypeMeta) {
          resourceTypeMeta = new HtmlBehaviorResource();
          resourceTypeMeta.elementName = _hyphenate(key);
          _aureliaMetadata.metadata.define(_aureliaMetadata.metadata.resource, resourceTypeMeta, exportedValue);
        }
      }
      if (resourceTypeMeta instanceof HtmlBehaviorResource) {
        if (resourceTypeMeta.elementName === undefined) {
          resourceTypeMeta.elementName = _hyphenate(key);
        } else if (resourceTypeMeta.attributeName === undefined) {
          resourceTypeMeta.attributeName = _hyphenate(key);
        } else if (resourceTypeMeta.attributeName === null && resourceTypeMeta.elementName === null) {
          HtmlBehaviorResource.convention(key, resourceTypeMeta);
        }
      } else if (!resourceTypeMeta.name) {
        resourceTypeMeta.name = _hyphenate(key);
      }
      this.metadata = resourceTypeMeta;
      this.value = exportedValue;
    }
    ResourceDescription.prototype.initialize = function initialize(container) {
      this.metadata.initialize(container, this.value);
    };
    ResourceDescription.prototype.register = function register(registry, name) {
      this.metadata.register(registry, name);
    };
    ResourceDescription.prototype.load = function load(container, loadContext) {
      return this.metadata.load(container, this.value, loadContext);
    };
    return ResourceDescription;
  }();
  var ModuleAnalyzer = exports.ModuleAnalyzer = function() {
    function ModuleAnalyzer() {
      _classCallCheck(this, ModuleAnalyzer);
      this.cache = Object.create(null);
    }
    ModuleAnalyzer.prototype.getAnalysis = function getAnalysis(moduleId) {
      return this.cache[moduleId];
    };
    ModuleAnalyzer.prototype.analyze = function analyze(moduleId, moduleInstance, mainResourceKey) {
      var mainResource = void 0;
      var fallbackValue = void 0;
      var fallbackKey = void 0;
      var resourceTypeMeta = void 0;
      var key = void 0;
      var exportedValue = void 0;
      var resources = [];
      var conventional = void 0;
      var vs = void 0;
      var resourceModule = void 0;
      resourceModule = this.cache[moduleId];
      if (resourceModule) {
        return resourceModule;
      }
      resourceModule = new ResourceModule(moduleId);
      this.cache[moduleId] = resourceModule;
      if (typeof moduleInstance === 'function') {
        moduleInstance = {'default': moduleInstance};
      }
      if (mainResourceKey) {
        mainResource = new ResourceDescription(mainResourceKey, moduleInstance[mainResourceKey]);
      }
      for (key in moduleInstance) {
        exportedValue = moduleInstance[key];
        if (key === mainResourceKey || typeof exportedValue !== 'function') {
          continue;
        }
        resourceTypeMeta = _aureliaMetadata.metadata.get(_aureliaMetadata.metadata.resource, exportedValue);
        if (resourceTypeMeta) {
          if (resourceTypeMeta.attributeName === null && resourceTypeMeta.elementName === null) {
            HtmlBehaviorResource.convention(key, resourceTypeMeta);
          }
          if (resourceTypeMeta.attributeName === null && resourceTypeMeta.elementName === null) {
            resourceTypeMeta.elementName = _hyphenate(key);
          }
          if (!mainResource && resourceTypeMeta instanceof HtmlBehaviorResource && resourceTypeMeta.elementName !== null) {
            mainResource = new ResourceDescription(key, exportedValue, resourceTypeMeta);
          } else {
            resources.push(new ResourceDescription(key, exportedValue, resourceTypeMeta));
          }
        } else if (viewStrategy.decorates(exportedValue)) {
          vs = exportedValue;
        } else if (exportedValue instanceof _aureliaLoader.TemplateRegistryEntry) {
          vs = new TemplateRegistryViewStrategy(moduleId, exportedValue);
        } else {
          if (conventional = HtmlBehaviorResource.convention(key)) {
            if (conventional.elementName !== null && !mainResource) {
              mainResource = new ResourceDescription(key, exportedValue, conventional);
            } else {
              resources.push(new ResourceDescription(key, exportedValue, conventional));
            }
            _aureliaMetadata.metadata.define(_aureliaMetadata.metadata.resource, conventional, exportedValue);
          } else if (conventional = _aureliaBinding.ValueConverterResource.convention(key)) {
            resources.push(new ResourceDescription(key, exportedValue, conventional));
            _aureliaMetadata.metadata.define(_aureliaMetadata.metadata.resource, conventional, exportedValue);
          } else if (conventional = _aureliaBinding.BindingBehaviorResource.convention(key)) {
            resources.push(new ResourceDescription(key, exportedValue, conventional));
            _aureliaMetadata.metadata.define(_aureliaMetadata.metadata.resource, conventional, exportedValue);
          } else if (!fallbackValue) {
            fallbackValue = exportedValue;
            fallbackKey = key;
          }
        }
      }
      if (!mainResource && fallbackValue) {
        mainResource = new ResourceDescription(fallbackKey, fallbackValue);
      }
      resourceModule.moduleInstance = moduleInstance;
      resourceModule.mainResource = mainResource;
      resourceModule.resources = resources;
      resourceModule.viewStrategy = vs;
      return resourceModule;
    };
    return ModuleAnalyzer;
  }();
  var logger = LogManager.getLogger('templating');
  function ensureRegistryEntry(loader, urlOrRegistryEntry) {
    if (urlOrRegistryEntry instanceof _aureliaLoader.TemplateRegistryEntry) {
      return Promise.resolve(urlOrRegistryEntry);
    }
    return loader.loadTemplate(urlOrRegistryEntry);
  }
  var ProxyViewFactory = function() {
    function ProxyViewFactory(promise) {
      var _this6 = this;
      _classCallCheck(this, ProxyViewFactory);
      promise.then(function(x) {
        return _this6.viewFactory = x;
      });
    }
    ProxyViewFactory.prototype.create = function create(container, bindingContext, createInstruction, element) {
      return this.viewFactory.create(container, bindingContext, createInstruction, element);
    };
    ProxyViewFactory.prototype.setCacheSize = function setCacheSize(size, doNotOverrideIfAlreadySet) {
      this.viewFactory.setCacheSize(size, doNotOverrideIfAlreadySet);
    };
    ProxyViewFactory.prototype.getCachedView = function getCachedView() {
      return this.viewFactory.getCachedView();
    };
    ProxyViewFactory.prototype.returnViewToCache = function returnViewToCache(view) {
      this.viewFactory.returnViewToCache(view);
    };
    _createClass(ProxyViewFactory, [{
      key: 'isCaching',
      get: function get() {
        return this.viewFactory.isCaching;
      }
    }]);
    return ProxyViewFactory;
  }();
  var ViewEngine = exports.ViewEngine = (_dec7 = (0, _aureliaDependencyInjection.inject)(_aureliaLoader.Loader, _aureliaDependencyInjection.Container, ViewCompiler, ModuleAnalyzer, ViewResources), _dec7(_class14 = function() {
    function ViewEngine(loader, container, viewCompiler, moduleAnalyzer, appResources) {
      _classCallCheck(this, ViewEngine);
      this.loader = loader;
      this.container = container;
      this.viewCompiler = viewCompiler;
      this.moduleAnalyzer = moduleAnalyzer;
      this.appResources = appResources;
      this._pluginMap = {};
    }
    ViewEngine.prototype.addResourcePlugin = function addResourcePlugin(extension, implementation) {
      var name = extension.replace('.', '') + '-resource-plugin';
      this._pluginMap[extension] = name;
      this.loader.addPlugin(name, implementation);
    };
    ViewEngine.prototype.loadViewFactory = function loadViewFactory(urlOrRegistryEntry, compileInstruction, loadContext) {
      var _this7 = this;
      loadContext = loadContext || new ResourceLoadContext();
      return ensureRegistryEntry(this.loader, urlOrRegistryEntry).then(function(registryEntry) {
        if (registryEntry.onReady) {
          if (!loadContext.hasDependency(urlOrRegistryEntry)) {
            loadContext.addDependency(urlOrRegistryEntry);
            return registryEntry.onReady;
          }
          return Promise.resolve(new ProxyViewFactory(registryEntry.onReady));
        }
        loadContext.addDependency(urlOrRegistryEntry);
        registryEntry.onReady = _this7.loadTemplateResources(registryEntry, compileInstruction, loadContext).then(function(resources) {
          registryEntry.resources = resources;
          var viewFactory = _this7.viewCompiler.compile(registryEntry.template, resources, compileInstruction);
          registryEntry.factory = viewFactory;
          return viewFactory;
        });
        return registryEntry.onReady;
      });
    };
    ViewEngine.prototype.loadTemplateResources = function loadTemplateResources(registryEntry, compileInstruction, loadContext) {
      var resources = new ViewResources(this.appResources, registryEntry.address);
      var dependencies = registryEntry.dependencies;
      var importIds = void 0;
      var names = void 0;
      compileInstruction = compileInstruction || ViewCompileInstruction.normal;
      if (dependencies.length === 0 && !compileInstruction.associatedModuleId) {
        return Promise.resolve(resources);
      }
      importIds = dependencies.map(function(x) {
        return x.src;
      });
      names = dependencies.map(function(x) {
        return x.name;
      });
      logger.debug('importing resources for ' + registryEntry.address, importIds);
      return this.importViewResources(importIds, names, resources, compileInstruction, loadContext);
    };
    ViewEngine.prototype.importViewModelResource = function importViewModelResource(moduleImport, moduleMember) {
      var _this8 = this;
      return this.loader.loadModule(moduleImport).then(function(viewModelModule) {
        var normalizedId = _aureliaMetadata.Origin.get(viewModelModule).moduleId;
        var resourceModule = _this8.moduleAnalyzer.analyze(normalizedId, viewModelModule, moduleMember);
        if (!resourceModule.mainResource) {
          throw new Error('No view model found in module "' + moduleImport + '".');
        }
        resourceModule.initialize(_this8.container);
        return resourceModule.mainResource;
      });
    };
    ViewEngine.prototype.importViewResources = function importViewResources(moduleIds, names, resources, compileInstruction, loadContext) {
      var _this9 = this;
      loadContext = loadContext || new ResourceLoadContext();
      compileInstruction = compileInstruction || ViewCompileInstruction.normal;
      moduleIds = moduleIds.map(function(x) {
        return _this9._applyLoaderPlugin(x);
      });
      return this.loader.loadAllModules(moduleIds).then(function(imports) {
        var i = void 0;
        var ii = void 0;
        var analysis = void 0;
        var normalizedId = void 0;
        var current = void 0;
        var associatedModule = void 0;
        var container = _this9.container;
        var moduleAnalyzer = _this9.moduleAnalyzer;
        var allAnalysis = new Array(imports.length);
        for (i = 0, ii = imports.length; i < ii; ++i) {
          current = imports[i];
          normalizedId = _aureliaMetadata.Origin.get(current).moduleId;
          analysis = moduleAnalyzer.analyze(normalizedId, current);
          analysis.initialize(container);
          analysis.register(resources, names[i]);
          allAnalysis[i] = analysis;
        }
        if (compileInstruction.associatedModuleId) {
          associatedModule = moduleAnalyzer.getAnalysis(compileInstruction.associatedModuleId);
          if (associatedModule) {
            associatedModule.register(resources);
          }
        }
        for (i = 0, ii = allAnalysis.length; i < ii; ++i) {
          allAnalysis[i] = allAnalysis[i].load(container, loadContext);
        }
        return Promise.all(allAnalysis).then(function() {
          return resources;
        });
      });
    };
    ViewEngine.prototype._applyLoaderPlugin = function _applyLoaderPlugin(id) {
      var index = id.lastIndexOf('.');
      if (index !== -1) {
        var ext = id.substring(index);
        var pluginName = this._pluginMap[ext];
        if (pluginName === undefined) {
          return id;
        }
        return this.loader.applyPluginToUrl(id, pluginName);
      }
      return id;
    };
    return ViewEngine;
  }()) || _class14);
  var Controller = exports.Controller = function() {
    function Controller(behavior, instruction, viewModel, elementEvents) {
      _classCallCheck(this, Controller);
      this.behavior = behavior;
      this.instruction = instruction;
      this.viewModel = viewModel;
      this.isAttached = false;
      this.view = null;
      this.isBound = false;
      this.scope = null;
      this.elementEvents = elementEvents || null;
      var observerLookup = behavior.observerLocator.getOrCreateObserversLookup(viewModel);
      var handlesBind = behavior.handlesBind;
      var attributes = instruction.attributes;
      var boundProperties = this.boundProperties = [];
      var properties = behavior.properties;
      var i = void 0;
      var ii = void 0;
      behavior._ensurePropertiesDefined(viewModel, observerLookup);
      for (i = 0, ii = properties.length; i < ii; ++i) {
        properties[i]._initialize(viewModel, observerLookup, attributes, handlesBind, boundProperties);
      }
    }
    Controller.prototype.created = function created(owningView) {
      if (this.behavior.handlesCreated) {
        this.viewModel.created(owningView, this.view);
      }
    };
    Controller.prototype.automate = function automate(overrideContext, owningView) {
      this.view.bindingContext = this.viewModel;
      this.view.overrideContext = overrideContext || (0, _aureliaBinding.createOverrideContext)(this.viewModel);
      this.view._isUserControlled = true;
      if (this.behavior.handlesCreated) {
        this.viewModel.created(owningView || null, this.view);
      }
      this.bind(this.view);
    };
    Controller.prototype.bind = function bind(scope) {
      var skipSelfSubscriber = this.behavior.handlesBind;
      var boundProperties = this.boundProperties;
      var i = void 0;
      var ii = void 0;
      var x = void 0;
      var observer = void 0;
      var selfSubscriber = void 0;
      if (this.isBound) {
        if (this.scope === scope) {
          return;
        }
        this.unbind();
      }
      this.isBound = true;
      this.scope = scope;
      for (i = 0, ii = boundProperties.length; i < ii; ++i) {
        x = boundProperties[i];
        observer = x.observer;
        selfSubscriber = observer.selfSubscriber;
        observer.publishing = false;
        if (skipSelfSubscriber) {
          observer.selfSubscriber = null;
        }
        x.binding.bind(scope);
        observer.call();
        observer.publishing = true;
        observer.selfSubscriber = selfSubscriber;
      }
      var overrideContext = void 0;
      if (this.view !== null) {
        if (skipSelfSubscriber) {
          this.view.viewModelScope = scope;
        }
        if (this.viewModel === scope.overrideContext.bindingContext) {
          overrideContext = scope.overrideContext;
        } else if (this.instruction.inheritBindingContext) {
          overrideContext = (0, _aureliaBinding.createOverrideContext)(this.viewModel, scope.overrideContext);
        } else {
          overrideContext = (0, _aureliaBinding.createOverrideContext)(this.viewModel);
          overrideContext.__parentOverrideContext = scope.overrideContext;
        }
        this.view.bind(this.viewModel, overrideContext);
      } else if (skipSelfSubscriber) {
        overrideContext = scope.overrideContext;
        if (scope.overrideContext.__parentOverrideContext !== undefined && this.viewModel.viewFactory && this.viewModel.viewFactory.factoryCreateInstruction.partReplacements) {
          overrideContext = Object.assign({}, scope.overrideContext);
          overrideContext.parentOverrideContext = scope.overrideContext.__parentOverrideContext;
        }
        this.viewModel.bind(scope.bindingContext, overrideContext);
      }
    };
    Controller.prototype.unbind = function unbind() {
      if (this.isBound) {
        var boundProperties = this.boundProperties;
        var i = void 0;
        var ii = void 0;
        this.isBound = false;
        this.scope = null;
        if (this.view !== null) {
          this.view.unbind();
        }
        if (this.behavior.handlesUnbind) {
          this.viewModel.unbind();
        }
        if (this.elementEvents !== null) {
          this.elementEvents.disposeAll();
        }
        for (i = 0, ii = boundProperties.length; i < ii; ++i) {
          boundProperties[i].binding.unbind();
        }
      }
    };
    Controller.prototype.attached = function attached() {
      if (this.isAttached) {
        return;
      }
      this.isAttached = true;
      if (this.behavior.handlesAttached) {
        this.viewModel.attached();
      }
      if (this.view !== null) {
        this.view.attached();
      }
    };
    Controller.prototype.detached = function detached() {
      if (this.isAttached) {
        this.isAttached = false;
        if (this.view !== null) {
          this.view.detached();
        }
        if (this.behavior.handlesDetached) {
          this.viewModel.detached();
        }
      }
    };
    return Controller;
  }();
  var BehaviorPropertyObserver = exports.BehaviorPropertyObserver = (_dec8 = (0, _aureliaBinding.subscriberCollection)(), _dec8(_class16 = function() {
    function BehaviorPropertyObserver(taskQueue, obj, propertyName, selfSubscriber, initialValue) {
      _classCallCheck(this, BehaviorPropertyObserver);
      this.taskQueue = taskQueue;
      this.obj = obj;
      this.propertyName = propertyName;
      this.notqueued = true;
      this.publishing = false;
      this.selfSubscriber = selfSubscriber;
      this.currentValue = this.oldValue = initialValue;
    }
    BehaviorPropertyObserver.prototype.getValue = function getValue() {
      return this.currentValue;
    };
    BehaviorPropertyObserver.prototype.setValue = function setValue(newValue) {
      var oldValue = this.currentValue;
      if (oldValue !== newValue) {
        if (this.publishing && this.notqueued) {
          this.notqueued = false;
          this.taskQueue.queueMicroTask(this);
        }
        this.oldValue = oldValue;
        this.currentValue = newValue;
      }
    };
    BehaviorPropertyObserver.prototype.call = function call() {
      var oldValue = this.oldValue;
      var newValue = this.currentValue;
      this.notqueued = true;
      if (newValue === oldValue) {
        return;
      }
      if (this.selfSubscriber) {
        this.selfSubscriber(newValue, oldValue);
      }
      this.callSubscribers(newValue, oldValue);
      this.oldValue = newValue;
    };
    BehaviorPropertyObserver.prototype.subscribe = function subscribe(context, callable) {
      this.addSubscriber(context, callable);
    };
    BehaviorPropertyObserver.prototype.unsubscribe = function unsubscribe(context, callable) {
      this.removeSubscriber(context, callable);
    };
    return BehaviorPropertyObserver;
  }()) || _class16);
  function getObserver(behavior, instance, name) {
    var lookup = instance.__observers__;
    if (lookup === undefined) {
      if (!behavior.isInitialized) {
        behavior.initialize(_aureliaDependencyInjection.Container.instance || new _aureliaDependencyInjection.Container(), instance.constructor);
      }
      lookup = behavior.observerLocator.getOrCreateObserversLookup(instance);
      behavior._ensurePropertiesDefined(instance, lookup);
    }
    return lookup[name];
  }
  var BindableProperty = exports.BindableProperty = function() {
    function BindableProperty(nameOrConfig) {
      _classCallCheck(this, BindableProperty);
      if (typeof nameOrConfig === 'string') {
        this.name = nameOrConfig;
      } else {
        Object.assign(this, nameOrConfig);
      }
      this.attribute = this.attribute || _hyphenate(this.name);
      if (this.defaultBindingMode === null || this.defaultBindingMode === undefined) {
        this.defaultBindingMode = _aureliaBinding.bindingMode.oneWay;
      }
      this.changeHandler = this.changeHandler || null;
      this.owner = null;
      this.descriptor = null;
    }
    BindableProperty.prototype.registerWith = function registerWith(target, behavior, descriptor) {
      behavior.properties.push(this);
      behavior.attributes[this.attribute] = this;
      this.owner = behavior;
      if (descriptor) {
        this.descriptor = descriptor;
        return this._configureDescriptor(behavior, descriptor);
      }
    };
    BindableProperty.prototype._configureDescriptor = function _configureDescriptor(behavior, descriptor) {
      var name = this.name;
      descriptor.configurable = true;
      descriptor.enumerable = true;
      if ('initializer' in descriptor) {
        this.defaultValue = descriptor.initializer;
        delete descriptor.initializer;
        delete descriptor.writable;
      }
      if ('value' in descriptor) {
        this.defaultValue = descriptor.value;
        delete descriptor.value;
        delete descriptor.writable;
      }
      descriptor.get = function() {
        return getObserver(behavior, this, name).getValue();
      };
      descriptor.set = function(value) {
        getObserver(behavior, this, name).setValue(value);
      };
      descriptor.get.getObserver = function(obj) {
        return getObserver(behavior, obj, name);
      };
      return descriptor;
    };
    BindableProperty.prototype.defineOn = function defineOn(target, behavior) {
      var name = this.name;
      var handlerName = void 0;
      if (this.changeHandler === null) {
        handlerName = name + 'Changed';
        if (handlerName in target.prototype) {
          this.changeHandler = handlerName;
        }
      }
      if (this.descriptor === null) {
        Object.defineProperty(target.prototype, name, this._configureDescriptor(behavior, {}));
      }
    };
    BindableProperty.prototype.createObserver = function createObserver(viewModel) {
      var selfSubscriber = null;
      var defaultValue = this.defaultValue;
      var changeHandlerName = this.changeHandler;
      var name = this.name;
      var initialValue = void 0;
      if (this.hasOptions) {
        return undefined;
      }
      if (changeHandlerName in viewModel) {
        if ('propertyChanged' in viewModel) {
          selfSubscriber = function selfSubscriber(newValue, oldValue) {
            viewModel[changeHandlerName](newValue, oldValue);
            viewModel.propertyChanged(name, newValue, oldValue);
          };
        } else {
          selfSubscriber = function selfSubscriber(newValue, oldValue) {
            return viewModel[changeHandlerName](newValue, oldValue);
          };
        }
      } else if ('propertyChanged' in viewModel) {
        selfSubscriber = function selfSubscriber(newValue, oldValue) {
          return viewModel.propertyChanged(name, newValue, oldValue);
        };
      } else if (changeHandlerName !== null) {
        throw new Error('Change handler ' + changeHandlerName + ' was specified but not declared on the class.');
      }
      if (defaultValue !== undefined) {
        initialValue = typeof defaultValue === 'function' ? defaultValue.call(viewModel) : defaultValue;
      }
      return new BehaviorPropertyObserver(this.owner.taskQueue, viewModel, this.name, selfSubscriber, initialValue);
    };
    BindableProperty.prototype._initialize = function _initialize(viewModel, observerLookup, attributes, behaviorHandlesBind, boundProperties) {
      var selfSubscriber = void 0;
      var observer = void 0;
      var attribute = void 0;
      var defaultValue = this.defaultValue;
      if (this.isDynamic) {
        for (var key in attributes) {
          this._createDynamicProperty(viewModel, observerLookup, behaviorHandlesBind, key, attributes[key], boundProperties);
        }
      } else if (!this.hasOptions) {
        observer = observerLookup[this.name];
        if (attributes !== null) {
          selfSubscriber = observer.selfSubscriber;
          attribute = attributes[this.attribute];
          if (behaviorHandlesBind) {
            observer.selfSubscriber = null;
          }
          if (typeof attribute === 'string') {
            viewModel[this.name] = attribute;
            observer.call();
          } else if (attribute) {
            boundProperties.push({
              observer: observer,
              binding: attribute.createBinding(viewModel)
            });
          } else if (defaultValue !== undefined) {
            observer.call();
          }
          observer.selfSubscriber = selfSubscriber;
        }
        observer.publishing = true;
      }
    };
    BindableProperty.prototype._createDynamicProperty = function _createDynamicProperty(viewModel, observerLookup, behaviorHandlesBind, name, attribute, boundProperties) {
      var changeHandlerName = name + 'Changed';
      var selfSubscriber = null;
      var observer = void 0;
      var info = void 0;
      if (changeHandlerName in viewModel) {
        if ('propertyChanged' in viewModel) {
          selfSubscriber = function selfSubscriber(newValue, oldValue) {
            viewModel[changeHandlerName](newValue, oldValue);
            viewModel.propertyChanged(name, newValue, oldValue);
          };
        } else {
          selfSubscriber = function selfSubscriber(newValue, oldValue) {
            return viewModel[changeHandlerName](newValue, oldValue);
          };
        }
      } else if ('propertyChanged' in viewModel) {
        selfSubscriber = function selfSubscriber(newValue, oldValue) {
          return viewModel.propertyChanged(name, newValue, oldValue);
        };
      }
      observer = observerLookup[name] = new BehaviorPropertyObserver(this.owner.taskQueue, viewModel, name, selfSubscriber);
      Object.defineProperty(viewModel, name, {
        configurable: true,
        enumerable: true,
        get: observer.getValue.bind(observer),
        set: observer.setValue.bind(observer)
      });
      if (behaviorHandlesBind) {
        observer.selfSubscriber = null;
      }
      if (typeof attribute === 'string') {
        viewModel[name] = attribute;
        observer.call();
      } else if (attribute) {
        info = {
          observer: observer,
          binding: attribute.createBinding(viewModel)
        };
        boundProperties.push(info);
      }
      observer.publishing = true;
      observer.selfSubscriber = selfSubscriber;
    };
    return BindableProperty;
  }();
  var contentSelectorViewCreateInstruction = {enhance: false};
  var lastProviderId = 0;
  function nextProviderId() {
    return ++lastProviderId;
  }
  function doProcessContent() {
    return true;
  }
  function doProcessAttributes() {}
  var HtmlBehaviorResource = exports.HtmlBehaviorResource = function() {
    function HtmlBehaviorResource() {
      _classCallCheck(this, HtmlBehaviorResource);
      this.elementName = null;
      this.attributeName = null;
      this.attributeDefaultBindingMode = undefined;
      this.liftsContent = false;
      this.targetShadowDOM = false;
      this.processAttributes = doProcessAttributes;
      this.processContent = doProcessContent;
      this.usesShadowDOM = false;
      this.childBindings = null;
      this.hasDynamicOptions = false;
      this.containerless = false;
      this.properties = [];
      this.attributes = {};
      this.isInitialized = false;
    }
    HtmlBehaviorResource.convention = function convention(name, existing) {
      var behavior = void 0;
      if (name.endsWith('CustomAttribute')) {
        behavior = existing || new HtmlBehaviorResource();
        behavior.attributeName = _hyphenate(name.substring(0, name.length - 15));
      }
      if (name.endsWith('CustomElement')) {
        behavior = existing || new HtmlBehaviorResource();
        behavior.elementName = _hyphenate(name.substring(0, name.length - 13));
      }
      return behavior;
    };
    HtmlBehaviorResource.prototype.addChildBinding = function addChildBinding(behavior) {
      if (this.childBindings === null) {
        this.childBindings = [];
      }
      this.childBindings.push(behavior);
    };
    HtmlBehaviorResource.prototype.initialize = function initialize(container, target) {
      var proto = target.prototype;
      var properties = this.properties;
      var attributeName = this.attributeName;
      var attributeDefaultBindingMode = this.attributeDefaultBindingMode;
      var i = void 0;
      var ii = void 0;
      var current = void 0;
      if (this.isInitialized) {
        return;
      }
      this.isInitialized = true;
      target.__providerId__ = nextProviderId();
      this.observerLocator = container.get(_aureliaBinding.ObserverLocator);
      this.taskQueue = container.get(_aureliaTaskQueue.TaskQueue);
      this.target = target;
      this.usesShadowDOM = this.targetShadowDOM && _aureliaPal.FEATURE.shadowDOM;
      this.handlesCreated = 'created' in proto;
      this.handlesBind = 'bind' in proto;
      this.handlesUnbind = 'unbind' in proto;
      this.handlesAttached = 'attached' in proto;
      this.handlesDetached = 'detached' in proto;
      this.htmlName = this.elementName || this.attributeName;
      if (attributeName !== null) {
        if (properties.length === 0) {
          new BindableProperty({
            name: 'value',
            changeHandler: 'valueChanged' in proto ? 'valueChanged' : null,
            attribute: attributeName,
            defaultBindingMode: attributeDefaultBindingMode
          }).registerWith(target, this);
        }
        current = properties[0];
        if (properties.length === 1 && current.name === 'value') {
          current.isDynamic = current.hasOptions = this.hasDynamicOptions;
          current.defineOn(target, this);
        } else {
          for (i = 0, ii = properties.length; i < ii; ++i) {
            properties[i].defineOn(target, this);
          }
          current = new BindableProperty({
            name: 'value',
            changeHandler: 'valueChanged' in proto ? 'valueChanged' : null,
            attribute: attributeName,
            defaultBindingMode: attributeDefaultBindingMode
          });
          current.hasOptions = true;
          current.registerWith(target, this);
        }
      } else {
        for (i = 0, ii = properties.length; i < ii; ++i) {
          properties[i].defineOn(target, this);
        }
      }
    };
    HtmlBehaviorResource.prototype.register = function register(registry, name) {
      if (this.attributeName !== null) {
        registry.registerAttribute(name || this.attributeName, this, this.attributeName);
      }
      if (this.elementName !== null) {
        registry.registerElement(name || this.elementName, this);
      }
    };
    HtmlBehaviorResource.prototype.load = function load(container, target, loadContext, viewStrategy, transientView) {
      var _this10 = this;
      var options = void 0;
      if (this.elementName !== null) {
        viewStrategy = container.get(ViewLocator).getViewStrategy(viewStrategy || this.viewStrategy || target);
        options = new ViewCompileInstruction(this.targetShadowDOM, true);
        if (!viewStrategy.moduleId) {
          viewStrategy.moduleId = _aureliaMetadata.Origin.get(target).moduleId;
        }
        return viewStrategy.loadViewFactory(container.get(ViewEngine), options, loadContext).then(function(viewFactory) {
          if (!transientView || !_this10.viewFactory) {
            _this10.viewFactory = viewFactory;
          }
          return viewFactory;
        });
      }
      return Promise.resolve(this);
    };
    HtmlBehaviorResource.prototype.compile = function compile(compiler, resources, node, instruction, parentNode) {
      if (this.liftsContent) {
        if (!instruction.viewFactory) {
          var template = _aureliaPal.DOM.createElement('template');
          var fragment = _aureliaPal.DOM.createDocumentFragment();
          var cacheSize = node.getAttribute('view-cache');
          var part = node.getAttribute('part');
          node.removeAttribute(instruction.originalAttrName);
          _aureliaPal.DOM.replaceNode(template, node, parentNode);
          fragment.appendChild(node);
          instruction.viewFactory = compiler.compile(fragment, resources);
          if (part) {
            instruction.viewFactory.part = part;
            node.removeAttribute('part');
          }
          if (cacheSize) {
            instruction.viewFactory.setCacheSize(cacheSize);
            node.removeAttribute('view-cache');
          }
          node = template;
        }
      } else if (this.elementName !== null) {
        var _partReplacements2 = {};
        if (this.processContent(compiler, resources, node, instruction) && node.hasChildNodes()) {
          if (this.usesShadowDOM) {
            var currentChild = node.firstChild;
            var nextSibling = void 0;
            var toReplace = void 0;
            while (currentChild) {
              nextSibling = currentChild.nextSibling;
              if (currentChild.tagName === 'TEMPLATE' && (toReplace = currentChild.getAttribute('replace-part'))) {
                _partReplacements2[toReplace] = compiler.compile(currentChild, resources);
                _aureliaPal.DOM.removeNode(currentChild, parentNode);
                instruction.partReplacements = _partReplacements2;
              }
              currentChild = nextSibling;
            }
            instruction.skipContentProcessing = false;
          } else {
            var _fragment = _aureliaPal.DOM.createDocumentFragment();
            var _currentChild = node.firstChild;
            var _nextSibling = void 0;
            var _toReplace = void 0;
            while (_currentChild) {
              _nextSibling = _currentChild.nextSibling;
              if (_currentChild.tagName === 'TEMPLATE' && (_toReplace = _currentChild.getAttribute('replace-part'))) {
                _partReplacements2[_toReplace] = compiler.compile(_currentChild, resources);
                _aureliaPal.DOM.removeNode(_currentChild, parentNode);
                instruction.partReplacements = _partReplacements2;
              } else {
                _fragment.appendChild(_currentChild);
              }
              _currentChild = _nextSibling;
            }
            instruction.contentFactory = compiler.compile(_fragment, resources);
            instruction.skipContentProcessing = true;
          }
        } else {
          instruction.skipContentProcessing = true;
        }
      }
      return node;
    };
    HtmlBehaviorResource.prototype.create = function create(container, instruction, element, bindings) {
      var host = void 0;
      var au = null;
      instruction = instruction || BehaviorInstruction.normal;
      element = element || null;
      bindings = bindings || null;
      if (this.elementName !== null && element) {
        if (this.usesShadowDOM) {
          host = element.createShadowRoot();
          container.registerInstance(_aureliaPal.DOM.boundary, host);
        } else {
          host = element;
          if (this.targetShadowDOM) {
            container.registerInstance(_aureliaPal.DOM.boundary, host);
          }
        }
      }
      if (element !== null) {
        element.au = au = element.au || {};
      }
      var viewModel = instruction.viewModel || container.get(this.target);
      var controller = new Controller(this, instruction, viewModel, container.elementEvents);
      var childBindings = this.childBindings;
      var viewFactory = void 0;
      if (this.liftsContent) {
        au.controller = controller;
      } else if (this.elementName !== null) {
        viewFactory = instruction.viewFactory || this.viewFactory;
        container.viewModel = viewModel;
        if (viewFactory) {
          controller.view = viewFactory.create(container, instruction, element);
        }
        if (element !== null) {
          au.controller = controller;
          if (controller.view) {
            if (!this.usesShadowDOM) {
              if (instruction.contentFactory) {
                var contentView = instruction.contentFactory.create(container, contentSelectorViewCreateInstruction);
                _ContentSelector.applySelectors(contentView, controller.view.contentSelectors, function(contentSelector, group) {
                  return contentSelector.add(group);
                });
                controller.contentView = contentView;
              }
            }
            if (instruction.anchorIsContainer) {
              if (childBindings !== null) {
                for (var i = 0,
                    ii = childBindings.length; i < ii; ++i) {
                  controller.view.addBinding(childBindings[i].create(element, viewModel));
                }
              }
              controller.view.appendNodesTo(host);
            } else {
              controller.view.insertNodesBefore(host);
            }
          } else if (childBindings !== null) {
            for (var _i2 = 0,
                _ii2 = childBindings.length; _i2 < _ii2; ++_i2) {
              bindings.push(childBindings[_i2].create(element, viewModel));
            }
          }
        } else if (controller.view) {
          controller.view.controller = controller;
          if (childBindings !== null) {
            for (var _i3 = 0,
                _ii3 = childBindings.length; _i3 < _ii3; ++_i3) {
              controller.view.addBinding(childBindings[_i3].create(instruction.host, viewModel));
            }
          }
        } else if (childBindings !== null) {
          for (var _i4 = 0,
              _ii4 = childBindings.length; _i4 < _ii4; ++_i4) {
            bindings.push(childBindings[_i4].create(instruction.host, viewModel));
          }
        }
      } else if (childBindings !== null) {
        for (var _i5 = 0,
            _ii5 = childBindings.length; _i5 < _ii5; ++_i5) {
          bindings.push(childBindings[_i5].create(element, viewModel));
        }
      }
      if (au !== null) {
        au[this.htmlName] = controller;
      }
      if (instruction.initiatedByBehavior && viewFactory) {
        controller.view.created();
      }
      return controller;
    };
    HtmlBehaviorResource.prototype._ensurePropertiesDefined = function _ensurePropertiesDefined(instance, lookup) {
      var properties = void 0;
      var i = void 0;
      var ii = void 0;
      var observer = void 0;
      if ('__propertiesDefined__' in lookup) {
        return;
      }
      lookup.__propertiesDefined__ = true;
      properties = this.properties;
      for (i = 0, ii = properties.length; i < ii; ++i) {
        observer = properties[i].createObserver(instance);
        if (observer !== undefined) {
          lookup[observer.propertyName] = observer;
        }
      }
    };
    return HtmlBehaviorResource;
  }();
  function createChildObserverDecorator(selectorOrConfig, all) {
    return function(target, key, descriptor) {
      var actualTarget = typeof key === 'string' ? target.constructor : target;
      var r = _aureliaMetadata.metadata.getOrCreateOwn(_aureliaMetadata.metadata.resource, HtmlBehaviorResource, actualTarget);
      if (typeof selectorOrConfig === 'string') {
        selectorOrConfig = {
          selector: selectorOrConfig,
          name: key
        };
      }
      if (descriptor) {
        descriptor.writable = true;
      }
      selectorOrConfig.all = all;
      r.addChildBinding(new ChildObserver(selectorOrConfig));
    };
  }
  function children(selectorOrConfig) {
    return createChildObserverDecorator(selectorOrConfig, true);
  }
  function child(selectorOrConfig) {
    return createChildObserverDecorator(selectorOrConfig, false);
  }
  var ChildObserver = function() {
    function ChildObserver(config) {
      _classCallCheck(this, ChildObserver);
      this.name = config.name;
      this.changeHandler = config.changeHandler || this.name + 'Changed';
      this.selector = config.selector;
      this.all = config.all;
    }
    ChildObserver.prototype.create = function create(target, viewModel) {
      return new ChildObserverBinder(this.selector, target, this.name, viewModel, this.changeHandler, this.all);
    };
    return ChildObserver;
  }();
  var noMutations = [];
  function trackMutation(groupedMutations, binder, record) {
    var mutations = groupedMutations.get(binder);
    if (!mutations) {
      mutations = [];
      groupedMutations.set(binder, mutations);
    }
    mutations.push(record);
  }
  function onChildChange(mutations, observer) {
    var binders = observer.binders;
    var bindersLength = binders.length;
    var groupedMutations = new Map();
    for (var i = 0,
        ii = mutations.length; i < ii; ++i) {
      var record = mutations[i];
      var added = record.addedNodes;
      var removed = record.removedNodes;
      for (var j = 0,
          jj = removed.length; j < jj; ++j) {
        var node = removed[j];
        if (node.nodeType === 1) {
          for (var k = 0; k < bindersLength; ++k) {
            var binder = binders[k];
            if (binder.onRemove(node)) {
              trackMutation(groupedMutations, binder, record);
            }
          }
        }
      }
      for (var _j = 0,
          _jj = added.length; _j < _jj; ++_j) {
        var _node = added[_j];
        if (_node.nodeType === 1) {
          for (var _k = 0; _k < bindersLength; ++_k) {
            var _binder = binders[_k];
            if (_binder.onAdd(_node)) {
              trackMutation(groupedMutations, _binder, record);
            }
          }
        }
      }
    }
    groupedMutations.forEach(function(value, key) {
      if (key.changeHandler !== null) {
        key.viewModel[key.changeHandler](value);
      }
    });
  }
  var ChildObserverBinder = function() {
    function ChildObserverBinder(selector, target, property, viewModel, changeHandler, all) {
      _classCallCheck(this, ChildObserverBinder);
      this.selector = selector;
      this.target = target;
      this.property = property;
      this.viewModel = viewModel;
      this.changeHandler = changeHandler in viewModel ? changeHandler : null;
      this.all = all;
    }
    ChildObserverBinder.prototype.bind = function bind(source) {
      var target = this.target;
      var viewModel = this.viewModel;
      var selector = this.selector;
      var current = target.firstElementChild;
      var observer = target.__childObserver__;
      if (!observer) {
        observer = target.__childObserver__ = _aureliaPal.DOM.createMutationObserver(onChildChange);
        observer.observe(target, {childList: true});
        observer.binders = [];
      }
      observer.binders.push(this);
      if (this.all) {
        var items = viewModel[this.property];
        if (!items) {
          items = viewModel[this.property] = [];
        } else {
          items.length = 0;
        }
        while (current) {
          if (current.matches(selector)) {
            items.push(current.au && current.au.controller ? current.au.controller.viewModel : current);
          }
          current = current.nextElementSibling;
        }
        if (this.changeHandler !== null) {
          this.viewModel[this.changeHandler](noMutations);
        }
      } else {
        while (current) {
          if (current.matches(selector)) {
            var value = current.au && current.au.controller ? current.au.controller.viewModel : current;
            this.viewModel[this.property] = value;
            if (this.changeHandler !== null) {
              this.viewModel[this.changeHandler](value);
            }
            break;
          }
          current = current.nextElementSibling;
        }
      }
    };
    ChildObserverBinder.prototype.onRemove = function onRemove(element) {
      if (element.matches(this.selector)) {
        var value = element.au && element.au.controller ? element.au.controller.viewModel : element;
        if (this.all) {
          var items = this.viewModel[this.property];
          var index = items.indexOf(value);
          if (index !== -1) {
            items.splice(index, 1);
          }
          return true;
        }
        return false;
      }
    };
    ChildObserverBinder.prototype.onAdd = function onAdd(element) {
      var selector = this.selector;
      if (element.matches(selector)) {
        var value = element.au && element.au.controller ? element.au.controller.viewModel : element;
        if (this.all) {
          var items = this.viewModel[this.property];
          var index = 0;
          var prev = element.previousElementSibling;
          while (prev) {
            if (prev.matches(selector)) {
              index++;
            }
            prev = prev.previousElementSibling;
          }
          items.splice(index, 0, value);
          return true;
        }
        this.viewModel[this.property] = value;
        if (this.changeHandler !== null) {
          this.viewModel[this.changeHandler](value);
        }
      }
      return false;
    };
    ChildObserverBinder.prototype.unbind = function unbind() {
      if (this.target.__childObserver__) {
        this.target.__childObserver__.disconnect();
        this.target.__childObserver__ = null;
      }
    };
    return ChildObserverBinder;
  }();
  function tryActivateViewModel(context) {
    if (context.skipActivation || typeof context.viewModel.activate !== 'function') {
      return Promise.resolve();
    }
    return context.viewModel.activate(context.model) || Promise.resolve();
  }
  var CompositionEngine = exports.CompositionEngine = (_dec9 = (0, _aureliaDependencyInjection.inject)(ViewEngine, ViewLocator), _dec9(_class17 = function() {
    function CompositionEngine(viewEngine, viewLocator) {
      _classCallCheck(this, CompositionEngine);
      this.viewEngine = viewEngine;
      this.viewLocator = viewLocator;
    }
    CompositionEngine.prototype._createControllerAndSwap = function _createControllerAndSwap(context) {
      function swap(controller) {
        return Promise.resolve(context.viewSlot.removeAll(true)).then(function() {
          if (context.currentController) {
            context.currentController.unbind();
          }
          context.viewSlot.add(controller.view);
          if (context.compositionTransactionNotifier) {
            context.compositionTransactionNotifier.done();
          }
          return controller;
        });
      }
      return this.createController(context).then(function(controller) {
        controller.automate(context.overrideContext, context.owningView);
        if (context.compositionTransactionOwnershipToken) {
          return context.compositionTransactionOwnershipToken.waitForCompositionComplete().then(function() {
            return swap(controller);
          });
        }
        return swap(controller);
      });
    };
    CompositionEngine.prototype.createController = function createController(context) {
      var _this11 = this;
      var childContainer = void 0;
      var viewModel = void 0;
      var viewModelResource = void 0;
      var m = void 0;
      return this.ensureViewModel(context).then(tryActivateViewModel).then(function() {
        childContainer = context.childContainer;
        viewModel = context.viewModel;
        viewModelResource = context.viewModelResource;
        m = viewModelResource.metadata;
        var viewStrategy = _this11.viewLocator.getViewStrategy(context.view || viewModel);
        if (context.viewResources) {
          viewStrategy.makeRelativeTo(context.viewResources.viewUrl);
        }
        return m.load(childContainer, viewModelResource.value, null, viewStrategy, true);
      }).then(function(viewFactory) {
        return m.create(childContainer, BehaviorInstruction.dynamic(context.host, viewModel, viewFactory));
      });
    };
    CompositionEngine.prototype.ensureViewModel = function ensureViewModel(context) {
      var childContainer = context.childContainer = context.childContainer || context.container.createChild();
      if (typeof context.viewModel === 'string') {
        context.viewModel = context.viewResources ? context.viewResources.relativeToView(context.viewModel) : context.viewModel;
        return this.viewEngine.importViewModelResource(context.viewModel).then(function(viewModelResource) {
          childContainer.autoRegister(viewModelResource.value);
          if (context.host) {
            childContainer.registerInstance(_aureliaPal.DOM.Element, context.host);
          }
          context.viewModel = childContainer.viewModel = childContainer.get(viewModelResource.value);
          context.viewModelResource = viewModelResource;
          return context;
        });
      }
      var m = _aureliaMetadata.metadata.getOrCreateOwn(_aureliaMetadata.metadata.resource, HtmlBehaviorResource, context.viewModel.constructor);
      m.elementName = m.elementName || 'dynamic-element';
      m.initialize(context.container || childContainer, context.viewModel.constructor);
      context.viewModelResource = {
        metadata: m,
        value: context.viewModel.constructor
      };
      childContainer.viewModel = context.viewModel;
      return Promise.resolve(context);
    };
    CompositionEngine.prototype.compose = function compose(context) {
      context.childContainer = context.childContainer || context.container.createChild();
      context.view = this.viewLocator.getViewStrategy(context.view);
      var transaction = context.childContainer.get(CompositionTransaction);
      var compositionTransactionOwnershipToken = transaction.tryCapture();
      if (compositionTransactionOwnershipToken) {
        context.compositionTransactionOwnershipToken = compositionTransactionOwnershipToken;
      } else {
        context.compositionTransactionNotifier = transaction.enlist();
      }
      if (context.viewModel) {
        return this._createControllerAndSwap(context);
      } else if (context.view) {
        if (context.viewResources) {
          context.view.makeRelativeTo(context.viewResources.viewUrl);
        }
        return context.view.loadViewFactory(this.viewEngine, new ViewCompileInstruction()).then(function(viewFactory) {
          var result = viewFactory.create(context.childContainer);
          result.bind(context.bindingContext, context.overrideContext);
          var work = function work() {
            return Promise.resolve(context.viewSlot.removeAll(true)).then(function() {
              context.viewSlot.add(result);
              if (context.compositionTransactionNotifier) {
                context.compositionTransactionNotifier.done();
              }
              return result;
            });
          };
          if (context.compositionTransactionOwnershipToken) {
            return context.compositionTransactionOwnershipToken.waitForCompositionComplete().then(work);
          }
          return work();
        });
      } else if (context.viewSlot) {
        context.viewSlot.removeAll();
        if (context.compositionTransactionNotifier) {
          context.compositionTransactionNotifier.done();
        }
        return Promise.resolve(null);
      }
    };
    return CompositionEngine;
  }()) || _class17);
  var ElementConfigResource = exports.ElementConfigResource = function() {
    function ElementConfigResource() {
      _classCallCheck(this, ElementConfigResource);
    }
    ElementConfigResource.prototype.initialize = function initialize(container, target) {};
    ElementConfigResource.prototype.register = function register(registry, name) {};
    ElementConfigResource.prototype.load = function load(container, target) {
      var config = new target();
      var eventManager = container.get(_aureliaBinding.EventManager);
      eventManager.registerElementConfig(config);
    };
    return ElementConfigResource;
  }();
  function validateBehaviorName(name, type) {
    if (/[A-Z]/.test(name)) {
      var newName = _hyphenate(name);
      LogManager.getLogger('templating').warn('\'' + name + '\' is not a valid ' + type + ' name and has been converted to \'' + newName + '\'. Upper-case letters are not allowed because the DOM is not case-sensitive.');
      return newName;
    }
    return name;
  }
  function resource(instance) {
    return function(target) {
      _aureliaMetadata.metadata.define(_aureliaMetadata.metadata.resource, instance, target);
    };
  }
  function behavior(override) {
    return function(target) {
      if (override instanceof HtmlBehaviorResource) {
        _aureliaMetadata.metadata.define(_aureliaMetadata.metadata.resource, override, target);
      } else {
        var r = _aureliaMetadata.metadata.getOrCreateOwn(_aureliaMetadata.metadata.resource, HtmlBehaviorResource, target);
        Object.assign(r, override);
      }
    };
  }
  function customElement(name) {
    return function(target) {
      var r = _aureliaMetadata.metadata.getOrCreateOwn(_aureliaMetadata.metadata.resource, HtmlBehaviorResource, target);
      r.elementName = validateBehaviorName(name, 'custom element');
    };
  }
  function customAttribute(name, defaultBindingMode) {
    return function(target) {
      var r = _aureliaMetadata.metadata.getOrCreateOwn(_aureliaMetadata.metadata.resource, HtmlBehaviorResource, target);
      r.attributeName = validateBehaviorName(name, 'custom attribute');
      r.attributeDefaultBindingMode = defaultBindingMode;
    };
  }
  function templateController(target) {
    var deco = function deco(t) {
      var r = _aureliaMetadata.metadata.getOrCreateOwn(_aureliaMetadata.metadata.resource, HtmlBehaviorResource, t);
      r.liftsContent = true;
    };
    return target ? deco(target) : deco;
  }
  function bindable(nameOrConfigOrTarget, key, descriptor) {
    var deco = function deco(target, key2, descriptor2) {
      var actualTarget = key2 ? target.constructor : target;
      var r = _aureliaMetadata.metadata.getOrCreateOwn(_aureliaMetadata.metadata.resource, HtmlBehaviorResource, actualTarget);
      var prop = void 0;
      if (key2) {
        nameOrConfigOrTarget = nameOrConfigOrTarget || {};
        nameOrConfigOrTarget.name = key2;
      }
      prop = new BindableProperty(nameOrConfigOrTarget);
      return prop.registerWith(actualTarget, r, descriptor2);
    };
    if (!nameOrConfigOrTarget) {
      return deco;
    }
    if (key) {
      var target = nameOrConfigOrTarget;
      nameOrConfigOrTarget = null;
      return deco(target, key, descriptor);
    }
    return deco;
  }
  function dynamicOptions(target) {
    var deco = function deco(t) {
      var r = _aureliaMetadata.metadata.getOrCreateOwn(_aureliaMetadata.metadata.resource, HtmlBehaviorResource, t);
      r.hasDynamicOptions = true;
    };
    return target ? deco(target) : deco;
  }
  function useShadowDOM(target) {
    var deco = function deco(t) {
      var r = _aureliaMetadata.metadata.getOrCreateOwn(_aureliaMetadata.metadata.resource, HtmlBehaviorResource, t);
      r.targetShadowDOM = true;
    };
    return target ? deco(target) : deco;
  }
  function processAttributes(processor) {
    return function(t) {
      var r = _aureliaMetadata.metadata.getOrCreateOwn(_aureliaMetadata.metadata.resource, HtmlBehaviorResource, t);
      r.processAttributes = processor;
    };
  }
  function doNotProcessContent() {
    return false;
  }
  function processContent(processor) {
    return function(t) {
      var r = _aureliaMetadata.metadata.getOrCreateOwn(_aureliaMetadata.metadata.resource, HtmlBehaviorResource, t);
      r.processContent = processor || doNotProcessContent;
    };
  }
  function containerless(target) {
    var deco = function deco(t) {
      var r = _aureliaMetadata.metadata.getOrCreateOwn(_aureliaMetadata.metadata.resource, HtmlBehaviorResource, t);
      r.containerless = true;
    };
    return target ? deco(target) : deco;
  }
  function useViewStrategy(strategy) {
    return function(target) {
      _aureliaMetadata.metadata.define(ViewLocator.viewStrategyMetadataKey, strategy, target);
    };
  }
  function useView(path) {
    return useViewStrategy(new RelativeViewStrategy(path));
  }
  function inlineView(markup, dependencies, dependencyBaseUrl) {
    return useViewStrategy(new InlineViewStrategy(markup, dependencies, dependencyBaseUrl));
  }
  function noView(target) {
    var deco = function deco(t) {
      _aureliaMetadata.metadata.define(ViewLocator.viewStrategyMetadataKey, new NoViewStrategy(), t);
    };
    return target ? deco(target) : deco;
  }
  function elementConfig(target) {
    var deco = function deco(t) {
      _aureliaMetadata.metadata.define(_aureliaMetadata.metadata.resource, new ElementConfigResource(), t);
    };
    return target ? deco(target) : deco;
  }
  var TemplatingEngine = exports.TemplatingEngine = (_dec10 = (0, _aureliaDependencyInjection.inject)(_aureliaDependencyInjection.Container, ModuleAnalyzer, ViewCompiler, CompositionEngine), _dec10(_class18 = function() {
    function TemplatingEngine(container, moduleAnalyzer, viewCompiler, compositionEngine) {
      _classCallCheck(this, TemplatingEngine);
      this._container = container;
      this._moduleAnalyzer = moduleAnalyzer;
      this._viewCompiler = viewCompiler;
      this._compositionEngine = compositionEngine;
      container.registerInstance(Animator, Animator.instance = new Animator());
    }
    TemplatingEngine.prototype.configureAnimator = function configureAnimator(animator) {
      this._container.unregister(Animator);
      this._container.registerInstance(Animator, Animator.instance = animator);
    };
    TemplatingEngine.prototype.compose = function compose(context) {
      return this._compositionEngine.compose(context);
    };
    TemplatingEngine.prototype.enhance = function enhance(instruction) {
      if (instruction instanceof _aureliaPal.DOM.Element) {
        instruction = {element: instruction};
      }
      var compilerInstructions = {};
      var resources = instruction.resources || this._container.get(ViewResources);
      this._viewCompiler._compileNode(instruction.element, resources, compilerInstructions, instruction.element.parentNode, 'root', true);
      var factory = new ViewFactory(instruction.element, compilerInstructions, resources);
      var container = instruction.container || this._container.createChild();
      var view = factory.create(container, BehaviorInstruction.enhance());
      view.bind(instruction.bindingContext || {});
      return view;
    };
    TemplatingEngine.prototype.createControllerForUnitTest = function createControllerForUnitTest(viewModelType, attributesFromHTML) {
      var _moduleAnalyzer$analy;
      var exportName = viewModelType.name;
      var resourceModule = this._moduleAnalyzer.analyze('test-module', (_moduleAnalyzer$analy = {}, _moduleAnalyzer$analy[exportName] = viewModelType, _moduleAnalyzer$analy), exportName);
      var description = resourceModule.mainResource;
      description.initialize(this._container);
      var viewModel = this._container.get(viewModelType);
      var instruction = BehaviorInstruction.unitTest(description, attributesFromHTML);
      return new Controller(description.metadata, instruction, viewModel);
    };
    TemplatingEngine.prototype.createViewModelForUnitTest = function createViewModelForUnitTest(viewModelType, attributesFromHTML, bindingContext) {
      var controller = this.createControllerForUnitTest(viewModelType, attributesFromHTML);
      controller.bind((0, _aureliaBinding.createScopeForTest)(bindingContext));
      return controller.viewModel;
    };
    return TemplatingEngine;
  }()) || _class18);
});

})();
(function() {
var define = System.amdDefine;
define("npm:aurelia-templating@1.0.0-beta.1.2.2.js", ["npm:aurelia-templating@1.0.0-beta.1.2.2/aurelia-templating"], function(main) {
  return main;
});

})();
(function() {
var define = System.amdDefine;
define("npm:aurelia-path@1.0.0-beta.1.2.1/aurelia-path.js", ["exports"], function(exports) {
  'use strict';
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.relativeToFile = relativeToFile;
  exports.join = join;
  exports.buildQueryString = buildQueryString;
  exports.parseQueryString = parseQueryString;
  var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
    return typeof obj;
  } : function(obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;
  };
  function trimDots(ary) {
    for (var i = 0; i < ary.length; ++i) {
      var part = ary[i];
      if (part === '.') {
        ary.splice(i, 1);
        i -= 1;
      } else if (part === '..') {
        if (i === 0 || i === 1 && ary[2] === '..' || ary[i - 1] === '..') {
          continue;
        } else if (i > 0) {
          ary.splice(i - 1, 2);
          i -= 2;
        }
      }
    }
  }
  function relativeToFile(name, file) {
    var fileParts = file && file.split('/');
    var nameParts = name.trim().split('/');
    if (nameParts[0].charAt(0) === '.' && fileParts) {
      var normalizedBaseParts = fileParts.slice(0, fileParts.length - 1);
      nameParts.unshift.apply(nameParts, normalizedBaseParts);
    }
    trimDots(nameParts);
    return nameParts.join('/');
  }
  function join(path1, path2) {
    if (!path1) {
      return path2;
    }
    if (!path2) {
      return path1;
    }
    var schemeMatch = path1.match(/^([^/]*?:)\//);
    var scheme = schemeMatch && schemeMatch.length > 0 ? schemeMatch[1] : '';
    path1 = path1.substr(scheme.length);
    var urlPrefix = void 0;
    if (path1.indexOf('///') === 0 && scheme === 'file:') {
      urlPrefix = '///';
    } else if (path1.indexOf('//') === 0) {
      urlPrefix = '//';
    } else if (path1.indexOf('/') === 0) {
      urlPrefix = '/';
    } else {
      urlPrefix = '';
    }
    var trailingSlash = path2.slice(-1) === '/' ? '/' : '';
    var url1 = path1.split('/');
    var url2 = path2.split('/');
    var url3 = [];
    for (var i = 0,
        ii = url1.length; i < ii; ++i) {
      if (url1[i] === '..') {
        url3.pop();
      } else if (url1[i] === '.' || url1[i] === '') {
        continue;
      } else {
        url3.push(url1[i]);
      }
    }
    for (var _i = 0,
        _ii = url2.length; _i < _ii; ++_i) {
      if (url2[_i] === '..') {
        url3.pop();
      } else if (url2[_i] === '.' || url2[_i] === '') {
        continue;
      } else {
        url3.push(url2[_i]);
      }
    }
    return scheme + urlPrefix + url3.join('/') + trailingSlash;
  }
  var encode = encodeURIComponent;
  var encodeKey = function encodeKey(k) {
    return encode(k).replace('%24', '$');
  };
  function buildParam(key, value) {
    var result = [];
    if (value === null || value === undefined) {
      return result;
    }
    if (Array.isArray(value)) {
      for (var i = 0,
          l = value.length; i < l; i++) {
        var arrayKey = key + '[' + (_typeof(value[i]) === 'object' && value[i] !== null ? i : '') + ']';
        result = result.concat(buildParam(arrayKey, value[i]));
      }
    } else if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {
      for (var propertyName in value) {
        result = result.concat(buildParam(key + '[' + propertyName + ']', value[propertyName]));
      }
    } else {
      result.push(encodeKey(key) + '=' + encode(value));
    }
    return result;
  }
  function buildQueryString(params) {
    var pairs = [];
    var keys = Object.keys(params || {}).sort();
    for (var i = 0,
        len = keys.length; i < len; i++) {
      var key = keys[i];
      pairs = pairs.concat(buildParam(key, params[key]));
    }
    if (pairs.length === 0) {
      return '';
    }
    return pairs.join('&');
  }
  function processScalarParam(existedParam, value, isPrimitive) {
    if (Array.isArray(existedParam)) {
      existedParam.push(value);
      return existedParam;
    }
    if (existedParam !== undefined) {
      return isPrimitive ? value : [existedParam, value];
    }
    return value;
  }
  function parseComplexParam(queryParams, keys, value) {
    var currentParams = queryParams;
    var keysLastIndex = keys.length - 1;
    for (var j = 0; j <= keysLastIndex; j++) {
      var key = keys[j] === '' ? currentParams.length : keys[j];
      if (j < keysLastIndex) {
        currentParams = currentParams[key] = currentParams[key] || (isNaN(keys[j + 1]) ? {} : []);
      } else {
        currentParams = currentParams[key] = value;
      }
    }
  }
  function parseQueryString(queryString) {
    var queryParams = {};
    if (!queryString || typeof queryString !== 'string') {
      return queryParams;
    }
    var query = queryString;
    if (query.charAt(0) === '?') {
      query = query.substr(1);
    }
    var pairs = query.replace(/\+/g, ' ').split('&');
    for (var i = 0; i < pairs.length; i++) {
      var pair = pairs[i].split('=');
      var key = decodeURIComponent(pair[0]);
      var isPrimitive = false;
      if (!key) {
        continue;
      }
      var keys = key.split('][');
      var keysLastIndex = keys.length - 1;
      if (/\[/.test(keys[0]) && /\]$/.test(keys[keysLastIndex])) {
        keys[keysLastIndex] = keys[keysLastIndex].replace(/\]$/, '');
        keys = keys.shift().split('[').concat(keys);
        keysLastIndex = keys.length - 1;
      } else {
        isPrimitive = true;
        keysLastIndex = 0;
      }
      if (pair.length >= 2) {
        var value = pair[1] ? decodeURIComponent(pair[1]) : '';
        if (keysLastIndex) {
          parseComplexParam(queryParams, keys, value);
        } else {
          queryParams[key] = processScalarParam(queryParams[key], value, isPrimitive);
        }
      } else {
        queryParams[key] = true;
      }
    }
    return queryParams;
  }
});

})();
(function() {
var define = System.amdDefine;
define("npm:aurelia-path@1.0.0-beta.1.2.1.js", ["npm:aurelia-path@1.0.0-beta.1.2.1/aurelia-path"], function(main) {
  return main;
});

})();
(function() {
var define = System.amdDefine;
define("npm:aurelia-route-recognizer@1.0.0-beta.1.2.0/aurelia-route-recognizer.js", ["exports", "aurelia-path"], function(exports, _aureliaPath) {
  'use strict';
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.RouteRecognizer = exports.EpsilonSegment = exports.StarSegment = exports.DynamicSegment = exports.StaticSegment = exports.State = undefined;
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  var State = exports.State = function() {
    function State(charSpec) {
      _classCallCheck(this, State);
      this.charSpec = charSpec;
      this.nextStates = [];
    }
    State.prototype.get = function get(charSpec) {
      for (var _iterator = this.nextStates,
          _isArray = Array.isArray(_iterator),
          _i = 0,
          _iterator = _isArray ? _iterator : _iterator[Symbol.iterator](); ; ) {
        var _ref;
        if (_isArray) {
          if (_i >= _iterator.length)
            break;
          _ref = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done)
            break;
          _ref = _i.value;
        }
        var child = _ref;
        var isEqual = child.charSpec.validChars === charSpec.validChars && child.charSpec.invalidChars === charSpec.invalidChars;
        if (isEqual) {
          return child;
        }
      }
    };
    State.prototype.put = function put(charSpec) {
      var state = this.get(charSpec);
      if (state) {
        return state;
      }
      state = new State(charSpec);
      this.nextStates.push(state);
      if (charSpec.repeat) {
        state.nextStates.push(state);
      }
      return state;
    };
    State.prototype.match = function match(ch) {
      var nextStates = this.nextStates;
      var results = [];
      for (var i = 0,
          l = nextStates.length; i < l; i++) {
        var child = nextStates[i];
        var charSpec = child.charSpec;
        if (charSpec.validChars !== undefined) {
          if (charSpec.validChars.indexOf(ch) !== -1) {
            results.push(child);
          }
        } else if (charSpec.invalidChars !== undefined) {
          if (charSpec.invalidChars.indexOf(ch) === -1) {
            results.push(child);
          }
        }
      }
      return results;
    };
    return State;
  }();
  var specials = ['/', '.', '*', '+', '?', '|', '(', ')', '[', ']', '{', '}', '\\'];
  var escapeRegex = new RegExp('(\\' + specials.join('|\\') + ')', 'g');
  var StaticSegment = exports.StaticSegment = function() {
    function StaticSegment(string) {
      _classCallCheck(this, StaticSegment);
      this.string = string;
    }
    StaticSegment.prototype.eachChar = function eachChar(callback) {
      var s = this.string;
      for (var i = 0,
          ii = s.length; i < ii; ++i) {
        var ch = s[i];
        callback({validChars: ch});
      }
    };
    StaticSegment.prototype.regex = function regex() {
      return this.string.replace(escapeRegex, '\\$1');
    };
    StaticSegment.prototype.generate = function generate() {
      return this.string;
    };
    return StaticSegment;
  }();
  var DynamicSegment = exports.DynamicSegment = function() {
    function DynamicSegment(name) {
      _classCallCheck(this, DynamicSegment);
      this.name = name;
    }
    DynamicSegment.prototype.eachChar = function eachChar(callback) {
      callback({
        invalidChars: '/',
        repeat: true
      });
    };
    DynamicSegment.prototype.regex = function regex() {
      return '([^/]+)';
    };
    DynamicSegment.prototype.generate = function generate(params, consumed) {
      consumed[this.name] = true;
      return params[this.name];
    };
    return DynamicSegment;
  }();
  var StarSegment = exports.StarSegment = function() {
    function StarSegment(name) {
      _classCallCheck(this, StarSegment);
      this.name = name;
    }
    StarSegment.prototype.eachChar = function eachChar(callback) {
      callback({
        invalidChars: '',
        repeat: true
      });
    };
    StarSegment.prototype.regex = function regex() {
      return '(.+)';
    };
    StarSegment.prototype.generate = function generate(params, consumed) {
      consumed[this.name] = true;
      return params[this.name];
    };
    return StarSegment;
  }();
  var EpsilonSegment = exports.EpsilonSegment = function() {
    function EpsilonSegment() {
      _classCallCheck(this, EpsilonSegment);
    }
    EpsilonSegment.prototype.eachChar = function eachChar() {};
    EpsilonSegment.prototype.regex = function regex() {
      return '';
    };
    EpsilonSegment.prototype.generate = function generate() {
      return '';
    };
    return EpsilonSegment;
  }();
  var RouteRecognizer = exports.RouteRecognizer = function() {
    function RouteRecognizer() {
      _classCallCheck(this, RouteRecognizer);
      this.rootState = new State();
      this.names = {};
    }
    RouteRecognizer.prototype.add = function add(route) {
      var _this = this;
      if (Array.isArray(route)) {
        route.forEach(function(r) {
          return _this.add(r);
        });
        return undefined;
      }
      var currentState = this.rootState;
      var regex = '^';
      var types = {
        statics: 0,
        dynamics: 0,
        stars: 0
      };
      var names = [];
      var routeName = route.handler.name;
      var isEmpty = true;
      var segments = parse(route.path, names, types);
      for (var i = 0,
          ii = segments.length; i < ii; i++) {
        var segment = segments[i];
        if (segment instanceof EpsilonSegment) {
          continue;
        }
        isEmpty = false;
        currentState = currentState.put({validChars: '/'});
        regex += '/';
        currentState = addSegment(currentState, segment);
        regex += segment.regex();
      }
      if (isEmpty) {
        currentState = currentState.put({validChars: '/'});
        regex += '/';
      }
      var handlers = [{
        handler: route.handler,
        names: names
      }];
      if (routeName) {
        var routeNames = Array.isArray(routeName) ? routeName : [routeName];
        for (var _i2 = 0; _i2 < routeNames.length; _i2++) {
          this.names[routeNames[_i2]] = {
            segments: segments,
            handlers: handlers
          };
        }
      }
      currentState.handlers = handlers;
      currentState.regex = new RegExp(regex + '$');
      currentState.types = types;
      return currentState;
    };
    RouteRecognizer.prototype.handlersFor = function handlersFor(name) {
      var route = this.names[name];
      if (!route) {
        throw new Error('There is no route named ' + name);
      }
      return [].concat(route.handlers);
    };
    RouteRecognizer.prototype.hasRoute = function hasRoute(name) {
      return !!this.names[name];
    };
    RouteRecognizer.prototype.generate = function generate(name, params) {
      var routeParams = Object.assign({}, params);
      var route = this.names[name];
      if (!route) {
        throw new Error('There is no route named ' + name);
      }
      var segments = route.segments;
      var consumed = {};
      var output = '';
      for (var i = 0,
          l = segments.length; i < l; i++) {
        var segment = segments[i];
        if (segment instanceof EpsilonSegment) {
          continue;
        }
        output += '/';
        var segmentValue = segment.generate(routeParams, consumed);
        if (segmentValue === null || segmentValue === undefined) {
          throw new Error('A value is required for route parameter \'' + segment.name + '\' in route \'' + name + '\'.');
        }
        output += segmentValue;
      }
      if (output.charAt(0) !== '/') {
        output = '/' + output;
      }
      for (var param in consumed) {
        delete routeParams[param];
      }
      var queryString = (0, _aureliaPath.buildQueryString)(routeParams);
      output += queryString ? '?' + queryString : '';
      return output;
    };
    RouteRecognizer.prototype.recognize = function recognize(path) {
      var states = [this.rootState];
      var queryParams = {};
      var isSlashDropped = false;
      var normalizedPath = path;
      var queryStart = normalizedPath.indexOf('?');
      if (queryStart !== -1) {
        var queryString = normalizedPath.substr(queryStart + 1, normalizedPath.length);
        normalizedPath = normalizedPath.substr(0, queryStart);
        queryParams = (0, _aureliaPath.parseQueryString)(queryString);
      }
      normalizedPath = decodeURI(normalizedPath);
      if (normalizedPath.charAt(0) !== '/') {
        normalizedPath = '/' + normalizedPath;
      }
      var pathLen = normalizedPath.length;
      if (pathLen > 1 && normalizedPath.charAt(pathLen - 1) === '/') {
        normalizedPath = normalizedPath.substr(0, pathLen - 1);
        isSlashDropped = true;
      }
      for (var i = 0,
          l = normalizedPath.length; i < l; i++) {
        states = recognizeChar(states, normalizedPath.charAt(i));
        if (!states.length) {
          break;
        }
      }
      var solutions = [];
      for (var _i3 = 0,
          _l = states.length; _i3 < _l; _i3++) {
        if (states[_i3].handlers) {
          solutions.push(states[_i3]);
        }
      }
      states = sortSolutions(solutions);
      var state = solutions[0];
      if (state && state.handlers) {
        if (isSlashDropped && state.regex.source.slice(-5) === '(.+)$') {
          normalizedPath = normalizedPath + '/';
        }
        return findHandler(state, normalizedPath, queryParams);
      }
    };
    return RouteRecognizer;
  }();
  var RecognizeResults = function RecognizeResults(queryParams) {
    _classCallCheck(this, RecognizeResults);
    this.splice = Array.prototype.splice;
    this.slice = Array.prototype.slice;
    this.push = Array.prototype.push;
    this.length = 0;
    this.queryParams = queryParams || {};
  };
  function parse(route, names, types) {
    var normalizedRoute = route;
    if (route.charAt(0) === '/') {
      normalizedRoute = route.substr(1);
    }
    var results = [];
    var splitRoute = normalizedRoute.split('/');
    for (var i = 0,
        ii = splitRoute.length; i < ii; ++i) {
      var segment = splitRoute[i];
      var match = segment.match(/^:([^\/]+)$/);
      if (match) {
        results.push(new DynamicSegment(match[1]));
        names.push(match[1]);
        types.dynamics++;
        continue;
      }
      match = segment.match(/^\*([^\/]+)$/);
      if (match) {
        results.push(new StarSegment(match[1]));
        names.push(match[1]);
        types.stars++;
      } else if (segment === '') {
        results.push(new EpsilonSegment());
      } else {
        results.push(new StaticSegment(segment));
        types.statics++;
      }
    }
    return results;
  }
  function sortSolutions(states) {
    return states.sort(function(a, b) {
      if (a.types.stars !== b.types.stars) {
        return a.types.stars - b.types.stars;
      }
      if (a.types.stars) {
        if (a.types.statics !== b.types.statics) {
          return b.types.statics - a.types.statics;
        }
        if (a.types.dynamics !== b.types.dynamics) {
          return b.types.dynamics - a.types.dynamics;
        }
      }
      if (a.types.dynamics !== b.types.dynamics) {
        return a.types.dynamics - b.types.dynamics;
      }
      if (a.types.statics !== b.types.statics) {
        return b.types.statics - a.types.statics;
      }
      return 0;
    });
  }
  function recognizeChar(states, ch) {
    var nextStates = [];
    for (var i = 0,
        l = states.length; i < l; i++) {
      var state = states[i];
      nextStates.push.apply(nextStates, state.match(ch));
    }
    return nextStates;
  }
  function findHandler(state, path, queryParams) {
    var handlers = state.handlers;
    var regex = state.regex;
    var captures = path.match(regex);
    var currentCapture = 1;
    var result = new RecognizeResults(queryParams);
    for (var i = 0,
        l = handlers.length; i < l; i++) {
      var _handler = handlers[i];
      var _names = _handler.names;
      var _params = {};
      for (var j = 0,
          m = _names.length; j < m; j++) {
        _params[_names[j]] = captures[currentCapture++];
      }
      result.push({
        handler: _handler.handler,
        params: _params,
        isDynamic: !!_names.length
      });
    }
    return result;
  }
  function addSegment(currentState, segment) {
    var state = currentState;
    segment.eachChar(function(ch) {
      state = state.put(ch);
    });
    return state;
  }
});

})();
(function() {
var define = System.amdDefine;
define("npm:aurelia-route-recognizer@1.0.0-beta.1.2.0.js", ["npm:aurelia-route-recognizer@1.0.0-beta.1.2.0/aurelia-route-recognizer"], function(main) {
  return main;
});

})();
(function() {
var define = System.amdDefine;
define("npm:aurelia-metadata@1.0.0-beta.1.2.0/aurelia-metadata.js", ["exports", "aurelia-pal"], function(exports, _aureliaPal) {
  'use strict';
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.Origin = exports.metadata = undefined;
  exports.decorators = decorators;
  exports.deprecated = deprecated;
  exports.mixin = mixin;
  exports.protocol = protocol;
  var _extends = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  var metadata = exports.metadata = {
    resource: 'aurelia:resource',
    paramTypes: 'design:paramtypes',
    properties: 'design:properties',
    get: function get(metadataKey, target, targetKey) {
      if (!target) {
        return undefined;
      }
      var result = metadata.getOwn(metadataKey, target, targetKey);
      return result === undefined ? metadata.get(metadataKey, Object.getPrototypeOf(target), targetKey) : result;
    },
    getOwn: function getOwn(metadataKey, target, targetKey) {
      if (!target) {
        return undefined;
      }
      return Reflect.getOwnMetadata(metadataKey, target, targetKey);
    },
    define: function define(metadataKey, metadataValue, target, targetKey) {
      Reflect.defineMetadata(metadataKey, metadataValue, target, targetKey);
    },
    getOrCreateOwn: function getOrCreateOwn(metadataKey, Type, target, targetKey) {
      var result = metadata.getOwn(metadataKey, target, targetKey);
      if (result === undefined) {
        result = new Type();
        Reflect.defineMetadata(metadataKey, result, target, targetKey);
      }
      return result;
    }
  };
  var originStorage = new Map();
  var unknownOrigin = Object.freeze({
    moduleId: undefined,
    moduleMember: undefined
  });
  var Origin = exports.Origin = function() {
    function Origin(moduleId, moduleMember) {
      _classCallCheck(this, Origin);
      this.moduleId = moduleId;
      this.moduleMember = moduleMember;
    }
    Origin.get = function get(fn) {
      var origin = originStorage.get(fn);
      if (origin === undefined) {
        _aureliaPal.PLATFORM.eachModule(function(key, value) {
          for (var name in value) {
            var exp = value[name];
            if (exp === fn) {
              originStorage.set(fn, origin = new Origin(key, name));
              return true;
            }
          }
          if (value === fn) {
            originStorage.set(fn, origin = new Origin(key, 'default'));
            return true;
          }
        });
      }
      return origin || unknownOrigin;
    };
    Origin.set = function set(fn, origin) {
      originStorage.set(fn, origin);
    };
    return Origin;
  }();
  function decorators() {
    for (var _len = arguments.length,
        rest = Array(_len),
        _key = 0; _key < _len; _key++) {
      rest[_key] = arguments[_key];
    }
    var applicator = function applicator(target, key, descriptor) {
      var i = rest.length;
      if (key) {
        descriptor = descriptor || {
          value: target[key],
          writable: true,
          configurable: true,
          enumerable: true
        };
        while (i--) {
          descriptor = rest[i](target, key, descriptor) || descriptor;
        }
        Object.defineProperty(target, key, descriptor);
      } else {
        while (i--) {
          target = rest[i](target) || target;
        }
      }
      return target;
    };
    applicator.on = applicator;
    return applicator;
  }
  function deprecated(optionsOrTarget, maybeKey, maybeDescriptor) {
    function decorator(target, key, descriptor) {
      var methodSignature = target.constructor.name + '#' + key;
      var options = maybeKey ? {} : optionsOrTarget || {};
      var message = 'DEPRECATION - ' + methodSignature;
      if (typeof descriptor.value !== 'function') {
        throw new SyntaxError('Only methods can be marked as deprecated.');
      }
      if (options.message) {
        message += ' - ' + options.message;
      }
      return _extends({}, descriptor, {value: function deprecationWrapper() {
          if (options.error) {
            throw new Error(message);
          } else {
            console.warn(message);
          }
          return descriptor.value.apply(this, arguments);
        }});
    }
    return maybeKey ? decorator(optionsOrTarget, maybeKey, maybeDescriptor) : decorator;
  }
  function mixin(behavior) {
    var instanceKeys = Object.keys(behavior);
    function _mixin(possible) {
      var decorator = function decorator(target) {
        var resolvedTarget = typeof target === 'function' ? target.prototype : target;
        var i = instanceKeys.length;
        while (i--) {
          var property = instanceKeys[i];
          Object.defineProperty(resolvedTarget, property, {
            value: behavior[property],
            writable: true
          });
        }
      };
      return possible ? decorator(possible) : decorator;
    }
    return _mixin;
  }
  function alwaysValid() {
    return true;
  }
  function noCompose() {}
  function ensureProtocolOptions(options) {
    if (options === undefined) {
      options = {};
    } else if (typeof options === 'function') {
      options = {validate: options};
    }
    if (!options.validate) {
      options.validate = alwaysValid;
    }
    if (!options.compose) {
      options.compose = noCompose;
    }
    return options;
  }
  function createProtocolValidator(validate) {
    return function(target) {
      var result = validate(target);
      return result === true;
    };
  }
  function createProtocolAsserter(name, validate) {
    return function(target) {
      var result = validate(target);
      if (result !== true) {
        throw new Error(result || name + ' was not correctly implemented.');
      }
    };
  }
  function protocol(name, options) {
    options = ensureProtocolOptions(options);
    var result = function result(target) {
      var resolvedTarget = typeof target === 'function' ? target.prototype : target;
      options.compose(resolvedTarget);
      result.assert(resolvedTarget);
      Object.defineProperty(resolvedTarget, 'protocol:' + name, {
        enumerable: false,
        configurable: false,
        writable: false,
        value: true
      });
    };
    result.validate = createProtocolValidator(options.validate);
    result.assert = createProtocolAsserter(name, options.validate);
    return result;
  }
  protocol.create = function(name, options) {
    options = ensureProtocolOptions(options);
    var hidden = 'protocol:' + name;
    var result = function result(target) {
      var decorator = protocol(name, options);
      return target ? decorator(target) : decorator;
    };
    result.decorates = function(obj) {
      return obj[hidden] === true;
    };
    result.validate = createProtocolValidator(options.validate);
    result.assert = createProtocolAsserter(name, options.validate);
    return result;
  };
});

})();
(function() {
var define = System.amdDefine;
define("npm:aurelia-metadata@1.0.0-beta.1.2.0.js", ["npm:aurelia-metadata@1.0.0-beta.1.2.0/aurelia-metadata"], function(main) {
  return main;
});

})();
(function() {
var define = System.amdDefine;
define("npm:aurelia-dependency-injection@1.0.0-beta.1.2.0/aurelia-dependency-injection.js", ["exports", "aurelia-metadata", "aurelia-pal"], function(exports, _aureliaMetadata, _aureliaPal) {
  'use strict';
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.Container = exports.InvocationHandler = exports._emptyParameters = exports.SingletonRegistration = exports.TransientRegistration = exports.FactoryInvoker = exports.Factory = exports.StrategyResolver = exports.Parent = exports.Optional = exports.All = exports.Lazy = exports.resolver = undefined;
  exports.invoker = invoker;
  exports.factory = factory;
  exports.registration = registration;
  exports.transient = transient;
  exports.singleton = singleton;
  exports.autoinject = autoinject;
  exports.inject = inject;
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  var _dec,
      _class,
      _dec2,
      _class2,
      _dec3,
      _class3,
      _dec4,
      _class4,
      _dec5,
      _class5,
      _dec6,
      _class6,
      _classInvokers;
  var resolver = exports.resolver = _aureliaMetadata.protocol.create('aurelia:resolver', function(target) {
    if (!(typeof target.get === 'function')) {
      return 'Resolvers must implement: get(container: Container, key: any): any';
    }
    return true;
  });
  var Lazy = exports.Lazy = (_dec = resolver(), _dec(_class = function() {
    function Lazy(key) {
      _classCallCheck(this, Lazy);
      this._key = key;
    }
    Lazy.prototype.get = function get(container) {
      var _this = this;
      return function() {
        return container.get(_this._key);
      };
    };
    Lazy.of = function of(key) {
      return new Lazy(key);
    };
    return Lazy;
  }()) || _class);
  var All = exports.All = (_dec2 = resolver(), _dec2(_class2 = function() {
    function All(key) {
      _classCallCheck(this, All);
      this._key = key;
    }
    All.prototype.get = function get(container) {
      return container.getAll(this._key);
    };
    All.of = function of(key) {
      return new All(key);
    };
    return All;
  }()) || _class2);
  var Optional = exports.Optional = (_dec3 = resolver(), _dec3(_class3 = function() {
    function Optional(key) {
      var checkParent = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];
      _classCallCheck(this, Optional);
      this._key = key;
      this._checkParent = checkParent;
    }
    Optional.prototype.get = function get(container) {
      if (container.hasResolver(this._key, this._checkParent)) {
        return container.get(this._key);
      }
      return null;
    };
    Optional.of = function of(key) {
      var checkParent = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];
      return new Optional(key, checkParent);
    };
    return Optional;
  }()) || _class3);
  var Parent = exports.Parent = (_dec4 = resolver(), _dec4(_class4 = function() {
    function Parent(key) {
      _classCallCheck(this, Parent);
      this._key = key;
    }
    Parent.prototype.get = function get(container) {
      return container.parent ? container.parent.get(this._key) : null;
    };
    Parent.of = function of(key) {
      return new Parent(key);
    };
    return Parent;
  }()) || _class4);
  var StrategyResolver = exports.StrategyResolver = (_dec5 = resolver(), _dec5(_class5 = function() {
    function StrategyResolver(strategy, state) {
      _classCallCheck(this, StrategyResolver);
      this.strategy = strategy;
      this.state = state;
    }
    StrategyResolver.prototype.get = function get(container, key) {
      switch (this.strategy) {
        case 0:
          return this.state;
        case 1:
          var singleton = container.invoke(this.state);
          this.state = singleton;
          this.strategy = 0;
          return singleton;
        case 2:
          return container.invoke(this.state);
        case 3:
          return this.state(container, key, this);
        case 4:
          return this.state[0].get(container, key);
        case 5:
          return container.get(this.state);
        default:
          throw new Error('Invalid strategy: ' + this.strategy);
      }
    };
    return StrategyResolver;
  }()) || _class5);
  var Factory = exports.Factory = (_dec6 = resolver(), _dec6(_class6 = function() {
    function Factory(key) {
      _classCallCheck(this, Factory);
      this._key = key;
    }
    Factory.prototype.get = function get(container) {
      var _this2 = this;
      return function() {
        for (var _len = arguments.length,
            rest = Array(_len),
            _key = 0; _key < _len; _key++) {
          rest[_key] = arguments[_key];
        }
        return container.invoke(_this2._key, rest);
      };
    };
    Factory.of = function of(key) {
      return new Factory(key);
    };
    return Factory;
  }()) || _class6);
  function invoker(value) {
    return function(target) {
      _aureliaMetadata.metadata.define(_aureliaMetadata.metadata.invoker, value, target);
    };
  }
  function factory(potentialTarget) {
    var deco = function deco(target) {
      _aureliaMetadata.metadata.define(_aureliaMetadata.metadata.invoker, FactoryInvoker.instance, target);
    };
    return potentialTarget ? deco(potentialTarget) : deco;
  }
  var FactoryInvoker = exports.FactoryInvoker = function() {
    function FactoryInvoker() {
      _classCallCheck(this, FactoryInvoker);
    }
    FactoryInvoker.prototype.invoke = function invoke(container, fn, dependencies) {
      var i = dependencies.length;
      var args = new Array(i);
      while (i--) {
        args[i] = container.get(dependencies[i]);
      }
      return fn.apply(undefined, args);
    };
    FactoryInvoker.prototype.invokeWithDynamicDependencies = function invokeWithDynamicDependencies(container, fn, staticDependencies, dynamicDependencies) {
      var i = staticDependencies.length;
      var args = new Array(i);
      while (i--) {
        args[i] = container.get(staticDependencies[i]);
      }
      if (dynamicDependencies !== undefined) {
        args = args.concat(dynamicDependencies);
      }
      return fn.apply(undefined, args);
    };
    return FactoryInvoker;
  }();
  FactoryInvoker.instance = new FactoryInvoker();
  function registration(value) {
    return function(target) {
      _aureliaMetadata.metadata.define(_aureliaMetadata.metadata.registration, value, target);
    };
  }
  function transient(key) {
    return registration(new TransientRegistration(key));
  }
  function singleton(keyOrRegisterInChild) {
    var registerInChild = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];
    return registration(new SingletonRegistration(keyOrRegisterInChild, registerInChild));
  }
  var TransientRegistration = exports.TransientRegistration = function() {
    function TransientRegistration(key) {
      _classCallCheck(this, TransientRegistration);
      this._key = key;
    }
    TransientRegistration.prototype.registerResolver = function registerResolver(container, key, fn) {
      var resolver = new StrategyResolver(2, fn);
      container.registerResolver(this._key || key, resolver);
      return resolver;
    };
    return TransientRegistration;
  }();
  var SingletonRegistration = exports.SingletonRegistration = function() {
    function SingletonRegistration(keyOrRegisterInChild) {
      var registerInChild = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];
      _classCallCheck(this, SingletonRegistration);
      if (typeof keyOrRegisterInChild === 'boolean') {
        this._registerInChild = keyOrRegisterInChild;
      } else {
        this._key = keyOrRegisterInChild;
        this._registerInChild = registerInChild;
      }
    }
    SingletonRegistration.prototype.registerResolver = function registerResolver(container, key, fn) {
      var resolver = new StrategyResolver(1, fn);
      if (this._registerInChild) {
        container.registerResolver(this._key || key, resolver);
      } else {
        container.root.registerResolver(this._key || key, resolver);
      }
      return resolver;
    };
    return SingletonRegistration;
  }();
  var badKeyError = 'key/value cannot be null or undefined. Are you trying to inject/register something that doesn\'t exist with DI?';
  var _emptyParameters = exports._emptyParameters = Object.freeze([]);
  _aureliaMetadata.metadata.registration = 'aurelia:registration';
  _aureliaMetadata.metadata.invoker = 'aurelia:invoker';
  var resolverDecorates = resolver.decorates;
  var InvocationHandler = exports.InvocationHandler = function() {
    function InvocationHandler(fn, invoker, dependencies) {
      _classCallCheck(this, InvocationHandler);
      this.fn = fn;
      this.invoker = invoker;
      this.dependencies = dependencies;
    }
    InvocationHandler.prototype.invoke = function invoke(container, dynamicDependencies) {
      return dynamicDependencies !== undefined ? this.invoker.invokeWithDynamicDependencies(container, this.fn, this.dependencies, dynamicDependencies) : this.invoker.invoke(container, this.fn, this.dependencies);
    };
    return InvocationHandler;
  }();
  function invokeWithDynamicDependencies(container, fn, staticDependencies, dynamicDependencies) {
    var i = staticDependencies.length;
    var args = new Array(i);
    while (i--) {
      args[i] = container.get(staticDependencies[i]);
    }
    if (dynamicDependencies !== undefined) {
      args = args.concat(dynamicDependencies);
    }
    return Reflect.construct(fn, args);
  }
  var classInvokers = (_classInvokers = {}, _classInvokers[0] = {
    invoke: function invoke(container, Type) {
      return new Type();
    },
    invokeWithDynamicDependencies: invokeWithDynamicDependencies
  }, _classInvokers[1] = {
    invoke: function invoke(container, Type, deps) {
      return new Type(container.get(deps[0]));
    },
    invokeWithDynamicDependencies: invokeWithDynamicDependencies
  }, _classInvokers[2] = {
    invoke: function invoke(container, Type, deps) {
      return new Type(container.get(deps[0]), container.get(deps[1]));
    },
    invokeWithDynamicDependencies: invokeWithDynamicDependencies
  }, _classInvokers[3] = {
    invoke: function invoke(container, Type, deps) {
      return new Type(container.get(deps[0]), container.get(deps[1]), container.get(deps[2]));
    },
    invokeWithDynamicDependencies: invokeWithDynamicDependencies
  }, _classInvokers[4] = {
    invoke: function invoke(container, Type, deps) {
      return new Type(container.get(deps[0]), container.get(deps[1]), container.get(deps[2]), container.get(deps[3]));
    },
    invokeWithDynamicDependencies: invokeWithDynamicDependencies
  }, _classInvokers[5] = {
    invoke: function invoke(container, Type, deps) {
      return new Type(container.get(deps[0]), container.get(deps[1]), container.get(deps[2]), container.get(deps[3]), container.get(deps[4]));
    },
    invokeWithDynamicDependencies: invokeWithDynamicDependencies
  }, _classInvokers.fallback = {
    invoke: invokeWithDynamicDependencies,
    invokeWithDynamicDependencies: invokeWithDynamicDependencies
  }, _classInvokers);
  function getDependencies(f) {
    if (!f.hasOwnProperty('inject')) {
      return [];
    }
    if (typeof f.inject === 'function') {
      return f.inject();
    }
    return f.inject;
  }
  var Container = exports.Container = function() {
    function Container(configuration) {
      _classCallCheck(this, Container);
      if (configuration === undefined) {
        configuration = {};
      }
      this._configuration = configuration;
      this._onHandlerCreated = configuration.onHandlerCreated;
      this._handlers = configuration.handlers || (configuration.handlers = new Map());
      this._resolvers = new Map();
      this.root = this;
      this.parent = null;
    }
    Container.prototype.makeGlobal = function makeGlobal() {
      Container.instance = this;
      return this;
    };
    Container.prototype.setHandlerCreatedCallback = function setHandlerCreatedCallback(onHandlerCreated) {
      this._onHandlerCreated = onHandlerCreated;
      this._configuration.onHandlerCreated = onHandlerCreated;
    };
    Container.prototype.registerInstance = function registerInstance(key, instance) {
      this.registerResolver(key, new StrategyResolver(0, instance === undefined ? key : instance));
    };
    Container.prototype.registerSingleton = function registerSingleton(key, fn) {
      this.registerResolver(key, new StrategyResolver(1, fn === undefined ? key : fn));
    };
    Container.prototype.registerTransient = function registerTransient(key, fn) {
      this.registerResolver(key, new StrategyResolver(2, fn === undefined ? key : fn));
    };
    Container.prototype.registerHandler = function registerHandler(key, handler) {
      this.registerResolver(key, new StrategyResolver(3, handler));
    };
    Container.prototype.registerAlias = function registerAlias(originalKey, aliasKey) {
      this.registerResolver(aliasKey, new StrategyResolver(5, originalKey));
    };
    Container.prototype.registerResolver = function registerResolver(key, resolver) {
      if (key === null || key === undefined) {
        throw new Error(badKeyError);
      }
      var allResolvers = this._resolvers;
      var result = allResolvers.get(key);
      if (result === undefined) {
        allResolvers.set(key, resolver);
      } else if (result.strategy === 4) {
        result.state.push(resolver);
      } else {
        allResolvers.set(key, new StrategyResolver(4, [result, resolver]));
      }
    };
    Container.prototype.autoRegister = function autoRegister(fn, key) {
      var resolver = void 0;
      if (typeof fn === 'function') {
        var _registration = _aureliaMetadata.metadata.get(_aureliaMetadata.metadata.registration, fn);
        if (_registration === undefined) {
          resolver = new StrategyResolver(1, fn);
          this.registerResolver(key === undefined ? fn : key, resolver);
        } else {
          resolver = _registration.registerResolver(this, key === undefined ? fn : key, fn);
        }
      } else {
        resolver = new StrategyResolver(0, fn);
        this.registerResolver(key === undefined ? fn : key, resolver);
      }
      return resolver;
    };
    Container.prototype.autoRegisterAll = function autoRegisterAll(fns) {
      var i = fns.length;
      while (i--) {
        this.autoRegister(fns[i]);
      }
    };
    Container.prototype.unregister = function unregister(key) {
      this._resolvers.delete(key);
    };
    Container.prototype.hasResolver = function hasResolver(key) {
      var checkParent = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];
      if (key === null || key === undefined) {
        throw new Error(badKeyError);
      }
      return this._resolvers.has(key) || checkParent && this.parent !== null && this.parent.hasResolver(key, checkParent);
    };
    Container.prototype.get = function get(key) {
      if (key === null || key === undefined) {
        throw new Error(badKeyError);
      }
      if (key === Container) {
        return this;
      }
      if (resolverDecorates(key)) {
        return key.get(this, key);
      }
      var resolver = this._resolvers.get(key);
      if (resolver === undefined) {
        if (this.parent === null) {
          return this.autoRegister(key).get(this, key);
        }
        return this.parent._get(key);
      }
      return resolver.get(this, key);
    };
    Container.prototype._get = function _get(key) {
      var resolver = this._resolvers.get(key);
      if (resolver === undefined) {
        if (this.parent === null) {
          return this.autoRegister(key).get(this, key);
        }
        return this.parent._get(key);
      }
      return resolver.get(this, key);
    };
    Container.prototype.getAll = function getAll(key) {
      if (key === null || key === undefined) {
        throw new Error(badKeyError);
      }
      var resolver = this._resolvers.get(key);
      if (resolver === undefined) {
        if (this.parent === null) {
          return _emptyParameters;
        }
        return this.parent.getAll(key);
      }
      if (resolver.strategy === 4) {
        var state = resolver.state;
        var i = state.length;
        var results = new Array(i);
        while (i--) {
          results[i] = state[i].get(this, key);
        }
        return results;
      }
      return [resolver.get(this, key)];
    };
    Container.prototype.createChild = function createChild() {
      var child = new Container(this._configuration);
      child.root = this.root;
      child.parent = this;
      return child;
    };
    Container.prototype.invoke = function invoke(fn, dynamicDependencies) {
      try {
        var _handler = this._handlers.get(fn);
        if (_handler === undefined) {
          _handler = this._createInvocationHandler(fn);
          this._handlers.set(fn, _handler);
        }
        return _handler.invoke(this, dynamicDependencies);
      } catch (e) {
        throw new _aureliaPal.AggregateError('Error invoking ' + fn.name + '. Check the inner error for details.', e, true);
      }
    };
    Container.prototype._createInvocationHandler = function _createInvocationHandler(fn) {
      var dependencies = void 0;
      if (fn.inject === undefined) {
        dependencies = _aureliaMetadata.metadata.getOwn(_aureliaMetadata.metadata.paramTypes, fn) || _emptyParameters;
      } else {
        dependencies = [];
        var ctor = fn;
        while (typeof ctor === 'function') {
          var _dependencies;
          (_dependencies = dependencies).push.apply(_dependencies, getDependencies(ctor));
          ctor = Object.getPrototypeOf(ctor);
        }
      }
      var invoker = _aureliaMetadata.metadata.getOwn(_aureliaMetadata.metadata.invoker, fn) || classInvokers[dependencies.length] || classInvokers.fallback;
      var handler = new InvocationHandler(fn, invoker, dependencies);
      return this._onHandlerCreated !== undefined ? this._onHandlerCreated(handler) : handler;
    };
    return Container;
  }();
  function autoinject(potentialTarget) {
    var deco = function deco(target) {
      target.inject = _aureliaMetadata.metadata.getOwn(_aureliaMetadata.metadata.paramTypes, target) || _emptyParameters;
    };
    return potentialTarget ? deco(potentialTarget) : deco;
  }
  function inject() {
    for (var _len2 = arguments.length,
        rest = Array(_len2),
        _key2 = 0; _key2 < _len2; _key2++) {
      rest[_key2] = arguments[_key2];
    }
    return function(target, key, descriptor) {
      if (descriptor) {
        var _fn = descriptor.value;
        _fn.inject = rest;
      } else {
        target.inject = rest;
      }
    };
  }
});

})();
(function() {
var define = System.amdDefine;
define("npm:aurelia-dependency-injection@1.0.0-beta.1.2.0.js", ["npm:aurelia-dependency-injection@1.0.0-beta.1.2.0/aurelia-dependency-injection"], function(main) {
  return main;
});

})();
(function() {
var define = System.amdDefine;
define("npm:aurelia-history@1.0.0-beta.1.2.0/aurelia-history.js", ["exports"], function(exports) {
  'use strict';
  Object.defineProperty(exports, "__esModule", {value: true});
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  var History = exports.History = function() {
    function History() {
      _classCallCheck(this, History);
    }
    History.prototype.activate = function activate(options) {
      throw new Error('History must implement activate().');
    };
    History.prototype.deactivate = function deactivate() {
      throw new Error('History must implement deactivate().');
    };
    History.prototype.navigate = function navigate(fragment, options) {
      throw new Error('History must implement navigate().');
    };
    History.prototype.navigateBack = function navigateBack() {
      throw new Error('History must implement navigateBack().');
    };
    History.prototype.setTitle = function setTitle(title) {
      throw new Error('History must implement setTitle().');
    };
    return History;
  }();
});

})();
(function() {
var define = System.amdDefine;
define("npm:aurelia-history@1.0.0-beta.1.2.0.js", ["npm:aurelia-history@1.0.0-beta.1.2.0/aurelia-history"], function(main) {
  return main;
});

})();
(function() {
var define = System.amdDefine;
define("npm:aurelia-event-aggregator@1.0.0-beta.1.2.0/aurelia-event-aggregator.js", ["exports", "aurelia-logging"], function(exports, _aureliaLogging) {
  'use strict';
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.EventAggregator = undefined;
  exports.includeEventsIn = includeEventsIn;
  exports.configure = configure;
  var LogManager = _interopRequireWildcard(_aureliaLogging);
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key))
            newObj[key] = obj[key];
        }
      }
      newObj.default = obj;
      return newObj;
    }
  }
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  var logger = LogManager.getLogger('event-aggregator');
  var Handler = function() {
    function Handler(messageType, callback) {
      _classCallCheck(this, Handler);
      this.messageType = messageType;
      this.callback = callback;
    }
    Handler.prototype.handle = function handle(message) {
      if (message instanceof this.messageType) {
        this.callback.call(null, message);
      }
    };
    return Handler;
  }();
  var EventAggregator = exports.EventAggregator = function() {
    function EventAggregator() {
      _classCallCheck(this, EventAggregator);
      this.eventLookup = {};
      this.messageHandlers = [];
    }
    EventAggregator.prototype.publish = function publish(event, data) {
      var subscribers = void 0;
      var i = void 0;
      if (!event) {
        throw new Error('Event was invalid.');
      }
      if (typeof event === 'string') {
        subscribers = this.eventLookup[event];
        if (subscribers) {
          subscribers = subscribers.slice();
          i = subscribers.length;
          try {
            while (i--) {
              subscribers[i](data, event);
            }
          } catch (e) {
            logger.error(e);
          }
        }
      } else {
        subscribers = this.messageHandlers.slice();
        i = subscribers.length;
        try {
          while (i--) {
            subscribers[i].handle(event);
          }
        } catch (e) {
          logger.error(e);
        }
      }
    };
    EventAggregator.prototype.subscribe = function subscribe(event, callback) {
      var handler = void 0;
      var subscribers = void 0;
      if (!event) {
        throw new Error('Event channel/type was invalid.');
      }
      if (typeof event === 'string') {
        handler = callback;
        subscribers = this.eventLookup[event] || (this.eventLookup[event] = []);
      } else {
        handler = new Handler(event, callback);
        subscribers = this.messageHandlers;
      }
      subscribers.push(handler);
      return {dispose: function dispose() {
          var idx = subscribers.indexOf(handler);
          if (idx !== -1) {
            subscribers.splice(idx, 1);
          }
        }};
    };
    EventAggregator.prototype.subscribeOnce = function subscribeOnce(event, callback) {
      var sub = this.subscribe(event, function(a, b) {
        sub.dispose();
        return callback(a, b);
      });
      return sub;
    };
    return EventAggregator;
  }();
  function includeEventsIn(obj) {
    var ea = new EventAggregator();
    obj.subscribeOnce = function(event, callback) {
      return ea.subscribeOnce(event, callback);
    };
    obj.subscribe = function(event, callback) {
      return ea.subscribe(event, callback);
    };
    obj.publish = function(event, data) {
      ea.publish(event, data);
    };
    return ea;
  }
  function configure(config) {
    config.instance(EventAggregator, includeEventsIn(config.aurelia));
  }
});

})();
(function() {
var define = System.amdDefine;
define("npm:aurelia-event-aggregator@1.0.0-beta.1.2.0.js", ["npm:aurelia-event-aggregator@1.0.0-beta.1.2.0/aurelia-event-aggregator"], function(main) {
  return main;
});

})();
(function() {
var define = System.amdDefine;
define("npm:aurelia-router@1.0.0-beta.1.2.1/aurelia-router.js", ["exports", "aurelia-logging", "aurelia-route-recognizer", "aurelia-dependency-injection", "aurelia-history", "aurelia-event-aggregator"], function(exports, _aureliaLogging, _aureliaRouteRecognizer, _aureliaDependencyInjection, _aureliaHistory, _aureliaEventAggregator) {
  'use strict';
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.AppRouter = exports.PipelineProvider = exports.LoadRouteStep = exports.RouteLoader = exports.ActivateNextStep = exports.DeactivatePreviousStep = exports.CanActivateNextStep = exports.CanDeactivatePreviousStep = exports.Router = exports.BuildNavigationPlanStep = exports.activationStrategy = exports.RouterConfiguration = exports.RedirectToRoute = exports.Redirect = exports.NavModel = exports.NavigationInstruction = exports.CommitChangesStep = exports.Pipeline = exports.pipelineStatus = undefined;
  exports._normalizeAbsolutePath = _normalizeAbsolutePath;
  exports._createRootedPath = _createRootedPath;
  exports._resolveUrl = _resolveUrl;
  exports.isNavigationCommand = isNavigationCommand;
  exports._buildNavigationPlan = _buildNavigationPlan;
  var LogManager = _interopRequireWildcard(_aureliaLogging);
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key))
            newObj[key] = obj[key];
        }
      }
      newObj.default = obj;
      return newObj;
    }
  }
  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }
  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }});
    if (superClass)
      Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }
  var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
    return typeof obj;
  } : function(obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;
  };
  var _createClass = function() {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    return function(Constructor, protoProps, staticProps) {
      if (protoProps)
        defineProperties(Constructor.prototype, protoProps);
      if (staticProps)
        defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _normalizeAbsolutePath(path, hasPushState) {
    if (!hasPushState && path[0] !== '#') {
      path = '#' + path;
    }
    return path;
  }
  function _createRootedPath(fragment, baseUrl, hasPushState) {
    if (isAbsoluteUrl.test(fragment)) {
      return fragment;
    }
    var path = '';
    if (baseUrl.length && baseUrl[0] !== '/') {
      path += '/';
    }
    path += baseUrl;
    if ((!path.length || path[path.length - 1] !== '/') && fragment[0] !== '/') {
      path += '/';
    }
    if (path.length && path[path.length - 1] === '/' && fragment[0] === '/') {
      path = path.substring(0, path.length - 1);
    }
    return _normalizeAbsolutePath(path + fragment, hasPushState);
  }
  function _resolveUrl(fragment, baseUrl, hasPushState) {
    if (isRootedPath.test(fragment)) {
      return _normalizeAbsolutePath(fragment, hasPushState);
    }
    return _createRootedPath(fragment, baseUrl, hasPushState);
  }
  var isRootedPath = /^#?\//;
  var isAbsoluteUrl = /^([a-z][a-z0-9+\-.]*:)?\/\//i;
  var pipelineStatus = exports.pipelineStatus = {
    completed: 'completed',
    canceled: 'canceled',
    rejected: 'rejected',
    running: 'running'
  };
  var Pipeline = exports.Pipeline = function() {
    function Pipeline() {
      _classCallCheck(this, Pipeline);
      this.steps = [];
    }
    Pipeline.prototype.addStep = function addStep(step) {
      var run = void 0;
      if (typeof step === 'function') {
        run = step;
      } else if (typeof step.getSteps === 'function') {
        var steps = step.getSteps();
        for (var i = 0,
            l = steps.length; i < l; i++) {
          this.addStep(steps[i]);
        }
        return this;
      } else {
        run = step.run.bind(step);
      }
      this.steps.push(run);
      return this;
    };
    Pipeline.prototype.run = function run(instruction) {
      var index = -1;
      var steps = this.steps;
      function next() {
        index++;
        if (index < steps.length) {
          var currentStep = steps[index];
          try {
            return currentStep(instruction, next);
          } catch (e) {
            return next.reject(e);
          }
        } else {
          return next.complete();
        }
      }
      next.complete = createCompletionHandler(next, pipelineStatus.completed);
      next.cancel = createCompletionHandler(next, pipelineStatus.canceled);
      next.reject = createCompletionHandler(next, pipelineStatus.rejected);
      return next();
    };
    return Pipeline;
  }();
  function createCompletionHandler(next, status) {
    return function(output) {
      return Promise.resolve({
        status: status,
        output: output,
        completed: status === pipelineStatus.completed
      });
    };
  }
  var CommitChangesStep = exports.CommitChangesStep = function() {
    function CommitChangesStep() {
      _classCallCheck(this, CommitChangesStep);
    }
    CommitChangesStep.prototype.run = function run(navigationInstruction, next) {
      return navigationInstruction._commitChanges(true).then(function() {
        navigationInstruction._updateTitle();
        return next();
      });
    };
    return CommitChangesStep;
  }();
  var NavigationInstruction = exports.NavigationInstruction = function() {
    function NavigationInstruction(init) {
      _classCallCheck(this, NavigationInstruction);
      this.plan = null;
      this.options = {};
      Object.assign(this, init);
      this.params = this.params || {};
      this.viewPortInstructions = {};
      var ancestorParams = [];
      var current = this;
      do {
        var currentParams = Object.assign({}, current.params);
        if (current.config && current.config.hasChildRouter) {
          delete currentParams[current.getWildCardName()];
        }
        ancestorParams.unshift(currentParams);
        current = current.parentInstruction;
      } while (current);
      var allParams = Object.assign.apply(Object, [{}, this.queryParams].concat(ancestorParams));
      this.lifecycleArgs = [allParams, this.config, this];
    }
    NavigationInstruction.prototype.getAllInstructions = function getAllInstructions() {
      var instructions = [this];
      for (var key in this.viewPortInstructions) {
        var childInstruction = this.viewPortInstructions[key].childNavigationInstruction;
        if (childInstruction) {
          instructions.push.apply(instructions, childInstruction.getAllInstructions());
        }
      }
      return instructions;
    };
    NavigationInstruction.prototype.getAllPreviousInstructions = function getAllPreviousInstructions() {
      return this.getAllInstructions().map(function(c) {
        return c.previousInstruction;
      }).filter(function(c) {
        return c;
      });
    };
    NavigationInstruction.prototype.addViewPortInstruction = function addViewPortInstruction(viewPortName, strategy, moduleId, component) {
      var viewportInstruction = this.viewPortInstructions[viewPortName] = {
        name: viewPortName,
        strategy: strategy,
        moduleId: moduleId,
        component: component,
        childRouter: component.childRouter,
        lifecycleArgs: this.lifecycleArgs.slice()
      };
      return viewportInstruction;
    };
    NavigationInstruction.prototype.getWildCardName = function getWildCardName() {
      var wildcardIndex = this.config.route.lastIndexOf('*');
      return this.config.route.substr(wildcardIndex + 1);
    };
    NavigationInstruction.prototype.getWildcardPath = function getWildcardPath() {
      var wildcardName = this.getWildCardName();
      var path = this.params[wildcardName] || '';
      if (this.queryString) {
        path += '?' + this.queryString;
      }
      return path;
    };
    NavigationInstruction.prototype.getBaseUrl = function getBaseUrl() {
      if (!this.params) {
        return this.fragment;
      }
      var wildcardName = this.getWildCardName();
      var path = this.params[wildcardName] || '';
      if (!path) {
        return this.fragment;
      }
      return this.fragment.substr(0, this.fragment.lastIndexOf(path));
    };
    NavigationInstruction.prototype._commitChanges = function _commitChanges(waitToSwap) {
      var _this = this;
      var router = this.router;
      router.currentInstruction = this;
      if (this.previousInstruction) {
        this.previousInstruction.config.navModel.isActive = false;
      }
      this.config.navModel.isActive = true;
      router._refreshBaseUrl();
      router.refreshNavigation();
      var loads = [];
      var delaySwaps = [];
      var _loop = function _loop(viewPortName) {
        var viewPortInstruction = _this.viewPortInstructions[viewPortName];
        var viewPort = router.viewPorts[viewPortName];
        if (!viewPort) {
          throw new Error('There was no router-view found in the view for ' + viewPortInstruction.moduleId + '.');
        }
        if (viewPortInstruction.strategy === activationStrategy.replace) {
          if (waitToSwap) {
            delaySwaps.push({
              viewPort: viewPort,
              viewPortInstruction: viewPortInstruction
            });
          }
          loads.push(viewPort.process(viewPortInstruction, waitToSwap).then(function(x) {
            if (viewPortInstruction.childNavigationInstruction) {
              return viewPortInstruction.childNavigationInstruction._commitChanges();
            }
          }));
        } else {
          if (viewPortInstruction.childNavigationInstruction) {
            loads.push(viewPortInstruction.childNavigationInstruction._commitChanges(waitToSwap));
          }
        }
      };
      for (var viewPortName in this.viewPortInstructions) {
        _loop(viewPortName);
      }
      return Promise.all(loads).then(function() {
        delaySwaps.forEach(function(x) {
          return x.viewPort.swap(x.viewPortInstruction);
        });
        return null;
      }).then(function() {
        return prune(_this);
      });
    };
    NavigationInstruction.prototype._updateTitle = function _updateTitle() {
      var title = this._buildTitle();
      if (title) {
        this.router.history.setTitle(title);
      }
    };
    NavigationInstruction.prototype._buildTitle = function _buildTitle() {
      var separator = arguments.length <= 0 || arguments[0] === undefined ? ' | ' : arguments[0];
      var title = this.config.navModel.title || '';
      var childTitles = [];
      for (var viewPortName in this.viewPortInstructions) {
        var _viewPortInstruction = this.viewPortInstructions[viewPortName];
        if (_viewPortInstruction.childNavigationInstruction) {
          var childTitle = _viewPortInstruction.childNavigationInstruction._buildTitle(separator);
          if (childTitle) {
            childTitles.push(childTitle);
          }
        }
      }
      if (childTitles.length) {
        title = childTitles.join(separator) + (title ? separator : '') + title;
      }
      if (this.router.title) {
        title += (title ? separator : '') + this.router.title;
      }
      return title;
    };
    return NavigationInstruction;
  }();
  function prune(instruction) {
    instruction.previousInstruction = null;
    instruction.plan = null;
  }
  var NavModel = exports.NavModel = function() {
    function NavModel(router, relativeHref) {
      _classCallCheck(this, NavModel);
      this.isActive = false;
      this.title = null;
      this.href = null;
      this.relativeHref = null;
      this.settings = {};
      this.config = null;
      this.router = router;
      this.relativeHref = relativeHref;
    }
    NavModel.prototype.setTitle = function setTitle(title) {
      this.title = title;
      if (this.isActive) {
        this.router.updateTitle();
      }
    };
    return NavModel;
  }();
  function isNavigationCommand(obj) {
    return obj && typeof obj.navigate === 'function';
  }
  var Redirect = exports.Redirect = function() {
    function Redirect(url) {
      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
      _classCallCheck(this, Redirect);
      this.url = url;
      this.options = Object.assign({
        trigger: true,
        replace: true
      }, options);
      this.shouldContinueProcessing = false;
    }
    Redirect.prototype.setRouter = function setRouter(router) {
      this.router = router;
    };
    Redirect.prototype.navigate = function navigate(appRouter) {
      var navigatingRouter = this.options.useAppRouter ? appRouter : this.router || appRouter;
      navigatingRouter.navigate(this.url, this.options);
    };
    return Redirect;
  }();
  var RedirectToRoute = exports.RedirectToRoute = function() {
    function RedirectToRoute(route) {
      var params = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
      var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];
      _classCallCheck(this, RedirectToRoute);
      this.route = route;
      this.params = params;
      this.options = Object.assign({
        trigger: true,
        replace: true
      }, options);
      this.shouldContinueProcessing = false;
    }
    RedirectToRoute.prototype.setRouter = function setRouter(router) {
      this.router = router;
    };
    RedirectToRoute.prototype.navigate = function navigate(appRouter) {
      var navigatingRouter = this.options.useAppRouter ? appRouter : this.router || appRouter;
      navigatingRouter.navigateToRoute(this.route, this.params, this.options);
    };
    return RedirectToRoute;
  }();
  var RouterConfiguration = exports.RouterConfiguration = function() {
    function RouterConfiguration() {
      _classCallCheck(this, RouterConfiguration);
      this.instructions = [];
      this.options = {};
      this.pipelineSteps = [];
    }
    RouterConfiguration.prototype.addPipelineStep = function addPipelineStep(name, step) {
      this.pipelineSteps.push({
        name: name,
        step: step
      });
      return this;
    };
    RouterConfiguration.prototype.addAuthorizeStep = function addAuthorizeStep(step) {
      return this.addPipelineStep('authorize', step);
    };
    RouterConfiguration.prototype.addPreActivateStep = function addPreActivateStep(step) {
      return this.addPipelineStep('preActivate', step);
    };
    RouterConfiguration.prototype.addPreRenderStep = function addPreRenderStep(step) {
      return this.addPipelineStep('preRender', step);
    };
    RouterConfiguration.prototype.addPostRenderStep = function addPostRenderStep(step) {
      return this.addPipelineStep('postRender', step);
    };
    RouterConfiguration.prototype.map = function map(route) {
      if (Array.isArray(route)) {
        route.forEach(this.map.bind(this));
        return this;
      }
      return this.mapRoute(route);
    };
    RouterConfiguration.prototype.mapRoute = function mapRoute(config) {
      this.instructions.push(function(router) {
        var routeConfigs = [];
        if (Array.isArray(config.route)) {
          for (var i = 0,
              ii = config.route.length; i < ii; ++i) {
            var _current = Object.assign({}, config);
            _current.route = config.route[i];
            routeConfigs.push(_current);
          }
        } else {
          routeConfigs.push(Object.assign({}, config));
        }
        var navModel = void 0;
        for (var _i = 0,
            _ii = routeConfigs.length; _i < _ii; ++_i) {
          var routeConfig = routeConfigs[_i];
          routeConfig.settings = routeConfig.settings || {};
          if (!navModel) {
            navModel = router.createNavModel(routeConfig);
          }
          router.addRoute(routeConfig, navModel);
        }
      });
      return this;
    };
    RouterConfiguration.prototype.mapUnknownRoutes = function mapUnknownRoutes(config) {
      this.unknownRouteConfig = config;
      return this;
    };
    RouterConfiguration.prototype.exportToRouter = function exportToRouter(router) {
      var instructions = this.instructions;
      for (var i = 0,
          ii = instructions.length; i < ii; ++i) {
        instructions[i](router);
      }
      if (this.title) {
        router.title = this.title;
      }
      if (this.unknownRouteConfig) {
        router.handleUnknownRoutes(this.unknownRouteConfig);
      }
      router.options = this.options;
      var pipelineSteps = this.pipelineSteps;
      if (pipelineSteps.length) {
        if (!router.isRoot) {
          throw new Error('Pipeline steps can only be added to the root router');
        }
        var pipelineProvider = router.pipelineProvider;
        for (var _i2 = 0,
            _ii2 = pipelineSteps.length; _i2 < _ii2; ++_i2) {
          var _pipelineSteps$_i = pipelineSteps[_i2];
          var _name = _pipelineSteps$_i.name;
          var step = _pipelineSteps$_i.step;
          pipelineProvider.addStep(_name, step);
        }
      }
    };
    return RouterConfiguration;
  }();
  var activationStrategy = exports.activationStrategy = {
    noChange: 'no-change',
    invokeLifecycle: 'invoke-lifecycle',
    replace: 'replace'
  };
  var BuildNavigationPlanStep = exports.BuildNavigationPlanStep = function() {
    function BuildNavigationPlanStep() {
      _classCallCheck(this, BuildNavigationPlanStep);
    }
    BuildNavigationPlanStep.prototype.run = function run(navigationInstruction, next) {
      return _buildNavigationPlan(navigationInstruction).then(function(plan) {
        navigationInstruction.plan = plan;
        return next();
      }).catch(next.cancel);
    };
    return BuildNavigationPlanStep;
  }();
  function _buildNavigationPlan(instruction, forceLifecycleMinimum) {
    var prev = instruction.previousInstruction;
    var config = instruction.config;
    var plan = {};
    if ('redirect' in config) {
      var redirectLocation = _resolveUrl(config.redirect, getInstructionBaseUrl(instruction));
      if (instruction.queryString) {
        redirectLocation += '?' + instruction.queryString;
      }
      return Promise.reject(new Redirect(redirectLocation));
    }
    if (prev) {
      var newParams = hasDifferentParameterValues(prev, instruction);
      var pending = [];
      var _loop2 = function _loop2(viewPortName) {
        var prevViewPortInstruction = prev.viewPortInstructions[viewPortName];
        var nextViewPortConfig = config.viewPorts[viewPortName];
        if (!nextViewPortConfig)
          throw new Error('Invalid Route Config: Configuration for viewPort "' + viewPortName + '" was not found for route: "' + instruction.config.route + '."');
        var viewPortPlan = plan[viewPortName] = {
          name: viewPortName,
          config: nextViewPortConfig,
          prevComponent: prevViewPortInstruction.component,
          prevModuleId: prevViewPortInstruction.moduleId
        };
        if (prevViewPortInstruction.moduleId !== nextViewPortConfig.moduleId) {
          viewPortPlan.strategy = activationStrategy.replace;
        } else if ('determineActivationStrategy' in prevViewPortInstruction.component.viewModel) {
          var _prevViewPortInstruct;
          viewPortPlan.strategy = (_prevViewPortInstruct = prevViewPortInstruction.component.viewModel).determineActivationStrategy.apply(_prevViewPortInstruct, instruction.lifecycleArgs);
        } else if (config.activationStrategy) {
          viewPortPlan.strategy = config.activationStrategy;
        } else if (newParams || forceLifecycleMinimum) {
          viewPortPlan.strategy = activationStrategy.invokeLifecycle;
        } else {
          viewPortPlan.strategy = activationStrategy.noChange;
        }
        if (viewPortPlan.strategy !== activationStrategy.replace && prevViewPortInstruction.childRouter) {
          var path = instruction.getWildcardPath();
          var task = prevViewPortInstruction.childRouter._createNavigationInstruction(path, instruction).then(function(childInstruction) {
            viewPortPlan.childNavigationInstruction = childInstruction;
            return _buildNavigationPlan(childInstruction, viewPortPlan.strategy === activationStrategy.invokeLifecycle).then(function(childPlan) {
              childInstruction.plan = childPlan;
            });
          });
          pending.push(task);
        }
      };
      for (var viewPortName in prev.viewPortInstructions) {
        _loop2(viewPortName);
      }
      return Promise.all(pending).then(function() {
        return plan;
      });
    }
    for (var _viewPortName in config.viewPorts) {
      plan[_viewPortName] = {
        name: _viewPortName,
        strategy: activationStrategy.replace,
        config: instruction.config.viewPorts[_viewPortName]
      };
    }
    return Promise.resolve(plan);
  }
  function hasDifferentParameterValues(prev, next) {
    var prevParams = prev.params;
    var nextParams = next.params;
    var nextWildCardName = next.config.hasChildRouter ? next.getWildCardName() : null;
    for (var key in nextParams) {
      if (key === nextWildCardName) {
        continue;
      }
      if (prevParams[key] !== nextParams[key]) {
        return true;
      }
    }
    for (var _key in prevParams) {
      if (_key === nextWildCardName) {
        continue;
      }
      if (prevParams[_key] !== nextParams[_key]) {
        return true;
      }
    }
    if (!next.options.compareQueryParams) {
      return false;
    }
    var prevQueryParams = prev.queryParams;
    var nextQueryParams = next.queryParams;
    for (var _key2 in nextQueryParams) {
      if (prevQueryParams[_key2] !== nextQueryParams[_key2]) {
        return true;
      }
    }
    for (var _key3 in prevQueryParams) {
      if (prevQueryParams[_key3] !== nextQueryParams[_key3]) {
        return true;
      }
    }
    return false;
  }
  function getInstructionBaseUrl(instruction) {
    var instructionBaseUrlParts = [];
    instruction = instruction.parentInstruction;
    while (instruction) {
      instructionBaseUrlParts.unshift(instruction.getBaseUrl());
      instruction = instruction.parentInstruction;
    }
    instructionBaseUrlParts.unshift('/');
    return instructionBaseUrlParts.join('');
  }
  var Router = exports.Router = function() {
    function Router(container, history) {
      _classCallCheck(this, Router);
      this.parent = null;
      this.options = {};
      this.container = container;
      this.history = history;
      this.reset();
    }
    Router.prototype.reset = function reset() {
      var _this2 = this;
      this.viewPorts = {};
      this.routes = [];
      this.baseUrl = '';
      this.isConfigured = false;
      this.isNavigating = false;
      this.navigation = [];
      this.currentInstruction = null;
      this._fallbackOrder = 100;
      this._recognizer = new _aureliaRouteRecognizer.RouteRecognizer();
      this._childRecognizer = new _aureliaRouteRecognizer.RouteRecognizer();
      this._configuredPromise = new Promise(function(resolve) {
        _this2._resolveConfiguredPromise = resolve;
      });
    };
    Router.prototype.registerViewPort = function registerViewPort(viewPort, name) {
      name = name || 'default';
      this.viewPorts[name] = viewPort;
    };
    Router.prototype.ensureConfigured = function ensureConfigured() {
      return this._configuredPromise;
    };
    Router.prototype.configure = function configure(callbackOrConfig) {
      var _this3 = this;
      this.isConfigured = true;
      var result = callbackOrConfig;
      var config = void 0;
      if (typeof callbackOrConfig === 'function') {
        config = new RouterConfiguration();
        result = callbackOrConfig(config);
      }
      return Promise.resolve(result).then(function(c) {
        if (c && c.exportToRouter) {
          config = c;
        }
        config.exportToRouter(_this3);
        _this3.isConfigured = true;
        _this3._resolveConfiguredPromise();
      });
    };
    Router.prototype.navigate = function navigate(fragment, options) {
      if (!this.isConfigured && this.parent) {
        return this.parent.navigate(fragment, options);
      }
      return this.history.navigate(_resolveUrl(fragment, this.baseUrl, this.history._hasPushState), options);
    };
    Router.prototype.navigateToRoute = function navigateToRoute(route, params, options) {
      var path = this.generate(route, params);
      return this.navigate(path, options);
    };
    Router.prototype.navigateBack = function navigateBack() {
      this.history.navigateBack();
    };
    Router.prototype.createChild = function createChild(container) {
      var childRouter = new Router(container || this.container.createChild(), this.history);
      childRouter.parent = this;
      return childRouter;
    };
    Router.prototype.generate = function generate(name, params) {
      var hasRoute = this._recognizer.hasRoute(name);
      if ((!this.isConfigured || !hasRoute) && this.parent) {
        return this.parent.generate(name, params);
      }
      if (!hasRoute) {
        throw new Error('A route with name \'' + name + '\' could not be found. Check that `name: \'' + name + '\'` was specified in the route\'s config.');
      }
      var path = this._recognizer.generate(name, params);
      return _createRootedPath(path, this.baseUrl, this.history._hasPushState);
    };
    Router.prototype.createNavModel = function createNavModel(config) {
      var navModel = new NavModel(this, 'href' in config ? config.href : config.route);
      navModel.title = config.title;
      navModel.order = config.nav;
      navModel.href = config.href;
      navModel.settings = config.settings;
      navModel.config = config;
      return navModel;
    };
    Router.prototype.addRoute = function addRoute(config, navModel) {
      validateRouteConfig(config);
      if (!('viewPorts' in config) && !config.navigationStrategy) {
        config.viewPorts = {'default': {
            moduleId: config.moduleId,
            view: config.view
          }};
      }
      if (!navModel) {
        navModel = this.createNavModel(config);
      }
      this.routes.push(config);
      var path = config.route;
      if (path.charAt(0) === '/') {
        path = path.substr(1);
      }
      var state = this._recognizer.add({
        path: path,
        handler: config
      });
      if (path) {
        var _settings = config.settings;
        delete config.settings;
        var withChild = JSON.parse(JSON.stringify(config));
        config.settings = _settings;
        withChild.route = path + '/*childRoute';
        withChild.hasChildRouter = true;
        this._childRecognizer.add({
          path: withChild.route,
          handler: withChild
        });
        withChild.navModel = navModel;
        withChild.settings = config.settings;
      }
      config.navModel = navModel;
      if ((navModel.order || navModel.order === 0) && this.navigation.indexOf(navModel) === -1) {
        if (!navModel.href && navModel.href !== '' && (state.types.dynamics || state.types.stars)) {
          throw new Error('Invalid route config: dynamic routes must specify an href to be included in the navigation model.');
        }
        if (typeof navModel.order !== 'number') {
          navModel.order = ++this._fallbackOrder;
        }
        this.navigation.push(navModel);
        this.navigation = this.navigation.sort(function(a, b) {
          return a.order - b.order;
        });
      }
    };
    Router.prototype.hasRoute = function hasRoute(name) {
      return !!(this._recognizer.hasRoute(name) || this.parent && this.parent.hasRoute(name));
    };
    Router.prototype.hasOwnRoute = function hasOwnRoute(name) {
      return this._recognizer.hasRoute(name);
    };
    Router.prototype.handleUnknownRoutes = function handleUnknownRoutes(config) {
      var _this4 = this;
      if (!config) {
        throw new Error('Invalid unknown route handler');
      }
      this.catchAllHandler = function(instruction) {
        return _this4._createRouteConfig(config, instruction).then(function(c) {
          instruction.config = c;
          return instruction;
        });
      };
    };
    Router.prototype.updateTitle = function updateTitle() {
      if (this.parent) {
        return this.parent.updateTitle();
      }
      this.currentInstruction._updateTitle();
    };
    Router.prototype.refreshNavigation = function refreshNavigation() {
      var nav = this.navigation;
      for (var i = 0,
          length = nav.length; i < length; i++) {
        var _current2 = nav[i];
        if (!_current2.href) {
          _current2.href = _createRootedPath(_current2.relativeHref, this.baseUrl, this.history._hasPushState);
        }
      }
    };
    Router.prototype._refreshBaseUrl = function _refreshBaseUrl() {
      if (this.parent) {
        var baseUrl = this.parent.currentInstruction.getBaseUrl();
        this.baseUrl = this.parent.baseUrl + baseUrl;
      }
    };
    Router.prototype._createNavigationInstruction = function _createNavigationInstruction() {
      var url = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];
      var parentInstruction = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];
      var fragment = url;
      var queryString = '';
      var queryIndex = url.indexOf('?');
      if (queryIndex !== -1) {
        fragment = url.substr(0, queryIndex);
        queryString = url.substr(queryIndex + 1);
      }
      var results = this._recognizer.recognize(url);
      if (!results || !results.length) {
        results = this._childRecognizer.recognize(url);
      }
      var instructionInit = {
        fragment: fragment,
        queryString: queryString,
        config: null,
        parentInstruction: parentInstruction,
        previousInstruction: this.currentInstruction,
        router: this,
        options: {compareQueryParams: this.options.compareQueryParams}
      };
      if (results && results.length) {
        var first = results[0];
        var _instruction = new NavigationInstruction(Object.assign({}, instructionInit, {
          params: first.params,
          queryParams: first.queryParams || results.queryParams,
          config: first.config || first.handler
        }));
        if (typeof first.handler === 'function') {
          return evaluateNavigationStrategy(_instruction, first.handler, first);
        } else if (first.handler && 'navigationStrategy' in first.handler) {
          return evaluateNavigationStrategy(_instruction, first.handler.navigationStrategy, first.handler);
        }
        return Promise.resolve(_instruction);
      } else if (this.catchAllHandler) {
        var _instruction2 = new NavigationInstruction(Object.assign({}, instructionInit, {
          params: {path: fragment},
          queryParams: results && results.queryParams,
          config: null
        }));
        return evaluateNavigationStrategy(_instruction2, this.catchAllHandler);
      }
      return Promise.reject(new Error('Route not found: ' + url));
    };
    Router.prototype._createRouteConfig = function _createRouteConfig(config, instruction) {
      var _this5 = this;
      return Promise.resolve(config).then(function(c) {
        if (typeof c === 'string') {
          return {moduleId: c};
        } else if (typeof c === 'function') {
          return c(instruction);
        }
        return c;
      }).then(function(c) {
        return typeof c === 'string' ? {moduleId: c} : c;
      }).then(function(c) {
        c.route = instruction.params.path;
        validateRouteConfig(c);
        if (!c.navModel) {
          c.navModel = _this5.createNavModel(c);
        }
        return c;
      });
    };
    _createClass(Router, [{
      key: 'isRoot',
      get: function get() {
        return !this.parent;
      }
    }]);
    return Router;
  }();
  function validateRouteConfig(config) {
    if ((typeof config === 'undefined' ? 'undefined' : _typeof(config)) !== 'object') {
      throw new Error('Invalid Route Config');
    }
    if (typeof config.route !== 'string') {
      throw new Error('Invalid Route Config: You must specify a route pattern.');
    }
    if (!('redirect' in config || config.moduleId || config.navigationStrategy || config.viewPorts)) {
      throw new Error('Invalid Route Config: You must specify a moduleId, redirect, navigationStrategy, or viewPorts.');
    }
  }
  function evaluateNavigationStrategy(instruction, evaluator, context) {
    return Promise.resolve(evaluator.call(context, instruction)).then(function() {
      if (!('viewPorts' in instruction.config)) {
        instruction.config.viewPorts = {'default': {moduleId: instruction.config.moduleId}};
      }
      return instruction;
    });
  }
  var CanDeactivatePreviousStep = exports.CanDeactivatePreviousStep = function() {
    function CanDeactivatePreviousStep() {
      _classCallCheck(this, CanDeactivatePreviousStep);
    }
    CanDeactivatePreviousStep.prototype.run = function run(navigationInstruction, next) {
      return processDeactivatable(navigationInstruction.plan, 'canDeactivate', next);
    };
    return CanDeactivatePreviousStep;
  }();
  var CanActivateNextStep = exports.CanActivateNextStep = function() {
    function CanActivateNextStep() {
      _classCallCheck(this, CanActivateNextStep);
    }
    CanActivateNextStep.prototype.run = function run(navigationInstruction, next) {
      return processActivatable(navigationInstruction, 'canActivate', next);
    };
    return CanActivateNextStep;
  }();
  var DeactivatePreviousStep = exports.DeactivatePreviousStep = function() {
    function DeactivatePreviousStep() {
      _classCallCheck(this, DeactivatePreviousStep);
    }
    DeactivatePreviousStep.prototype.run = function run(navigationInstruction, next) {
      return processDeactivatable(navigationInstruction.plan, 'deactivate', next, true);
    };
    return DeactivatePreviousStep;
  }();
  var ActivateNextStep = exports.ActivateNextStep = function() {
    function ActivateNextStep() {
      _classCallCheck(this, ActivateNextStep);
    }
    ActivateNextStep.prototype.run = function run(navigationInstruction, next) {
      return processActivatable(navigationInstruction, 'activate', next, true);
    };
    return ActivateNextStep;
  }();
  function processDeactivatable(plan, callbackName, next, ignoreResult) {
    var infos = findDeactivatable(plan, callbackName);
    var i = infos.length;
    function inspect(val) {
      if (ignoreResult || shouldContinue(val)) {
        return iterate();
      }
      return next.cancel(val);
    }
    function iterate() {
      if (i--) {
        try {
          var viewModel = infos[i];
          var _result = viewModel[callbackName]();
          return processPotential(_result, inspect, next.cancel);
        } catch (error) {
          return next.cancel(error);
        }
      }
      return next();
    }
    return iterate();
  }
  function findDeactivatable(plan, callbackName) {
    var list = arguments.length <= 2 || arguments[2] === undefined ? [] : arguments[2];
    for (var viewPortName in plan) {
      var _viewPortPlan = plan[viewPortName];
      var prevComponent = _viewPortPlan.prevComponent;
      if ((_viewPortPlan.strategy === activationStrategy.invokeLifecycle || _viewPortPlan.strategy === activationStrategy.replace) && prevComponent) {
        var viewModel = prevComponent.viewModel;
        if (callbackName in viewModel) {
          list.push(viewModel);
        }
      }
      if (_viewPortPlan.childNavigationInstruction) {
        findDeactivatable(_viewPortPlan.childNavigationInstruction.plan, callbackName, list);
      } else if (prevComponent) {
        addPreviousDeactivatable(prevComponent, callbackName, list);
      }
    }
    return list;
  }
  function addPreviousDeactivatable(component, callbackName, list) {
    var childRouter = component.childRouter;
    if (childRouter && childRouter.currentInstruction) {
      var viewPortInstructions = childRouter.currentInstruction.viewPortInstructions;
      for (var viewPortName in viewPortInstructions) {
        var _viewPortInstruction2 = viewPortInstructions[viewPortName];
        var prevComponent = _viewPortInstruction2.component;
        var prevViewModel = prevComponent.viewModel;
        if (callbackName in prevViewModel) {
          list.push(prevViewModel);
        }
        addPreviousDeactivatable(prevComponent, callbackName, list);
      }
    }
  }
  function processActivatable(navigationInstruction, callbackName, next, ignoreResult) {
    var infos = findActivatable(navigationInstruction, callbackName);
    var length = infos.length;
    var i = -1;
    function inspect(val, router) {
      if (ignoreResult || shouldContinue(val, router)) {
        return iterate();
      }
      return next.cancel(val);
    }
    function iterate() {
      i++;
      if (i < length) {
        try {
          var _ret3 = function() {
            var _current$viewModel;
            var current = infos[i];
            var result = (_current$viewModel = current.viewModel)[callbackName].apply(_current$viewModel, current.lifecycleArgs);
            return {v: processPotential(result, function(val) {
                return inspect(val, current.router);
              }, next.cancel)};
          }();
          if ((typeof _ret3 === 'undefined' ? 'undefined' : _typeof(_ret3)) === "object")
            return _ret3.v;
        } catch (error) {
          return next.cancel(error);
        }
      }
      return next();
    }
    return iterate();
  }
  function findActivatable(navigationInstruction, callbackName) {
    var list = arguments.length <= 2 || arguments[2] === undefined ? [] : arguments[2];
    var router = arguments[3];
    var plan = navigationInstruction.plan;
    Object.keys(plan).filter(function(viewPortName) {
      var viewPortPlan = plan[viewPortName];
      var viewPortInstruction = navigationInstruction.viewPortInstructions[viewPortName];
      var viewModel = viewPortInstruction.component.viewModel;
      if ((viewPortPlan.strategy === activationStrategy.invokeLifecycle || viewPortPlan.strategy === activationStrategy.replace) && callbackName in viewModel) {
        list.push({
          viewModel: viewModel,
          lifecycleArgs: viewPortInstruction.lifecycleArgs,
          router: router
        });
      }
      if (viewPortPlan.childNavigationInstruction) {
        findActivatable(viewPortPlan.childNavigationInstruction, callbackName, list, viewPortInstruction.component.childRouter || router);
      }
    });
    return list;
  }
  function shouldContinue(output, router) {
    if (output instanceof Error) {
      return false;
    }
    if (isNavigationCommand(output)) {
      if (typeof output.setRouter === 'function') {
        output.setRouter(router);
      }
      return !!output.shouldContinueProcessing;
    }
    if (output === undefined) {
      return true;
    }
    return output;
  }
  function processPotential(obj, resolve, reject) {
    if (obj && typeof obj.then === 'function') {
      return Promise.resolve(obj).then(resolve).catch(reject);
    }
    try {
      return resolve(obj);
    } catch (error) {
      return reject(error);
    }
  }
  var RouteLoader = exports.RouteLoader = function() {
    function RouteLoader() {
      _classCallCheck(this, RouteLoader);
    }
    RouteLoader.prototype.loadRoute = function loadRoute(router, config, navigationInstruction) {
      throw Error('Route loaders must implement "loadRoute(router, config, navigationInstruction)".');
    };
    return RouteLoader;
  }();
  var LoadRouteStep = exports.LoadRouteStep = function() {
    LoadRouteStep.inject = function inject() {
      return [RouteLoader];
    };
    function LoadRouteStep(routeLoader) {
      _classCallCheck(this, LoadRouteStep);
      this.routeLoader = routeLoader;
    }
    LoadRouteStep.prototype.run = function run(navigationInstruction, next) {
      return loadNewRoute(this.routeLoader, navigationInstruction).then(next).catch(next.cancel);
    };
    return LoadRouteStep;
  }();
  function loadNewRoute(routeLoader, navigationInstruction) {
    var toLoad = determineWhatToLoad(navigationInstruction);
    var loadPromises = toLoad.map(function(current) {
      return loadRoute(routeLoader, current.navigationInstruction, current.viewPortPlan);
    });
    return Promise.all(loadPromises);
  }
  function determineWhatToLoad(navigationInstruction) {
    var toLoad = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];
    var plan = navigationInstruction.plan;
    for (var viewPortName in plan) {
      var _viewPortPlan2 = plan[viewPortName];
      if (_viewPortPlan2.strategy === activationStrategy.replace) {
        toLoad.push({
          viewPortPlan: _viewPortPlan2,
          navigationInstruction: navigationInstruction
        });
        if (_viewPortPlan2.childNavigationInstruction) {
          determineWhatToLoad(_viewPortPlan2.childNavigationInstruction, toLoad);
        }
      } else {
        var _viewPortInstruction3 = navigationInstruction.addViewPortInstruction(viewPortName, _viewPortPlan2.strategy, _viewPortPlan2.prevModuleId, _viewPortPlan2.prevComponent);
        if (_viewPortPlan2.childNavigationInstruction) {
          _viewPortInstruction3.childNavigationInstruction = _viewPortPlan2.childNavigationInstruction;
          determineWhatToLoad(_viewPortPlan2.childNavigationInstruction, toLoad);
        }
      }
    }
    return toLoad;
  }
  function loadRoute(routeLoader, navigationInstruction, viewPortPlan) {
    var moduleId = viewPortPlan.config.moduleId;
    return loadComponent(routeLoader, navigationInstruction, viewPortPlan.config).then(function(component) {
      var viewPortInstruction = navigationInstruction.addViewPortInstruction(viewPortPlan.name, viewPortPlan.strategy, moduleId, component);
      var childRouter = component.childRouter;
      if (childRouter) {
        var path = navigationInstruction.getWildcardPath();
        return childRouter._createNavigationInstruction(path, navigationInstruction).then(function(childInstruction) {
          viewPortPlan.childNavigationInstruction = childInstruction;
          return _buildNavigationPlan(childInstruction).then(function(childPlan) {
            childInstruction.plan = childPlan;
            viewPortInstruction.childNavigationInstruction = childInstruction;
            return loadNewRoute(routeLoader, childInstruction);
          });
        });
      }
    });
  }
  function loadComponent(routeLoader, navigationInstruction, config) {
    var router = navigationInstruction.router;
    var lifecycleArgs = navigationInstruction.lifecycleArgs;
    return routeLoader.loadRoute(router, config, navigationInstruction).then(function(component) {
      var viewModel = component.viewModel;
      var childContainer = component.childContainer;
      component.router = router;
      component.config = config;
      if ('configureRouter' in viewModel) {
        var _ret4 = function() {
          var childRouter = childContainer.getChildRouter();
          component.childRouter = childRouter;
          return {v: childRouter.configure(function(c) {
              return viewModel.configureRouter.apply(viewModel, [c, childRouter].concat(lifecycleArgs));
            }).then(function() {
              return component;
            })};
        }();
        if ((typeof _ret4 === 'undefined' ? 'undefined' : _typeof(_ret4)) === "object")
          return _ret4.v;
      }
      return component;
    });
  }
  var PipelineProvider = exports.PipelineProvider = function() {
    PipelineProvider.inject = function inject() {
      return [_aureliaDependencyInjection.Container];
    };
    function PipelineProvider(container) {
      _classCallCheck(this, PipelineProvider);
      this.container = container;
      this.steps = [BuildNavigationPlanStep, CanDeactivatePreviousStep, LoadRouteStep, this._createPipelineSlot('authorize'), CanActivateNextStep, this._createPipelineSlot('preActivate', 'modelbind'), DeactivatePreviousStep, ActivateNextStep, this._createPipelineSlot('preRender', 'precommit'), CommitChangesStep, this._createPipelineSlot('postRender', 'postcomplete')];
    }
    PipelineProvider.prototype.createPipeline = function createPipeline() {
      var _this6 = this;
      var pipeline = new Pipeline();
      this.steps.forEach(function(step) {
        return pipeline.addStep(_this6.container.get(step));
      });
      return pipeline;
    };
    PipelineProvider.prototype.addStep = function addStep(name, step) {
      var found = this.steps.find(function(x) {
        return x.slotName === name || x.slotAlias === name;
      });
      if (found) {
        found.steps.push(step);
      } else {
        throw new Error('Invalid pipeline slot name: ' + name + '.');
      }
    };
    PipelineProvider.prototype._createPipelineSlot = function _createPipelineSlot(name, alias) {
      var _class6,
          _temp;
      var PipelineSlot = (_temp = _class6 = function() {
        function PipelineSlot(container) {
          _classCallCheck(this, PipelineSlot);
          this.container = container;
        }
        PipelineSlot.prototype.getSteps = function getSteps() {
          var _this7 = this;
          return PipelineSlot.steps.map(function(x) {
            return _this7.container.get(x);
          });
        };
        return PipelineSlot;
      }(), _class6.inject = [_aureliaDependencyInjection.Container], _class6.slotName = name, _class6.slotAlias = alias, _class6.steps = [], _temp);
      return PipelineSlot;
    };
    return PipelineProvider;
  }();
  var logger = LogManager.getLogger('app-router');
  var AppRouter = exports.AppRouter = function(_Router) {
    _inherits(AppRouter, _Router);
    AppRouter.inject = function inject() {
      return [_aureliaDependencyInjection.Container, _aureliaHistory.History, PipelineProvider, _aureliaEventAggregator.EventAggregator];
    };
    function AppRouter(container, history, pipelineProvider, events) {
      _classCallCheck(this, AppRouter);
      var _this8 = _possibleConstructorReturn(this, _Router.call(this, container, history));
      _this8.pipelineProvider = pipelineProvider;
      _this8.events = events;
      return _this8;
    }
    AppRouter.prototype.reset = function reset() {
      _Router.prototype.reset.call(this);
      this.maxInstructionCount = 10;
      if (!this._queue) {
        this._queue = [];
      } else {
        this._queue.length = 0;
      }
    };
    AppRouter.prototype.loadUrl = function loadUrl(url) {
      var _this9 = this;
      return this._createNavigationInstruction(url).then(function(instruction) {
        return _this9._queueInstruction(instruction);
      }).catch(function(error) {
        logger.error(error);
        restorePreviousLocation(_this9);
      });
    };
    AppRouter.prototype.registerViewPort = function registerViewPort(viewPort, name) {
      var _this10 = this;
      _Router.prototype.registerViewPort.call(this, viewPort, name);
      if (!this.isActive) {
        var _ret5 = function() {
          var viewModel = _this10._findViewModel(viewPort);
          if ('configureRouter' in viewModel) {
            if (!_this10.isConfigured) {
              var _ret6 = function() {
                var resolveConfiguredPromise = _this10._resolveConfiguredPromise;
                _this10._resolveConfiguredPromise = function() {};
                return {v: {v: _this10.configure(function(config) {
                      return viewModel.configureRouter(config, _this10);
                    }).then(function() {
                      _this10.activate();
                      resolveConfiguredPromise();
                    })}};
              }();
              if ((typeof _ret6 === 'undefined' ? 'undefined' : _typeof(_ret6)) === "object")
                return _ret6.v;
            }
          } else {
            _this10.activate();
          }
        }();
        if ((typeof _ret5 === 'undefined' ? 'undefined' : _typeof(_ret5)) === "object")
          return _ret5.v;
      } else {
        this._dequeueInstruction();
      }
      return Promise.resolve();
    };
    AppRouter.prototype.activate = function activate(options) {
      if (this.isActive) {
        return;
      }
      this.isActive = true;
      this.options = Object.assign({routeHandler: this.loadUrl.bind(this)}, this.options, options);
      this.history.activate(this.options);
      this._dequeueInstruction();
    };
    AppRouter.prototype.deactivate = function deactivate() {
      this.isActive = false;
      this.history.deactivate();
    };
    AppRouter.prototype._queueInstruction = function _queueInstruction(instruction) {
      var _this11 = this;
      return new Promise(function(resolve) {
        instruction.resolve = resolve;
        _this11._queue.unshift(instruction);
        _this11._dequeueInstruction();
      });
    };
    AppRouter.prototype._dequeueInstruction = function _dequeueInstruction() {
      var _this12 = this;
      var instructionCount = arguments.length <= 0 || arguments[0] === undefined ? 0 : arguments[0];
      return Promise.resolve().then(function() {
        if (_this12.isNavigating && !instructionCount) {
          return undefined;
        }
        var instruction = _this12._queue.shift();
        _this12._queue.length = 0;
        if (!instruction) {
          return undefined;
        }
        _this12.isNavigating = true;
        instruction.previousInstruction = _this12.currentInstruction;
        if (!instructionCount) {
          _this12.events.publish('router:navigation:processing', {instruction: instruction});
        } else if (instructionCount === _this12.maxInstructionCount - 1) {
          logger.error(instructionCount + 1 + ' navigation instructions have been attempted without success. Restoring last known good location.');
          restorePreviousLocation(_this12);
          return _this12._dequeueInstruction(instructionCount + 1);
        } else if (instructionCount > _this12.maxInstructionCount) {
          throw new Error('Maximum navigation attempts exceeded. Giving up.');
        }
        var pipeline = _this12.pipelineProvider.createPipeline();
        return pipeline.run(instruction).then(function(result) {
          return processResult(instruction, result, instructionCount, _this12);
        }).catch(function(error) {
          return {output: error instanceof Error ? error : new Error(error)};
        }).then(function(result) {
          return resolveInstruction(instruction, result, !!instructionCount, _this12);
        });
      });
    };
    AppRouter.prototype._findViewModel = function _findViewModel(viewPort) {
      if (this.container.viewModel) {
        return this.container.viewModel;
      }
      if (viewPort.container) {
        var container = viewPort.container;
        while (container) {
          if (container.viewModel) {
            this.container.viewModel = container.viewModel;
            return container.viewModel;
          }
          container = container.parent;
        }
      }
    };
    return AppRouter;
  }(Router);
  function processResult(instruction, result, instructionCount, router) {
    if (!(result && 'completed' in result && 'output' in result)) {
      result = result || {};
      result.output = new Error('Expected router pipeline to return a navigation result, but got [' + JSON.stringify(result) + '] instead.');
    }
    var finalResult = null;
    if (isNavigationCommand(result.output)) {
      result.output.navigate(router);
    } else {
      finalResult = result;
      if (!result.completed) {
        if (result.output instanceof Error) {
          logger.error(result.output);
        }
        restorePreviousLocation(router);
      }
    }
    return router._dequeueInstruction(instructionCount + 1).then(function(innerResult) {
      return finalResult || innerResult || result;
    });
  }
  function resolveInstruction(instruction, result, isInnerInstruction, router) {
    instruction.resolve(result);
    if (!isInnerInstruction) {
      router.isNavigating = false;
      var eventArgs = {
        instruction: instruction,
        result: result
      };
      var eventName = void 0;
      if (result.output instanceof Error) {
        eventName = 'error';
      } else if (!result.completed) {
        eventName = 'canceled';
      } else {
        var _queryString = instruction.queryString ? '?' + instruction.queryString : '';
        router.history.previousLocation = instruction.fragment + _queryString;
        eventName = 'success';
      }
      router.events.publish('router:navigation:' + eventName, eventArgs);
      router.events.publish('router:navigation:complete', eventArgs);
    }
    return result;
  }
  function restorePreviousLocation(router) {
    var previousLocation = router.history.previousLocation;
    if (previousLocation) {
      router.navigate(router.history.previousLocation, {
        trigger: false,
        replace: true
      });
    } else {
      logger.error('Router navigation failed, and no previous location could be restored.');
    }
  }
});

})();
(function() {
var define = System.amdDefine;
define("npm:aurelia-router@1.0.0-beta.1.2.1.js", ["npm:aurelia-router@1.0.0-beta.1.2.1/aurelia-router"], function(main) {
  return main;
});

})();
(function() {
var define = System.amdDefine;
define("npm:aurelia-pal@1.0.0-beta.1.2.0/aurelia-pal.js", ["exports"], function(exports) {
  'use strict';
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.AggregateError = AggregateError;
  exports.initializePAL = initializePAL;
  function AggregateError(message, innerError, skipIfAlreadyAggregate) {
    if (innerError) {
      if (innerError.innerError && skipIfAlreadyAggregate) {
        return innerError;
      }
      if (innerError.stack) {
        message += '\n------------------------------------------------\ninner error: ' + innerError.stack;
      }
    }
    var e = new Error(message);
    if (innerError) {
      e.innerError = innerError;
    }
    return e;
  }
  var FEATURE = exports.FEATURE = {};
  var PLATFORM = exports.PLATFORM = {
    noop: function noop() {},
    eachModule: function eachModule() {}
  };
  PLATFORM.global = function() {
    if (typeof self !== 'undefined') {
      return self;
    }
    if (typeof global !== 'undefined') {
      return global;
    }
    return new Function('return this')();
  }();
  var DOM = exports.DOM = {};
  function initializePAL(callback) {
    if (typeof Object.getPropertyDescriptor !== 'function') {
      Object.getPropertyDescriptor = function(subject, name) {
        var pd = Object.getOwnPropertyDescriptor(subject, name);
        var proto = Object.getPrototypeOf(subject);
        while (typeof pd === 'undefined' && proto !== null) {
          pd = Object.getOwnPropertyDescriptor(proto, name);
          proto = Object.getPrototypeOf(proto);
        }
        return pd;
      };
    }
    callback(PLATFORM, FEATURE, DOM);
  }
});

})();
(function() {
var define = System.amdDefine;
define("npm:aurelia-pal@1.0.0-beta.1.2.0.js", ["npm:aurelia-pal@1.0.0-beta.1.2.0/aurelia-pal"], function(main) {
  return main;
});

})();
(function() {
var define = System.amdDefine;
define("npm:aurelia-logging@1.0.0-beta.1.2.0/aurelia-logging.js", ["exports"], function(exports) {
  'use strict';
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.getLogger = getLogger;
  exports.addAppender = addAppender;
  exports.setLevel = setLevel;
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  var logLevel = exports.logLevel = {
    none: 0,
    error: 1,
    warn: 2,
    info: 3,
    debug: 4
  };
  var loggers = {};
  var currentLevel = logLevel.none;
  var appenders = [];
  var slice = Array.prototype.slice;
  var loggerConstructionKey = {};
  function log(logger, level, args) {
    var i = appenders.length;
    var current = void 0;
    args = slice.call(args);
    args.unshift(logger);
    while (i--) {
      current = appenders[i];
      current[level].apply(current, args);
    }
  }
  function debug() {
    if (currentLevel < 4) {
      return;
    }
    log(this, 'debug', arguments);
  }
  function info() {
    if (currentLevel < 3) {
      return;
    }
    log(this, 'info', arguments);
  }
  function warn() {
    if (currentLevel < 2) {
      return;
    }
    log(this, 'warn', arguments);
  }
  function error() {
    if (currentLevel < 1) {
      return;
    }
    log(this, 'error', arguments);
  }
  function connectLogger(logger) {
    logger.debug = debug;
    logger.info = info;
    logger.warn = warn;
    logger.error = error;
  }
  function createLogger(id) {
    var logger = new Logger(id, loggerConstructionKey);
    if (appenders.length) {
      connectLogger(logger);
    }
    return logger;
  }
  function getLogger(id) {
    return loggers[id] || (loggers[id] = createLogger(id));
  }
  function addAppender(appender) {
    appenders.push(appender);
    if (appenders.length === 1) {
      for (var key in loggers) {
        connectLogger(loggers[key]);
      }
    }
  }
  function setLevel(level) {
    currentLevel = level;
  }
  var Logger = exports.Logger = function() {
    function Logger(id, key) {
      _classCallCheck(this, Logger);
      if (key !== loggerConstructionKey) {
        throw new Error('You cannot instantiate "Logger". Use the "getLogger" API instead.');
      }
      this.id = id;
    }
    Logger.prototype.debug = function debug(message) {};
    Logger.prototype.info = function info(message) {};
    Logger.prototype.warn = function warn(message) {};
    Logger.prototype.error = function error(message) {};
    return Logger;
  }();
});

})();
(function() {
var define = System.amdDefine;
define("npm:aurelia-logging@1.0.0-beta.1.2.0.js", ["npm:aurelia-logging@1.0.0-beta.1.2.0/aurelia-logging"], function(main) {
  return main;
});

})();
(function() {
var define = System.amdDefine;
define("npm:aurelia-templating-router@1.0.0-beta.1.2.0/route-href.js", ["exports", "aurelia-templating", "aurelia-dependency-injection", "aurelia-router", "aurelia-pal", "aurelia-logging"], function(exports, _aureliaTemplating, _aureliaDependencyInjection, _aureliaRouter, _aureliaPal, _aureliaLogging) {
  'use strict';
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.RouteHref = undefined;
  var LogManager = _interopRequireWildcard(_aureliaLogging);
  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};
      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key))
            newObj[key] = obj[key];
        }
      }
      newObj.default = obj;
      return newObj;
    }
  }
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  var _dec,
      _dec2,
      _dec3,
      _dec4,
      _dec5,
      _class;
  var logger = LogManager.getLogger('route-href');
  var RouteHref = exports.RouteHref = (_dec = (0, _aureliaTemplating.customAttribute)('route-href'), _dec2 = (0, _aureliaTemplating.bindable)({
    name: 'route',
    changeHandler: 'processChange'
  }), _dec3 = (0, _aureliaTemplating.bindable)({
    name: 'params',
    changeHandler: 'processChange'
  }), _dec4 = (0, _aureliaTemplating.bindable)({
    name: 'attribute',
    defaultValue: 'href'
  }), _dec5 = (0, _aureliaDependencyInjection.inject)(_aureliaRouter.Router, _aureliaPal.DOM.Element), _dec(_class = _dec2(_class = _dec3(_class = _dec4(_class = _dec5(_class = function() {
    function RouteHref(router, element) {
      _classCallCheck(this, RouteHref);
      this.router = router;
      this.element = element;
    }
    RouteHref.prototype.bind = function bind() {
      this.isActive = true;
      this.processChange();
    };
    RouteHref.prototype.unbind = function unbind() {
      this.isActive = false;
    };
    RouteHref.prototype.attributeChanged = function attributeChanged(value, previous) {
      if (previous) {
        this.element.removeAttribute(previous);
      }
      this.processChange();
    };
    RouteHref.prototype.processChange = function processChange() {
      var _this = this;
      return this.router.ensureConfigured().then(function() {
        if (!_this.isActive) {
          return;
        }
        var href = _this.router.generate(_this.route, _this.params);
        _this.element.setAttribute(_this.attribute, href);
      }).catch(function(reason) {
        logger.error(reason);
      });
    };
    return RouteHref;
  }()) || _class) || _class) || _class) || _class) || _class);
});

})();
(function() {
var define = System.amdDefine;
define("npm:aurelia-templating-router@1.0.0-beta.1.2.0/aurelia-templating-router.js", ["exports", "aurelia-router", "./route-loader", "./router-view", "./route-href"], function(exports, _aureliaRouter, _routeLoader, _routerView, _routeHref) {
  'use strict';
  Object.defineProperty(exports, "__esModule", {value: true});
  exports.configure = exports.RouteHref = exports.RouterView = exports.TemplatingRouteLoader = undefined;
  function configure(config) {
    config.singleton(_aureliaRouter.RouteLoader, _routeLoader.TemplatingRouteLoader).singleton(_aureliaRouter.Router, _aureliaRouter.AppRouter).globalResources('./router-view', './route-href');
    config.container.registerAlias(_aureliaRouter.Router, _aureliaRouter.AppRouter);
  }
  exports.TemplatingRouteLoader = _routeLoader.TemplatingRouteLoader;
  exports.RouterView = _routerView.RouterView;
  exports.RouteHref = _routeHref.RouteHref;
  exports.configure = configure;
});

})();
(function() {
var define = System.amdDefine;
define("npm:aurelia-templating-router@1.0.0-beta.1.2.0.js", ["npm:aurelia-templating-router@1.0.0-beta.1.2.0/aurelia-templating-router"], function(main) {
  return main;
});

})();
System.registerDynamic("npm:babel-core@5.8.38/browser.js", [], false, function($__require, $__exports, $__module) {
  var _retrieveGlobal = System.get("@@global-helpers").prepareGlobal($__module.id, "babel", null);
  (function() {
    "format global";
    "exports babel";
    (function(f) {
      if (typeof exports === "object" && typeof module !== "undefined") {
        module.exports = f();
      } else if (typeof define === "function" && define.amd) {
        define([], f);
      } else {
        var g;
        if (typeof window !== "undefined") {
          g = window;
        } else if (typeof global !== "undefined") {
          g = global;
        } else if (typeof self !== "undefined") {
          g = self;
        } else {
          g = this;
        }
        g.babel = f();
      }
    })(function() {
      var define,
          module,
          exports;
      return (function e(t, n, r) {
        function s(o, u) {
          if (!n[o]) {
            if (!t[o]) {
              var a = typeof require == "function" && require;
              if (!u && a)
                return a(o, !0);
              if (i)
                return i(o, !0);
              var f = new Error("Cannot find module '" + o + "'");
              throw f.code = "MODULE_NOT_FOUND", f;
            }
            var l = n[o] = {exports: {}};
            t[o][0].call(l.exports, function(e) {
              var n = t[o][1][e];
              return s(n ? n : e);
            }, l, l.exports, e, t, n, r);
          }
          return n[o].exports;
        }
        var i = typeof require == "function" && require;
        for (var o = 0; o < r.length; o++)
          s(r[o]);
        return s;
      })({
        1: [function(_dereq_, module, exports) {
          var util = _dereq_(13);
          var pSlice = Array.prototype.slice;
          var hasOwn = Object.prototype.hasOwnProperty;
          var assert = module.exports = ok;
          assert.AssertionError = function AssertionError(options) {
            this.name = 'AssertionError';
            this.actual = options.actual;
            this.expected = options.expected;
            this.operator = options.operator;
            if (options.message) {
              this.message = options.message;
              this.generatedMessage = false;
            } else {
              this.message = getMessage(this);
              this.generatedMessage = true;
            }
            var stackStartFunction = options.stackStartFunction || fail;
            if (Error.captureStackTrace) {
              Error.captureStackTrace(this, stackStartFunction);
            } else {
              var err = new Error();
              if (err.stack) {
                var out = err.stack;
                var fn_name = stackStartFunction.name;
                var idx = out.indexOf('\n' + fn_name);
                if (idx >= 0) {
                  var next_line = out.indexOf('\n', idx + 1);
                  out = out.substring(next_line + 1);
                }
                this.stack = out;
              }
            }
          };
          util.inherits(assert.AssertionError, Error);
          function replacer(key, value) {
            if (util.isUndefined(value)) {
              return '' + value;
            }
            if (util.isNumber(value) && !isFinite(value)) {
              return value.toString();
            }
            if (util.isFunction(value) || util.isRegExp(value)) {
              return value.toString();
            }
            return value;
          }
          function truncate(s, n) {
            if (util.isString(s)) {
              return s.length < n ? s : s.slice(0, n);
            } else {
              return s;
            }
          }
          function getMessage(self) {
            return truncate(JSON.stringify(self.actual, replacer), 128) + ' ' + self.operator + ' ' + truncate(JSON.stringify(self.expected, replacer), 128);
          }
          function fail(actual, expected, message, operator, stackStartFunction) {
            throw new assert.AssertionError({
              message: message,
              actual: actual,
              expected: expected,
              operator: operator,
              stackStartFunction: stackStartFunction
            });
          }
          assert.fail = fail;
          function ok(value, message) {
            if (!value)
              fail(value, true, message, '==', assert.ok);
          }
          assert.ok = ok;
          assert.equal = function equal(actual, expected, message) {
            if (actual != expected)
              fail(actual, expected, message, '==', assert.equal);
          };
          assert.notEqual = function notEqual(actual, expected, message) {
            if (actual == expected) {
              fail(actual, expected, message, '!=', assert.notEqual);
            }
          };
          assert.deepEqual = function deepEqual(actual, expected, message) {
            if (!_deepEqual(actual, expected)) {
              fail(actual, expected, message, 'deepEqual', assert.deepEqual);
            }
          };
          function _deepEqual(actual, expected) {
            if (actual === expected) {
              return true;
            } else if (util.isBuffer(actual) && util.isBuffer(expected)) {
              if (actual.length != expected.length)
                return false;
              for (var i = 0; i < actual.length; i++) {
                if (actual[i] !== expected[i])
                  return false;
              }
              return true;
            } else if (util.isDate(actual) && util.isDate(expected)) {
              return actual.getTime() === expected.getTime();
            } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
              return actual.source === expected.source && actual.global === expected.global && actual.multiline === expected.multiline && actual.lastIndex === expected.lastIndex && actual.ignoreCase === expected.ignoreCase;
            } else if (!util.isObject(actual) && !util.isObject(expected)) {
              return actual == expected;
            } else {
              return objEquiv(actual, expected);
            }
          }
          function isArguments(object) {
            return Object.prototype.toString.call(object) == '[object Arguments]';
          }
          function objEquiv(a, b) {
            if (util.isNullOrUndefined(a) || util.isNullOrUndefined(b))
              return false;
            if (a.prototype !== b.prototype)
              return false;
            if (util.isPrimitive(a) || util.isPrimitive(b)) {
              return a === b;
            }
            var aIsArgs = isArguments(a),
                bIsArgs = isArguments(b);
            if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))
              return false;
            if (aIsArgs) {
              a = pSlice.call(a);
              b = pSlice.call(b);
              return _deepEqual(a, b);
            }
            var ka = objectKeys(a),
                kb = objectKeys(b),
                key,
                i;
            if (ka.length != kb.length)
              return false;
            ka.sort();
            kb.sort();
            for (i = ka.length - 1; i >= 0; i--) {
              if (ka[i] != kb[i])
                return false;
            }
            for (i = ka.length - 1; i >= 0; i--) {
              key = ka[i];
              if (!_deepEqual(a[key], b[key]))
                return false;
            }
            return true;
          }
          assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
            if (_deepEqual(actual, expected)) {
              fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
            }
          };
          assert.strictEqual = function strictEqual(actual, expected, message) {
            if (actual !== expected) {
              fail(actual, expected, message, '===', assert.strictEqual);
            }
          };
          assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
            if (actual === expected) {
              fail(actual, expected, message, '!==', assert.notStrictEqual);
            }
          };
          function expectedException(actual, expected) {
            if (!actual || !expected) {
              return false;
            }
            if (Object.prototype.toString.call(expected) == '[object RegExp]') {
              return expected.test(actual);
            } else if (actual instanceof expected) {
              return true;
            } else if (expected.call({}, actual) === true) {
              return true;
            }
            return false;
          }
          function _throws(shouldThrow, block, expected, message) {
            var actual;
            if (util.isString(expected)) {
              message = expected;
              expected = null;
            }
            try {
              block();
            } catch (e) {
              actual = e;
            }
            message = (expected && expected.name ? ' (' + expected.name + ').' : '.') + (message ? ' ' + message : '.');
            if (shouldThrow && !actual) {
              fail(actual, expected, 'Missing expected exception' + message);
            }
            if (!shouldThrow && expectedException(actual, expected)) {
              fail(actual, expected, 'Got unwanted exception' + message);
            }
            if ((shouldThrow && actual && expected && !expectedException(actual, expected)) || (!shouldThrow && actual)) {
              throw actual;
            }
          }
          assert.throws = function(block, error, message) {
            _throws.apply(this, [true].concat(pSlice.call(arguments)));
          };
          assert.doesNotThrow = function(block, message) {
            _throws.apply(this, [false].concat(pSlice.call(arguments)));
          };
          assert.ifError = function(err) {
            if (err) {
              throw err;
            }
          };
          var objectKeys = Object.keys || function(obj) {
            var keys = [];
            for (var key in obj) {
              if (hasOwn.call(obj, key))
                keys.push(key);
            }
            return keys;
          };
        }, {"13": 13}],
        2: [function(_dereq_, module, exports) {
          var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
          ;
          (function(exports) {
            'use strict';
            var Arr = (typeof Uint8Array !== 'undefined') ? Uint8Array : Array;
            var PLUS = '+'.charCodeAt(0);
            var SLASH = '/'.charCodeAt(0);
            var NUMBER = '0'.charCodeAt(0);
            var LOWER = 'a'.charCodeAt(0);
            var UPPER = 'A'.charCodeAt(0);
            var PLUS_URL_SAFE = '-'.charCodeAt(0);
            var SLASH_URL_SAFE = '_'.charCodeAt(0);
            function decode(elt) {
              var code = elt.charCodeAt(0);
              if (code === PLUS || code === PLUS_URL_SAFE)
                return 62;
              if (code === SLASH || code === SLASH_URL_SAFE)
                return 63;
              if (code < NUMBER)
                return -1;
              if (code < NUMBER + 10)
                return code - NUMBER + 26 + 26;
              if (code < UPPER + 26)
                return code - UPPER;
              if (code < LOWER + 26)
                return code - LOWER + 26;
            }
            function b64ToByteArray(b64) {
              var i,
                  j,
                  l,
                  tmp,
                  placeHolders,
                  arr;
              if (b64.length % 4 > 0) {
                throw new Error('Invalid string. Length must be a multiple of 4');
              }
              var len = b64.length;
              placeHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0;
              arr = new Arr(b64.length * 3 / 4 - placeHolders);
              l = placeHolders > 0 ? b64.length - 4 : b64.length;
              var L = 0;
              function push(v) {
                arr[L++] = v;
              }
              for (i = 0, j = 0; i < l; i += 4, j += 3) {
                tmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3));
                push((tmp & 0xFF0000) >> 16);
                push((tmp & 0xFF00) >> 8);
                push(tmp & 0xFF);
              }
              if (placeHolders === 2) {
                tmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4);
                push(tmp & 0xFF);
              } else if (placeHolders === 1) {
                tmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2);
                push((tmp >> 8) & 0xFF);
                push(tmp & 0xFF);
              }
              return arr;
            }
            function uint8ToBase64(uint8) {
              var i,
                  extraBytes = uint8.length % 3,
                  output = "",
                  temp,
                  length;
              function encode(num) {
                return lookup.charAt(num);
              }
              function tripletToBase64(num) {
                return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F);
              }
              for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
                temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2]);
                output += tripletToBase64(temp);
              }
              switch (extraBytes) {
                case 1:
                  temp = uint8[uint8.length - 1];
                  output += encode(temp >> 2);
                  output += encode((temp << 4) & 0x3F);
                  output += '==';
                  break;
                case 2:
                  temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1]);
                  output += encode(temp >> 10);
                  output += encode((temp >> 4) & 0x3F);
                  output += encode((temp << 2) & 0x3F);
                  output += '=';
                  break;
              }
              return output;
            }
            exports.toByteArray = b64ToByteArray;
            exports.fromByteArray = uint8ToBase64;
          }(typeof exports === 'undefined' ? (this.base64js = {}) : exports));
        }, {}],
        3: [function(_dereq_, module, exports) {}, {}],
        4: [function(_dereq_, module, exports) {
          (function(global) {
            'use strict';
            var base64 = _dereq_(2);
            var ieee754 = _dereq_(6);
            var isArray = _dereq_(5);
            exports.Buffer = Buffer;
            exports.SlowBuffer = SlowBuffer;
            exports.INSPECT_MAX_BYTES = 50;
            Buffer.poolSize = 8192;
            var rootParent = {};
            Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined ? global.TYPED_ARRAY_SUPPORT : typedArraySupport();
            function typedArraySupport() {
              function Bar() {}
              try {
                var arr = new Uint8Array(1);
                arr.foo = function() {
                  return 42;
                };
                arr.constructor = Bar;
                return arr.foo() === 42 && arr.constructor === Bar && typeof arr.subarray === 'function' && arr.subarray(1, 1).byteLength === 0;
              } catch (e) {
                return false;
              }
            }
            function kMaxLength() {
              return Buffer.TYPED_ARRAY_SUPPORT ? 0x7fffffff : 0x3fffffff;
            }
            function Buffer(arg) {
              if (!(this instanceof Buffer)) {
                if (arguments.length > 1)
                  return new Buffer(arg, arguments[1]);
                return new Buffer(arg);
              }
              if (!Buffer.TYPED_ARRAY_SUPPORT) {
                this.length = 0;
                this.parent = undefined;
              }
              if (typeof arg === 'number') {
                return fromNumber(this, arg);
              }
              if (typeof arg === 'string') {
                return fromString(this, arg, arguments.length > 1 ? arguments[1] : 'utf8');
              }
              return fromObject(this, arg);
            }
            function fromNumber(that, length) {
              that = allocate(that, length < 0 ? 0 : checked(length) | 0);
              if (!Buffer.TYPED_ARRAY_SUPPORT) {
                for (var i = 0; i < length; i++) {
                  that[i] = 0;
                }
              }
              return that;
            }
            function fromString(that, string, encoding) {
              if (typeof encoding !== 'string' || encoding === '')
                encoding = 'utf8';
              var length = byteLength(string, encoding) | 0;
              that = allocate(that, length);
              that.write(string, encoding);
              return that;
            }
            function fromObject(that, object) {
              if (Buffer.isBuffer(object))
                return fromBuffer(that, object);
              if (isArray(object))
                return fromArray(that, object);
              if (object == null) {
                throw new TypeError('must start with number, buffer, array or string');
              }
              if (typeof ArrayBuffer !== 'undefined') {
                if (object.buffer instanceof ArrayBuffer) {
                  return fromTypedArray(that, object);
                }
                if (object instanceof ArrayBuffer) {
                  return fromArrayBuffer(that, object);
                }
              }
              if (object.length)
                return fromArrayLike(that, object);
              return fromJsonObject(that, object);
            }
            function fromBuffer(that, buffer) {
              var length = checked(buffer.length) | 0;
              that = allocate(that, length);
              buffer.copy(that, 0, 0, length);
              return that;
            }
            function fromArray(that, array) {
              var length = checked(array.length) | 0;
              that = allocate(that, length);
              for (var i = 0; i < length; i += 1) {
                that[i] = array[i] & 255;
              }
              return that;
            }
            function fromTypedArray(that, array) {
              var length = checked(array.length) | 0;
              that = allocate(that, length);
              for (var i = 0; i < length; i += 1) {
                that[i] = array[i] & 255;
              }
              return that;
            }
            function fromArrayBuffer(that, array) {
              if (Buffer.TYPED_ARRAY_SUPPORT) {
                array.byteLength;
                that = Buffer._augment(new Uint8Array(array));
              } else {
                that = fromTypedArray(that, new Uint8Array(array));
              }
              return that;
            }
            function fromArrayLike(that, array) {
              var length = checked(array.length) | 0;
              that = allocate(that, length);
              for (var i = 0; i < length; i += 1) {
                that[i] = array[i] & 255;
              }
              return that;
            }
            function fromJsonObject(that, object) {
              var array;
              var length = 0;
              if (object.type === 'Buffer' && isArray(object.data)) {
                array = object.data;
                length = checked(array.length) | 0;
              }
              that = allocate(that, length);
              for (var i = 0; i < length; i += 1) {
                that[i] = array[i] & 255;
              }
              return that;
            }
            if (Buffer.TYPED_ARRAY_SUPPORT) {
              Buffer.prototype.__proto__ = Uint8Array.prototype;
              Buffer.__proto__ = Uint8Array;
            } else {
              Buffer.prototype.length = undefined;
              Buffer.prototype.parent = undefined;
            }
            function allocate(that, length) {
              if (Buffer.TYPED_ARRAY_SUPPORT) {
                that = Buffer._augment(new Uint8Array(length));
                that.__proto__ = Buffer.prototype;
              } else {
                that.length = length;
                that._isBuffer = true;
              }
              var fromPool = length !== 0 && length <= Buffer.poolSize >>> 1;
              if (fromPool)
                that.parent = rootParent;
              return that;
            }
            function checked(length) {
              if (length >= kMaxLength()) {
                throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + kMaxLength().toString(16) + ' bytes');
              }
              return length | 0;
            }
            function SlowBuffer(subject, encoding) {
              if (!(this instanceof SlowBuffer))
                return new SlowBuffer(subject, encoding);
              var buf = new Buffer(subject, encoding);
              delete buf.parent;
              return buf;
            }
            Buffer.isBuffer = function isBuffer(b) {
              return !!(b != null && b._isBuffer);
            };
            Buffer.compare = function compare(a, b) {
              if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
                throw new TypeError('Arguments must be Buffers');
              }
              if (a === b)
                return 0;
              var x = a.length;
              var y = b.length;
              var i = 0;
              var len = Math.min(x, y);
              while (i < len) {
                if (a[i] !== b[i])
                  break;
                ++i;
              }
              if (i !== len) {
                x = a[i];
                y = b[i];
              }
              if (x < y)
                return -1;
              if (y < x)
                return 1;
              return 0;
            };
            Buffer.isEncoding = function isEncoding(encoding) {
              switch (String(encoding).toLowerCase()) {
                case 'hex':
                case 'utf8':
                case 'utf-8':
                case 'ascii':
                case 'binary':
                case 'base64':
                case 'raw':
                case 'ucs2':
                case 'ucs-2':
                case 'utf16le':
                case 'utf-16le':
                  return true;
                default:
                  return false;
              }
            };
            Buffer.concat = function concat(list, length) {
              if (!isArray(list))
                throw new TypeError('list argument must be an Array of Buffers.');
              if (list.length === 0) {
                return new Buffer(0);
              }
              var i;
              if (length === undefined) {
                length = 0;
                for (i = 0; i < list.length; i++) {
                  length += list[i].length;
                }
              }
              var buf = new Buffer(length);
              var pos = 0;
              for (i = 0; i < list.length; i++) {
                var item = list[i];
                item.copy(buf, pos);
                pos += item.length;
              }
              return buf;
            };
            function byteLength(string, encoding) {
              if (typeof string !== 'string')
                string = '' + string;
              var len = string.length;
              if (len === 0)
                return 0;
              var loweredCase = false;
              for (; ; ) {
                switch (encoding) {
                  case 'ascii':
                  case 'binary':
                  case 'raw':
                  case 'raws':
                    return len;
                  case 'utf8':
                  case 'utf-8':
                    return utf8ToBytes(string).length;
                  case 'ucs2':
                  case 'ucs-2':
                  case 'utf16le':
                  case 'utf-16le':
                    return len * 2;
                  case 'hex':
                    return len >>> 1;
                  case 'base64':
                    return base64ToBytes(string).length;
                  default:
                    if (loweredCase)
                      return utf8ToBytes(string).length;
                    encoding = ('' + encoding).toLowerCase();
                    loweredCase = true;
                }
              }
            }
            Buffer.byteLength = byteLength;
            function slowToString(encoding, start, end) {
              var loweredCase = false;
              start = start | 0;
              end = end === undefined || end === Infinity ? this.length : end | 0;
              if (!encoding)
                encoding = 'utf8';
              if (start < 0)
                start = 0;
              if (end > this.length)
                end = this.length;
              if (end <= start)
                return '';
              while (true) {
                switch (encoding) {
                  case 'hex':
                    return hexSlice(this, start, end);
                  case 'utf8':
                  case 'utf-8':
                    return utf8Slice(this, start, end);
                  case 'ascii':
                    return asciiSlice(this, start, end);
                  case 'binary':
                    return binarySlice(this, start, end);
                  case 'base64':
                    return base64Slice(this, start, end);
                  case 'ucs2':
                  case 'ucs-2':
                  case 'utf16le':
                  case 'utf-16le':
                    return utf16leSlice(this, start, end);
                  default:
                    if (loweredCase)
                      throw new TypeError('Unknown encoding: ' + encoding);
                    encoding = (encoding + '').toLowerCase();
                    loweredCase = true;
                }
              }
            }
            Buffer.prototype.toString = function toString() {
              var length = this.length | 0;
              if (length === 0)
                return '';
              if (arguments.length === 0)
                return utf8Slice(this, 0, length);
              return slowToString.apply(this, arguments);
            };
            Buffer.prototype.equals = function equals(b) {
              if (!Buffer.isBuffer(b))
                throw new TypeError('Argument must be a Buffer');
              if (this === b)
                return true;
              return Buffer.compare(this, b) === 0;
            };
            Buffer.prototype.inspect = function inspect() {
              var str = '';
              var max = exports.INSPECT_MAX_BYTES;
              if (this.length > 0) {
                str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
                if (this.length > max)
                  str += ' ... ';
              }
              return '<Buffer ' + str + '>';
            };
            Buffer.prototype.compare = function compare(b) {
              if (!Buffer.isBuffer(b))
                throw new TypeError('Argument must be a Buffer');
              if (this === b)
                return 0;
              return Buffer.compare(this, b);
            };
            Buffer.prototype.indexOf = function indexOf(val, byteOffset) {
              if (byteOffset > 0x7fffffff)
                byteOffset = 0x7fffffff;
              else if (byteOffset < -0x80000000)
                byteOffset = -0x80000000;
              byteOffset >>= 0;
              if (this.length === 0)
                return -1;
              if (byteOffset >= this.length)
                return -1;
              if (byteOffset < 0)
                byteOffset = Math.max(this.length + byteOffset, 0);
              if (typeof val === 'string') {
                if (val.length === 0)
                  return -1;
                return String.prototype.indexOf.call(this, val, byteOffset);
              }
              if (Buffer.isBuffer(val)) {
                return arrayIndexOf(this, val, byteOffset);
              }
              if (typeof val === 'number') {
                if (Buffer.TYPED_ARRAY_SUPPORT && Uint8Array.prototype.indexOf === 'function') {
                  return Uint8Array.prototype.indexOf.call(this, val, byteOffset);
                }
                return arrayIndexOf(this, [val], byteOffset);
              }
              function arrayIndexOf(arr, val, byteOffset) {
                var foundIndex = -1;
                for (var i = 0; byteOffset + i < arr.length; i++) {
                  if (arr[byteOffset + i] === val[foundIndex === -1 ? 0 : i - foundIndex]) {
                    if (foundIndex === -1)
                      foundIndex = i;
                    if (i - foundIndex + 1 === val.length)
                      return byteOffset + foundIndex;
                  } else {
                    foundIndex = -1;
                  }
                }
                return -1;
              }
              throw new TypeError('val must be string, number or Buffer');
            };
            Buffer.prototype.get = function get(offset) {
              console.log('.get() is deprecated. Access using array indexes instead.');
              return this.readUInt8(offset);
            };
            Buffer.prototype.set = function set(v, offset) {
              console.log('.set() is deprecated. Access using array indexes instead.');
              return this.writeUInt8(v, offset);
            };
            function hexWrite(buf, string, offset, length) {
              offset = Number(offset) || 0;
              var remaining = buf.length - offset;
              if (!length) {
                length = remaining;
              } else {
                length = Number(length);
                if (length > remaining) {
                  length = remaining;
                }
              }
              var strLen = string.length;
              if (strLen % 2 !== 0)
                throw new Error('Invalid hex string');
              if (length > strLen / 2) {
                length = strLen / 2;
              }
              for (var i = 0; i < length; i++) {
                var parsed = parseInt(string.substr(i * 2, 2), 16);
                if (isNaN(parsed))
                  throw new Error('Invalid hex string');
                buf[offset + i] = parsed;
              }
              return i;
            }
            function utf8Write(buf, string, offset, length) {
              return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
            }
            function asciiWrite(buf, string, offset, length) {
              return blitBuffer(asciiToBytes(string), buf, offset, length);
            }
            function binaryWrite(buf, string, offset, length) {
              return asciiWrite(buf, string, offset, length);
            }
            function base64Write(buf, string, offset, length) {
              return blitBuffer(base64ToBytes(string), buf, offset, length);
            }
            function ucs2Write(buf, string, offset, length) {
              return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
            }
            Buffer.prototype.write = function write(string, offset, length, encoding) {
              if (offset === undefined) {
                encoding = 'utf8';
                length = this.length;
                offset = 0;
              } else if (length === undefined && typeof offset === 'string') {
                encoding = offset;
                length = this.length;
                offset = 0;
              } else if (isFinite(offset)) {
                offset = offset | 0;
                if (isFinite(length)) {
                  length = length | 0;
                  if (encoding === undefined)
                    encoding = 'utf8';
                } else {
                  encoding = length;
                  length = undefined;
                }
              } else {
                var swap = encoding;
                encoding = offset;
                offset = length | 0;
                length = swap;
              }
              var remaining = this.length - offset;
              if (length === undefined || length > remaining)
                length = remaining;
              if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
                throw new RangeError('attempt to write outside buffer bounds');
              }
              if (!encoding)
                encoding = 'utf8';
              var loweredCase = false;
              for (; ; ) {
                switch (encoding) {
                  case 'hex':
                    return hexWrite(this, string, offset, length);
                  case 'utf8':
                  case 'utf-8':
                    return utf8Write(this, string, offset, length);
                  case 'ascii':
                    return asciiWrite(this, string, offset, length);
                  case 'binary':
                    return binaryWrite(this, string, offset, length);
                  case 'base64':
                    return base64Write(this, string, offset, length);
                  case 'ucs2':
                  case 'ucs-2':
                  case 'utf16le':
                  case 'utf-16le':
                    return ucs2Write(this, string, offset, length);
                  default:
                    if (loweredCase)
                      throw new TypeError('Unknown encoding: ' + encoding);
                    encoding = ('' + encoding).toLowerCase();
                    loweredCase = true;
                }
              }
            };
            Buffer.prototype.toJSON = function toJSON() {
              return {
                type: 'Buffer',
                data: Array.prototype.slice.call(this._arr || this, 0)
              };
            };
            function base64Slice(buf, start, end) {
              if (start === 0 && end === buf.length) {
                return base64.fromByteArray(buf);
              } else {
                return base64.fromByteArray(buf.slice(start, end));
              }
            }
            function utf8Slice(buf, start, end) {
              end = Math.min(buf.length, end);
              var res = [];
              var i = start;
              while (i < end) {
                var firstByte = buf[i];
                var codePoint = null;
                var bytesPerSequence = (firstByte > 0xEF) ? 4 : (firstByte > 0xDF) ? 3 : (firstByte > 0xBF) ? 2 : 1;
                if (i + bytesPerSequence <= end) {
                  var secondByte,
                      thirdByte,
                      fourthByte,
                      tempCodePoint;
                  switch (bytesPerSequence) {
                    case 1:
                      if (firstByte < 0x80) {
                        codePoint = firstByte;
                      }
                      break;
                    case 2:
                      secondByte = buf[i + 1];
                      if ((secondByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F);
                        if (tempCodePoint > 0x7F) {
                          codePoint = tempCodePoint;
                        }
                      }
                      break;
                    case 3:
                      secondByte = buf[i + 1];
                      thirdByte = buf[i + 2];
                      if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F);
                        if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                          codePoint = tempCodePoint;
                        }
                      }
                      break;
                    case 4:
                      secondByte = buf[i + 1];
                      thirdByte = buf[i + 2];
                      fourthByte = buf[i + 3];
                      if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F);
                        if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                          codePoint = tempCodePoint;
                        }
                      }
                  }
                }
                if (codePoint === null) {
                  codePoint = 0xFFFD;
                  bytesPerSequence = 1;
                } else if (codePoint > 0xFFFF) {
                  codePoint -= 0x10000;
                  res.push(codePoint >>> 10 & 0x3FF | 0xD800);
                  codePoint = 0xDC00 | codePoint & 0x3FF;
                }
                res.push(codePoint);
                i += bytesPerSequence;
              }
              return decodeCodePointsArray(res);
            }
            var MAX_ARGUMENTS_LENGTH = 0x1000;
            function decodeCodePointsArray(codePoints) {
              var len = codePoints.length;
              if (len <= MAX_ARGUMENTS_LENGTH) {
                return String.fromCharCode.apply(String, codePoints);
              }
              var res = '';
              var i = 0;
              while (i < len) {
                res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
              }
              return res;
            }
            function asciiSlice(buf, start, end) {
              var ret = '';
              end = Math.min(buf.length, end);
              for (var i = start; i < end; i++) {
                ret += String.fromCharCode(buf[i] & 0x7F);
              }
              return ret;
            }
            function binarySlice(buf, start, end) {
              var ret = '';
              end = Math.min(buf.length, end);
              for (var i = start; i < end; i++) {
                ret += String.fromCharCode(buf[i]);
              }
              return ret;
            }
            function hexSlice(buf, start, end) {
              var len = buf.length;
              if (!start || start < 0)
                start = 0;
              if (!end || end < 0 || end > len)
                end = len;
              var out = '';
              for (var i = start; i < end; i++) {
                out += toHex(buf[i]);
              }
              return out;
            }
            function utf16leSlice(buf, start, end) {
              var bytes = buf.slice(start, end);
              var res = '';
              for (var i = 0; i < bytes.length; i += 2) {
                res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
              }
              return res;
            }
            Buffer.prototype.slice = function slice(start, end) {
              var len = this.length;
              start = ~~start;
              end = end === undefined ? len : ~~end;
              if (start < 0) {
                start += len;
                if (start < 0)
                  start = 0;
              } else if (start > len) {
                start = len;
              }
              if (end < 0) {
                end += len;
                if (end < 0)
                  end = 0;
              } else if (end > len) {
                end = len;
              }
              if (end < start)
                end = start;
              var newBuf;
              if (Buffer.TYPED_ARRAY_SUPPORT) {
                newBuf = Buffer._augment(this.subarray(start, end));
              } else {
                var sliceLen = end - start;
                newBuf = new Buffer(sliceLen, undefined);
                for (var i = 0; i < sliceLen; i++) {
                  newBuf[i] = this[i + start];
                }
              }
              if (newBuf.length)
                newBuf.parent = this.parent || this;
              return newBuf;
            };
            function checkOffset(offset, ext, length) {
              if ((offset % 1) !== 0 || offset < 0)
                throw new RangeError('offset is not uint');
              if (offset + ext > length)
                throw new RangeError('Trying to access beyond buffer length');
            }
            Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
              offset = offset | 0;
              byteLength = byteLength | 0;
              if (!noAssert)
                checkOffset(offset, byteLength, this.length);
              var val = this[offset];
              var mul = 1;
              var i = 0;
              while (++i < byteLength && (mul *= 0x100)) {
                val += this[offset + i] * mul;
              }
              return val;
            };
            Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
              offset = offset | 0;
              byteLength = byteLength | 0;
              if (!noAssert) {
                checkOffset(offset, byteLength, this.length);
              }
              var val = this[offset + --byteLength];
              var mul = 1;
              while (byteLength > 0 && (mul *= 0x100)) {
                val += this[offset + --byteLength] * mul;
              }
              return val;
            };
            Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
              if (!noAssert)
                checkOffset(offset, 1, this.length);
              return this[offset];
            };
            Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
              if (!noAssert)
                checkOffset(offset, 2, this.length);
              return this[offset] | (this[offset + 1] << 8);
            };
            Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
              if (!noAssert)
                checkOffset(offset, 2, this.length);
              return (this[offset] << 8) | this[offset + 1];
            };
            Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
              if (!noAssert)
                checkOffset(offset, 4, this.length);
              return ((this[offset]) | (this[offset + 1] << 8) | (this[offset + 2] << 16)) + (this[offset + 3] * 0x1000000);
            };
            Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
              if (!noAssert)
                checkOffset(offset, 4, this.length);
              return (this[offset] * 0x1000000) + ((this[offset + 1] << 16) | (this[offset + 2] << 8) | this[offset + 3]);
            };
            Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
              offset = offset | 0;
              byteLength = byteLength | 0;
              if (!noAssert)
                checkOffset(offset, byteLength, this.length);
              var val = this[offset];
              var mul = 1;
              var i = 0;
              while (++i < byteLength && (mul *= 0x100)) {
                val += this[offset + i] * mul;
              }
              mul *= 0x80;
              if (val >= mul)
                val -= Math.pow(2, 8 * byteLength);
              return val;
            };
            Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
              offset = offset | 0;
              byteLength = byteLength | 0;
              if (!noAssert)
                checkOffset(offset, byteLength, this.length);
              var i = byteLength;
              var mul = 1;
              var val = this[offset + --i];
              while (i > 0 && (mul *= 0x100)) {
                val += this[offset + --i] * mul;
              }
              mul *= 0x80;
              if (val >= mul)
                val -= Math.pow(2, 8 * byteLength);
              return val;
            };
            Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
              if (!noAssert)
                checkOffset(offset, 1, this.length);
              if (!(this[offset] & 0x80))
                return (this[offset]);
              return ((0xff - this[offset] + 1) * -1);
            };
            Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
              if (!noAssert)
                checkOffset(offset, 2, this.length);
              var val = this[offset] | (this[offset + 1] << 8);
              return (val & 0x8000) ? val | 0xFFFF0000 : val;
            };
            Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
              if (!noAssert)
                checkOffset(offset, 2, this.length);
              var val = this[offset + 1] | (this[offset] << 8);
              return (val & 0x8000) ? val | 0xFFFF0000 : val;
            };
            Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
              if (!noAssert)
                checkOffset(offset, 4, this.length);
              return (this[offset]) | (this[offset + 1] << 8) | (this[offset + 2] << 16) | (this[offset + 3] << 24);
            };
            Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
              if (!noAssert)
                checkOffset(offset, 4, this.length);
              return (this[offset] << 24) | (this[offset + 1] << 16) | (this[offset + 2] << 8) | (this[offset + 3]);
            };
            Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
              if (!noAssert)
                checkOffset(offset, 4, this.length);
              return ieee754.read(this, offset, true, 23, 4);
            };
            Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
              if (!noAssert)
                checkOffset(offset, 4, this.length);
              return ieee754.read(this, offset, false, 23, 4);
            };
            Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
              if (!noAssert)
                checkOffset(offset, 8, this.length);
              return ieee754.read(this, offset, true, 52, 8);
            };
            Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
              if (!noAssert)
                checkOffset(offset, 8, this.length);
              return ieee754.read(this, offset, false, 52, 8);
            };
            function checkInt(buf, value, offset, ext, max, min) {
              if (!Buffer.isBuffer(buf))
                throw new TypeError('buffer must be a Buffer instance');
              if (value > max || value < min)
                throw new RangeError('value is out of bounds');
              if (offset + ext > buf.length)
                throw new RangeError('index out of range');
            }
            Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
              value = +value;
              offset = offset | 0;
              byteLength = byteLength | 0;
              if (!noAssert)
                checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0);
              var mul = 1;
              var i = 0;
              this[offset] = value & 0xFF;
              while (++i < byteLength && (mul *= 0x100)) {
                this[offset + i] = (value / mul) & 0xFF;
              }
              return offset + byteLength;
            };
            Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
              value = +value;
              offset = offset | 0;
              byteLength = byteLength | 0;
              if (!noAssert)
                checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0);
              var i = byteLength - 1;
              var mul = 1;
              this[offset + i] = value & 0xFF;
              while (--i >= 0 && (mul *= 0x100)) {
                this[offset + i] = (value / mul) & 0xFF;
              }
              return offset + byteLength;
            };
            Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
              value = +value;
              offset = offset | 0;
              if (!noAssert)
                checkInt(this, value, offset, 1, 0xff, 0);
              if (!Buffer.TYPED_ARRAY_SUPPORT)
                value = Math.floor(value);
              this[offset] = (value & 0xff);
              return offset + 1;
            };
            function objectWriteUInt16(buf, value, offset, littleEndian) {
              if (value < 0)
                value = 0xffff + value + 1;
              for (var i = 0,
                  j = Math.min(buf.length - offset, 2); i < j; i++) {
                buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>> (littleEndian ? i : 1 - i) * 8;
              }
            }
            Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
              value = +value;
              offset = offset | 0;
              if (!noAssert)
                checkInt(this, value, offset, 2, 0xffff, 0);
              if (Buffer.TYPED_ARRAY_SUPPORT) {
                this[offset] = (value & 0xff);
                this[offset + 1] = (value >>> 8);
              } else {
                objectWriteUInt16(this, value, offset, true);
              }
              return offset + 2;
            };
            Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
              value = +value;
              offset = offset | 0;
              if (!noAssert)
                checkInt(this, value, offset, 2, 0xffff, 0);
              if (Buffer.TYPED_ARRAY_SUPPORT) {
                this[offset] = (value >>> 8);
                this[offset + 1] = (value & 0xff);
              } else {
                objectWriteUInt16(this, value, offset, false);
              }
              return offset + 2;
            };
            function objectWriteUInt32(buf, value, offset, littleEndian) {
              if (value < 0)
                value = 0xffffffff + value + 1;
              for (var i = 0,
                  j = Math.min(buf.length - offset, 4); i < j; i++) {
                buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff;
              }
            }
            Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
              value = +value;
              offset = offset | 0;
              if (!noAssert)
                checkInt(this, value, offset, 4, 0xffffffff, 0);
              if (Buffer.TYPED_ARRAY_SUPPORT) {
                this[offset + 3] = (value >>> 24);
                this[offset + 2] = (value >>> 16);
                this[offset + 1] = (value >>> 8);
                this[offset] = (value & 0xff);
              } else {
                objectWriteUInt32(this, value, offset, true);
              }
              return offset + 4;
            };
            Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
              value = +value;
              offset = offset | 0;
              if (!noAssert)
                checkInt(this, value, offset, 4, 0xffffffff, 0);
              if (Buffer.TYPED_ARRAY_SUPPORT) {
                this[offset] = (value >>> 24);
                this[offset + 1] = (value >>> 16);
                this[offset + 2] = (value >>> 8);
                this[offset + 3] = (value & 0xff);
              } else {
                objectWriteUInt32(this, value, offset, false);
              }
              return offset + 4;
            };
            Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
              value = +value;
              offset = offset | 0;
              if (!noAssert) {
                var limit = Math.pow(2, 8 * byteLength - 1);
                checkInt(this, value, offset, byteLength, limit - 1, -limit);
              }
              var i = 0;
              var mul = 1;
              var sub = value < 0 ? 1 : 0;
              this[offset] = value & 0xFF;
              while (++i < byteLength && (mul *= 0x100)) {
                this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
              }
              return offset + byteLength;
            };
            Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
              value = +value;
              offset = offset | 0;
              if (!noAssert) {
                var limit = Math.pow(2, 8 * byteLength - 1);
                checkInt(this, value, offset, byteLength, limit - 1, -limit);
              }
              var i = byteLength - 1;
              var mul = 1;
              var sub = value < 0 ? 1 : 0;
              this[offset + i] = value & 0xFF;
              while (--i >= 0 && (mul *= 0x100)) {
                this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
              }
              return offset + byteLength;
            };
            Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
              value = +value;
              offset = offset | 0;
              if (!noAssert)
                checkInt(this, value, offset, 1, 0x7f, -0x80);
              if (!Buffer.TYPED_ARRAY_SUPPORT)
                value = Math.floor(value);
              if (value < 0)
                value = 0xff + value + 1;
              this[offset] = (value & 0xff);
              return offset + 1;
            };
            Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
              value = +value;
              offset = offset | 0;
              if (!noAssert)
                checkInt(this, value, offset, 2, 0x7fff, -0x8000);
              if (Buffer.TYPED_ARRAY_SUPPORT) {
                this[offset] = (value & 0xff);
                this[offset + 1] = (value >>> 8);
              } else {
                objectWriteUInt16(this, value, offset, true);
              }
              return offset + 2;
            };
            Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
              value = +value;
              offset = offset | 0;
              if (!noAssert)
                checkInt(this, value, offset, 2, 0x7fff, -0x8000);
              if (Buffer.TYPED_ARRAY_SUPPORT) {
                this[offset] = (value >>> 8);
                this[offset + 1] = (value & 0xff);
              } else {
                objectWriteUInt16(this, value, offset, false);
              }
              return offset + 2;
            };
            Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
              value = +value;
              offset = offset | 0;
              if (!noAssert)
                checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
              if (Buffer.TYPED_ARRAY_SUPPORT) {
                this[offset] = (value & 0xff);
                this[offset + 1] = (value >>> 8);
                this[offset + 2] = (value >>> 16);
                this[offset + 3] = (value >>> 24);
              } else {
                objectWriteUInt32(this, value, offset, true);
              }
              return offset + 4;
            };
            Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
              value = +value;
              offset = offset | 0;
              if (!noAssert)
                checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
              if (value < 0)
                value = 0xffffffff + value + 1;
              if (Buffer.TYPED_ARRAY_SUPPORT) {
                this[offset] = (value >>> 24);
                this[offset + 1] = (value >>> 16);
                this[offset + 2] = (value >>> 8);
                this[offset + 3] = (value & 0xff);
              } else {
                objectWriteUInt32(this, value, offset, false);
              }
              return offset + 4;
            };
            function checkIEEE754(buf, value, offset, ext, max, min) {
              if (value > max || value < min)
                throw new RangeError('value is out of bounds');
              if (offset + ext > buf.length)
                throw new RangeError('index out of range');
              if (offset < 0)
                throw new RangeError('index out of range');
            }
            function writeFloat(buf, value, offset, littleEndian, noAssert) {
              if (!noAssert) {
                checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38);
              }
              ieee754.write(buf, value, offset, littleEndian, 23, 4);
              return offset + 4;
            }
            Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
              return writeFloat(this, value, offset, true, noAssert);
            };
            Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
              return writeFloat(this, value, offset, false, noAssert);
            };
            function writeDouble(buf, value, offset, littleEndian, noAssert) {
              if (!noAssert) {
                checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308);
              }
              ieee754.write(buf, value, offset, littleEndian, 52, 8);
              return offset + 8;
            }
            Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
              return writeDouble(this, value, offset, true, noAssert);
            };
            Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
              return writeDouble(this, value, offset, false, noAssert);
            };
            Buffer.prototype.copy = function copy(target, targetStart, start, end) {
              if (!start)
                start = 0;
              if (!end && end !== 0)
                end = this.length;
              if (targetStart >= target.length)
                targetStart = target.length;
              if (!targetStart)
                targetStart = 0;
              if (end > 0 && end < start)
                end = start;
              if (end === start)
                return 0;
              if (target.length === 0 || this.length === 0)
                return 0;
              if (targetStart < 0) {
                throw new RangeError('targetStart out of bounds');
              }
              if (start < 0 || start >= this.length)
                throw new RangeError('sourceStart out of bounds');
              if (end < 0)
                throw new RangeError('sourceEnd out of bounds');
              if (end > this.length)
                end = this.length;
              if (target.length - targetStart < end - start) {
                end = target.length - targetStart + start;
              }
              var len = end - start;
              var i;
              if (this === target && start < targetStart && targetStart < end) {
                for (i = len - 1; i >= 0; i--) {
                  target[i + targetStart] = this[i + start];
                }
              } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
                for (i = 0; i < len; i++) {
                  target[i + targetStart] = this[i + start];
                }
              } else {
                target._set(this.subarray(start, start + len), targetStart);
              }
              return len;
            };
            Buffer.prototype.fill = function fill(value, start, end) {
              if (!value)
                value = 0;
              if (!start)
                start = 0;
              if (!end)
                end = this.length;
              if (end < start)
                throw new RangeError('end < start');
              if (end === start)
                return;
              if (this.length === 0)
                return;
              if (start < 0 || start >= this.length)
                throw new RangeError('start out of bounds');
              if (end < 0 || end > this.length)
                throw new RangeError('end out of bounds');
              var i;
              if (typeof value === 'number') {
                for (i = start; i < end; i++) {
                  this[i] = value;
                }
              } else {
                var bytes = utf8ToBytes(value.toString());
                var len = bytes.length;
                for (i = start; i < end; i++) {
                  this[i] = bytes[i % len];
                }
              }
              return this;
            };
            Buffer.prototype.toArrayBuffer = function toArrayBuffer() {
              if (typeof Uint8Array !== 'undefined') {
                if (Buffer.TYPED_ARRAY_SUPPORT) {
                  return (new Buffer(this)).buffer;
                } else {
                  var buf = new Uint8Array(this.length);
                  for (var i = 0,
                      len = buf.length; i < len; i += 1) {
                    buf[i] = this[i];
                  }
                  return buf.buffer;
                }
              } else {
                throw new TypeError('Buffer.toArrayBuffer not supported in this browser');
              }
            };
            var BP = Buffer.prototype;
            Buffer._augment = function _augment(arr) {
              arr.constructor = Buffer;
              arr._isBuffer = true;
              arr._set = arr.set;
              arr.get = BP.get;
              arr.set = BP.set;
              arr.write = BP.write;
              arr.toString = BP.toString;
              arr.toLocaleString = BP.toString;
              arr.toJSON = BP.toJSON;
              arr.equals = BP.equals;
              arr.compare = BP.compare;
              arr.indexOf = BP.indexOf;
              arr.copy = BP.copy;
              arr.slice = BP.slice;
              arr.readUIntLE = BP.readUIntLE;
              arr.readUIntBE = BP.readUIntBE;
              arr.readUInt8 = BP.readUInt8;
              arr.readUInt16LE = BP.readUInt16LE;
              arr.readUInt16BE = BP.readUInt16BE;
              arr.readUInt32LE = BP.readUInt32LE;
              arr.readUInt32BE = BP.readUInt32BE;
              arr.readIntLE = BP.readIntLE;
              arr.readIntBE = BP.readIntBE;
              arr.readInt8 = BP.readInt8;
              arr.readInt16LE = BP.readInt16LE;
              arr.readInt16BE = BP.readInt16BE;
              arr.readInt32LE = BP.readInt32LE;
              arr.readInt32BE = BP.readInt32BE;
              arr.readFloatLE = BP.readFloatLE;
              arr.readFloatBE = BP.readFloatBE;
              arr.readDoubleLE = BP.readDoubleLE;
              arr.readDoubleBE = BP.readDoubleBE;
              arr.writeUInt8 = BP.writeUInt8;
              arr.writeUIntLE = BP.writeUIntLE;
              arr.writeUIntBE = BP.writeUIntBE;
              arr.writeUInt16LE = BP.writeUInt16LE;
              arr.writeUInt16BE = BP.writeUInt16BE;
              arr.writeUInt32LE = BP.writeUInt32LE;
              arr.writeUInt32BE = BP.writeUInt32BE;
              arr.writeIntLE = BP.writeIntLE;
              arr.writeIntBE = BP.writeIntBE;
              arr.writeInt8 = BP.writeInt8;
              arr.writeInt16LE = BP.writeInt16LE;
              arr.writeInt16BE = BP.writeInt16BE;
              arr.writeInt32LE = BP.writeInt32LE;
              arr.writeInt32BE = BP.writeInt32BE;
              arr.writeFloatLE = BP.writeFloatLE;
              arr.writeFloatBE = BP.writeFloatBE;
              arr.writeDoubleLE = BP.writeDoubleLE;
              arr.writeDoubleBE = BP.writeDoubleBE;
              arr.fill = BP.fill;
              arr.inspect = BP.inspect;
              arr.toArrayBuffer = BP.toArrayBuffer;
              return arr;
            };
            var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;
            function base64clean(str) {
              str = stringtrim(str).replace(INVALID_BASE64_RE, '');
              if (str.length < 2)
                return '';
              while (str.length % 4 !== 0) {
                str = str + '=';
              }
              return str;
            }
            function stringtrim(str) {
              if (str.trim)
                return str.trim();
              return str.replace(/^\s+|\s+$/g, '');
            }
            function toHex(n) {
              if (n < 16)
                return '0' + n.toString(16);
              return n.toString(16);
            }
            function utf8ToBytes(string, units) {
              units = units || Infinity;
              var codePoint;
              var length = string.length;
              var leadSurrogate = null;
              var bytes = [];
              for (var i = 0; i < length; i++) {
                codePoint = string.charCodeAt(i);
                if (codePoint > 0xD7FF && codePoint < 0xE000) {
                  if (!leadSurrogate) {
                    if (codePoint > 0xDBFF) {
                      if ((units -= 3) > -1)
                        bytes.push(0xEF, 0xBF, 0xBD);
                      continue;
                    } else if (i + 1 === length) {
                      if ((units -= 3) > -1)
                        bytes.push(0xEF, 0xBF, 0xBD);
                      continue;
                    }
                    leadSurrogate = codePoint;
                    continue;
                  }
                  if (codePoint < 0xDC00) {
                    if ((units -= 3) > -1)
                      bytes.push(0xEF, 0xBF, 0xBD);
                    leadSurrogate = codePoint;
                    continue;
                  }
                  codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
                } else if (leadSurrogate) {
                  if ((units -= 3) > -1)
                    bytes.push(0xEF, 0xBF, 0xBD);
                }
                leadSurrogate = null;
                if (codePoint < 0x80) {
                  if ((units -= 1) < 0)
                    break;
                  bytes.push(codePoint);
                } else if (codePoint < 0x800) {
                  if ((units -= 2) < 0)
                    break;
                  bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
                } else if (codePoint < 0x10000) {
                  if ((units -= 3) < 0)
                    break;
                  bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
                } else if (codePoint < 0x110000) {
                  if ((units -= 4) < 0)
                    break;
                  bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
                } else {
                  throw new Error('Invalid code point');
                }
              }
              return bytes;
            }
            function asciiToBytes(str) {
              var byteArray = [];
              for (var i = 0; i < str.length; i++) {
                byteArray.push(str.charCodeAt(i) & 0xFF);
              }
              return byteArray;
            }
            function utf16leToBytes(str, units) {
              var c,
                  hi,
                  lo;
              var byteArray = [];
              for (var i = 0; i < str.length; i++) {
                if ((units -= 2) < 0)
                  break;
                c = str.charCodeAt(i);
                hi = c >> 8;
                lo = c % 256;
                byteArray.push(lo);
                byteArray.push(hi);
              }
              return byteArray;
            }
            function base64ToBytes(str) {
              return base64.toByteArray(base64clean(str));
            }
            function blitBuffer(src, dst, offset, length) {
              for (var i = 0; i < length; i++) {
                if ((i + offset >= dst.length) || (i >= src.length))
                  break;
                dst[i + offset] = src[i];
              }
              return i;
            }
          }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
        }, {
          "2": 2,
          "5": 5,
          "6": 6
        }],
        5: [function(_dereq_, module, exports) {
          var toString = {}.toString;
          module.exports = Array.isArray || function(arr) {
            return toString.call(arr) == '[object Array]';
          };
        }, {}],
        6: [function(_dereq_, module, exports) {
          exports.read = function(buffer, offset, isLE, mLen, nBytes) {
            var e,
                m;
            var eLen = nBytes * 8 - mLen - 1;
            var eMax = (1 << eLen) - 1;
            var eBias = eMax >> 1;
            var nBits = -7;
            var i = isLE ? (nBytes - 1) : 0;
            var d = isLE ? -1 : 1;
            var s = buffer[offset + i];
            i += d;
            e = s & ((1 << (-nBits)) - 1);
            s >>= (-nBits);
            nBits += eLen;
            for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}
            m = e & ((1 << (-nBits)) - 1);
            e >>= (-nBits);
            nBits += mLen;
            for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}
            if (e === 0) {
              e = 1 - eBias;
            } else if (e === eMax) {
              return m ? NaN : ((s ? -1 : 1) * Infinity);
            } else {
              m = m + Math.pow(2, mLen);
              e = e - eBias;
            }
            return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
          };
          exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
            var e,
                m,
                c;
            var eLen = nBytes * 8 - mLen - 1;
            var eMax = (1 << eLen) - 1;
            var eBias = eMax >> 1;
            var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);
            var i = isLE ? 0 : (nBytes - 1);
            var d = isLE ? 1 : -1;
            var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;
            value = Math.abs(value);
            if (isNaN(value) || value === Infinity) {
              m = isNaN(value) ? 1 : 0;
              e = eMax;
            } else {
              e = Math.floor(Math.log(value) / Math.LN2);
              if (value * (c = Math.pow(2, -e)) < 1) {
                e--;
                c *= 2;
              }
              if (e + eBias >= 1) {
                value += rt / c;
              } else {
                value += rt * Math.pow(2, 1 - eBias);
              }
              if (value * c >= 2) {
                e++;
                c /= 2;
              }
              if (e + eBias >= eMax) {
                m = 0;
                e = eMax;
              } else if (e + eBias >= 1) {
                m = (value * c - 1) * Math.pow(2, mLen);
                e = e + eBias;
              } else {
                m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
                e = 0;
              }
            }
            for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}
            e = (e << mLen) | m;
            eLen += mLen;
            for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}
            buffer[offset + i - d] |= s * 128;
          };
        }, {}],
        7: [function(_dereq_, module, exports) {
          if (typeof Object.create === 'function') {
            module.exports = function inherits(ctor, superCtor) {
              ctor.super_ = superCtor;
              ctor.prototype = Object.create(superCtor.prototype, {constructor: {
                  value: ctor,
                  enumerable: false,
                  writable: true,
                  configurable: true
                }});
            };
          } else {
            module.exports = function inherits(ctor, superCtor) {
              ctor.super_ = superCtor;
              var TempCtor = function() {};
              TempCtor.prototype = superCtor.prototype;
              ctor.prototype = new TempCtor();
              ctor.prototype.constructor = ctor;
            };
          }
        }, {}],
        8: [function(_dereq_, module, exports) {
          exports.endianness = function() {
            return 'LE';
          };
          exports.hostname = function() {
            if (typeof location !== 'undefined') {
              return location.hostname;
            } else
              return '';
          };
          exports.loadavg = function() {
            return [];
          };
          exports.uptime = function() {
            return 0;
          };
          exports.freemem = function() {
            return Number.MAX_VALUE;
          };
          exports.totalmem = function() {
            return Number.MAX_VALUE;
          };
          exports.cpus = function() {
            return [];
          };
          exports.type = function() {
            return 'Browser';
          };
          exports.release = function() {
            if (typeof navigator !== 'undefined') {
              return navigator.appVersion;
            }
            return '';
          };
          exports.networkInterfaces = exports.getNetworkInterfaces = function() {
            return {};
          };
          exports.arch = function() {
            return 'javascript';
          };
          exports.platform = function() {
            return 'browser';
          };
          exports.tmpdir = exports.tmpDir = function() {
            return '/tmp';
          };
          exports.EOL = '\n';
        }, {}],
        9: [function(_dereq_, module, exports) {
          (function(process) {
            function normalizeArray(parts, allowAboveRoot) {
              var up = 0;
              for (var i = parts.length - 1; i >= 0; i--) {
                var last = parts[i];
                if (last === '.') {
                  parts.splice(i, 1);
                } else if (last === '..') {
                  parts.splice(i, 1);
                  up++;
                } else if (up) {
                  parts.splice(i, 1);
                  up--;
                }
              }
              if (allowAboveRoot) {
                for (; up--; up) {
                  parts.unshift('..');
                }
              }
              return parts;
            }
            var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
            var splitPath = function(filename) {
              return splitPathRe.exec(filename).slice(1);
            };
            exports.resolve = function() {
              var resolvedPath = '',
                  resolvedAbsolute = false;
              for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
                var path = (i >= 0) ? arguments[i] : process.cwd();
                if (typeof path !== 'string') {
                  throw new TypeError('Arguments to path.resolve must be strings');
                } else if (!path) {
                  continue;
                }
                resolvedPath = path + '/' + resolvedPath;
                resolvedAbsolute = path.charAt(0) === '/';
              }
              resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
                return !!p;
              }), !resolvedAbsolute).join('/');
              return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
            };
            exports.normalize = function(path) {
              var isAbsolute = exports.isAbsolute(path),
                  trailingSlash = substr(path, -1) === '/';
              path = normalizeArray(filter(path.split('/'), function(p) {
                return !!p;
              }), !isAbsolute).join('/');
              if (!path && !isAbsolute) {
                path = '.';
              }
              if (path && trailingSlash) {
                path += '/';
              }
              return (isAbsolute ? '/' : '') + path;
            };
            exports.isAbsolute = function(path) {
              return path.charAt(0) === '/';
            };
            exports.join = function() {
              var paths = Array.prototype.slice.call(arguments, 0);
              return exports.normalize(filter(paths, function(p, index) {
                if (typeof p !== 'string') {
                  throw new TypeError('Arguments to path.join must be strings');
                }
                return p;
              }).join('/'));
            };
            exports.relative = function(from, to) {
              from = exports.resolve(from).substr(1);
              to = exports.resolve(to).substr(1);
              function trim(arr) {
                var start = 0;
                for (; start < arr.length; start++) {
                  if (arr[start] !== '')
                    break;
                }
                var end = arr.length - 1;
                for (; end >= 0; end--) {
                  if (arr[end] !== '')
                    break;
                }
                if (start > end)
                  return [];
                return arr.slice(start, end - start + 1);
              }
              var fromParts = trim(from.split('/'));
              var toParts = trim(to.split('/'));
              var length = Math.min(fromParts.length, toParts.length);
              var samePartsLength = length;
              for (var i = 0; i < length; i++) {
                if (fromParts[i] !== toParts[i]) {
                  samePartsLength = i;
                  break;
                }
              }
              var outputParts = [];
              for (var i = samePartsLength; i < fromParts.length; i++) {
                outputParts.push('..');
              }
              outputParts = outputParts.concat(toParts.slice(samePartsLength));
              return outputParts.join('/');
            };
            exports.sep = '/';
            exports.delimiter = ':';
            exports.dirname = function(path) {
              var result = splitPath(path),
                  root = result[0],
                  dir = result[1];
              if (!root && !dir) {
                return '.';
              }
              if (dir) {
                dir = dir.substr(0, dir.length - 1);
              }
              return root + dir;
            };
            exports.basename = function(path, ext) {
              var f = splitPath(path)[2];
              if (ext && f.substr(-1 * ext.length) === ext) {
                f = f.substr(0, f.length - ext.length);
              }
              return f;
            };
            exports.extname = function(path) {
              return splitPath(path)[3];
            };
            function filter(xs, f) {
              if (xs.filter)
                return xs.filter(f);
              var res = [];
              for (var i = 0; i < xs.length; i++) {
                if (f(xs[i], i, xs))
                  res.push(xs[i]);
              }
              return res;
            }
            var substr = 'ab'.substr(-1) === 'b' ? function(str, start, len) {
              return str.substr(start, len);
            } : function(str, start, len) {
              if (start < 0)
                start = str.length + start;
              return str.substr(start, len);
            };
            ;
          }).call(this, _dereq_(10));
        }, {"10": 10}],
        10: [function(_dereq_, module, exports) {
          var process = module.exports = {};
          var queue = [];
          var draining = false;
          var currentQueue;
          var queueIndex = -1;
          function cleanUpNextTick() {
            draining = false;
            if (currentQueue.length) {
              queue = currentQueue.concat(queue);
            } else {
              queueIndex = -1;
            }
            if (queue.length) {
              drainQueue();
            }
          }
          function drainQueue() {
            if (draining) {
              return;
            }
            var timeout = setTimeout(cleanUpNextTick);
            draining = true;
            var len = queue.length;
            while (len) {
              currentQueue = queue;
              queue = [];
              while (++queueIndex < len) {
                if (currentQueue) {
                  currentQueue[queueIndex].run();
                }
              }
              queueIndex = -1;
              len = queue.length;
            }
            currentQueue = null;
            draining = false;
            clearTimeout(timeout);
          }
          process.nextTick = function(fun) {
            var args = new Array(arguments.length - 1);
            if (arguments.length > 1) {
              for (var i = 1; i < arguments.length; i++) {
                args[i - 1] = arguments[i];
              }
            }
            queue.push(new Item(fun, args));
            if (queue.length === 1 && !draining) {
              setTimeout(drainQueue, 0);
            }
          };
          function Item(fun, array) {
            this.fun = fun;
            this.array = array;
          }
          Item.prototype.run = function() {
            this.fun.apply(null, this.array);
          };
          process.title = 'browser';
          process.browser = true;
          process.env = {};
          process.argv = [];
          process.version = '';
          process.versions = {};
          function noop() {}
          process.on = noop;
          process.addListener = noop;
          process.once = noop;
          process.off = noop;
          process.removeListener = noop;
          process.removeAllListeners = noop;
          process.emit = noop;
          process.binding = function(name) {
            throw new Error('process.binding is not supported');
          };
          process.cwd = function() {
            return '/';
          };
          process.chdir = function(dir) {
            throw new Error('process.chdir is not supported');
          };
          process.umask = function() {
            return 0;
          };
        }, {}],
        11: [function(_dereq_, module, exports) {
          exports.isatty = function() {
            return false;
          };
          function ReadStream() {
            throw new Error('tty.ReadStream is not implemented');
          }
          exports.ReadStream = ReadStream;
          function WriteStream() {
            throw new Error('tty.ReadStream is not implemented');
          }
          exports.WriteStream = WriteStream;
        }, {}],
        12: [function(_dereq_, module, exports) {
          module.exports = function isBuffer(arg) {
            return arg && typeof arg === 'object' && typeof arg.copy === 'function' && typeof arg.fill === 'function' && typeof arg.readUInt8 === 'function';
          };
        }, {}],
        13: [function(_dereq_, module, exports) {
          (function(process, global) {
            var formatRegExp = /%[sdj%]/g;
            exports.format = function(f) {
              if (!isString(f)) {
                var objects = [];
                for (var i = 0; i < arguments.length; i++) {
                  objects.push(inspect(arguments[i]));
                }
                return objects.join(' ');
              }
              var i = 1;
              var args = arguments;
              var len = args.length;
              var str = String(f).replace(formatRegExp, function(x) {
                if (x === '%%')
                  return '%';
                if (i >= len)
                  return x;
                switch (x) {
                  case '%s':
                    return String(args[i++]);
                  case '%d':
                    return Number(args[i++]);
                  case '%j':
                    try {
                      return JSON.stringify(args[i++]);
                    } catch (_) {
                      return '[Circular]';
                    }
                  default:
                    return x;
                }
              });
              for (var x = args[i]; i < len; x = args[++i]) {
                if (isNull(x) || !isObject(x)) {
                  str += ' ' + x;
                } else {
                  str += ' ' + inspect(x);
                }
              }
              return str;
            };
            exports.deprecate = function(fn, msg) {
              if (isUndefined(global.process)) {
                return function() {
                  return exports.deprecate(fn, msg).apply(this, arguments);
                };
              }
              if (process.noDeprecation === true) {
                return fn;
              }
              var warned = false;
              function deprecated() {
                if (!warned) {
                  if (process.throwDeprecation) {
                    throw new Error(msg);
                  } else if (process.traceDeprecation) {
                    console.trace(msg);
                  } else {
                    console.error(msg);
                  }
                  warned = true;
                }
                return fn.apply(this, arguments);
              }
              return deprecated;
            };
            var debugs = {};
            var debugEnviron;
            exports.debuglog = function(set) {
              if (isUndefined(debugEnviron))
                debugEnviron = process.env.NODE_DEBUG || '';
              set = set.toUpperCase();
              if (!debugs[set]) {
                if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
                  var pid = process.pid;
                  debugs[set] = function() {
                    var msg = exports.format.apply(exports, arguments);
                    console.error('%s %d: %s', set, pid, msg);
                  };
                } else {
                  debugs[set] = function() {};
                }
              }
              return debugs[set];
            };
            function inspect(obj, opts) {
              var ctx = {
                seen: [],
                stylize: stylizeNoColor
              };
              if (arguments.length >= 3)
                ctx.depth = arguments[2];
              if (arguments.length >= 4)
                ctx.colors = arguments[3];
              if (isBoolean(opts)) {
                ctx.showHidden = opts;
              } else if (opts) {
                exports._extend(ctx, opts);
              }
              if (isUndefined(ctx.showHidden))
                ctx.showHidden = false;
              if (isUndefined(ctx.depth))
                ctx.depth = 2;
              if (isUndefined(ctx.colors))
                ctx.colors = false;
              if (isUndefined(ctx.customInspect))
                ctx.customInspect = true;
              if (ctx.colors)
                ctx.stylize = stylizeWithColor;
              return formatValue(ctx, obj, ctx.depth);
            }
            exports.inspect = inspect;
            inspect.colors = {
              'bold': [1, 22],
              'italic': [3, 23],
              'underline': [4, 24],
              'inverse': [7, 27],
              'white': [37, 39],
              'grey': [90, 39],
              'black': [30, 39],
              'blue': [34, 39],
              'cyan': [36, 39],
              'green': [32, 39],
              'magenta': [35, 39],
              'red': [31, 39],
              'yellow': [33, 39]
            };
            inspect.styles = {
              'special': 'cyan',
              'number': 'yellow',
              'boolean': 'yellow',
              'undefined': 'grey',
              'null': 'bold',
              'string': 'green',
              'date': 'magenta',
              'regexp': 'red'
            };
            function stylizeWithColor(str, styleType) {
              var style = inspect.styles[styleType];
              if (style) {
                return '\u001b[' + inspect.colors[style][0] + 'm' + str + '\u001b[' + inspect.colors[style][1] + 'm';
              } else {
                return str;
              }
            }
            function stylizeNoColor(str, styleType) {
              return str;
            }
            function arrayToHash(array) {
              var hash = {};
              array.forEach(function(val, idx) {
                hash[val] = true;
              });
              return hash;
            }
            function formatValue(ctx, value, recurseTimes) {
              if (ctx.customInspect && value && isFunction(value.inspect) && value.inspect !== exports.inspect && !(value.constructor && value.constructor.prototype === value)) {
                var ret = value.inspect(recurseTimes, ctx);
                if (!isString(ret)) {
                  ret = formatValue(ctx, ret, recurseTimes);
                }
                return ret;
              }
              var primitive = formatPrimitive(ctx, value);
              if (primitive) {
                return primitive;
              }
              var keys = Object.keys(value);
              var visibleKeys = arrayToHash(keys);
              if (ctx.showHidden) {
                keys = Object.getOwnPropertyNames(value);
              }
              if (isError(value) && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
                return formatError(value);
              }
              if (keys.length === 0) {
                if (isFunction(value)) {
                  var name = value.name ? ': ' + value.name : '';
                  return ctx.stylize('[Function' + name + ']', 'special');
                }
                if (isRegExp(value)) {
                  return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
                }
                if (isDate(value)) {
                  return ctx.stylize(Date.prototype.toString.call(value), 'date');
                }
                if (isError(value)) {
                  return formatError(value);
                }
              }
              var base = '',
                  array = false,
                  braces = ['{', '}'];
              if (isArray(value)) {
                array = true;
                braces = ['[', ']'];
              }
              if (isFunction(value)) {
                var n = value.name ? ': ' + value.name : '';
                base = ' [Function' + n + ']';
              }
              if (isRegExp(value)) {
                base = ' ' + RegExp.prototype.toString.call(value);
              }
              if (isDate(value)) {
                base = ' ' + Date.prototype.toUTCString.call(value);
              }
              if (isError(value)) {
                base = ' ' + formatError(value);
              }
              if (keys.length === 0 && (!array || value.length == 0)) {
                return braces[0] + base + braces[1];
              }
              if (recurseTimes < 0) {
                if (isRegExp(value)) {
                  return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
                } else {
                  return ctx.stylize('[Object]', 'special');
                }
              }
              ctx.seen.push(value);
              var output;
              if (array) {
                output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
              } else {
                output = keys.map(function(key) {
                  return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
                });
              }
              ctx.seen.pop();
              return reduceToSingleString(output, base, braces);
            }
            function formatPrimitive(ctx, value) {
              if (isUndefined(value))
                return ctx.stylize('undefined', 'undefined');
              if (isString(value)) {
                var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '').replace(/'/g, "\\'").replace(/\\"/g, '"') + '\'';
                return ctx.stylize(simple, 'string');
              }
              if (isNumber(value))
                return ctx.stylize('' + value, 'number');
              if (isBoolean(value))
                return ctx.stylize('' + value, 'boolean');
              if (isNull(value))
                return ctx.stylize('null', 'null');
            }
            function formatError(value) {
              return '[' + Error.prototype.toString.call(value) + ']';
            }
            function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
              var output = [];
              for (var i = 0,
                  l = value.length; i < l; ++i) {
                if (hasOwnProperty(value, String(i))) {
                  output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
                } else {
                  output.push('');
                }
              }
              keys.forEach(function(key) {
                if (!key.match(/^\d+$/)) {
                  output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
                }
              });
              return output;
            }
            function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
              var name,
                  str,
                  desc;
              desc = Object.getOwnPropertyDescriptor(value, key) || {value: value[key]};
              if (desc.get) {
                if (desc.set) {
                  str = ctx.stylize('[Getter/Setter]', 'special');
                } else {
                  str = ctx.stylize('[Getter]', 'special');
                }
              } else {
                if (desc.set) {
                  str = ctx.stylize('[Setter]', 'special');
                }
              }
              if (!hasOwnProperty(visibleKeys, key)) {
                name = '[' + key + ']';
              }
              if (!str) {
                if (ctx.seen.indexOf(desc.value) < 0) {
                  if (isNull(recurseTimes)) {
                    str = formatValue(ctx, desc.value, null);
                  } else {
                    str = formatValue(ctx, desc.value, recurseTimes - 1);
                  }
                  if (str.indexOf('\n') > -1) {
                    if (array) {
                      str = str.split('\n').map(function(line) {
                        return '  ' + line;
                      }).join('\n').substr(2);
                    } else {
                      str = '\n' + str.split('\n').map(function(line) {
                        return '   ' + line;
                      }).join('\n');
                    }
                  }
                } else {
                  str = ctx.stylize('[Circular]', 'special');
                }
              }
              if (isUndefined(name)) {
                if (array && key.match(/^\d+$/)) {
                  return str;
                }
                name = JSON.stringify('' + key);
                if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
                  name = name.substr(1, name.length - 2);
                  name = ctx.stylize(name, 'name');
                } else {
                  name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
                  name = ctx.stylize(name, 'string');
                }
              }
              return name + ': ' + str;
            }
            function reduceToSingleString(output, base, braces) {
              var numLinesEst = 0;
              var length = output.reduce(function(prev, cur) {
                numLinesEst++;
                if (cur.indexOf('\n') >= 0)
                  numLinesEst++;
                return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
              }, 0);
              if (length > 60) {
                return braces[0] + (base === '' ? '' : base + '\n ') + ' ' + output.join(',\n  ') + ' ' + braces[1];
              }
              return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
            }
            function isArray(ar) {
              return Array.isArray(ar);
            }
            exports.isArray = isArray;
            function isBoolean(arg) {
              return typeof arg === 'boolean';
            }
            exports.isBoolean = isBoolean;
            function isNull(arg) {
              return arg === null;
            }
            exports.isNull = isNull;
            function isNullOrUndefined(arg) {
              return arg == null;
            }
            exports.isNullOrUndefined = isNullOrUndefined;
            function isNumber(arg) {
              return typeof arg === 'number';
            }
            exports.isNumber = isNumber;
            function isString(arg) {
              return typeof arg === 'string';
            }
            exports.isString = isString;
            function isSymbol(arg) {
              return typeof arg === 'symbol';
            }
            exports.isSymbol = isSymbol;
            function isUndefined(arg) {
              return arg === void 0;
            }
            exports.isUndefined = isUndefined;
            function isRegExp(re) {
              return isObject(re) && objectToString(re) === '[object RegExp]';
            }
            exports.isRegExp = isRegExp;
            function isObject(arg) {
              return typeof arg === 'object' && arg !== null;
            }
            exports.isObject = isObject;
            function isDate(d) {
              return isObject(d) && objectToString(d) === '[object Date]';
            }
            exports.isDate = isDate;
            function isError(e) {
              return isObject(e) && (objectToString(e) === '[object Error]' || e instanceof Error);
            }
            exports.isError = isError;
            function isFunction(arg) {
              return typeof arg === 'function';
            }
            exports.isFunction = isFunction;
            function isPrimitive(arg) {
              return arg === null || typeof arg === 'boolean' || typeof arg === 'number' || typeof arg === 'string' || typeof arg === 'symbol' || typeof arg === 'undefined';
            }
            exports.isPrimitive = isPrimitive;
            exports.isBuffer = _dereq_(12);
            function objectToString(o) {
              return Object.prototype.toString.call(o);
            }
            function pad(n) {
              return n < 10 ? '0' + n.toString(10) : n.toString(10);
            }
            var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
            function timestamp() {
              var d = new Date();
              var time = [pad(d.getHours()), pad(d.getMinutes()), pad(d.getSeconds())].join(':');
              return [d.getDate(), months[d.getMonth()], time].join(' ');
            }
            exports.log = function() {
              console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
            };
            exports.inherits = _dereq_(7);
            exports._extend = function(origin, add) {
              if (!add || !isObject(add))
                return origin;
              var keys = Object.keys(add);
              var i = keys.length;
              while (i--) {
                origin[keys[i]] = add[keys[i]];
              }
              return origin;
            };
            function hasOwnProperty(obj, prop) {
              return Object.prototype.hasOwnProperty.call(obj, prop);
            }
          }).call(this, _dereq_(10), typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
        }, {
          "10": 10,
          "12": 12,
          "7": 7
        }],
        14: [function(_dereq_, module, exports) {
          (function(global) {
            "use strict";
            _dereq_(15);
            var transform = module.exports = _dereq_(66);
            transform.options = _dereq_(49);
            transform.version = _dereq_(610).version;
            transform.transform = transform;
            transform.run = function(code) {
              var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
              opts.sourceMaps = "inline";
              return new Function(transform(code, opts).code)();
            };
            transform.load = function(url, callback, opts, hold) {
              if (opts === undefined)
                opts = {};
              opts.filename = opts.filename || url;
              var xhr = global.ActiveXObject ? new global.ActiveXObject("Microsoft.XMLHTTP") : new global.XMLHttpRequest();
              xhr.open("GET", url, true);
              if ("overrideMimeType" in xhr)
                xhr.overrideMimeType("text/plain");
              xhr.onreadystatechange = function() {
                if (xhr.readyState !== 4)
                  return;
                var status = xhr.status;
                if (status === 0 || status === 200) {
                  var param = [xhr.responseText, opts];
                  if (!hold)
                    transform.run.apply(transform, param);
                  if (callback)
                    callback(param);
                } else {
                  throw new Error("Could not load " + url);
                }
              };
              xhr.send(null);
            };
            var runScripts = function runScripts() {
              var scripts = [];
              var types = ["text/ecmascript-6", "text/6to5", "text/babel", "module"];
              var index = 0;
              var exec = function exec() {
                var param = scripts[index];
                if (param instanceof Array) {
                  transform.run.apply(transform, param);
                  index++;
                  exec();
                }
              };
              var run = function run(script, i) {
                var opts = {};
                if (script.src) {
                  transform.load(script.src, function(param) {
                    scripts[i] = param;
                    exec();
                  }, opts, true);
                } else {
                  opts.filename = "embedded";
                  scripts[i] = [script.innerHTML, opts];
                }
              };
              var _scripts = global.document.getElementsByTagName("script");
              for (var i = 0; i < _scripts.length; ++i) {
                var _script = _scripts[i];
                if (types.indexOf(_script.type) >= 0)
                  scripts.push(_script);
              }
              for (i in scripts) {
                run(scripts[i], i);
              }
              exec();
            };
            if (global.addEventListener) {
              global.addEventListener("DOMContentLoaded", runScripts, false);
            } else if (global.attachEvent) {
              global.attachEvent("onload", runScripts);
            }
          }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
        }, {
          "15": 15,
          "49": 49,
          "610": 610,
          "66": 66
        }],
        15: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          exports.register = register;
          exports.polyfill = polyfill;
          exports.transformFile = transformFile;
          exports.transformFileSync = transformFileSync;
          exports.parse = parse;
          function _interopRequire(obj) {
            return obj && obj.__esModule ? obj["default"] : obj;
          }
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {"default": obj};
          }
          var _lodashLangIsFunction = _dereq_(533);
          var _lodashLangIsFunction2 = _interopRequireDefault(_lodashLangIsFunction);
          var _transformation = _dereq_(66);
          var _transformation2 = _interopRequireDefault(_transformation);
          var _babylon = _dereq_(612);
          var babylon = _interopRequireWildcard(_babylon);
          var _util = _dereq_(182);
          var util = _interopRequireWildcard(_util);
          var _fs = _dereq_(3);
          var _fs2 = _interopRequireDefault(_fs);
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          exports.util = util;
          exports.acorn = babylon;
          exports.transform = _transformation2["default"];
          exports.pipeline = _transformation.pipeline;
          exports.canCompile = _util.canCompile;
          var _transformationFile = _dereq_(46);
          exports.File = _interopRequire(_transformationFile);
          var _transformationFileOptionsConfig = _dereq_(48);
          exports.options = _interopRequire(_transformationFileOptionsConfig);
          var _transformationPlugin = _dereq_(82);
          exports.Plugin = _interopRequire(_transformationPlugin);
          var _transformationTransformer = _dereq_(83);
          exports.Transformer = _interopRequire(_transformationTransformer);
          var _transformationPipeline = _dereq_(80);
          exports.Pipeline = _interopRequire(_transformationPipeline);
          var _traversal = _dereq_(148);
          exports.traverse = _interopRequire(_traversal);
          var _toolsBuildExternalHelpers = _dereq_(45);
          exports.buildExternalHelpers = _interopRequire(_toolsBuildExternalHelpers);
          var _package = _dereq_(610);
          exports.version = _package.version;
          exports.types = t;
          function register(opts) {
            var callback = _dereq_(17);
            if (opts != null)
              callback(opts);
            return callback;
          }
          function polyfill() {
            _dereq_(44);
          }
          function transformFile(filename, opts, callback) {
            if (_lodashLangIsFunction2["default"](opts)) {
              callback = opts;
              opts = {};
            }
            opts.filename = filename;
            _fs2["default"].readFile(filename, function(err, code) {
              if (err)
                return callback(err);
              var result;
              try {
                result = _transformation2["default"](code, opts);
              } catch (err) {
                return callback(err);
              }
              callback(null, result);
            });
          }
          function transformFileSync(filename) {
            var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
            opts.filename = filename;
            return _transformation2["default"](_fs2["default"].readFileSync(filename, "utf8"), opts);
          }
          function parse(code) {
            var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
            opts.allowHashBang = true;
            opts.sourceType = "module";
            opts.ecmaVersion = Infinity;
            opts.plugins = {
              jsx: true,
              flow: true
            };
            opts.features = {};
            for (var key in _transformation2["default"].pipeline.transformers) {
              opts.features[key] = true;
            }
            var ast = babylon.parse(code, opts);
            if (opts.onToken) {
              var _opts$onToken;
              (_opts$onToken = opts.onToken).push.apply(_opts$onToken, ast.tokens);
            }
            if (opts.onComment) {
              var _opts$onComment;
              (_opts$onComment = opts.onComment).push.apply(_opts$onComment, ast.comments);
            }
            return ast.program;
          }
        }, {
          "148": 148,
          "17": 17,
          "179": 179,
          "182": 182,
          "3": 3,
          "44": 44,
          "45": 45,
          "46": 46,
          "48": 48,
          "533": 533,
          "610": 610,
          "612": 612,
          "66": 66,
          "80": 80,
          "82": 82,
          "83": 83
        }],
        16: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          _dereq_(44);
          exports["default"] = function() {};
          module.exports = exports["default"];
        }, {"44": 44}],
        17: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _interopRequire(obj) {
            return obj && obj.__esModule ? obj["default"] : obj;
          }
          _dereq_(44);
          var _node = _dereq_(16);
          exports["default"] = _interopRequire(_node);
          module.exports = exports["default"];
        }, {
          "16": 16,
          "44": 44
        }],
        18: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {"default": obj};
          }
          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }
          var _repeating = _dereq_(586);
          var _repeating2 = _interopRequireDefault(_repeating);
          var _trimRight = _dereq_(608);
          var _trimRight2 = _interopRequireDefault(_trimRight);
          var _lodashLangIsBoolean = _dereq_(531);
          var _lodashLangIsBoolean2 = _interopRequireDefault(_lodashLangIsBoolean);
          var _lodashCollectionIncludes = _dereq_(446);
          var _lodashCollectionIncludes2 = _interopRequireDefault(_lodashCollectionIncludes);
          var _lodashLangIsNumber = _dereq_(535);
          var _lodashLangIsNumber2 = _interopRequireDefault(_lodashLangIsNumber);
          var Buffer = (function() {
            function Buffer(position, format) {
              _classCallCheck(this, Buffer);
              this.parenPushNewlineState = null;
              this.position = position;
              this._indent = format.indent.base;
              this.format = format;
              this.buf = "";
            }
            Buffer.prototype.get = function get() {
              return _trimRight2["default"](this.buf);
            };
            Buffer.prototype.getIndent = function getIndent() {
              if (this.format.compact || this.format.concise) {
                return "";
              } else {
                return _repeating2["default"](this.format.indent.style, this._indent);
              }
            };
            Buffer.prototype.indentSize = function indentSize() {
              return this.getIndent().length;
            };
            Buffer.prototype.indent = function indent() {
              this._indent++;
            };
            Buffer.prototype.dedent = function dedent() {
              this._indent--;
            };
            Buffer.prototype.semicolon = function semicolon() {
              this.push(";");
            };
            Buffer.prototype.ensureSemicolon = function ensureSemicolon() {
              if (!this.isLast(";"))
                this.semicolon();
            };
            Buffer.prototype.rightBrace = function rightBrace() {
              this.newline(true);
              this.push("}");
            };
            Buffer.prototype.keyword = function keyword(name) {
              this.push(name);
              this.space();
            };
            Buffer.prototype.space = function space(force) {
              if (!force && this.format.compact)
                return;
              if (force || this.buf && !this.isLast(" ") && !this.isLast("\n")) {
                this.push(" ");
              }
            };
            Buffer.prototype.removeLast = function removeLast(cha) {
              if (this.format.compact)
                return;
              return this._removeLast(cha);
            };
            Buffer.prototype._removeLast = function _removeLast(cha) {
              if (!this._isLast(cha))
                return;
              this.buf = this.buf.substr(0, this.buf.length - 1);
              this.position.unshift(cha);
            };
            Buffer.prototype.startTerminatorless = function startTerminatorless() {
              return this.parenPushNewlineState = {printed: false};
            };
            Buffer.prototype.endTerminatorless = function endTerminatorless(state) {
              if (state.printed) {
                this.dedent();
                this.newline();
                this.push(")");
              }
            };
            Buffer.prototype.newline = function newline(i, removeLast) {
              if (this.format.compact || this.format.retainLines)
                return;
              if (this.format.concise) {
                this.space();
                return;
              }
              removeLast = removeLast || false;
              if (_lodashLangIsNumber2["default"](i)) {
                i = Math.min(2, i);
                if (this.endsWith("{\n") || this.endsWith(":\n"))
                  i--;
                if (i <= 0)
                  return;
                while (i > 0) {
                  this._newline(removeLast);
                  i--;
                }
                return;
              }
              if (_lodashLangIsBoolean2["default"](i)) {
                removeLast = i;
              }
              this._newline(removeLast);
            };
            Buffer.prototype._newline = function _newline(removeLast) {
              if (this.endsWith("\n\n"))
                return;
              if (removeLast && this.isLast("\n"))
                this.removeLast("\n");
              this.removeLast(" ");
              this._removeSpacesAfterLastNewline();
              this._push("\n");
            };
            Buffer.prototype._removeSpacesAfterLastNewline = function _removeSpacesAfterLastNewline() {
              var lastNewlineIndex = this.buf.lastIndexOf("\n");
              if (lastNewlineIndex === -1) {
                return;
              }
              var index = this.buf.length - 1;
              while (index > lastNewlineIndex) {
                if (this.buf[index] !== " ") {
                  break;
                }
                index--;
              }
              if (index === lastNewlineIndex) {
                this.buf = this.buf.substring(0, index + 1);
              }
            };
            Buffer.prototype.push = function push(str, noIndent) {
              if (!this.format.compact && this._indent && !noIndent && str !== "\n") {
                var indent = this.getIndent();
                str = str.replace(/\n/g, "\n" + indent);
                if (this.isLast("\n"))
                  this._push(indent);
              }
              this._push(str);
            };
            Buffer.prototype._push = function _push(str) {
              var parenPushNewlineState = this.parenPushNewlineState;
              if (parenPushNewlineState) {
                for (var i = 0; i < str.length; i++) {
                  var cha = str[i];
                  if (cha === " ")
                    continue;
                  this.parenPushNewlineState = null;
                  if (cha === "\n" || cha === "/") {
                    this._push("(");
                    this.indent();
                    parenPushNewlineState.printed = true;
                  }
                  break;
                }
              }
              this.position.push(str);
              this.buf += str;
            };
            Buffer.prototype.endsWith = function endsWith(str) {
              var buf = arguments.length <= 1 || arguments[1] === undefined ? this.buf : arguments[1];
              if (str.length === 1) {
                return buf[buf.length - 1] === str;
              } else {
                return buf.slice(-str.length) === str;
              }
            };
            Buffer.prototype.isLast = function isLast(cha) {
              if (this.format.compact)
                return false;
              return this._isLast(cha);
            };
            Buffer.prototype._isLast = function _isLast(cha) {
              var buf = this.buf;
              var last = buf[buf.length - 1];
              if (Array.isArray(cha)) {
                return _lodashCollectionIncludes2["default"](cha, last);
              } else {
                return cha === last;
              }
            };
            return Buffer;
          })();
          exports["default"] = Buffer;
          module.exports = exports["default"];
        }, {
          "446": 446,
          "531": 531,
          "535": 535,
          "586": 586,
          "608": 608
        }],
        19: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          exports.File = File;
          exports.Program = Program;
          exports.BlockStatement = BlockStatement;
          exports.Noop = Noop;
          function File(node, print) {
            print.plain(node.program);
          }
          function Program(node, print) {
            print.sequence(node.body);
          }
          function BlockStatement(node, print) {
            this.push("{");
            if (node.body.length) {
              this.newline();
              print.sequence(node.body, {indent: true});
              if (!this.format.retainLines)
                this.removeLast("\n");
              this.rightBrace();
            } else {
              print.printInnerComments();
              this.push("}");
            }
          }
          function Noop() {}
        }, {}],
        20: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          exports.ClassDeclaration = ClassDeclaration;
          exports.ClassBody = ClassBody;
          exports.ClassProperty = ClassProperty;
          exports.MethodDefinition = MethodDefinition;
          function ClassDeclaration(node, print) {
            print.list(node.decorators, {separator: ""});
            this.push("class");
            if (node.id) {
              this.push(" ");
              print.plain(node.id);
            }
            print.plain(node.typeParameters);
            if (node.superClass) {
              this.push(" extends ");
              print.plain(node.superClass);
              print.plain(node.superTypeParameters);
            }
            if (node["implements"]) {
              this.push(" implements ");
              print.join(node["implements"], {separator: ", "});
            }
            this.space();
            print.plain(node.body);
          }
          exports.ClassExpression = ClassDeclaration;
          function ClassBody(node, print) {
            this.push("{");
            if (node.body.length === 0) {
              print.printInnerComments();
              this.push("}");
            } else {
              this.newline();
              this.indent();
              print.sequence(node.body);
              this.dedent();
              this.rightBrace();
            }
          }
          function ClassProperty(node, print) {
            print.list(node.decorators, {separator: ""});
            if (node["static"])
              this.push("static ");
            print.plain(node.key);
            print.plain(node.typeAnnotation);
            if (node.value) {
              this.space();
              this.push("=");
              this.space();
              print.plain(node.value);
            }
            this.semicolon();
          }
          function MethodDefinition(node, print) {
            print.list(node.decorators, {separator: ""});
            if (node["static"]) {
              this.push("static ");
            }
            this._method(node, print);
          }
        }, {}],
        21: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          exports.ComprehensionBlock = ComprehensionBlock;
          exports.ComprehensionExpression = ComprehensionExpression;
          function ComprehensionBlock(node, print) {
            this.keyword("for");
            this.push("(");
            print.plain(node.left);
            this.push(" of ");
            print.plain(node.right);
            this.push(")");
          }
          function ComprehensionExpression(node, print) {
            this.push(node.generator ? "(" : "[");
            print.join(node.blocks, {separator: " "});
            this.space();
            if (node.filter) {
              this.keyword("if");
              this.push("(");
              print.plain(node.filter);
              this.push(")");
              this.space();
            }
            print.plain(node.body);
            this.push(node.generator ? ")" : "]");
          }
        }, {}],
        22: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          exports.UnaryExpression = UnaryExpression;
          exports.DoExpression = DoExpression;
          exports.ParenthesizedExpression = ParenthesizedExpression;
          exports.UpdateExpression = UpdateExpression;
          exports.ConditionalExpression = ConditionalExpression;
          exports.NewExpression = NewExpression;
          exports.SequenceExpression = SequenceExpression;
          exports.ThisExpression = ThisExpression;
          exports.Super = Super;
          exports.Decorator = Decorator;
          exports.CallExpression = CallExpression;
          exports.EmptyStatement = EmptyStatement;
          exports.ExpressionStatement = ExpressionStatement;
          exports.AssignmentPattern = AssignmentPattern;
          exports.AssignmentExpression = AssignmentExpression;
          exports.BindExpression = BindExpression;
          exports.MemberExpression = MemberExpression;
          exports.MetaProperty = MetaProperty;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {"default": obj};
          }
          var _isInteger = _dereq_(434);
          var _isInteger2 = _interopRequireDefault(_isInteger);
          var _lodashLangIsNumber = _dereq_(535);
          var _lodashLangIsNumber2 = _interopRequireDefault(_lodashLangIsNumber);
          var _node = _dereq_(31);
          var _node2 = _interopRequireDefault(_node);
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          var SCIENTIFIC_NOTATION = /e/i;
          var ZERO_DECIMAL_INTEGER = /\.0+$/;
          var NON_DECIMAL_NUMERIC_LITERAL = /^0(b|o|x)/i;
          function UnaryExpression(node, print) {
            var needsSpace = /[a-z]$/.test(node.operator);
            var arg = node.argument;
            if (t.isUpdateExpression(arg) || t.isUnaryExpression(arg)) {
              needsSpace = true;
            }
            if (t.isUnaryExpression(arg) && arg.operator === "!") {
              needsSpace = false;
            }
            this.push(node.operator);
            if (needsSpace)
              this.push(" ");
            print.plain(node.argument);
          }
          function DoExpression(node, print) {
            this.push("do");
            this.space();
            print.plain(node.body);
          }
          function ParenthesizedExpression(node, print) {
            this.push("(");
            print.plain(node.expression);
            this.push(")");
          }
          function UpdateExpression(node, print) {
            if (node.prefix) {
              this.push(node.operator);
              print.plain(node.argument);
            } else {
              print.plain(node.argument);
              this.push(node.operator);
            }
          }
          function ConditionalExpression(node, print) {
            print.plain(node.test);
            this.space();
            this.push("?");
            this.space();
            print.plain(node.consequent);
            this.space();
            this.push(":");
            this.space();
            print.plain(node.alternate);
          }
          function NewExpression(node, print) {
            this.push("new ");
            print.plain(node.callee);
            this.push("(");
            print.list(node.arguments);
            this.push(")");
          }
          function SequenceExpression(node, print) {
            print.list(node.expressions);
          }
          function ThisExpression() {
            this.push("this");
          }
          function Super() {
            this.push("super");
          }
          function Decorator(node, print) {
            this.push("@");
            print.plain(node.expression);
            this.newline();
          }
          function CallExpression(node, print) {
            print.plain(node.callee);
            this.push("(");
            var isPrettyCall = node._prettyCall && !this.format.retainLines && !this.format.compact;
            var separator;
            if (isPrettyCall) {
              separator = ",\n";
              this.newline();
              this.indent();
            }
            print.list(node.arguments, {separator: separator});
            if (isPrettyCall) {
              this.newline();
              this.dedent();
            }
            this.push(")");
          }
          var buildYieldAwait = function buildYieldAwait(keyword) {
            return function(node, print) {
              this.push(keyword);
              if (node.delegate || node.all) {
                this.push("*");
              }
              if (node.argument) {
                this.push(" ");
                var terminatorState = this.startTerminatorless();
                print.plain(node.argument);
                this.endTerminatorless(terminatorState);
              }
            };
          };
          var YieldExpression = buildYieldAwait("yield");
          exports.YieldExpression = YieldExpression;
          var AwaitExpression = buildYieldAwait("await");
          exports.AwaitExpression = AwaitExpression;
          function EmptyStatement() {
            this.semicolon();
          }
          function ExpressionStatement(node, print) {
            print.plain(node.expression);
            this.semicolon();
          }
          function AssignmentPattern(node, print) {
            print.plain(node.left);
            this.push(" = ");
            print.plain(node.right);
          }
          function AssignmentExpression(node, print, parent) {
            var parens = this._inForStatementInit && node.operator === "in" && !_node2["default"].needsParens(node, parent);
            if (parens) {
              this.push("(");
            }
            print.plain(node.left);
            var spaces = node.operator === "in" || node.operator === "instanceof";
            spaces = true;
            this.space(spaces);
            this.push(node.operator);
            if (!spaces) {
              spaces = node.operator === "<" && t.isUnaryExpression(node.right, {
                prefix: true,
                operator: "!"
              }) && t.isUnaryExpression(node.right.argument, {
                prefix: true,
                operator: "--"
              });
            }
            this.space(spaces);
            print.plain(node.right);
            if (parens) {
              this.push(")");
            }
          }
          function BindExpression(node, print) {
            print.plain(node.object);
            this.push("::");
            print.plain(node.callee);
          }
          exports.BinaryExpression = AssignmentExpression;
          exports.LogicalExpression = AssignmentExpression;
          function MemberExpression(node, print) {
            var obj = node.object;
            print.plain(obj);
            if (!node.computed && t.isMemberExpression(node.property)) {
              throw new TypeError("Got a MemberExpression for MemberExpression property");
            }
            var computed = node.computed;
            if (t.isLiteral(node.property) && _lodashLangIsNumber2["default"](node.property.value)) {
              computed = true;
            }
            if (computed) {
              this.push("[");
              print.plain(node.property);
              this.push("]");
            } else {
              if (t.isLiteral(node.object)) {
                var val = this._Literal(node.object);
                if (_isInteger2["default"](+val) && !ZERO_DECIMAL_INTEGER.test(val) && !SCIENTIFIC_NOTATION.test(val) && !this.endsWith(".") && !NON_DECIMAL_NUMERIC_LITERAL.test(val)) {
                  this.push(".");
                }
              }
              this.push(".");
              print.plain(node.property);
            }
          }
          function MetaProperty(node, print) {
            print.plain(node.meta);
            this.push(".");
            print.plain(node.property);
          }
        }, {
          "179": 179,
          "31": 31,
          "434": 434,
          "535": 535
        }],
        23: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          exports.AnyTypeAnnotation = AnyTypeAnnotation;
          exports.ArrayTypeAnnotation = ArrayTypeAnnotation;
          exports.BooleanTypeAnnotation = BooleanTypeAnnotation;
          exports.BooleanLiteralTypeAnnotation = BooleanLiteralTypeAnnotation;
          exports.DeclareClass = DeclareClass;
          exports.DeclareFunction = DeclareFunction;
          exports.DeclareInterface = DeclareInterface;
          exports.DeclareModule = DeclareModule;
          exports.DeclareTypeAlias = DeclareTypeAlias;
          exports.DeclareVariable = DeclareVariable;
          exports.FunctionTypeAnnotation = FunctionTypeAnnotation;
          exports.FunctionTypeParam = FunctionTypeParam;
          exports.InterfaceExtends = InterfaceExtends;
          exports._interfaceish = _interfaceish;
          exports.InterfaceDeclaration = InterfaceDeclaration;
          exports.IntersectionTypeAnnotation = IntersectionTypeAnnotation;
          exports.MixedTypeAnnotation = MixedTypeAnnotation;
          exports.NullableTypeAnnotation = NullableTypeAnnotation;
          exports.NullLiteralTypeAnnotation = NullLiteralTypeAnnotation;
          exports.NumberTypeAnnotation = NumberTypeAnnotation;
          exports.StringLiteralTypeAnnotation = StringLiteralTypeAnnotation;
          exports.StringTypeAnnotation = StringTypeAnnotation;
          exports.ThisTypeAnnotation = ThisTypeAnnotation;
          exports.TupleTypeAnnotation = TupleTypeAnnotation;
          exports.TypeofTypeAnnotation = TypeofTypeAnnotation;
          exports.TypeAlias = TypeAlias;
          exports.TypeAnnotation = TypeAnnotation;
          exports.TypeParameterInstantiation = TypeParameterInstantiation;
          exports.ObjectTypeAnnotation = ObjectTypeAnnotation;
          exports.ObjectTypeCallProperty = ObjectTypeCallProperty;
          exports.ObjectTypeIndexer = ObjectTypeIndexer;
          exports.ObjectTypeProperty = ObjectTypeProperty;
          exports.QualifiedTypeIdentifier = QualifiedTypeIdentifier;
          exports.UnionTypeAnnotation = UnionTypeAnnotation;
          exports.TypeCastExpression = TypeCastExpression;
          exports.VoidTypeAnnotation = VoidTypeAnnotation;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          function AnyTypeAnnotation() {
            this.push("any");
          }
          function ArrayTypeAnnotation(node, print) {
            print.plain(node.elementType);
            this.push("[");
            this.push("]");
          }
          function BooleanTypeAnnotation() {
            this.push("bool");
          }
          function BooleanLiteralTypeAnnotation(node) {
            this.push(node.value ? "true" : "false");
          }
          function DeclareClass(node, print) {
            this.push("declare class ");
            this._interfaceish(node, print);
          }
          function DeclareFunction(node, print) {
            this.push("declare function ");
            print.plain(node.id);
            print.plain(node.id.typeAnnotation.typeAnnotation);
            this.semicolon();
          }
          function DeclareInterface(node, print) {
            this.push("declare ");
            this.InterfaceDeclaration(node, print);
          }
          function DeclareModule(node, print) {
            this.push("declare module ");
            print.plain(node.id);
            this.space();
            print.plain(node.body);
          }
          function DeclareTypeAlias(node, print) {
            this.push("declare ");
            this.TypeAlias(node, print);
          }
          function DeclareVariable(node, print) {
            this.push("declare var ");
            print.plain(node.id);
            print.plain(node.id.typeAnnotation);
            this.semicolon();
          }
          function FunctionTypeAnnotation(node, print, parent) {
            print.plain(node.typeParameters);
            this.push("(");
            print.list(node.params);
            if (node.rest) {
              if (node.params.length) {
                this.push(",");
                this.space();
              }
              this.push("...");
              print.plain(node.rest);
            }
            this.push(")");
            if (parent.type === "ObjectTypeProperty" || parent.type === "ObjectTypeCallProperty" || parent.type === "DeclareFunction") {
              this.push(":");
            } else {
              this.space();
              this.push("=>");
            }
            this.space();
            print.plain(node.returnType);
          }
          function FunctionTypeParam(node, print) {
            print.plain(node.name);
            if (node.optional)
              this.push("?");
            this.push(":");
            this.space();
            print.plain(node.typeAnnotation);
          }
          function InterfaceExtends(node, print) {
            print.plain(node.id);
            print.plain(node.typeParameters);
          }
          exports.ClassImplements = InterfaceExtends;
          exports.GenericTypeAnnotation = InterfaceExtends;
          function _interfaceish(node, print) {
            print.plain(node.id);
            print.plain(node.typeParameters);
            if (node["extends"].length) {
              this.push(" extends ");
              print.join(node["extends"], {separator: ", "});
            }
            if (node.mixins && node.mixins.length) {
              this.push(" mixins ");
              print.join(node.mixins, {separator: ", "});
            }
            this.space();
            print.plain(node.body);
          }
          function InterfaceDeclaration(node, print) {
            this.push("interface ");
            this._interfaceish(node, print);
          }
          function IntersectionTypeAnnotation(node, print) {
            print.join(node.types, {separator: " & "});
          }
          function MixedTypeAnnotation() {
            this.push("mixed");
          }
          function NullableTypeAnnotation(node, print) {
            this.push("?");
            print.plain(node.typeAnnotation);
          }
          function NullLiteralTypeAnnotation() {
            this.push("null");
          }
          var _types2 = _dereq_(29);
          exports.NumberLiteralTypeAnnotation = _types2.Literal;
          function NumberTypeAnnotation() {
            this.push("number");
          }
          function StringLiteralTypeAnnotation(node) {
            this.push(this._stringLiteral(node.value));
          }
          function StringTypeAnnotation() {
            this.push("string");
          }
          function ThisTypeAnnotation() {
            this.push("this");
          }
          function TupleTypeAnnotation(node, print) {
            this.push("[");
            print.join(node.types, {separator: ", "});
            this.push("]");
          }
          function TypeofTypeAnnotation(node, print) {
            this.push("typeof ");
            print.plain(node.argument);
          }
          function TypeAlias(node, print) {
            this.push("type ");
            print.plain(node.id);
            print.plain(node.typeParameters);
            this.space();
            this.push("=");
            this.space();
            print.plain(node.right);
            this.semicolon();
          }
          function TypeAnnotation(node, print) {
            this.push(":");
            this.space();
            if (node.optional)
              this.push("?");
            print.plain(node.typeAnnotation);
          }
          function TypeParameterInstantiation(node, print) {
            this.push("<");
            print.join(node.params, {
              separator: ", ",
              iterator: function iterator(node) {
                print.plain(node.typeAnnotation);
              }
            });
            this.push(">");
          }
          exports.TypeParameterDeclaration = TypeParameterInstantiation;
          function ObjectTypeAnnotation(node, print) {
            var _this = this;
            this.push("{");
            var props = node.properties.concat(node.callProperties, node.indexers);
            if (props.length) {
              this.space();
              print.list(props, {
                separator: false,
                indent: true,
                iterator: function iterator() {
                  if (props.length !== 1) {
                    _this.semicolon();
                    _this.space();
                  }
                }
              });
              this.space();
            }
            this.push("}");
          }
          function ObjectTypeCallProperty(node, print) {
            if (node["static"])
              this.push("static ");
            print.plain(node.value);
          }
          function ObjectTypeIndexer(node, print) {
            if (node["static"])
              this.push("static ");
            this.push("[");
            print.plain(node.id);
            this.push(":");
            this.space();
            print.plain(node.key);
            this.push("]");
            this.push(":");
            this.space();
            print.plain(node.value);
          }
          function ObjectTypeProperty(node, print) {
            if (node["static"])
              this.push("static ");
            print.plain(node.key);
            if (node.optional)
              this.push("?");
            if (!t.isFunctionTypeAnnotation(node.value)) {
              this.push(":");
              this.space();
            }
            print.plain(node.value);
          }
          function QualifiedTypeIdentifier(node, print) {
            print.plain(node.qualification);
            this.push(".");
            print.plain(node.id);
          }
          function UnionTypeAnnotation(node, print) {
            print.join(node.types, {separator: " | "});
          }
          function TypeCastExpression(node, print) {
            this.push("(");
            print.plain(node.expression);
            print.plain(node.typeAnnotation);
            this.push(")");
          }
          function VoidTypeAnnotation() {
            this.push("void");
          }
        }, {
          "179": 179,
          "29": 29
        }],
        24: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          exports.JSXAttribute = JSXAttribute;
          exports.JSXIdentifier = JSXIdentifier;
          exports.JSXNamespacedName = JSXNamespacedName;
          exports.JSXMemberExpression = JSXMemberExpression;
          exports.JSXSpreadAttribute = JSXSpreadAttribute;
          exports.JSXExpressionContainer = JSXExpressionContainer;
          exports.JSXElement = JSXElement;
          exports.JSXOpeningElement = JSXOpeningElement;
          exports.JSXClosingElement = JSXClosingElement;
          exports.JSXEmptyExpression = JSXEmptyExpression;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          function JSXAttribute(node, print) {
            print.plain(node.name);
            if (node.value) {
              this.push("=");
              print.plain(node.value);
            }
          }
          function JSXIdentifier(node) {
            this.push(node.name);
          }
          function JSXNamespacedName(node, print) {
            print.plain(node.namespace);
            this.push(":");
            print.plain(node.name);
          }
          function JSXMemberExpression(node, print) {
            print.plain(node.object);
            this.push(".");
            print.plain(node.property);
          }
          function JSXSpreadAttribute(node, print) {
            this.push("{...");
            print.plain(node.argument);
            this.push("}");
          }
          function JSXExpressionContainer(node, print) {
            this.push("{");
            print.plain(node.expression);
            this.push("}");
          }
          function JSXElement(node, print) {
            var open = node.openingElement;
            print.plain(open);
            if (open.selfClosing)
              return;
            this.indent();
            var _arr = node.children;
            for (var _i = 0; _i < _arr.length; _i++) {
              var child = _arr[_i];
              if (t.isLiteral(child)) {
                this.push(child.value, true);
              } else {
                print.plain(child);
              }
            }
            this.dedent();
            print.plain(node.closingElement);
          }
          function JSXOpeningElement(node, print) {
            this.push("<");
            print.plain(node.name);
            if (node.attributes.length > 0) {
              this.push(" ");
              print.join(node.attributes, {separator: " "});
            }
            this.push(node.selfClosing ? " />" : ">");
          }
          function JSXClosingElement(node, print) {
            this.push("</");
            print.plain(node.name);
            this.push(">");
          }
          function JSXEmptyExpression() {}
        }, {"179": 179}],
        25: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          exports._params = _params;
          exports._method = _method;
          exports.FunctionExpression = FunctionExpression;
          exports.ArrowFunctionExpression = ArrowFunctionExpression;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          function _params(node, print) {
            var _this = this;
            print.plain(node.typeParameters);
            this.push("(");
            print.list(node.params, {iterator: function iterator(node) {
                if (node.optional)
                  _this.push("?");
                print.plain(node.typeAnnotation);
              }});
            this.push(")");
            if (node.returnType) {
              print.plain(node.returnType);
            }
          }
          function _method(node, print) {
            var value = node.value;
            var kind = node.kind;
            var key = node.key;
            if (kind === "method" || kind === "init") {
              if (value.generator) {
                this.push("*");
              }
            }
            if (kind === "get" || kind === "set") {
              this.push(kind + " ");
            }
            if (value.async)
              this.push("async ");
            if (node.computed) {
              this.push("[");
              print.plain(key);
              this.push("]");
            } else {
              print.plain(key);
            }
            this._params(value, print);
            this.space();
            print.plain(value.body);
          }
          function FunctionExpression(node, print) {
            if (node.async)
              this.push("async ");
            this.push("function");
            if (node.generator)
              this.push("*");
            if (node.id) {
              this.push(" ");
              print.plain(node.id);
            } else {
              this.space();
            }
            this._params(node, print);
            this.space();
            print.plain(node.body);
          }
          exports.FunctionDeclaration = FunctionExpression;
          function ArrowFunctionExpression(node, print) {
            if (node.async)
              this.push("async ");
            if (node.params.length === 1 && t.isIdentifier(node.params[0])) {
              print.plain(node.params[0]);
            } else {
              this._params(node, print);
            }
            this.push(" => ");
            var bodyNeedsParens = t.isObjectExpression(node.body);
            if (bodyNeedsParens) {
              this.push("(");
            }
            print.plain(node.body);
            if (bodyNeedsParens) {
              this.push(")");
            }
          }
        }, {"179": 179}],
        26: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          exports.ImportSpecifier = ImportSpecifier;
          exports.ImportDefaultSpecifier = ImportDefaultSpecifier;
          exports.ExportDefaultSpecifier = ExportDefaultSpecifier;
          exports.ExportSpecifier = ExportSpecifier;
          exports.ExportNamespaceSpecifier = ExportNamespaceSpecifier;
          exports.ExportAllDeclaration = ExportAllDeclaration;
          exports.ExportNamedDeclaration = ExportNamedDeclaration;
          exports.ExportDefaultDeclaration = ExportDefaultDeclaration;
          exports.ImportDeclaration = ImportDeclaration;
          exports.ImportNamespaceSpecifier = ImportNamespaceSpecifier;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          function ImportSpecifier(node, print) {
            print.plain(node.imported);
            if (node.local && node.local.name !== node.imported.name) {
              this.push(" as ");
              print.plain(node.local);
            }
          }
          function ImportDefaultSpecifier(node, print) {
            print.plain(node.local);
          }
          function ExportDefaultSpecifier(node, print) {
            print.plain(node.exported);
          }
          function ExportSpecifier(node, print) {
            print.plain(node.local);
            if (node.exported && node.local.name !== node.exported.name) {
              this.push(" as ");
              print.plain(node.exported);
            }
          }
          function ExportNamespaceSpecifier(node, print) {
            this.push("* as ");
            print.plain(node.exported);
          }
          function ExportAllDeclaration(node, print) {
            this.push("export *");
            if (node.exported) {
              this.push(" as ");
              print.plain(node.exported);
            }
            this.push(" from ");
            print.plain(node.source);
            this.semicolon();
          }
          function ExportNamedDeclaration(node, print) {
            this.push("export ");
            ExportDeclaration.call(this, node, print);
          }
          function ExportDefaultDeclaration(node, print) {
            this.push("export default ");
            ExportDeclaration.call(this, node, print);
          }
          function ExportDeclaration(node, print) {
            var specifiers = node.specifiers;
            if (node.declaration) {
              var declar = node.declaration;
              print.plain(declar);
              if (t.isStatement(declar) || t.isFunction(declar) || t.isClass(declar))
                return;
            } else {
              if (node.exportKind === "type") {
                this.push("type ");
              }
              var first = specifiers[0];
              var hasSpecial = false;
              if (t.isExportDefaultSpecifier(first) || t.isExportNamespaceSpecifier(first)) {
                hasSpecial = true;
                print.plain(specifiers.shift());
                if (specifiers.length) {
                  this.push(", ");
                }
              }
              if (specifiers.length || !specifiers.length && !hasSpecial) {
                this.push("{");
                if (specifiers.length) {
                  this.space();
                  print.join(specifiers, {separator: ", "});
                  this.space();
                }
                this.push("}");
              }
              if (node.source) {
                this.push(" from ");
                print.plain(node.source);
              }
            }
            this.ensureSemicolon();
          }
          function ImportDeclaration(node, print) {
            this.push("import ");
            if (node.importKind === "type" || node.importKind === "typeof") {
              this.push(node.importKind + " ");
            }
            var specfiers = node.specifiers;
            if (specfiers && specfiers.length) {
              var first = node.specifiers[0];
              if (t.isImportDefaultSpecifier(first) || t.isImportNamespaceSpecifier(first)) {
                print.plain(node.specifiers.shift());
                if (node.specifiers.length) {
                  this.push(", ");
                }
              }
              if (node.specifiers.length) {
                this.push("{");
                this.space();
                print.join(node.specifiers, {separator: ", "});
                this.space();
                this.push("}");
              }
              this.push(" from ");
            }
            print.plain(node.source);
            this.semicolon();
          }
          function ImportNamespaceSpecifier(node, print) {
            this.push("* as ");
            print.plain(node.local);
          }
        }, {"179": 179}],
        27: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          exports.WithStatement = WithStatement;
          exports.IfStatement = IfStatement;
          exports.ForStatement = ForStatement;
          exports.WhileStatement = WhileStatement;
          exports.DoWhileStatement = DoWhileStatement;
          exports.LabeledStatement = LabeledStatement;
          exports.TryStatement = TryStatement;
          exports.CatchClause = CatchClause;
          exports.SwitchStatement = SwitchStatement;
          exports.SwitchCase = SwitchCase;
          exports.DebuggerStatement = DebuggerStatement;
          exports.VariableDeclaration = VariableDeclaration;
          exports.VariableDeclarator = VariableDeclarator;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {"default": obj};
          }
          var _repeating = _dereq_(586);
          var _repeating2 = _interopRequireDefault(_repeating);
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          function WithStatement(node, print) {
            this.keyword("with");
            this.push("(");
            print.plain(node.object);
            this.push(")");
            print.block(node.body);
          }
          function IfStatement(node, print) {
            this.keyword("if");
            this.push("(");
            print.plain(node.test);
            this.push(")");
            this.space();
            print.indentOnComments(node.consequent);
            if (node.alternate) {
              if (this.isLast("}"))
                this.space();
              this.push("else ");
              print.indentOnComments(node.alternate);
            }
          }
          function ForStatement(node, print) {
            this.keyword("for");
            this.push("(");
            this._inForStatementInit = true;
            print.plain(node.init);
            this._inForStatementInit = false;
            this.push(";");
            if (node.test) {
              this.space();
              print.plain(node.test);
            }
            this.push(";");
            if (node.update) {
              this.space();
              print.plain(node.update);
            }
            this.push(")");
            print.block(node.body);
          }
          function WhileStatement(node, print) {
            this.keyword("while");
            this.push("(");
            print.plain(node.test);
            this.push(")");
            print.block(node.body);
          }
          var buildForXStatement = function buildForXStatement(op) {
            return function(node, print) {
              this.keyword("for");
              this.push("(");
              print.plain(node.left);
              this.push(" " + op + " ");
              print.plain(node.right);
              this.push(")");
              print.block(node.body);
            };
          };
          var ForInStatement = buildForXStatement("in");
          exports.ForInStatement = ForInStatement;
          var ForOfStatement = buildForXStatement("of");
          exports.ForOfStatement = ForOfStatement;
          function DoWhileStatement(node, print) {
            this.push("do ");
            print.plain(node.body);
            this.space();
            this.keyword("while");
            this.push("(");
            print.plain(node.test);
            this.push(");");
          }
          var buildLabelStatement = function buildLabelStatement(prefix) {
            var key = arguments.length <= 1 || arguments[1] === undefined ? "label" : arguments[1];
            return function(node, print) {
              this.push(prefix);
              var label = node[key];
              if (label) {
                this.push(" ");
                var terminatorState = this.startTerminatorless();
                print.plain(label);
                this.endTerminatorless(terminatorState);
              }
              this.semicolon();
            };
          };
          var ContinueStatement = buildLabelStatement("continue");
          exports.ContinueStatement = ContinueStatement;
          var ReturnStatement = buildLabelStatement("return", "argument");
          exports.ReturnStatement = ReturnStatement;
          var BreakStatement = buildLabelStatement("break");
          exports.BreakStatement = BreakStatement;
          var ThrowStatement = buildLabelStatement("throw", "argument");
          exports.ThrowStatement = ThrowStatement;
          function LabeledStatement(node, print) {
            print.plain(node.label);
            this.push(": ");
            print.plain(node.body);
          }
          function TryStatement(node, print) {
            this.keyword("try");
            print.plain(node.block);
            this.space();
            if (node.handlers) {
              print.plain(node.handlers[0]);
            } else {
              print.plain(node.handler);
            }
            if (node.finalizer) {
              this.space();
              this.push("finally ");
              print.plain(node.finalizer);
            }
          }
          function CatchClause(node, print) {
            this.keyword("catch");
            this.push("(");
            print.plain(node.param);
            this.push(") ");
            print.plain(node.body);
          }
          function SwitchStatement(node, print) {
            this.keyword("switch");
            this.push("(");
            print.plain(node.discriminant);
            this.push(")");
            this.space();
            this.push("{");
            print.sequence(node.cases, {
              indent: true,
              addNewlines: function addNewlines(leading, cas) {
                if (!leading && node.cases[node.cases.length - 1] === cas)
                  return -1;
              }
            });
            this.push("}");
          }
          function SwitchCase(node, print) {
            if (node.test) {
              this.push("case ");
              print.plain(node.test);
              this.push(":");
            } else {
              this.push("default:");
            }
            if (node.consequent.length) {
              this.newline();
              print.sequence(node.consequent, {indent: true});
            }
          }
          function DebuggerStatement() {
            this.push("debugger;");
          }
          function VariableDeclaration(node, print, parent) {
            this.push(node.kind + " ");
            var hasInits = false;
            if (!t.isFor(parent)) {
              var _arr = node.declarations;
              for (var _i = 0; _i < _arr.length; _i++) {
                var declar = _arr[_i];
                if (declar.init) {
                  hasInits = true;
                }
              }
            }
            var sep;
            if (!this.format.compact && !this.format.concise && hasInits && !this.format.retainLines) {
              sep = ",\n" + _repeating2["default"](" ", node.kind.length + 1);
            }
            print.list(node.declarations, {separator: sep});
            if (t.isFor(parent)) {
              if (parent.left === node || parent.init === node)
                return;
            }
            this.semicolon();
          }
          function VariableDeclarator(node, print) {
            print.plain(node.id);
            print.plain(node.id.typeAnnotation);
            if (node.init) {
              this.space();
              this.push("=");
              this.space();
              print.plain(node.init);
            }
          }
        }, {
          "179": 179,
          "586": 586
        }],
        28: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          exports.TaggedTemplateExpression = TaggedTemplateExpression;
          exports.TemplateElement = TemplateElement;
          exports.TemplateLiteral = TemplateLiteral;
          function TaggedTemplateExpression(node, print) {
            print.plain(node.tag);
            print.plain(node.quasi);
          }
          function TemplateElement(node) {
            this._push(node.value.raw);
          }
          function TemplateLiteral(node, print) {
            this.push("`");
            var quasis = node.quasis;
            var len = quasis.length;
            for (var i = 0; i < len; i++) {
              print.plain(quasis[i]);
              if (i + 1 < len) {
                this.push("${ ");
                print.plain(node.expressions[i]);
                this.push(" }");
              }
            }
            this._push("`");
          }
        }, {}],
        29: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          exports.Identifier = Identifier;
          exports.RestElement = RestElement;
          exports.ObjectExpression = ObjectExpression;
          exports.Property = Property;
          exports.ArrayExpression = ArrayExpression;
          exports.Literal = Literal;
          exports._Literal = _Literal;
          exports._stringLiteral = _stringLiteral;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          function Identifier(node) {
            this.push(node.name);
          }
          function RestElement(node, print) {
            this.push("...");
            print.plain(node.argument);
          }
          exports.SpreadElement = RestElement;
          exports.SpreadProperty = RestElement;
          function ObjectExpression(node, print) {
            var props = node.properties;
            this.push("{");
            print.printInnerComments();
            if (props.length) {
              this.space();
              print.list(props, {indent: true});
              this.space();
            }
            this.push("}");
          }
          exports.ObjectPattern = ObjectExpression;
          function Property(node, print) {
            print.list(node.decorators, {separator: ""});
            if (node.method || node.kind === "get" || node.kind === "set") {
              this._method(node, print);
            } else {
              if (node.computed) {
                this.push("[");
                print.plain(node.key);
                this.push("]");
              } else {
                if (t.isAssignmentPattern(node.value) && t.isIdentifier(node.key) && node.key.name === node.value.left.name) {
                  print.plain(node.value);
                  return;
                }
                print.plain(node.key);
                if (node.shorthand && t.isIdentifier(node.key) && t.isIdentifier(node.value) && node.key.name === node.value.name) {
                  return;
                }
              }
              this.push(":");
              this.space();
              print.plain(node.value);
            }
          }
          function ArrayExpression(node, print) {
            var elems = node.elements;
            var len = elems.length;
            this.push("[");
            print.printInnerComments();
            for (var i = 0; i < elems.length; i++) {
              var elem = elems[i];
              if (elem) {
                if (i > 0)
                  this.space();
                print.plain(elem);
                if (i < len - 1)
                  this.push(",");
              } else {
                this.push(",");
              }
            }
            this.push("]");
          }
          exports.ArrayPattern = ArrayExpression;
          function Literal(node) {
            this.push("");
            this._push(this._Literal(node));
          }
          function _Literal(node) {
            var val = node.value;
            if (node.regex) {
              return "/" + node.regex.pattern + "/" + node.regex.flags;
            }
            if (node.raw != null && node.rawValue != null && val === node.rawValue) {
              return node.raw;
            }
            switch (typeof val) {
              case "string":
                return this._stringLiteral(val);
              case "number":
                return val + "";
              case "boolean":
                return val ? "true" : "false";
              default:
                if (val === null) {
                  return "null";
                } else {
                  throw new Error("Invalid Literal type");
                }
            }
          }
          function _stringLiteral(val) {
            val = JSON.stringify(val);
            val = val.replace(/[\u000A\u000D\u2028\u2029]/g, function(c) {
              return "\\u" + ("0000" + c.charCodeAt(0).toString(16)).slice(-4);
            });
            if (this.format.quotes === "single") {
              val = val.slice(1, -1);
              val = val.replace(/\\"/g, '"');
              val = val.replace(/'/g, "\\'");
              val = "'" + val + "'";
            }
            return val;
          }
        }, {"179": 179}],
        30: [function(_dereq_, module, exports) {
          "use strict";
          var _createClass = (function() {
            function defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor)
                  descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }
            return function(Constructor, protoProps, staticProps) {
              if (protoProps)
                defineProperties(Constructor.prototype, protoProps);
              if (staticProps)
                defineProperties(Constructor, staticProps);
              return Constructor;
            };
          })();
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {"default": obj};
          }
          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }
          var _detectIndent = _dereq_(424);
          var _detectIndent2 = _interopRequireDefault(_detectIndent);
          var _whitespace = _dereq_(37);
          var _whitespace2 = _interopRequireDefault(_whitespace);
          var _nodePrinter = _dereq_(33);
          var _nodePrinter2 = _interopRequireDefault(_nodePrinter);
          var _repeating = _dereq_(586);
          var _repeating2 = _interopRequireDefault(_repeating);
          var _sourceMap = _dereq_(36);
          var _sourceMap2 = _interopRequireDefault(_sourceMap);
          var _position = _dereq_(35);
          var _position2 = _interopRequireDefault(_position);
          var _messages = _dereq_(43);
          var messages = _interopRequireWildcard(_messages);
          var _buffer = _dereq_(18);
          var _buffer2 = _interopRequireDefault(_buffer);
          var _lodashObjectExtend = _dereq_(544);
          var _lodashObjectExtend2 = _interopRequireDefault(_lodashObjectExtend);
          var _lodashCollectionEach = _dereq_(444);
          var _lodashCollectionEach2 = _interopRequireDefault(_lodashCollectionEach);
          var _node2 = _dereq_(31);
          var _node3 = _interopRequireDefault(_node2);
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          var CodeGenerator = (function() {
            function CodeGenerator(ast, opts, code) {
              _classCallCheck(this, CodeGenerator);
              opts = opts || {};
              this.comments = ast.comments || [];
              this.tokens = ast.tokens || [];
              this.format = CodeGenerator.normalizeOptions(code, opts, this.tokens);
              this.opts = opts;
              this.ast = ast;
              this.whitespace = new _whitespace2["default"](this.tokens);
              this.position = new _position2["default"]();
              this.map = new _sourceMap2["default"](this.position, opts, code);
              this.buffer = new _buffer2["default"](this.position, this.format);
            }
            CodeGenerator.normalizeOptions = function normalizeOptions(code, opts, tokens) {
              var style = "  ";
              if (code) {
                var indent = _detectIndent2["default"](code).indent;
                if (indent && indent !== " ")
                  style = indent;
              }
              var format = {
                shouldPrintComment: opts.shouldPrintComment,
                retainLines: opts.retainLines,
                comments: opts.comments == null || opts.comments,
                compact: opts.compact,
                quotes: CodeGenerator.findCommonStringDelimiter(code, tokens),
                indent: {
                  adjustMultilineComment: true,
                  style: style,
                  base: 0
                }
              };
              if (format.compact === "auto") {
                format.compact = code.length > 100000;
                if (format.compact) {
                  console.error("[BABEL] " + messages.get("codeGeneratorDeopt", opts.filename, "100KB"));
                }
              }
              if (format.compact) {
                format.indent.adjustMultilineComment = false;
              }
              return format;
            };
            CodeGenerator.findCommonStringDelimiter = function findCommonStringDelimiter(code, tokens) {
              var occurences = {
                single: 0,
                double: 0
              };
              var checked = 0;
              for (var i = 0; i < tokens.length; i++) {
                var token = tokens[i];
                if (token.type.label !== "string")
                  continue;
                var raw = code.slice(token.start, token.end);
                if (raw[0] === "'") {
                  occurences.single++;
                } else {
                  occurences.double++;
                }
                checked++;
                if (checked >= 3)
                  break;
              }
              if (occurences.single > occurences.double) {
                return "single";
              } else {
                return "double";
              }
            };
            CodeGenerator.prototype.generate = function generate() {
              var ast = this.ast;
              this.print(ast);
              if (ast.comments) {
                var comments = [];
                var _arr = ast.comments;
                for (var _i = 0; _i < _arr.length; _i++) {
                  var comment = _arr[_i];
                  if (!comment._displayed)
                    comments.push(comment);
                }
                this._printComments(comments);
              }
              return {
                map: this.map.get(),
                code: this.buffer.get()
              };
            };
            CodeGenerator.prototype.buildPrint = function buildPrint(parent) {
              return new _nodePrinter2["default"](this, parent);
            };
            CodeGenerator.prototype.catchUp = function catchUp(node) {
              if (node.loc && this.format.retainLines && this.buffer.buf) {
                while (this.position.line < node.loc.start.line) {
                  this._push("\n");
                }
              }
            };
            CodeGenerator.prototype._printNewline = function _printNewline(leading, node, parent, opts) {
              if (!opts.statement && !_node3["default"].isUserWhitespacable(node, parent)) {
                return;
              }
              var lines = 0;
              if (node.start != null && !node._ignoreUserWhitespace) {
                if (leading) {
                  lines = this.whitespace.getNewlinesBefore(node);
                } else {
                  lines = this.whitespace.getNewlinesAfter(node);
                }
              } else {
                if (!leading)
                  lines++;
                if (opts.addNewlines)
                  lines += opts.addNewlines(leading, node) || 0;
                var needs = _node3["default"].needsWhitespaceAfter;
                if (leading)
                  needs = _node3["default"].needsWhitespaceBefore;
                if (needs(node, parent))
                  lines++;
                if (!this.buffer.buf)
                  lines = 0;
              }
              this.newline(lines);
            };
            CodeGenerator.prototype.print = function print(node, parent) {
              var opts = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];
              if (!node)
                return;
              if (parent && parent._compact) {
                node._compact = true;
              }
              var oldConcise = this.format.concise;
              if (node._compact) {
                this.format.concise = true;
              }
              if (!this[node.type]) {
                throw new ReferenceError("unknown node of type " + JSON.stringify(node.type) + " with constructor " + JSON.stringify(node && node.constructor.name));
              }
              var needsParens = _node3["default"].needsParens(node, parent);
              if (needsParens)
                this.push("(");
              this.printLeadingComments(node, parent);
              this.catchUp(node);
              this._printNewline(true, node, parent, opts);
              if (opts.before)
                opts.before();
              this.map.mark(node, "start");
              this[node.type](node, this.buildPrint(node), parent);
              if (needsParens)
                this.push(")");
              this.map.mark(node, "end");
              if (opts.after)
                opts.after();
              this.format.concise = oldConcise;
              this._printNewline(false, node, parent, opts);
              this.printTrailingComments(node, parent);
            };
            CodeGenerator.prototype.printJoin = function printJoin(print, nodes) {
              var _this = this;
              var opts = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];
              if (!nodes || !nodes.length)
                return;
              var len = nodes.length;
              if (opts.indent)
                this.indent();
              var printOpts = {
                statement: opts.statement,
                addNewlines: opts.addNewlines,
                after: function after() {
                  if (opts.iterator) {
                    opts.iterator(node, i);
                  }
                  if (opts.separator && i < len - 1) {
                    _this.push(opts.separator);
                  }
                }
              };
              for (var i = 0; i < nodes.length; i++) {
                var node = nodes[i];
                print.plain(node, printOpts);
              }
              if (opts.indent)
                this.dedent();
            };
            CodeGenerator.prototype.printAndIndentOnComments = function printAndIndentOnComments(print, node) {
              var indent = !!node.leadingComments;
              if (indent)
                this.indent();
              print.plain(node);
              if (indent)
                this.dedent();
            };
            CodeGenerator.prototype.printBlock = function printBlock(print, node) {
              if (t.isEmptyStatement(node)) {
                this.semicolon();
              } else {
                this.push(" ");
                print.plain(node);
              }
            };
            CodeGenerator.prototype.generateComment = function generateComment(comment) {
              var val = comment.value;
              if (comment.type === "CommentLine") {
                val = "//" + val;
              } else {
                val = "/*" + val + "*/";
              }
              return val;
            };
            CodeGenerator.prototype.printTrailingComments = function printTrailingComments(node, parent) {
              this._printComments(this.getComments("trailingComments", node, parent));
            };
            CodeGenerator.prototype.printLeadingComments = function printLeadingComments(node, parent) {
              this._printComments(this.getComments("leadingComments", node, parent));
            };
            CodeGenerator.prototype.getComments = function getComments(key, node, parent) {
              if (t.isExpressionStatement(parent)) {
                return [];
              }
              var comments = [];
              var nodes = [node];
              if (t.isExpressionStatement(node)) {
                nodes.push(node.argument);
              }
              var _arr2 = nodes;
              for (var _i2 = 0; _i2 < _arr2.length; _i2++) {
                var _node = _arr2[_i2];
                comments = comments.concat(this._getComments(key, _node));
              }
              return comments;
            };
            CodeGenerator.prototype._getComments = function _getComments(key, node) {
              return node && node[key] || [];
            };
            CodeGenerator.prototype.shouldPrintComment = function shouldPrintComment(comment) {
              if (this.format.shouldPrintComment) {
                return this.format.shouldPrintComment(comment.value);
              } else {
                if (comment.value.indexOf("@license") >= 0 || comment.value.indexOf("@preserve") >= 0) {
                  return true;
                } else {
                  return this.format.comments;
                }
              }
            };
            CodeGenerator.prototype._printComments = function _printComments(comments) {
              if (!comments || !comments.length)
                return;
              var _arr3 = comments;
              for (var _i3 = 0; _i3 < _arr3.length; _i3++) {
                var comment = _arr3[_i3];
                if (!this.shouldPrintComment(comment))
                  continue;
                if (comment._displayed)
                  continue;
                comment._displayed = true;
                this.catchUp(comment);
                this.newline(this.whitespace.getNewlinesBefore(comment));
                var column = this.position.column;
                var val = this.generateComment(comment);
                if (column && !this.isLast(["\n", " ", "[", "{"])) {
                  this._push(" ");
                  column++;
                }
                if (comment.type === "CommentBlock" && this.format.indent.adjustMultilineComment) {
                  var offset = comment.loc && comment.loc.start.column;
                  if (offset) {
                    var newlineRegex = new RegExp("\\n\\s{1," + offset + "}", "g");
                    val = val.replace(newlineRegex, "\n");
                  }
                  var indent = Math.max(this.indentSize(), column);
                  val = val.replace(/\n/g, "\n" + _repeating2["default"](" ", indent));
                }
                if (column === 0) {
                  val = this.getIndent() + val;
                }
                if ((this.format.compact || this.format.retainLines) && comment.type === "CommentLine") {
                  val += "\n";
                }
                this._push(val);
                this.newline(this.whitespace.getNewlinesAfter(comment));
              }
            };
            _createClass(CodeGenerator, null, [{
              key: "generators",
              value: {
                templateLiterals: _dereq_(28),
                comprehensions: _dereq_(21),
                expressions: _dereq_(22),
                statements: _dereq_(27),
                classes: _dereq_(20),
                methods: _dereq_(25),
                modules: _dereq_(26),
                types: _dereq_(29),
                flow: _dereq_(23),
                base: _dereq_(19),
                jsx: _dereq_(24)
              },
              enumerable: true
            }]);
            return CodeGenerator;
          })();
          _lodashCollectionEach2["default"](_buffer2["default"].prototype, function(fn, key) {
            CodeGenerator.prototype[key] = function() {
              return fn.apply(this.buffer, arguments);
            };
          });
          _lodashCollectionEach2["default"](CodeGenerator.generators, function(generator) {
            _lodashObjectExtend2["default"](CodeGenerator.prototype, generator);
          });
          module.exports = function(ast, opts, code) {
            var gen = new CodeGenerator(ast, opts, code);
            return gen.generate();
          };
          module.exports.CodeGenerator = CodeGenerator;
        }, {
          "179": 179,
          "18": 18,
          "19": 19,
          "20": 20,
          "21": 21,
          "22": 22,
          "23": 23,
          "24": 24,
          "25": 25,
          "26": 26,
          "27": 27,
          "28": 28,
          "29": 29,
          "31": 31,
          "33": 33,
          "35": 35,
          "36": 36,
          "37": 37,
          "424": 424,
          "43": 43,
          "444": 444,
          "544": 544,
          "586": 586
        }],
        31: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {"default": obj};
          }
          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }
          var _whitespace = _dereq_(34);
          var _whitespace2 = _interopRequireDefault(_whitespace);
          var _parentheses = _dereq_(32);
          var parens = _interopRequireWildcard(_parentheses);
          var _lodashCollectionEach = _dereq_(444);
          var _lodashCollectionEach2 = _interopRequireDefault(_lodashCollectionEach);
          var _lodashCollectionSome = _dereq_(449);
          var _lodashCollectionSome2 = _interopRequireDefault(_lodashCollectionSome);
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          var find = function find(obj, node, parent) {
            if (!obj)
              return;
            var result;
            var types = Object.keys(obj);
            for (var i = 0; i < types.length; i++) {
              var type = types[i];
              if (t.is(type, node)) {
                var fn = obj[type];
                result = fn(node, parent);
                if (result != null)
                  break;
              }
            }
            return result;
          };
          var Node = (function() {
            function Node(node, parent) {
              _classCallCheck(this, Node);
              this.parent = parent;
              this.node = node;
            }
            Node.isUserWhitespacable = function isUserWhitespacable(node) {
              return t.isUserWhitespacable(node);
            };
            Node.needsWhitespace = function needsWhitespace(node, parent, type) {
              if (!node)
                return 0;
              if (t.isExpressionStatement(node)) {
                node = node.expression;
              }
              var linesInfo = find(_whitespace2["default"].nodes, node, parent);
              if (!linesInfo) {
                var items = find(_whitespace2["default"].list, node, parent);
                if (items) {
                  for (var i = 0; i < items.length; i++) {
                    linesInfo = Node.needsWhitespace(items[i], node, type);
                    if (linesInfo)
                      break;
                  }
                }
              }
              return linesInfo && linesInfo[type] || 0;
            };
            Node.needsWhitespaceBefore = function needsWhitespaceBefore(node, parent) {
              return Node.needsWhitespace(node, parent, "before");
            };
            Node.needsWhitespaceAfter = function needsWhitespaceAfter(node, parent) {
              return Node.needsWhitespace(node, parent, "after");
            };
            Node.needsParens = function needsParens(node, parent) {
              if (!parent)
                return false;
              if (t.isNewExpression(parent) && parent.callee === node) {
                if (t.isCallExpression(node))
                  return true;
                var hasCall = _lodashCollectionSome2["default"](node, function(val) {
                  return t.isCallExpression(val);
                });
                if (hasCall)
                  return true;
              }
              return find(parens, node, parent);
            };
            return Node;
          })();
          exports["default"] = Node;
          _lodashCollectionEach2["default"](Node, function(fn, key) {
            Node.prototype[key] = function() {
              var args = new Array(arguments.length + 2);
              args[0] = this.node;
              args[1] = this.parent;
              for (var i = 0; i < args.length; i++) {
                args[i + 2] = arguments[i];
              }
              return Node[key].apply(null, args);
            };
          });
          module.exports = exports["default"];
        }, {
          "179": 179,
          "32": 32,
          "34": 34,
          "444": 444,
          "449": 449
        }],
        32: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          exports.NullableTypeAnnotation = NullableTypeAnnotation;
          exports.UpdateExpression = UpdateExpression;
          exports.ObjectExpression = ObjectExpression;
          exports.Binary = Binary;
          exports.BinaryExpression = BinaryExpression;
          exports.SequenceExpression = SequenceExpression;
          exports.YieldExpression = YieldExpression;
          exports.ClassExpression = ClassExpression;
          exports.UnaryLike = UnaryLike;
          exports.FunctionExpression = FunctionExpression;
          exports.ConditionalExpression = ConditionalExpression;
          exports.AssignmentExpression = AssignmentExpression;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {"default": obj};
          }
          var _lodashCollectionEach = _dereq_(444);
          var _lodashCollectionEach2 = _interopRequireDefault(_lodashCollectionEach);
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          var PRECEDENCE = {};
          _lodashCollectionEach2["default"]([["||"], ["&&"], ["|"], ["^"], ["&"], ["==", "===", "!=", "!=="], ["<", ">", "<=", ">=", "in", "instanceof"], [">>", "<<", ">>>"], ["+", "-"], ["*", "/", "%"], ["**"]], function(tier, i) {
            _lodashCollectionEach2["default"](tier, function(op) {
              PRECEDENCE[op] = i;
            });
          });
          function NullableTypeAnnotation(node, parent) {
            return t.isArrayTypeAnnotation(parent);
          }
          exports.FunctionTypeAnnotation = NullableTypeAnnotation;
          function UpdateExpression(node, parent) {
            if (t.isMemberExpression(parent) && parent.object === node) {
              return true;
            }
          }
          function ObjectExpression(node, parent) {
            if (t.isExpressionStatement(parent)) {
              return true;
            }
            if (t.isMemberExpression(parent) && parent.object === node) {
              return true;
            }
            return false;
          }
          function Binary(node, parent) {
            if ((t.isCallExpression(parent) || t.isNewExpression(parent)) && parent.callee === node) {
              return true;
            }
            if (t.isUnaryLike(parent)) {
              return true;
            }
            if (t.isMemberExpression(parent) && parent.object === node) {
              return true;
            }
            if (t.isBinary(parent)) {
              var parentOp = parent.operator;
              var parentPos = PRECEDENCE[parentOp];
              var nodeOp = node.operator;
              var nodePos = PRECEDENCE[nodeOp];
              if (parentPos > nodePos) {
                return true;
              }
              if (parentPos === nodePos && parent.right === node && !t.isLogicalExpression(parent)) {
                return true;
              }
            }
          }
          function BinaryExpression(node, parent) {
            if (node.operator === "in") {
              if (t.isVariableDeclarator(parent)) {
                return true;
              }
              if (t.isFor(parent)) {
                return true;
              }
            }
          }
          function SequenceExpression(node, parent) {
            if (t.isForStatement(parent)) {
              return false;
            }
            if (t.isExpressionStatement(parent) && parent.expression === node) {
              return false;
            }
            if (t.isReturnStatement(parent)) {
              return false;
            }
            return true;
          }
          function YieldExpression(node, parent) {
            return t.isBinary(parent) || t.isUnaryLike(parent) || t.isCallExpression(parent) || t.isMemberExpression(parent) || t.isNewExpression(parent) || t.isConditionalExpression(parent) || t.isYieldExpression(parent);
          }
          function ClassExpression(node, parent) {
            return t.isExpressionStatement(parent);
          }
          function UnaryLike(node, parent) {
            return t.isMemberExpression(parent) && parent.object === node;
          }
          function FunctionExpression(node, parent) {
            if (t.isExpressionStatement(parent)) {
              return true;
            }
            if (t.isMemberExpression(parent) && parent.object === node) {
              return true;
            }
            if (t.isCallExpression(parent) && parent.callee === node) {
              return true;
            }
          }
          function ConditionalExpression(node, parent) {
            if (t.isUnaryLike(parent)) {
              return true;
            }
            if (t.isBinary(parent)) {
              return true;
            }
            if (t.isCallExpression(parent) || t.isNewExpression(parent)) {
              if (parent.callee === node) {
                return true;
              }
            }
            if (t.isConditionalExpression(parent) && parent.test === node) {
              return true;
            }
            if (t.isMemberExpression(parent) && parent.object === node) {
              return true;
            }
            return false;
          }
          function AssignmentExpression(node) {
            if (t.isObjectPattern(node.left)) {
              return true;
            } else {
              return ConditionalExpression.apply(undefined, arguments);
            }
          }
        }, {
          "179": 179,
          "444": 444
        }],
        33: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }
          var NodePrinter = (function() {
            function NodePrinter(generator, parent) {
              _classCallCheck(this, NodePrinter);
              this.generator = generator;
              this.parent = parent;
            }
            NodePrinter.prototype.printInnerComments = function printInnerComments() {
              if (!this.parent.innerComments)
                return;
              var gen = this.generator;
              gen.indent();
              gen._printComments(this.parent.innerComments);
              gen.dedent();
            };
            NodePrinter.prototype.plain = function plain(node, opts) {
              return this.generator.print(node, this.parent, opts);
            };
            NodePrinter.prototype.sequence = function sequence(nodes) {
              var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
              opts.statement = true;
              return this.generator.printJoin(this, nodes, opts);
            };
            NodePrinter.prototype.join = function join(nodes, opts) {
              return this.generator.printJoin(this, nodes, opts);
            };
            NodePrinter.prototype.list = function list(items) {
              var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
              if (opts.separator == null) {
                opts.separator = ",";
                if (!this.generator.format.compact)
                  opts.separator += " ";
              }
              return this.join(items, opts);
            };
            NodePrinter.prototype.block = function block(node) {
              return this.generator.printBlock(this, node);
            };
            NodePrinter.prototype.indentOnComments = function indentOnComments(node) {
              return this.generator.printAndIndentOnComments(this, node);
            };
            return NodePrinter;
          })();
          exports["default"] = NodePrinter;
          module.exports = exports["default"];
        }, {}],
        34: [function(_dereq_, module, exports) {
          "use strict";
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {"default": obj};
          }
          var _lodashLangIsBoolean = _dereq_(531);
          var _lodashLangIsBoolean2 = _interopRequireDefault(_lodashLangIsBoolean);
          var _lodashCollectionEach = _dereq_(444);
          var _lodashCollectionEach2 = _interopRequireDefault(_lodashCollectionEach);
          var _lodashCollectionMap = _dereq_(447);
          var _lodashCollectionMap2 = _interopRequireDefault(_lodashCollectionMap);
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          function crawl(node) {
            var state = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
            if (t.isMemberExpression(node)) {
              crawl(node.object, state);
              if (node.computed)
                crawl(node.property, state);
            } else if (t.isBinary(node) || t.isAssignmentExpression(node)) {
              crawl(node.left, state);
              crawl(node.right, state);
            } else if (t.isCallExpression(node)) {
              state.hasCall = true;
              crawl(node.callee, state);
            } else if (t.isFunction(node)) {
              state.hasFunction = true;
            } else if (t.isIdentifier(node)) {
              state.hasHelper = state.hasHelper || isHelper(node.callee);
            }
            return state;
          }
          function isHelper(node) {
            if (t.isMemberExpression(node)) {
              return isHelper(node.object) || isHelper(node.property);
            } else if (t.isIdentifier(node)) {
              return node.name === "require" || node.name[0] === "_";
            } else if (t.isCallExpression(node)) {
              return isHelper(node.callee);
            } else if (t.isBinary(node) || t.isAssignmentExpression(node)) {
              return t.isIdentifier(node.left) && isHelper(node.left) || isHelper(node.right);
            } else {
              return false;
            }
          }
          function isType(node) {
            return t.isLiteral(node) || t.isObjectExpression(node) || t.isArrayExpression(node) || t.isIdentifier(node) || t.isMemberExpression(node);
          }
          exports.nodes = {
            AssignmentExpression: function AssignmentExpression(node) {
              var state = crawl(node.right);
              if (state.hasCall && state.hasHelper || state.hasFunction) {
                return {
                  before: state.hasFunction,
                  after: true
                };
              }
            },
            SwitchCase: function SwitchCase(node, parent) {
              return {before: node.consequent.length || parent.cases[0] === node};
            },
            LogicalExpression: function LogicalExpression(node) {
              if (t.isFunction(node.left) || t.isFunction(node.right)) {
                return {after: true};
              }
            },
            Literal: function Literal(node) {
              if (node.value === "use strict") {
                return {after: true};
              }
            },
            CallExpression: function CallExpression(node) {
              if (t.isFunction(node.callee) || isHelper(node)) {
                return {
                  before: true,
                  after: true
                };
              }
            },
            VariableDeclaration: function VariableDeclaration(node) {
              for (var i = 0; i < node.declarations.length; i++) {
                var declar = node.declarations[i];
                var enabled = isHelper(declar.id) && !isType(declar.init);
                if (!enabled) {
                  var state = crawl(declar.init);
                  enabled = isHelper(declar.init) && state.hasCall || state.hasFunction;
                }
                if (enabled) {
                  return {
                    before: true,
                    after: true
                  };
                }
              }
            },
            IfStatement: function IfStatement(node) {
              if (t.isBlockStatement(node.consequent)) {
                return {
                  before: true,
                  after: true
                };
              }
            }
          };
          exports.nodes.Property = exports.nodes.SpreadProperty = function(node, parent) {
            if (parent.properties[0] === node) {
              return {before: true};
            }
          };
          exports.list = {
            VariableDeclaration: function VariableDeclaration(node) {
              return _lodashCollectionMap2["default"](node.declarations, "init");
            },
            ArrayExpression: function ArrayExpression(node) {
              return node.elements;
            },
            ObjectExpression: function ObjectExpression(node) {
              return node.properties;
            }
          };
          _lodashCollectionEach2["default"]({
            Function: true,
            Class: true,
            Loop: true,
            LabeledStatement: true,
            SwitchStatement: true,
            TryStatement: true
          }, function(amounts, type) {
            if (_lodashLangIsBoolean2["default"](amounts)) {
              amounts = {
                after: amounts,
                before: amounts
              };
            }
            _lodashCollectionEach2["default"]([type].concat(t.FLIPPED_ALIAS_KEYS[type] || []), function(type) {
              exports.nodes[type] = function() {
                return amounts;
              };
            });
          });
        }, {
          "179": 179,
          "444": 444,
          "447": 447,
          "531": 531
        }],
        35: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }
          var Position = (function() {
            function Position() {
              _classCallCheck(this, Position);
              this.line = 1;
              this.column = 0;
            }
            Position.prototype.push = function push(str) {
              for (var i = 0; i < str.length; i++) {
                if (str[i] === "\n") {
                  this.line++;
                  this.column = 0;
                } else {
                  this.column++;
                }
              }
            };
            Position.prototype.unshift = function unshift(str) {
              for (var i = 0; i < str.length; i++) {
                if (str[i] === "\n") {
                  this.line--;
                } else {
                  this.column--;
                }
              }
            };
            return Position;
          })();
          exports["default"] = Position;
          module.exports = exports["default"];
        }, {}],
        36: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {"default": obj};
          }
          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }
          var _sourceMap = _dereq_(601);
          var _sourceMap2 = _interopRequireDefault(_sourceMap);
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          var SourceMap = (function() {
            function SourceMap(position, opts, code) {
              _classCallCheck(this, SourceMap);
              this.position = position;
              this.opts = opts;
              if (opts.sourceMaps) {
                this.map = new _sourceMap2["default"].SourceMapGenerator({
                  file: opts.sourceMapTarget,
                  sourceRoot: opts.sourceRoot
                });
                this.map.setSourceContent(opts.sourceFileName, code);
              } else {
                this.map = null;
              }
            }
            SourceMap.prototype.get = function get() {
              var map = this.map;
              if (map) {
                return map.toJSON();
              } else {
                return map;
              }
            };
            SourceMap.prototype.mark = function mark(node, type) {
              var loc = node.loc;
              if (!loc)
                return;
              var map = this.map;
              if (!map)
                return;
              if (t.isProgram(node) || t.isFile(node))
                return;
              var position = this.position;
              var generated = {
                line: position.line,
                column: position.column
              };
              var original = loc[type];
              map.addMapping({
                source: this.opts.sourceFileName,
                generated: generated,
                original: original
              });
            };
            return SourceMap;
          })();
          exports["default"] = SourceMap;
          module.exports = exports["default"];
        }, {
          "179": 179,
          "601": 601
        }],
        37: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }
          function getLookupIndex(i, base, max) {
            i += base;
            if (i >= max) {
              i -= max;
            }
            return i;
          }
          var Whitespace = (function() {
            function Whitespace(tokens) {
              _classCallCheck(this, Whitespace);
              this.tokens = tokens;
              this.used = {};
              this._lastFoundIndex = 0;
            }
            Whitespace.prototype.getNewlinesBefore = function getNewlinesBefore(node) {
              var startToken;
              var endToken;
              var tokens = this.tokens;
              for (var j = 0; j < tokens.length; j++) {
                var i = getLookupIndex(j, this._lastFoundIndex, this.tokens.length);
                var token = tokens[i];
                if (node.start === token.start) {
                  startToken = tokens[i - 1];
                  endToken = token;
                  this._lastFoundIndex = i;
                  break;
                }
              }
              return this.getNewlinesBetween(startToken, endToken);
            };
            Whitespace.prototype.getNewlinesAfter = function getNewlinesAfter(node) {
              var startToken;
              var endToken;
              var tokens = this.tokens;
              for (var j = 0; j < tokens.length; j++) {
                var i = getLookupIndex(j, this._lastFoundIndex, this.tokens.length);
                var token = tokens[i];
                if (node.end === token.end) {
                  startToken = token;
                  endToken = tokens[i + 1];
                  if (endToken.type.label === ",")
                    endToken = tokens[i + 2];
                  this._lastFoundIndex = i;
                  break;
                }
              }
              if (endToken && endToken.type.label === "eof") {
                return 1;
              } else {
                var lines = this.getNewlinesBetween(startToken, endToken);
                if (node.type === "CommentLine" && !lines) {
                  return 1;
                } else {
                  return lines;
                }
              }
            };
            Whitespace.prototype.getNewlinesBetween = function getNewlinesBetween(startToken, endToken) {
              if (!endToken || !endToken.loc)
                return 0;
              var start = startToken ? startToken.loc.end.line : 1;
              var end = endToken.loc.start.line;
              var lines = 0;
              for (var line = start; line < end; line++) {
                if (typeof this.used[line] === "undefined") {
                  this.used[line] = true;
                  lines++;
                }
              }
              return lines;
            };
            return Whitespace;
          })();
          exports["default"] = Whitespace;
          module.exports = exports["default"];
        }, {}],
        38: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {"default": obj};
          }
          var _repeating = _dereq_(586);
          var _repeating2 = _interopRequireDefault(_repeating);
          var _jsTokens = _dereq_(435);
          var _jsTokens2 = _interopRequireDefault(_jsTokens);
          var _esutils = _dereq_(429);
          var _esutils2 = _interopRequireDefault(_esutils);
          var _chalk = _dereq_(222);
          var _chalk2 = _interopRequireDefault(_chalk);
          function lineNumbers(lines) {
            return lines;
          }
          var defs = {
            string: _chalk2["default"].red,
            punctuator: _chalk2["default"].bold,
            curly: _chalk2["default"].green,
            parens: _chalk2["default"].blue.bold,
            square: _chalk2["default"].yellow,
            keyword: _chalk2["default"].cyan,
            number: _chalk2["default"].magenta,
            regex: _chalk2["default"].magenta,
            comment: _chalk2["default"].grey,
            invalid: _chalk2["default"].inverse
          };
          var NEWLINE = /\r\n|[\n\r\u2028\u2029]/;
          function getTokenType(match) {
            var token = _jsTokens2["default"].matchToToken(match);
            if (token.type === "name" && _esutils2["default"].keyword.isReservedWordES6(token.value)) {
              return "keyword";
            }
            if (token.type === "punctuator") {
              switch (token.value) {
                case "{":
                case "}":
                  return "curly";
                case "(":
                case ")":
                  return "parens";
                case "[":
                case "]":
                  return "square";
              }
            }
            return token.type;
          }
          function highlight(text) {
            return text.replace(_jsTokens2["default"], function() {
              for (var _len = arguments.length,
                  args = Array(_len),
                  _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
              }
              var type = getTokenType(args);
              var colorize = defs[type];
              if (colorize) {
                return args[0].split(NEWLINE).map(function(str) {
                  return colorize(str);
                }).join("\n");
              } else {
                return args[0];
              }
            });
          }
          exports["default"] = function(lines, lineNumber, colNumber) {
            var opts = arguments.length <= 3 || arguments[3] === undefined ? {} : arguments[3];
            colNumber = Math.max(colNumber, 0);
            var highlighted = opts.highlightCode && _chalk2["default"].supportsColor;
            if (highlighted)
              lines = highlight(lines);
            lines = lines.split(NEWLINE);
            var start = Math.max(lineNumber - 3, 0);
            var end = Math.min(lines.length, lineNumber + 3);
            if (!lineNumber && !colNumber) {
              start = 0;
              end = lines.length;
            }
            var frame = lineNumbers(lines.slice(start, end), {
              start: start + 1,
              before: "  ",
              after: " | ",
              transform: function transform(params) {
                if (params.number !== lineNumber) {
                  return;
                }
                if (colNumber) {
                  params.line += "\n" + params.before + _repeating2["default"](" ", params.width) + params.after + _repeating2["default"](" ", colNumber - 1) + "^";
                }
                params.before = params.before.replace(/^./, ">");
              }
            }).join("\n");
            if (highlighted) {
              return _chalk2["default"].reset(frame);
            } else {
              return frame;
            }
          };
          module.exports = exports["default"];
        }, {
          "222": 222,
          "429": 429,
          "435": 435,
          "586": 586
        }],
        39: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {"default": obj};
          }
          var _lodashObjectMerge = _dereq_(548);
          var _lodashObjectMerge2 = _interopRequireDefault(_lodashObjectMerge);
          exports["default"] = function(dest, src) {
            if (!dest || !src)
              return;
            return _lodashObjectMerge2["default"](dest, src, function(a, b) {
              if (b && Array.isArray(a)) {
                var c = a.slice(0);
                for (var _iterator = b,
                    _isArray = Array.isArray(_iterator),
                    _i = 0,
                    _iterator = _isArray ? _iterator : _iterator[Symbol.iterator](); ; ) {
                  var _ref;
                  if (_isArray) {
                    if (_i >= _iterator.length)
                      break;
                    _ref = _iterator[_i++];
                  } else {
                    _i = _iterator.next();
                    if (_i.done)
                      break;
                    _ref = _i.value;
                  }
                  var v = _ref;
                  if (a.indexOf(v) < 0) {
                    c.push(v);
                  }
                }
                return c;
              }
            });
          };
          module.exports = exports["default"];
        }, {"548": 548}],
        40: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          exports["default"] = function(ast, comments, tokens) {
            if (ast && ast.type === "Program") {
              return t.file(ast, comments || [], tokens || []);
            } else {
              throw new Error("Not a valid ast?");
            }
          };
          module.exports = exports["default"];
        }, {"179": 179}],
        41: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          exports["default"] = function() {
            return Object.create(null);
          };
          module.exports = exports["default"];
        }, {}],
        42: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          var _babylon = _dereq_(612);
          var babylon = _interopRequireWildcard(_babylon);
          exports["default"] = function(code) {
            var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
            var parseOpts = {
              allowImportExportEverywhere: opts.looseModules,
              allowReturnOutsideFunction: opts.looseModules,
              allowHashBang: true,
              ecmaVersion: 6,
              strictMode: opts.strictMode,
              sourceType: opts.sourceType,
              locations: true,
              features: opts.features || {},
              plugins: opts.plugins || {}
            };
            if (opts.nonStandard) {
              parseOpts.plugins.jsx = true;
              parseOpts.plugins.flow = true;
            }
            return babylon.parse(code, parseOpts);
          };
          module.exports = exports["default"];
        }, {"612": 612}],
        43: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          exports.get = get;
          exports.parseArgs = parseArgs;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          var _util = _dereq_(13);
          var util = _interopRequireWildcard(_util);
          var MESSAGES = {
            tailCallReassignmentDeopt: "Function reference has been reassigned, so it will probably be dereferenced, therefore we can't optimise this with confidence",
            JSXNamespacedTags: "Namespace tags are not supported. ReactJSX is not XML.",
            classesIllegalBareSuper: "Illegal use of bare super",
            classesIllegalSuperCall: "Direct super call is illegal in non-constructor, use super.$1() instead",
            scopeDuplicateDeclaration: "Duplicate declaration $1",
            settersNoRest: "Setters aren't allowed to have a rest",
            noAssignmentsInForHead: "No assignments allowed in for-in/of head",
            expectedMemberExpressionOrIdentifier: "Expected type MemberExpression or Identifier",
            invalidParentForThisNode: "We don't know how to handle this node within the current parent - please open an issue",
            readOnly: "$1 is read-only",
            unknownForHead: "Unknown node type $1 in ForStatement",
            didYouMean: "Did you mean $1?",
            codeGeneratorDeopt: "Note: The code generator has deoptimised the styling of $1 as it exceeds the max of $2.",
            missingTemplatesDirectory: "no templates directory - this is most likely the result of a broken `npm publish`. Please report to https://github.com/babel/babel/issues",
            unsupportedOutputType: "Unsupported output type $1",
            illegalMethodName: "Illegal method name $1",
            lostTrackNodePath: "We lost track of this node's position, likely because the AST was directly manipulated",
            modulesIllegalExportName: "Illegal export $1",
            modulesDuplicateDeclarations: "Duplicate module declarations with the same source but in different scopes",
            undeclaredVariable: "Reference to undeclared variable $1",
            undeclaredVariableType: "Referencing a type alias outside of a type annotation",
            undeclaredVariableSuggestion: "Reference to undeclared variable $1 - did you mean $2?",
            traverseNeedsParent: "You must pass a scope and parentPath unless traversing a Program/File got a $1 node",
            traverseVerifyRootFunction: "You passed `traverse()` a function when it expected a visitor object, are you sure you didn't mean `{ enter: Function }`?",
            traverseVerifyVisitorProperty: "You passed `traverse()` a visitor object with the property $1 that has the invalid property $2",
            traverseVerifyNodeType: "You gave us a visitor for the node type $1 but it's not a valid type",
            pluginIllegalKind: "Illegal kind $1 for plugin $2",
            pluginIllegalPosition: "Illegal position $1 for plugin $2",
            pluginKeyCollision: "The plugin $1 collides with another of the same name",
            pluginNotTransformer: "The plugin $1 didn't export a Plugin instance",
            pluginUnknown: "Unknown plugin $1",
            pluginNotFile: "Plugin $1 is resolving to a different Babel version than what is performing the transformation.",
            pluginInvalidProperty: "Plugin $1 provided an invalid property of $2.",
            pluginInvalidPropertyVisitor: "Define your visitor methods inside a `visitor` property like so:\n\n  new Plugin(\"foobar\", {\n    visitor: {\n      // define your visitor methods here!\n    }\n  });\n"
          };
          exports.MESSAGES = MESSAGES;
          function get(key) {
            for (var _len = arguments.length,
                args = Array(_len > 1 ? _len - 1 : 0),
                _key = 1; _key < _len; _key++) {
              args[_key - 1] = arguments[_key];
            }
            var msg = MESSAGES[key];
            if (!msg)
              throw new ReferenceError("Unknown message " + JSON.stringify(key));
            args = parseArgs(args);
            return msg.replace(/\$(\d+)/g, function(str, i) {
              return args[--i];
            });
          }
          function parseArgs(args) {
            return args.map(function(val) {
              if (val != null && val.inspect) {
                return val.inspect();
              } else {
                try {
                  return JSON.stringify(val) || val + "";
                } catch (e) {
                  return util.inspect(val);
                }
              }
            });
          }
        }, {"13": 13}],
        44: [function(_dereq_, module, exports) {
          (function(global) {
            "use strict";
            _dereq_(415);
            _dereq_(580);
            if (global._babelPolyfill) {
              throw new Error("only one instance of babel/polyfill is allowed");
            }
            global._babelPolyfill = true;
          }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
        }, {
          "415": 415,
          "580": 580
        }],
        45: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {"default": obj};
          }
          var _generation = _dereq_(30);
          var _generation2 = _interopRequireDefault(_generation);
          var _messages = _dereq_(43);
          var messages = _interopRequireWildcard(_messages);
          var _util = _dereq_(182);
          var util = _interopRequireWildcard(_util);
          var _transformationFile = _dereq_(46);
          var _transformationFile2 = _interopRequireDefault(_transformationFile);
          var _lodashCollectionEach = _dereq_(444);
          var _lodashCollectionEach2 = _interopRequireDefault(_lodashCollectionEach);
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          function buildGlobal(namespace, builder) {
            var body = [];
            var container = t.functionExpression(null, [t.identifier("global")], t.blockStatement(body));
            var tree = t.program([t.expressionStatement(t.callExpression(container, [util.template("helper-self-global")]))]);
            body.push(t.variableDeclaration("var", [t.variableDeclarator(namespace, t.assignmentExpression("=", t.memberExpression(t.identifier("global"), namespace), t.objectExpression([])))]));
            builder(body);
            return tree;
          }
          function buildUmd(namespace, builder) {
            var body = [];
            body.push(t.variableDeclaration("var", [t.variableDeclarator(namespace, t.identifier("global"))]));
            builder(body);
            var container = util.template("umd-commonjs-strict", {
              FACTORY_PARAMETERS: t.identifier("global"),
              BROWSER_ARGUMENTS: t.assignmentExpression("=", t.memberExpression(t.identifier("root"), namespace), t.objectExpression({})),
              COMMON_ARGUMENTS: t.identifier("exports"),
              AMD_ARGUMENTS: t.arrayExpression([t.literal("exports")]),
              FACTORY_BODY: body,
              UMD_ROOT: t.identifier("this")
            });
            return t.program([container]);
          }
          function buildVar(namespace, builder) {
            var body = [];
            body.push(t.variableDeclaration("var", [t.variableDeclarator(namespace, t.objectExpression({}))]));
            builder(body);
            return t.program(body);
          }
          function buildHelpers(body, namespace, whitelist) {
            _lodashCollectionEach2["default"](_transformationFile2["default"].helpers, function(name) {
              if (whitelist && whitelist.indexOf(name) === -1)
                return;
              var key = t.identifier(t.toIdentifier(name));
              body.push(t.expressionStatement(t.assignmentExpression("=", t.memberExpression(namespace, key), util.template("helper-" + name))));
            });
          }
          exports["default"] = function(whitelist) {
            var outputType = arguments.length <= 1 || arguments[1] === undefined ? "global" : arguments[1];
            var namespace = t.identifier("babelHelpers");
            var builder = function builder(body) {
              return buildHelpers(body, namespace, whitelist);
            };
            var tree;
            var build = ({
              global: buildGlobal,
              umd: buildUmd,
              "var": buildVar
            })[outputType];
            if (build) {
              tree = build(namespace, builder);
            } else {
              throw new Error(messages.get("unsupportedOutputType", outputType));
            }
            return _generation2["default"](tree).code;
          };
          module.exports = exports["default"];
        }, {
          "179": 179,
          "182": 182,
          "30": 30,
          "43": 43,
          "444": 444,
          "46": 46
        }],
        46: [function(_dereq_, module, exports) {
          (function(process) {
            "use strict";
            exports.__esModule = true;
            var _createClass = (function() {
              function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                  var descriptor = props[i];
                  descriptor.enumerable = descriptor.enumerable || false;
                  descriptor.configurable = true;
                  if ("value" in descriptor)
                    descriptor.writable = true;
                  Object.defineProperty(target, descriptor.key, descriptor);
                }
              }
              return function(Constructor, protoProps, staticProps) {
                if (protoProps)
                  defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                  defineProperties(Constructor, staticProps);
                return Constructor;
              };
            })();
            function _interopRequireWildcard(obj) {
              if (obj && obj.__esModule) {
                return obj;
              } else {
                var newObj = {};
                if (obj != null) {
                  for (var key in obj) {
                    if (Object.prototype.hasOwnProperty.call(obj, key))
                      newObj[key] = obj[key];
                  }
                }
                newObj["default"] = obj;
                return newObj;
              }
            }
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : {"default": obj};
            }
            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            var _convertSourceMap = _dereq_(228);
            var _convertSourceMap2 = _interopRequireDefault(_convertSourceMap);
            var _modules = _dereq_(74);
            var _modules2 = _interopRequireDefault(_modules);
            var _optionsOptionManager = _dereq_(50);
            var _optionsOptionManager2 = _interopRequireDefault(_optionsOptionManager);
            var _pluginManager = _dereq_(52);
            var _pluginManager2 = _interopRequireDefault(_pluginManager);
            var _shebangRegex = _dereq_(587);
            var _shebangRegex2 = _interopRequireDefault(_shebangRegex);
            var _traversalPath = _dereq_(155);
            var _traversalPath2 = _interopRequireDefault(_traversalPath);
            var _lodashLangIsFunction = _dereq_(533);
            var _lodashLangIsFunction2 = _interopRequireDefault(_lodashLangIsFunction);
            var _sourceMap = _dereq_(601);
            var _sourceMap2 = _interopRequireDefault(_sourceMap);
            var _generation = _dereq_(30);
            var _generation2 = _interopRequireDefault(_generation);
            var _helpersCodeFrame = _dereq_(38);
            var _helpersCodeFrame2 = _interopRequireDefault(_helpersCodeFrame);
            var _lodashObjectDefaults = _dereq_(543);
            var _lodashObjectDefaults2 = _interopRequireDefault(_lodashObjectDefaults);
            var _lodashCollectionIncludes = _dereq_(446);
            var _lodashCollectionIncludes2 = _interopRequireDefault(_lodashCollectionIncludes);
            var _traversal = _dereq_(148);
            var _traversal2 = _interopRequireDefault(_traversal);
            var _tryResolve = _dereq_(609);
            var _tryResolve2 = _interopRequireDefault(_tryResolve);
            var _logger = _dereq_(47);
            var _logger2 = _interopRequireDefault(_logger);
            var _plugin = _dereq_(82);
            var _plugin2 = _interopRequireDefault(_plugin);
            var _helpersParse = _dereq_(42);
            var _helpersParse2 = _interopRequireDefault(_helpersParse);
            var _traversalHub = _dereq_(147);
            var _traversalHub2 = _interopRequireDefault(_traversalHub);
            var _util = _dereq_(182);
            var util = _interopRequireWildcard(_util);
            var _path = _dereq_(9);
            var _path2 = _interopRequireDefault(_path);
            var _types = _dereq_(179);
            var t = _interopRequireWildcard(_types);
            var File = (function() {
              function File(opts, pipeline) {
                if (opts === undefined)
                  opts = {};
                _classCallCheck(this, File);
                this.transformerDependencies = {};
                this.dynamicImportTypes = {};
                this.dynamicImportIds = {};
                this.dynamicImports = [];
                this.declarations = {};
                this.usedHelpers = {};
                this.dynamicData = {};
                this.data = {};
                this.ast = {};
                this.metadata = {modules: {
                    imports: [],
                    exports: {
                      exported: [],
                      specifiers: []
                    }
                  }};
                this.hub = new _traversalHub2["default"](this);
                this.pipeline = pipeline;
                this.log = new _logger2["default"](this, opts.filename || "unknown");
                this.opts = this.initOptions(opts);
                this.buildTransformers();
              }
              File.prototype.initOptions = function initOptions(opts) {
                opts = new _optionsOptionManager2["default"](this.log, this.pipeline).init(opts);
                if (opts.inputSourceMap) {
                  opts.sourceMaps = true;
                }
                if (opts.moduleId) {
                  opts.moduleIds = true;
                }
                opts.basename = _path2["default"].basename(opts.filename, _path2["default"].extname(opts.filename));
                opts.ignore = util.arrayify(opts.ignore, util.regexify);
                if (opts.only)
                  opts.only = util.arrayify(opts.only, util.regexify);
                _lodashObjectDefaults2["default"](opts, {moduleRoot: opts.sourceRoot});
                _lodashObjectDefaults2["default"](opts, {sourceRoot: opts.moduleRoot});
                _lodashObjectDefaults2["default"](opts, {filenameRelative: opts.filename});
                _lodashObjectDefaults2["default"](opts, {
                  sourceFileName: opts.filenameRelative,
                  sourceMapTarget: opts.filenameRelative
                });
                if (opts.externalHelpers) {
                  this.set("helpersNamespace", t.identifier("babelHelpers"));
                }
                return opts;
              };
              File.prototype.isLoose = function isLoose(key) {
                return _lodashCollectionIncludes2["default"](this.opts.loose, key);
              };
              File.prototype.buildTransformers = function buildTransformers() {
                var file = this;
                var transformers = this.transformers = {};
                var secondaryStack = [];
                var stack = [];
                for (var key in this.pipeline.transformers) {
                  var transformer = this.pipeline.transformers[key];
                  var pass = transformers[key] = transformer.buildPass(file);
                  if (pass.canTransform()) {
                    stack.push(pass);
                    if (transformer.metadata.secondPass) {
                      secondaryStack.push(pass);
                    }
                    if (transformer.manipulateOptions) {
                      transformer.manipulateOptions(file.opts, file);
                    }
                  }
                }
                var beforePlugins = [];
                var afterPlugins = [];
                var pluginManager = new _pluginManager2["default"]({
                  file: this,
                  transformers: this.transformers,
                  before: beforePlugins,
                  after: afterPlugins
                });
                for (var i = 0; i < file.opts.plugins.length; i++) {
                  pluginManager.add(file.opts.plugins[i]);
                }
                stack = beforePlugins.concat(stack, afterPlugins);
                this.uncollapsedTransformerStack = stack = stack.concat(secondaryStack);
                var _arr = stack;
                for (var _i = 0; _i < _arr.length; _i++) {
                  var pass = _arr[_i];
                  var _arr2 = pass.plugin.dependencies;
                  for (var _i2 = 0; _i2 < _arr2.length; _i2++) {
                    var dep = _arr2[_i2];
                    this.transformerDependencies[dep] = pass.key;
                  }
                }
                this.transformerStack = this.collapseStack(stack);
              };
              File.prototype.collapseStack = function collapseStack(_stack) {
                var stack = [];
                var ignore = [];
                var _arr3 = _stack;
                for (var _i3 = 0; _i3 < _arr3.length; _i3++) {
                  var pass = _arr3[_i3];
                  if (ignore.indexOf(pass) >= 0)
                    continue;
                  var group = pass.plugin.metadata.group;
                  if (!pass.canTransform() || !group) {
                    stack.push(pass);
                    continue;
                  }
                  var mergeStack = [];
                  var _arr4 = _stack;
                  for (var _i4 = 0; _i4 < _arr4.length; _i4++) {
                    var _pass = _arr4[_i4];
                    if (_pass.plugin.metadata.group === group) {
                      mergeStack.push(_pass);
                      ignore.push(_pass);
                    }
                  }
                  var visitors = [];
                  var _arr5 = mergeStack;
                  for (var _i5 = 0; _i5 < _arr5.length; _i5++) {
                    var _pass2 = _arr5[_i5];
                    visitors.push(_pass2.plugin.visitor);
                  }
                  var visitor = _traversal2["default"].visitors.merge(visitors);
                  var mergePlugin = new _plugin2["default"](group, {visitor: visitor});
                  stack.push(mergePlugin.buildPass(this));
                }
                return stack;
              };
              File.prototype.set = function set(key, val) {
                return this.data[key] = val;
              };
              File.prototype.setDynamic = function setDynamic(key, fn) {
                this.dynamicData[key] = fn;
              };
              File.prototype.get = function get(key) {
                var data = this.data[key];
                if (data) {
                  return data;
                } else {
                  var dynamic = this.dynamicData[key];
                  if (dynamic) {
                    return this.set(key, dynamic());
                  }
                }
              };
              File.prototype.resolveModuleSource = function resolveModuleSource(source) {
                var resolveModuleSource = this.opts.resolveModuleSource;
                if (resolveModuleSource)
                  source = resolveModuleSource(source, this.opts.filename);
                return source;
              };
              File.prototype.addImport = function addImport(source, name, type) {
                name = name || source;
                var id = this.dynamicImportIds[name];
                if (!id) {
                  source = this.resolveModuleSource(source);
                  id = this.dynamicImportIds[name] = this.scope.generateUidIdentifier(name);
                  var specifiers = [t.importDefaultSpecifier(id)];
                  var declar = t.importDeclaration(specifiers, t.literal(source));
                  declar._blockHoist = 3;
                  if (type) {
                    var modules = this.dynamicImportTypes[type] = this.dynamicImportTypes[type] || [];
                    modules.push(declar);
                  }
                  if (this.transformers["es6.modules"].canTransform()) {
                    this.moduleFormatter.importSpecifier(specifiers[0], declar, this.dynamicImports, this.scope);
                    this.moduleFormatter.hasLocalImports = true;
                  } else {
                    this.dynamicImports.push(declar);
                  }
                }
                return id;
              };
              File.prototype.attachAuxiliaryComment = function attachAuxiliaryComment(node) {
                var beforeComment = this.opts.auxiliaryCommentBefore;
                if (beforeComment) {
                  node.leadingComments = node.leadingComments || [];
                  node.leadingComments.push({
                    type: "CommentLine",
                    value: " " + beforeComment
                  });
                }
                var afterComment = this.opts.auxiliaryCommentAfter;
                if (afterComment) {
                  node.trailingComments = node.trailingComments || [];
                  node.trailingComments.push({
                    type: "CommentLine",
                    value: " " + afterComment
                  });
                }
                return node;
              };
              File.prototype.addHelper = function addHelper(name) {
                var isSolo = _lodashCollectionIncludes2["default"](File.soloHelpers, name);
                if (!isSolo && !_lodashCollectionIncludes2["default"](File.helpers, name)) {
                  throw new ReferenceError("Unknown helper " + name);
                }
                var declar = this.declarations[name];
                if (declar)
                  return declar;
                this.usedHelpers[name] = true;
                if (!isSolo) {
                  var generator = this.get("helperGenerator");
                  var runtime = this.get("helpersNamespace");
                  if (generator) {
                    return generator(name);
                  } else if (runtime) {
                    var id = t.identifier(t.toIdentifier(name));
                    return t.memberExpression(runtime, id);
                  }
                }
                var ref = util.template("helper-" + name);
                var uid = this.declarations[name] = this.scope.generateUidIdentifier(name);
                if (t.isFunctionExpression(ref) && !ref.id) {
                  ref.body._compact = true;
                  ref._generated = true;
                  ref.id = uid;
                  ref.type = "FunctionDeclaration";
                  this.attachAuxiliaryComment(ref);
                  this.path.unshiftContainer("body", ref);
                } else {
                  ref._compact = true;
                  this.scope.push({
                    id: uid,
                    init: ref,
                    unique: true
                  });
                }
                return uid;
              };
              File.prototype.addTemplateObject = function addTemplateObject(helperName, strings, raw) {
                var stringIds = raw.elements.map(function(string) {
                  return string.value;
                });
                var name = helperName + "_" + raw.elements.length + "_" + stringIds.join(",");
                var declar = this.declarations[name];
                if (declar)
                  return declar;
                var uid = this.declarations[name] = this.scope.generateUidIdentifier("templateObject");
                var helperId = this.addHelper(helperName);
                var init = t.callExpression(helperId, [strings, raw]);
                init._compact = true;
                this.scope.push({
                  id: uid,
                  init: init,
                  _blockHoist: 1.9
                });
                return uid;
              };
              File.prototype.errorWithNode = function errorWithNode(node, msg) {
                var Error = arguments.length <= 2 || arguments[2] === undefined ? SyntaxError : arguments[2];
                var err;
                var loc = node && (node.loc || node._loc);
                if (loc) {
                  err = new Error("Line " + loc.start.line + ": " + msg);
                  err.loc = loc.start;
                } else {
                  err = new Error("There's been an error on a dynamic node. This is almost certainly an internal error. Please report it.");
                }
                return err;
              };
              File.prototype.mergeSourceMap = function mergeSourceMap(map) {
                var opts = this.opts;
                var inputMap = opts.inputSourceMap;
                if (inputMap) {
                  map.sources[0] = inputMap.file;
                  var inputMapConsumer = new _sourceMap2["default"].SourceMapConsumer(inputMap);
                  var outputMapConsumer = new _sourceMap2["default"].SourceMapConsumer(map);
                  var outputMapGenerator = _sourceMap2["default"].SourceMapGenerator.fromSourceMap(outputMapConsumer);
                  outputMapGenerator.applySourceMap(inputMapConsumer);
                  var mergedMap = outputMapGenerator.toJSON();
                  mergedMap.sources = inputMap.sources;
                  mergedMap.file = inputMap.file;
                  return mergedMap;
                }
                return map;
              };
              File.prototype.getModuleFormatter = function getModuleFormatter(type) {
                if (_lodashLangIsFunction2["default"](type) || !_modules2["default"][type]) {
                  this.log.deprecate("Custom module formatters are deprecated and will be removed in the next major. Please use Babel plugins instead.");
                }
                var ModuleFormatter = _lodashLangIsFunction2["default"](type) ? type : _modules2["default"][type];
                if (!ModuleFormatter) {
                  var loc = _tryResolve2["default"].relative(type);
                  if (loc)
                    ModuleFormatter = _dereq_(loc);
                }
                if (!ModuleFormatter) {
                  throw new ReferenceError("Unknown module formatter type " + JSON.stringify(type));
                }
                return new ModuleFormatter(this);
              };
              File.prototype.parse = function parse(code) {
                var opts = this.opts;
                var parseOpts = {
                  highlightCode: opts.highlightCode,
                  nonStandard: opts.nonStandard,
                  sourceType: opts.sourceType,
                  filename: opts.filename,
                  plugins: {}
                };
                var features = parseOpts.features = {};
                for (var key in this.transformers) {
                  var transformer = this.transformers[key];
                  features[key] = transformer.canTransform();
                }
                parseOpts.looseModules = this.isLoose("es6.modules");
                parseOpts.strictMode = features.strict;
                this.log.debug("Parse start");
                var ast = _helpersParse2["default"](code, parseOpts);
                this.log.debug("Parse stop");
                return ast;
              };
              File.prototype._addAst = function _addAst(ast) {
                this.path = _traversalPath2["default"].get({
                  hub: this.hub,
                  parentPath: null,
                  parent: ast,
                  container: ast,
                  key: "program"
                }).setContext();
                this.scope = this.path.scope;
                this.ast = ast;
              };
              File.prototype.addAst = function addAst(ast) {
                this.log.debug("Start set AST");
                this._addAst(ast);
                this.log.debug("End set AST");
                this.log.debug("Start module formatter init");
                var modFormatter = this.moduleFormatter = this.getModuleFormatter(this.opts.modules);
                if (modFormatter.init && this.transformers["es6.modules"].canTransform()) {
                  modFormatter.init();
                }
                this.log.debug("End module formatter init");
              };
              File.prototype.transform = function transform() {
                this.call("pre");
                var _arr6 = this.transformerStack;
                for (var _i6 = 0; _i6 < _arr6.length; _i6++) {
                  var pass = _arr6[_i6];
                  pass.transform();
                }
                this.call("post");
                return this.generate();
              };
              File.prototype.wrap = function wrap(code, callback) {
                code = code + "";
                try {
                  if (this.shouldIgnore()) {
                    return this.makeResult({
                      code: code,
                      ignored: true
                    });
                  } else {
                    return callback();
                  }
                } catch (err) {
                  if (err._babel) {
                    throw err;
                  } else {
                    err._babel = true;
                  }
                  var message = err.message = this.opts.filename + ": " + err.message;
                  var loc = err.loc;
                  if (loc) {
                    err.codeFrame = _helpersCodeFrame2["default"](code, loc.line, loc.column + 1, this.opts);
                    message += "\n" + err.codeFrame;
                  }
                  if (process.browser) {
                    err.message = message;
                  }
                  if (err.stack) {
                    var newStack = err.stack.replace(err.message, message);
                    try {
                      err.stack = newStack;
                    } catch (e) {}
                  }
                  throw err;
                }
              };
              File.prototype.addCode = function addCode(code) {
                code = (code || "") + "";
                code = this.parseInputSourceMap(code);
                this.code = code;
              };
              File.prototype.parseCode = function parseCode() {
                this.parseShebang();
                var ast = this.parse(this.code);
                this.addAst(ast);
              };
              File.prototype.shouldIgnore = function shouldIgnore() {
                var opts = this.opts;
                return util.shouldIgnore(opts.filename, opts.ignore, opts.only);
              };
              File.prototype.call = function call(key) {
                var _arr7 = this.uncollapsedTransformerStack;
                for (var _i7 = 0; _i7 < _arr7.length; _i7++) {
                  var pass = _arr7[_i7];
                  var fn = pass.plugin[key];
                  if (fn)
                    fn(this);
                }
              };
              File.prototype.parseInputSourceMap = function parseInputSourceMap(code) {
                var opts = this.opts;
                if (opts.inputSourceMap !== false) {
                  var inputMap = _convertSourceMap2["default"].fromSource(code);
                  if (inputMap) {
                    opts.inputSourceMap = inputMap.toObject();
                    code = _convertSourceMap2["default"].removeComments(code);
                  }
                }
                return code;
              };
              File.prototype.parseShebang = function parseShebang() {
                var shebangMatch = _shebangRegex2["default"].exec(this.code);
                if (shebangMatch) {
                  this.shebang = shebangMatch[0];
                  this.code = this.code.replace(_shebangRegex2["default"], "");
                }
              };
              File.prototype.makeResult = function makeResult(_ref) {
                var code = _ref.code;
                var _ref$map = _ref.map;
                var map = _ref$map === undefined ? null : _ref$map;
                var ast = _ref.ast;
                var ignored = _ref.ignored;
                var result = {
                  metadata: null,
                  ignored: !!ignored,
                  code: null,
                  ast: null,
                  map: map
                };
                if (this.opts.code) {
                  result.code = code;
                }
                if (this.opts.ast) {
                  result.ast = ast;
                }
                if (this.opts.metadata) {
                  result.metadata = this.metadata;
                  result.metadata.usedHelpers = Object.keys(this.usedHelpers);
                }
                return result;
              };
              File.prototype.generate = function generate() {
                var opts = this.opts;
                var ast = this.ast;
                var result = {ast: ast};
                if (!opts.code)
                  return this.makeResult(result);
                this.log.debug("Generation start");
                var _result = _generation2["default"](ast, opts, this.code);
                result.code = _result.code;
                result.map = _result.map;
                this.log.debug("Generation end");
                if (this.shebang) {
                  result.code = this.shebang + "\n" + result.code;
                }
                if (result.map) {
                  result.map = this.mergeSourceMap(result.map);
                }
                if (opts.sourceMaps === "inline" || opts.sourceMaps === "both") {
                  result.code += "\n" + _convertSourceMap2["default"].fromObject(result.map).toComment();
                }
                if (opts.sourceMaps === "inline") {
                  result.map = null;
                }
                return this.makeResult(result);
              };
              _createClass(File, null, [{
                key: "helpers",
                value: ["inherits", "defaults", "create-class", "create-decorated-class", "create-decorated-object", "define-decorated-property-descriptor", "tagged-template-literal", "tagged-template-literal-loose", "to-array", "to-consumable-array", "sliced-to-array", "sliced-to-array-loose", "object-without-properties", "has-own", "slice", "bind", "define-property", "async-to-generator", "interop-export-wildcard", "interop-require-wildcard", "interop-require-default", "typeof", "extends", "get", "set", "new-arrow-check", "class-call-check", "object-destructuring-empty", "temporal-undefined", "temporal-assert-defined", "self-global", "typeof-react-element", "default-props", "instanceof", "interop-require"],
                enumerable: true
              }, {
                key: "soloHelpers",
                value: [],
                enumerable: true
              }]);
              return File;
            })();
            exports["default"] = File;
            module.exports = exports["default"];
          }).call(this, _dereq_(10));
        }, {
          "10": 10,
          "147": 147,
          "148": 148,
          "155": 155,
          "179": 179,
          "182": 182,
          "228": 228,
          "30": 30,
          "38": 38,
          "42": 42,
          "446": 446,
          "47": 47,
          "50": 50,
          "52": 52,
          "533": 533,
          "543": 543,
          "587": 587,
          "601": 601,
          "609": 609,
          "74": 74,
          "82": 82,
          "9": 9
        }],
        47: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {"default": obj};
          }
          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }
          var _debugNode = _dereq_(417);
          var _debugNode2 = _interopRequireDefault(_debugNode);
          var verboseDebug = _debugNode2["default"]("babel:verbose");
          var generalDebug = _debugNode2["default"]("babel");
          var seenDeprecatedMessages = [];
          var Logger = (function() {
            function Logger(file, filename) {
              _classCallCheck(this, Logger);
              this.filename = filename;
              this.file = file;
            }
            Logger.prototype._buildMessage = function _buildMessage(msg) {
              var parts = "[BABEL] " + this.filename;
              if (msg)
                parts += ": " + msg;
              return parts;
            };
            Logger.prototype.warn = function warn(msg) {
              console.warn(this._buildMessage(msg));
            };
            Logger.prototype.error = function error(msg) {
              var Constructor = arguments.length <= 1 || arguments[1] === undefined ? Error : arguments[1];
              throw new Constructor(this._buildMessage(msg));
            };
            Logger.prototype.deprecate = function deprecate(msg) {
              if (this.file.opts && this.file.opts.suppressDeprecationMessages)
                return;
              msg = this._buildMessage(msg);
              if (seenDeprecatedMessages.indexOf(msg) >= 0)
                return;
              seenDeprecatedMessages.push(msg);
              console.error(msg);
            };
            Logger.prototype.verbose = function verbose(msg) {
              if (verboseDebug.enabled)
                verboseDebug(this._buildMessage(msg));
            };
            Logger.prototype.debug = function debug(msg) {
              if (generalDebug.enabled)
                generalDebug(this._buildMessage(msg));
            };
            Logger.prototype.deopt = function deopt(node, msg) {
              this.debug(msg);
            };
            return Logger;
          })();
          exports["default"] = Logger;
          module.exports = exports["default"];
        }, {"417": 417}],
        48: [function(_dereq_, module, exports) {
          module.exports = {
            "filename": {
              "type": "filename",
              "description": "filename to use when reading from stdin - this will be used in source-maps, errors etc",
              "default": "unknown",
              "shorthand": "f"
            },
            "filenameRelative": {
              "hidden": true,
              "type": "string"
            },
            "inputSourceMap": {"hidden": true},
            "extra": {
              "hidden": true,
              "default": {}
            },
            "env": {
              "hidden": true,
              "default": {}
            },
            "moduleId": {
              "description": "specify a custom name for module ids",
              "type": "string"
            },
            "getModuleId": {"hidden": true},
            "retainLines": {
              "type": "boolean",
              "default": false,
              "description": "retain line numbers - will result in really ugly code"
            },
            "nonStandard": {
              "type": "boolean",
              "default": true,
              "description": "enable/disable support for JSX and Flow (on by default)"
            },
            "experimental": {
              "type": "boolean",
              "description": "allow use of experimental transformers",
              "default": false
            },
            "highlightCode": {
              "description": "enable/disable ANSI syntax highlighting of code frames (on by default)",
              "type": "boolean",
              "default": true
            },
            "suppressDeprecationMessages": {
              "type": "boolean",
              "default": false,
              "hidden": true
            },
            "resolveModuleSource": {"hidden": true},
            "stage": {
              "description": "ECMAScript proposal stage version to allow [0-4]",
              "shorthand": "e",
              "type": "number",
              "default": 2
            },
            "blacklist": {
              "type": "transformerList",
              "description": "blacklist of transformers to NOT use",
              "shorthand": "b",
              "default": []
            },
            "whitelist": {
              "type": "transformerList",
              "optional": true,
              "description": "whitelist of transformers to ONLY use",
              "shorthand": "l"
            },
            "optional": {
              "type": "transformerList",
              "description": "list of optional transformers to enable",
              "default": []
            },
            "modules": {
              "type": "string",
              "description": "module formatter type to use [common]",
              "default": "common",
              "shorthand": "m"
            },
            "moduleIds": {
              "type": "boolean",
              "default": false,
              "shorthand": "M",
              "description": "insert an explicit id for modules"
            },
            "loose": {
              "type": "transformerList",
              "description": "list of transformers to enable loose mode ON",
              "shorthand": "L"
            },
            "jsxPragma": {
              "type": "string",
              "description": "custom pragma to use with JSX (same functionality as @jsx comments)",
              "default": "React.createElement",
              "shorthand": "P"
            },
            "plugins": {
              "type": "list",
              "description": "",
              "default": []
            },
            "ignore": {
              "type": "list",
              "description": "list of glob paths to **not** compile",
              "default": []
            },
            "only": {
              "type": "list",
              "description": "list of glob paths to **only** compile"
            },
            "code": {
              "hidden": true,
              "default": true,
              "type": "boolean"
            },
            "metadata": {
              "hidden": true,
              "default": true,
              "type": "boolean"
            },
            "ast": {
              "hidden": true,
              "default": true,
              "type": "boolean"
            },
            "comments": {
              "type": "boolean",
              "default": true,
              "description": "strip/output comments in generated output (on by default)"
            },
            "shouldPrintComment": {
              "hidden": true,
              "description": "optional callback to control whether a comment should be inserted, when this is used the comments option is ignored"
            },
            "compact": {
              "type": "booleanString",
              "default": "auto",
              "description": "do not include superfluous whitespace characters and line terminators [true|false|auto]"
            },
            "keepModuleIdExtensions": {
              "type": "boolean",
              "description": "keep extensions when generating module ids",
              "default": false,
              "shorthand": "k"
            },
            "auxiliaryComment": {
              "deprecated": "renamed to auxiliaryCommentBefore",
              "shorthand": "a",
              "alias": "auxiliaryCommentBefore"
            },
            "auxiliaryCommentBefore": {
              "type": "string",
              "default": "",
              "description": "attach a comment before all helper declarations and auxiliary code"
            },
            "auxiliaryCommentAfter": {
              "type": "string",
              "default": "",
              "description": "attach a comment after all helper declarations and auxiliary code"
            },
            "externalHelpers": {
              "type": "boolean",
              "default": false,
              "shorthand": "r",
              "description": "uses a reference to `babelHelpers` instead of placing helpers at the top of your code."
            },
            "metadataUsedHelpers": {
              "deprecated": "Not required anymore as this is enabled by default",
              "type": "boolean",
              "default": false,
              "hidden": true
            },
            "sourceMap": {
              "alias": "sourceMaps",
              "hidden": true
            },
            "sourceMaps": {
              "type": "booleanString",
              "description": "[true|false|inline]",
              "default": false,
              "shorthand": "s"
            },
            "sourceMapName": {
              "alias": "sourceMapTarget",
              "description": "DEPRECATED - Please use sourceMapTarget"
            },
            "sourceMapTarget": {
              "type": "string",
              "description": "set `file` on returned source map"
            },
            "sourceFileName": {
              "type": "string",
              "description": "set `sources[0]` on returned source map"
            },
            "sourceRoot": {
              "type": "filename",
              "description": "the root from which all sources are relative"
            },
            "moduleRoot": {
              "type": "filename",
              "description": "optional prefix for the AMD module formatter that will be prepend to the filename on module definitions"
            },
            "breakConfig": {
              "type": "boolean",
              "default": false,
              "hidden": true,
              "description": "stop trying to load .babelrc files"
            },
            "babelrc": {
              "description": "Specify a custom list of babelrc files to use",
              "type": "list"
            },
            "sourceType": {
              "description": "",
              "default": "module"
            }
          };
        }, {}],
        49: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          exports.validateOption = validateOption;
          exports.normaliseOptions = normaliseOptions;
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {"default": obj};
          }
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          var _parsers = _dereq_(51);
          var parsers = _interopRequireWildcard(_parsers);
          var _config = _dereq_(48);
          var _config2 = _interopRequireDefault(_config);
          exports.config = _config2["default"];
          function validateOption(key, val, pipeline) {
            var opt = _config2["default"][key];
            var parser = opt && parsers[opt.type];
            if (parser && parser.validate) {
              return parser.validate(key, val, pipeline);
            } else {
              return val;
            }
          }
          function normaliseOptions() {
            var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
            for (var key in options) {
              var val = options[key];
              if (val == null)
                continue;
              var opt = _config2["default"][key];
              if (!opt)
                continue;
              var parser = parsers[opt.type];
              if (parser)
                val = parser(val);
              options[key] = val;
            }
            return options;
          }
        }, {
          "48": 48,
          "51": 51
        }],
        50: [function(_dereq_, module, exports) {
          (function(process) {
            "use strict";
            exports.__esModule = true;
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : {"default": obj};
            }
            function _classCallCheck(instance, Constructor) {
              if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
              }
            }
            var _index = _dereq_(49);
            var _json5 = _dereq_(436);
            var _json52 = _interopRequireDefault(_json5);
            var _pathIsAbsolute = _dereq_(559);
            var _pathIsAbsolute2 = _interopRequireDefault(_pathIsAbsolute);
            var _pathExists = _dereq_(558);
            var _pathExists2 = _interopRequireDefault(_pathExists);
            var _lodashLangClone = _dereq_(527);
            var _lodashLangClone2 = _interopRequireDefault(_lodashLangClone);
            var _helpersMerge = _dereq_(39);
            var _helpersMerge2 = _interopRequireDefault(_helpersMerge);
            var _config = _dereq_(48);
            var _config2 = _interopRequireDefault(_config);
            var _path = _dereq_(9);
            var _path2 = _interopRequireDefault(_path);
            var _fs = _dereq_(3);
            var _fs2 = _interopRequireDefault(_fs);
            var existsCache = {};
            var jsonCache = {};
            var BABELIGNORE_FILENAME = ".babelignore";
            var BABELRC_FILENAME = ".babelrc";
            var PACKAGE_FILENAME = "package.json";
            function exists(filename) {
              var cached = existsCache[filename];
              if (cached != null) {
                return cached;
              } else {
                return existsCache[filename] = _pathExists2["default"].sync(filename);
              }
            }
            var OptionManager = (function() {
              function OptionManager(log, pipeline) {
                _classCallCheck(this, OptionManager);
                this.resolvedConfigs = [];
                this.options = OptionManager.createBareOptions();
                this.pipeline = pipeline;
                this.log = log;
              }
              OptionManager.createBareOptions = function createBareOptions() {
                var opts = {};
                for (var key in _config2["default"]) {
                  var opt = _config2["default"][key];
                  opts[key] = _lodashLangClone2["default"](opt["default"]);
                }
                return opts;
              };
              OptionManager.prototype.addConfig = function addConfig(loc, key) {
                var json = arguments.length <= 2 || arguments[2] === undefined ? _json52["default"] : arguments[2];
                if (this.resolvedConfigs.indexOf(loc) >= 0)
                  return;
                var content = _fs2["default"].readFileSync(loc, "utf8");
                var opts;
                try {
                  opts = jsonCache[content] = jsonCache[content] || json.parse(content);
                  if (key)
                    opts = opts[key];
                } catch (err) {
                  err.message = loc + ": Error while parsing JSON - " + err.message;
                  throw err;
                }
                this.mergeOptions(opts, loc);
                this.resolvedConfigs.push(loc);
              };
              OptionManager.prototype.mergeOptions = function mergeOptions(opts) {
                var alias = arguments.length <= 1 || arguments[1] === undefined ? "foreign" : arguments[1];
                if (!opts)
                  return;
                for (var key in opts) {
                  if (key[0] === "_")
                    continue;
                  var option = _config2["default"][key];
                  if (!option)
                    this.log.error("Unknown option: " + alias + "." + key, ReferenceError);
                }
                _index.normaliseOptions(opts);
                _helpersMerge2["default"](this.options, opts);
              };
              OptionManager.prototype.addIgnoreConfig = function addIgnoreConfig(loc) {
                var file = _fs2["default"].readFileSync(loc, "utf8");
                var lines = file.split("\n");
                lines = lines.map(function(line) {
                  return line.replace(/#(.*?)$/, "").trim();
                }).filter(function(line) {
                  return !!line;
                });
                this.mergeOptions({ignore: lines}, loc);
              };
              OptionManager.prototype.findConfigs = function findConfigs(loc) {
                if (!loc)
                  return;
                if (!_pathIsAbsolute2["default"](loc)) {
                  loc = _path2["default"].join(process.cwd(), loc);
                }
                while (loc !== (loc = _path2["default"].dirname(loc))) {
                  if (this.options.breakConfig)
                    return;
                  var configLoc = _path2["default"].join(loc, BABELRC_FILENAME);
                  if (exists(configLoc))
                    this.addConfig(configLoc);
                  var pkgLoc = _path2["default"].join(loc, PACKAGE_FILENAME);
                  if (exists(pkgLoc))
                    this.addConfig(pkgLoc, "babel", JSON);
                  var ignoreLoc = _path2["default"].join(loc, BABELIGNORE_FILENAME);
                  if (exists(ignoreLoc))
                    this.addIgnoreConfig(ignoreLoc);
                }
              };
              OptionManager.prototype.normaliseOptions = function normaliseOptions() {
                var opts = this.options;
                for (var key in _config2["default"]) {
                  var option = _config2["default"][key];
                  var val = opts[key];
                  if (!val && option.optional)
                    continue;
                  if (this.log && val && option.deprecated) {
                    this.log.deprecate("Deprecated option " + key + ": " + option.deprecated);
                  }
                  if (this.pipeline && val) {
                    val = _index.validateOption(key, val, this.pipeline);
                  }
                  if (option.alias) {
                    opts[option.alias] = opts[option.alias] || val;
                  } else {
                    opts[key] = val;
                  }
                }
              };
              OptionManager.prototype.init = function init(opts) {
                this.mergeOptions(opts, "direct");
                if (opts.babelrc) {
                  var _arr = opts.babelrc;
                  for (var _i = 0; _i < _arr.length; _i++) {
                    var loc = _arr[_i];
                    this.addConfig(loc);
                  }
                }
                if (opts.babelrc !== false) {
                  this.findConfigs(opts.filename);
                }
                var envKey = process.env.BABEL_ENV || process.env.NODE_ENV || "development";
                if (this.options.env) {
                  this.mergeOptions(this.options.env[envKey], "direct.env." + envKey);
                }
                this.normaliseOptions(opts);
                return this.options;
              };
              return OptionManager;
            })();
            exports["default"] = OptionManager;
            module.exports = exports["default"];
          }).call(this, _dereq_(10));
        }, {
          "10": 10,
          "3": 3,
          "39": 39,
          "436": 436,
          "48": 48,
          "49": 49,
          "527": 527,
          "558": 558,
          "559": 559,
          "9": 9
        }],
        51: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          exports.transformerList = transformerList;
          exports.number = number;
          exports.boolean = boolean;
          exports.booleanString = booleanString;
          exports.list = list;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {"default": obj};
          }
          var _slash = _dereq_(590);
          var _slash2 = _interopRequireDefault(_slash);
          var _util = _dereq_(182);
          var util = _interopRequireWildcard(_util);
          function transformerList(val) {
            return util.arrayify(val);
          }
          transformerList.validate = function(key, val, pipeline) {
            if (val.indexOf("all") >= 0 || val.indexOf(true) >= 0) {
              val = Object.keys(pipeline.transformers);
            }
            return pipeline._ensureTransformerNames(key, val);
          };
          function number(val) {
            return +val;
          }
          var filename = _slash2["default"];
          exports.filename = filename;
          function boolean(val) {
            return !!val;
          }
          function booleanString(val) {
            return util.booleanify(val);
          }
          function list(val) {
            return util.list(val);
          }
        }, {
          "182": 182,
          "590": 590
        }],
        52: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          var _createClass = (function() {
            function defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor)
                  descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }
            return function(Constructor, protoProps, staticProps) {
              if (protoProps)
                defineProperties(Constructor.prototype, protoProps);
              if (staticProps)
                defineProperties(Constructor, staticProps);
              return Constructor;
            };
          })();
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {"default": obj};
          }
          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }
          var _transformer = _dereq_(83);
          var _transformer2 = _interopRequireDefault(_transformer);
          var _plugin = _dereq_(82);
          var _plugin2 = _interopRequireDefault(_plugin);
          var _types = _dereq_(179);
          var types = _interopRequireWildcard(_types);
          var _messages = _dereq_(43);
          var messages = _interopRequireWildcard(_messages);
          var _tryResolve = _dereq_(609);
          var _tryResolve2 = _interopRequireDefault(_tryResolve);
          var _traversal = _dereq_(148);
          var _traversal2 = _interopRequireDefault(_traversal);
          var _helpersParse = _dereq_(42);
          var _helpersParse2 = _interopRequireDefault(_helpersParse);
          var context = {
            messages: messages,
            Transformer: _transformer2["default"],
            Plugin: _plugin2["default"],
            types: types,
            parse: _helpersParse2["default"],
            traverse: _traversal2["default"]
          };
          var PluginManager = (function() {
            PluginManager.memoisePluginContainer = function memoisePluginContainer(fn) {
              for (var i = 0; i < PluginManager.memoisedPlugins.length; i++) {
                var plugin = PluginManager.memoisedPlugins[i];
                if (plugin.container === fn)
                  return plugin.transformer;
              }
              var transformer = fn(context);
              PluginManager.memoisedPlugins.push({
                container: fn,
                transformer: transformer
              });
              return transformer;
            };
            _createClass(PluginManager, null, [{
              key: "memoisedPlugins",
              value: [],
              enumerable: true
            }, {
              key: "positions",
              value: ["before", "after"],
              enumerable: true
            }]);
            function PluginManager() {
              var _ref = arguments.length <= 0 || arguments[0] === undefined ? {
                transformers: {},
                before: [],
                after: []
              } : arguments[0];
              var file = _ref.file;
              var transformers = _ref.transformers;
              var before = _ref.before;
              var after = _ref.after;
              _classCallCheck(this, PluginManager);
              this.transformers = transformers;
              this.file = file;
              this.before = before;
              this.after = after;
            }
            PluginManager.prototype.subnormaliseString = function subnormaliseString(name, position) {
              var match = name.match(/^(.*?):(after|before)$/);
              if (match) {
                ;
                name = match[1];
                position = match[2];
              }
              var loc = _tryResolve2["default"].relative("babel-plugin-" + name) || _tryResolve2["default"].relative(name);
              if (loc) {
                var plugin = _dereq_(loc);
                return {
                  position: position,
                  plugin: plugin["default"] || plugin
                };
              } else {
                throw new ReferenceError(messages.get("pluginUnknown", name));
              }
            };
            PluginManager.prototype.validate = function validate(name, plugin) {
              var key = plugin.key;
              if (this.transformers[key]) {
                throw new ReferenceError(messages.get("pluginKeyCollision", key));
              }
              if (!plugin.buildPass || plugin.constructor.name !== "Plugin") {
                throw new TypeError(messages.get("pluginNotTransformer", name));
              }
              plugin.metadata.plugin = true;
            };
            PluginManager.prototype.add = function add(name) {
              var position;
              var plugin;
              if (name) {
                if (typeof name === "object" && name.transformer) {
                  plugin = name.transformer;
                  position = name.position;
                } else if (typeof name !== "string") {
                  plugin = name;
                }
                if (typeof name === "string") {
                  var _subnormaliseString = this.subnormaliseString(name, position);
                  plugin = _subnormaliseString.plugin;
                  position = _subnormaliseString.position;
                }
              } else {
                throw new TypeError(messages.get("pluginIllegalKind", typeof name, name));
              }
              position = position || "before";
              if (PluginManager.positions.indexOf(position) < 0) {
                throw new TypeError(messages.get("pluginIllegalPosition", position, name));
              }
              if (typeof plugin === "function") {
                plugin = PluginManager.memoisePluginContainer(plugin);
              }
              this.validate(name, plugin);
              var pass = this.transformers[plugin.key] = plugin.buildPass(this.file);
              if (pass.canTransform()) {
                var stack = position === "before" ? this.before : this.after;
                stack.push(pass);
              }
            };
            return PluginManager;
          })();
          exports["default"] = PluginManager;
          module.exports = exports["default"];
        }, {
          "148": 148,
          "179": 179,
          "42": 42,
          "43": 43,
          "609": 609,
          "82": 82,
          "83": 83
        }],
        53: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {"default": obj};
          }
          var _explodeAssignableExpression = _dereq_(58);
          var _explodeAssignableExpression2 = _interopRequireDefault(_explodeAssignableExpression);
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          exports["default"] = function(opts) {
            var exports = {};
            var isAssignment = function isAssignment(node) {
              return node.operator === opts.operator + "=";
            };
            var buildAssignment = function buildAssignment(left, right) {
              return t.assignmentExpression("=", left, right);
            };
            exports.ExpressionStatement = function(node, parent, scope, file) {
              if (this.isCompletionRecord())
                return;
              var expr = node.expression;
              if (!isAssignment(expr))
                return;
              var nodes = [];
              var exploded = _explodeAssignableExpression2["default"](expr.left, nodes, file, scope, true);
              nodes.push(t.expressionStatement(buildAssignment(exploded.ref, opts.build(exploded.uid, expr.right))));
              return nodes;
            };
            exports.AssignmentExpression = function(node, parent, scope, file) {
              if (!isAssignment(node))
                return;
              var nodes = [];
              var exploded = _explodeAssignableExpression2["default"](node.left, nodes, file, scope);
              nodes.push(buildAssignment(exploded.ref, opts.build(exploded.uid, node.right)));
              return nodes;
            };
            exports.BinaryExpression = function(node) {
              if (node.operator !== opts.operator)
                return;
              return opts.build(node.left, node.right);
            };
            return exports;
          };
          module.exports = exports["default"];
        }, {
          "179": 179,
          "58": 58
        }],
        54: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          exports["default"] = build;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          function build(node, buildBody) {
            var self = node.blocks.shift();
            if (!self)
              return;
            var child = build(node, buildBody);
            if (!child) {
              child = buildBody();
              if (node.filter) {
                child = t.ifStatement(node.filter, t.blockStatement([child]));
              }
            }
            return t.forOfStatement(t.variableDeclaration("let", [t.variableDeclarator(self.left)]), self.right, t.blockStatement([child]));
          }
          module.exports = exports["default"];
        }, {"179": 179}],
        55: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {"default": obj};
          }
          var _lodashLangIsString = _dereq_(539);
          var _lodashLangIsString2 = _interopRequireDefault(_lodashLangIsString);
          var _messages = _dereq_(43);
          var messages = _interopRequireWildcard(_messages);
          var _esutils = _dereq_(429);
          var _esutils2 = _interopRequireDefault(_esutils);
          var _react = _dereq_(62);
          var react = _interopRequireWildcard(_react);
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          exports["default"] = function(opts) {
            var visitor = {};
            visitor.JSXIdentifier = function(node) {
              if (node.name === "this" && this.isReferenced()) {
                return t.thisExpression();
              } else if (_esutils2["default"].keyword.isIdentifierNameES6(node.name)) {
                node.type = "Identifier";
              } else {
                return t.literal(node.name);
              }
            };
            visitor.JSXNamespacedName = function() {
              throw this.errorWithNode(messages.get("JSXNamespacedTags"));
            };
            visitor.JSXMemberExpression = {exit: function exit(node) {
                node.computed = t.isLiteral(node.property);
                node.type = "MemberExpression";
              }};
            visitor.JSXExpressionContainer = function(node) {
              return node.expression;
            };
            visitor.JSXAttribute = {
              enter: function enter(node) {
                var value = node.value;
                if (t.isLiteral(value) && _lodashLangIsString2["default"](value.value)) {
                  value.value = value.value.replace(/\n\s+/g, " ");
                }
              },
              exit: function exit(node) {
                var value = node.value || t.literal(true);
                return t.inherits(t.property("init", node.name, value), node);
              }
            };
            visitor.JSXOpeningElement = {exit: function exit(node, parent, scope, file) {
                parent.children = react.buildChildren(parent);
                var tagExpr = node.name;
                var args = [];
                var tagName;
                if (t.isIdentifier(tagExpr)) {
                  tagName = tagExpr.name;
                } else if (t.isLiteral(tagExpr)) {
                  tagName = tagExpr.value;
                }
                var state = {
                  tagExpr: tagExpr,
                  tagName: tagName,
                  args: args
                };
                if (opts.pre) {
                  opts.pre(state, file);
                }
                var attribs = node.attributes;
                if (attribs.length) {
                  attribs = buildJSXOpeningElementAttributes(attribs, file);
                } else {
                  attribs = t.literal(null);
                }
                args.push(attribs);
                if (opts.post) {
                  opts.post(state, file);
                }
                return state.call || t.callExpression(state.callee, args);
              }};
            var buildJSXOpeningElementAttributes = function buildJSXOpeningElementAttributes(attribs, file) {
              var _props = [];
              var objs = [];
              var pushProps = function pushProps() {
                if (!_props.length)
                  return;
                objs.push(t.objectExpression(_props));
                _props = [];
              };
              while (attribs.length) {
                var prop = attribs.shift();
                if (t.isJSXSpreadAttribute(prop)) {
                  pushProps();
                  objs.push(prop.argument);
                } else {
                  _props.push(prop);
                }
              }
              pushProps();
              if (objs.length === 1) {
                attribs = objs[0];
              } else {
                if (!t.isObjectExpression(objs[0])) {
                  objs.unshift(t.objectExpression([]));
                }
                attribs = t.callExpression(file.addHelper("extends"), objs);
              }
              return attribs;
            };
            visitor.JSXElement = {exit: function exit(node) {
                var callExpr = node.openingElement;
                callExpr.arguments = callExpr.arguments.concat(node.children);
                if (callExpr.arguments.length >= 3) {
                  callExpr._prettyCall = true;
                }
                return t.inherits(callExpr, node);
              }};
            return visitor;
          };
          module.exports = exports["default"];
        }, {
          "179": 179,
          "429": 429,
          "43": 43,
          "539": 539,
          "62": 62
        }],
        56: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          var visitor = {
            enter: function enter(node, parent, scope, state) {
              if (this.isThisExpression() || this.isReferencedIdentifier({name: "arguments"})) {
                state.found = true;
                this.stop();
              }
            },
            Function: function Function() {
              this.skip();
            }
          };
          exports["default"] = function(node, scope) {
            var container = t.functionExpression(null, [], node.body, node.generator, node.async);
            var callee = container;
            var args = [];
            var state = {found: false};
            scope.traverse(node, visitor, state);
            if (state.found) {
              callee = t.memberExpression(container, t.identifier("apply"));
              args = [t.thisExpression(), t.identifier("arguments")];
            }
            var call = t.callExpression(callee, args);
            if (node.generator)
              call = t.yieldExpression(call, true);
            return t.returnStatement(call);
          };
          module.exports = exports["default"];
        }, {"179": 179}],
        57: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          exports.push = push;
          exports.hasComputed = hasComputed;
          exports.toComputedObjectFromClass = toComputedObjectFromClass;
          exports.toClassObject = toClassObject;
          exports.toDefineObject = toDefineObject;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {"default": obj};
          }
          var _lodashCollectionEach = _dereq_(444);
          var _lodashCollectionEach2 = _interopRequireDefault(_lodashCollectionEach);
          var _lodashObjectHas = _dereq_(545);
          var _lodashObjectHas2 = _interopRequireDefault(_lodashObjectHas);
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          function push(mutatorMap, node, kind, file) {
            var alias = t.toKeyAlias(node);
            var map = {};
            if (_lodashObjectHas2["default"](mutatorMap, alias))
              map = mutatorMap[alias];
            mutatorMap[alias] = map;
            map._inherits = map._inherits || [];
            map._inherits.push(node);
            map._key = node.key;
            if (node.computed) {
              map._computed = true;
            }
            if (node.decorators) {
              var decorators = map.decorators = map.decorators || t.arrayExpression([]);
              decorators.elements = decorators.elements.concat(node.decorators.map(function(dec) {
                return dec.expression;
              }).reverse());
            }
            if (map.value || map.initializer) {
              throw file.errorWithNode(node, "Key conflict with sibling node");
            }
            if (node.value) {
              if (node.kind === "init")
                kind = "value";
              if (node.kind === "get")
                kind = "get";
              if (node.kind === "set")
                kind = "set";
              t.inheritsComments(node.value, node);
              map[kind] = node.value;
            }
            return map;
          }
          function hasComputed(mutatorMap) {
            for (var key in mutatorMap) {
              if (mutatorMap[key]._computed) {
                return true;
              }
            }
            return false;
          }
          function toComputedObjectFromClass(obj) {
            var objExpr = t.arrayExpression([]);
            for (var i = 0; i < obj.properties.length; i++) {
              var prop = obj.properties[i];
              var val = prop.value;
              val.properties.unshift(t.property("init", t.identifier("key"), t.toComputedKey(prop)));
              objExpr.elements.push(val);
            }
            return objExpr;
          }
          function toClassObject(mutatorMap) {
            var objExpr = t.objectExpression([]);
            _lodashCollectionEach2["default"](mutatorMap, function(map) {
              var mapNode = t.objectExpression([]);
              var propNode = t.property("init", map._key, mapNode, map._computed);
              _lodashCollectionEach2["default"](map, function(node, key) {
                if (key[0] === "_")
                  return;
                var inheritNode = node;
                if (t.isMethodDefinition(node) || t.isClassProperty(node))
                  node = node.value;
                var prop = t.property("init", t.identifier(key), node);
                t.inheritsComments(prop, inheritNode);
                t.removeComments(inheritNode);
                mapNode.properties.push(prop);
              });
              objExpr.properties.push(propNode);
            });
            return objExpr;
          }
          function toDefineObject(mutatorMap) {
            _lodashCollectionEach2["default"](mutatorMap, function(map) {
              if (map.value)
                map.writable = t.literal(true);
              map.configurable = t.literal(true);
              map.enumerable = t.literal(true);
            });
            return toClassObject(mutatorMap);
          }
        }, {
          "179": 179,
          "444": 444,
          "545": 545
        }],
        58: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          var getObjRef = function getObjRef(node, nodes, file, scope) {
            var ref;
            if (t.isIdentifier(node)) {
              if (scope.hasBinding(node.name)) {
                return node;
              } else {
                ref = node;
              }
            } else if (t.isMemberExpression(node)) {
              ref = node.object;
              if (t.isIdentifier(ref) && scope.hasGlobal(ref.name)) {
                return ref;
              }
            } else {
              throw new Error("We can't explode this node type " + node.type);
            }
            var temp = scope.generateUidIdentifierBasedOnNode(ref);
            nodes.push(t.variableDeclaration("var", [t.variableDeclarator(temp, ref)]));
            return temp;
          };
          var getPropRef = function getPropRef(node, nodes, file, scope) {
            var prop = node.property;
            var key = t.toComputedKey(node, prop);
            if (t.isLiteral(key))
              return key;
            var temp = scope.generateUidIdentifierBasedOnNode(prop);
            nodes.push(t.variableDeclaration("var", [t.variableDeclarator(temp, prop)]));
            return temp;
          };
          exports["default"] = function(node, nodes, file, scope, allowedSingleIdent) {
            var obj;
            if (t.isIdentifier(node) && allowedSingleIdent) {
              obj = node;
            } else {
              obj = getObjRef(node, nodes, file, scope);
            }
            var ref,
                uid;
            if (t.isIdentifier(node)) {
              ref = node;
              uid = obj;
            } else {
              var prop = getPropRef(node, nodes, file, scope);
              var computed = node.computed || t.isLiteral(prop);
              uid = ref = t.memberExpression(obj, prop, computed);
            }
            return {
              uid: uid,
              ref: ref
            };
          };
          module.exports = exports["default"];
        }, {"179": 179}],
        59: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          exports["default"] = function(node) {
            var lastNonDefault = 0;
            for (var i = 0; i < node.params.length; i++) {
              var param = node.params[i];
              if (!t.isAssignmentPattern(param) && !t.isRestElement(param)) {
                lastNonDefault = i + 1;
              }
            }
            return lastNonDefault;
          };
          module.exports = exports["default"];
        }, {"179": 179}],
        60: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          exports["default"] = function(decorators, scope) {
            for (var i = 0; i < decorators.length; i++) {
              var decorator = decorators[i];
              var expression = decorator.expression;
              if (!t.isMemberExpression(expression))
                continue;
              var temp = scope.maybeGenerateMemoised(expression.object);
              var ref;
              var nodes = [];
              if (temp) {
                ref = temp;
                nodes.push(t.assignmentExpression("=", temp, expression.object));
              } else {
                ref = expression.object;
              }
              nodes.push(t.callExpression(t.memberExpression(t.memberExpression(ref, expression.property, expression.computed), t.identifier("bind")), [ref]));
              if (nodes.length === 1) {
                decorator.expression = nodes[0];
              } else {
                decorator.expression = t.sequenceExpression(nodes);
              }
            }
            return decorators;
          };
          module.exports = exports["default"];
        }, {"179": 179}],
        61: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          exports.custom = custom;
          exports.property = property;
          exports.bare = bare;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {"default": obj};
          }
          var _getFunctionArity = _dereq_(59);
          var _getFunctionArity2 = _interopRequireDefault(_getFunctionArity);
          var _util = _dereq_(182);
          var util = _interopRequireWildcard(_util);
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          function visitIdentifier(context, node, scope, state) {
            if (node.name !== state.name)
              return;
            var localDeclar = scope.getBindingIdentifier(state.name);
            if (localDeclar !== state.outerDeclar)
              return;
            state.selfReference = true;
            context.stop();
          }
          var visitor = {
            ReferencedIdentifier: function ReferencedIdentifier(node, parent, scope, state) {
              visitIdentifier(this, node, scope, state);
            },
            BindingIdentifier: function BindingIdentifier(node, parent, scope, state) {
              visitIdentifier(this, node, scope, state);
            }
          };
          var wrap = function wrap(state, method, id, scope) {
            if (state.selfReference) {
              if (scope.hasBinding(id.name) && !scope.hasGlobal(id.name)) {
                scope.rename(id.name);
              } else {
                var templateName = "property-method-assignment-wrapper";
                if (method.generator)
                  templateName += "-generator";
                var template = util.template(templateName, {
                  FUNCTION: method,
                  FUNCTION_ID: id,
                  FUNCTION_KEY: scope.generateUidIdentifier(id.name)
                });
                template.callee._skipModulesRemap = true;
                var params = template.callee.body.body[0].params;
                for (var i = 0,
                    len = _getFunctionArity2["default"](method); i < len; i++) {
                  params.push(scope.generateUidIdentifier("x"));
                }
                return template;
              }
            }
            method.id = id;
            scope.getProgramParent().references[id.name] = true;
          };
          var visit = function visit(node, name, scope) {
            var state = {
              selfAssignment: false,
              selfReference: false,
              outerDeclar: scope.getBindingIdentifier(name),
              references: [],
              name: name
            };
            var binding = scope.getOwnBinding(name);
            if (binding) {
              if (binding.kind === "param") {
                state.selfReference = true;
              } else {}
            } else if (state.outerDeclar || scope.hasGlobal(name)) {
              scope.traverse(node, visitor, state);
            }
            return state;
          };
          function custom(node, id, scope) {
            var state = visit(node, id.name, scope);
            return wrap(state, node, id, scope);
          }
          function property(node, file, scope) {
            var key = t.toComputedKey(node, node.key);
            if (!t.isLiteral(key))
              return;
            var name = t.toBindingIdentifierName(key.value);
            var id = t.identifier(name);
            var method = node.value;
            var state = visit(method, name, scope);
            node.value = wrap(state, method, id, scope) || method;
          }
          function bare(node, parent, scope) {
            if (node.id)
              return;
            var id;
            if (t.isProperty(parent) && parent.kind === "init" && (!parent.computed || t.isLiteral(parent.key))) {
              id = parent.key;
            } else if (t.isVariableDeclarator(parent)) {
              id = parent.id;
              if (t.isIdentifier(id)) {
                var binding = scope.parent.getBinding(id.name);
                if (binding && binding.constant && scope.getBinding(id.name) === binding) {
                  node.id = id;
                  return;
                }
              }
            } else {
              return;
            }
            var name;
            if (t.isLiteral(id)) {
              name = id.value;
            } else if (t.isIdentifier(id)) {
              name = id.name;
            } else {
              return;
            }
            name = t.toBindingIdentifierName(name);
            id = t.identifier(name);
            var state = visit(node, name, scope);
            return wrap(state, node, id, scope);
          }
        }, {
          "179": 179,
          "182": 182,
          "59": 59
        }],
        62: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          exports.isCompatTag = isCompatTag;
          exports.buildChildren = buildChildren;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          var isReactComponent = t.buildMatchMemberExpression("React.Component");
          exports.isReactComponent = isReactComponent;
          function isCompatTag(tagName) {
            return tagName && /^[a-z]|\-/.test(tagName);
          }
          function cleanJSXElementLiteralChild(child, args) {
            var lines = child.value.split(/\r\n|\n|\r/);
            var lastNonEmptyLine = 0;
            for (var i = 0; i < lines.length; i++) {
              if (lines[i].match(/[^ \t]/)) {
                lastNonEmptyLine = i;
              }
            }
            var str = "";
            for (var i = 0; i < lines.length; i++) {
              var line = lines[i];
              var isFirstLine = i === 0;
              var isLastLine = i === lines.length - 1;
              var isLastNonEmptyLine = i === lastNonEmptyLine;
              var trimmedLine = line.replace(/\t/g, " ");
              if (!isFirstLine) {
                trimmedLine = trimmedLine.replace(/^[ ]+/, "");
              }
              if (!isLastLine) {
                trimmedLine = trimmedLine.replace(/[ ]+$/, "");
              }
              if (trimmedLine) {
                if (!isLastNonEmptyLine) {
                  trimmedLine += " ";
                }
                str += trimmedLine;
              }
            }
            if (str)
              args.push(t.literal(str));
          }
          function buildChildren(node) {
            var elems = [];
            for (var i = 0; i < node.children.length; i++) {
              var child = node.children[i];
              if (t.isLiteral(child) && typeof child.value === "string") {
                cleanJSXElementLiteralChild(child, elems);
                continue;
              }
              if (t.isJSXExpressionContainer(child))
                child = child.expression;
              if (t.isJSXEmptyExpression(child))
                continue;
              elems.push(child);
            }
            return elems;
          }
        }, {"179": 179}],
        63: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          exports.is = is;
          exports.pullFlag = pullFlag;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {"default": obj};
          }
          var _lodashArrayPull = _dereq_(441);
          var _lodashArrayPull2 = _interopRequireDefault(_lodashArrayPull);
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          function is(node, flag) {
            return t.isLiteral(node) && node.regex && node.regex.flags.indexOf(flag) >= 0;
          }
          function pullFlag(node, flag) {
            var flags = node.regex.flags.split("");
            if (node.regex.flags.indexOf(flag) < 0)
              return;
            _lodashArrayPull2["default"](flags, flag);
            node.regex.flags = flags.join("");
          }
        }, {
          "179": 179,
          "441": 441
        }],
        64: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          var awaitVisitor = {
            Function: function Function() {
              this.skip();
            },
            AwaitExpression: function AwaitExpression(node) {
              node.type = "YieldExpression";
              if (node.all) {
                node.all = false;
                node.argument = t.callExpression(t.memberExpression(t.identifier("Promise"), t.identifier("all")), [node.argument]);
              }
            }
          };
          var referenceVisitor = {ReferencedIdentifier: function ReferencedIdentifier(node, parent, scope, state) {
              var name = state.id.name;
              if (node.name === name && scope.bindingIdentifierEquals(name, state.id)) {
                return state.ref = state.ref || scope.generateUidIdentifier(name);
              }
            }};
          exports["default"] = function(path, callId) {
            var node = path.node;
            node.async = false;
            node.generator = true;
            path.traverse(awaitVisitor, state);
            var call = t.callExpression(callId, [node]);
            var id = node.id;
            node.id = null;
            if (t.isFunctionDeclaration(node)) {
              var declar = t.variableDeclaration("let", [t.variableDeclarator(id, call)]);
              declar._blockHoist = true;
              return declar;
            } else {
              if (id) {
                var state = {id: id};
                path.traverse(referenceVisitor, state);
                if (state.ref) {
                  path.scope.parent.push({id: state.ref});
                  return t.assignmentExpression("=", state.ref, call);
                }
              }
              return call;
            }
          };
          module.exports = exports["default"];
        }, {"179": 179}],
        65: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }
          var _messages = _dereq_(43);
          var messages = _interopRequireWildcard(_messages);
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          function isIllegalBareSuper(node, parent) {
            if (!t.isSuper(node))
              return false;
            if (t.isMemberExpression(parent, {computed: false}))
              return false;
            if (t.isCallExpression(parent, {callee: node}))
              return false;
            return true;
          }
          function isMemberExpressionSuper(node) {
            return t.isMemberExpression(node) && t.isSuper(node.object);
          }
          var visitor = {enter: function enter(node, parent, scope, state) {
              var topLevel = state.topLevel;
              var self = state.self;
              if (t.isFunction(node) && !t.isArrowFunctionExpression(node)) {
                self.traverseLevel(this, false);
                return this.skip();
              }
              if (t.isProperty(node, {method: true}) || t.isMethodDefinition(node)) {
                return this.skip();
              }
              var getThisReference = topLevel ? t.thisExpression : self.getThisReference.bind(self);
              var callback = self.specHandle;
              if (self.isLoose)
                callback = self.looseHandle;
              var result = callback.call(self, this, getThisReference);
              if (result)
                this.hasSuper = true;
              if (result === true)
                return;
              return result;
            }};
          var ReplaceSupers = (function() {
            function ReplaceSupers(opts) {
              var inClass = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];
              _classCallCheck(this, ReplaceSupers);
              this.topLevelThisReference = opts.topLevelThisReference;
              this.methodPath = opts.methodPath;
              this.methodNode = opts.methodNode;
              this.superRef = opts.superRef;
              this.isStatic = opts.isStatic;
              this.hasSuper = false;
              this.inClass = inClass;
              this.isLoose = opts.isLoose;
              this.scope = opts.scope;
              this.file = opts.file;
              this.opts = opts;
            }
            ReplaceSupers.prototype.getObjectRef = function getObjectRef() {
              return this.opts.objectRef || this.opts.getObjectRef();
            };
            ReplaceSupers.prototype.setSuperProperty = function setSuperProperty(property, value, isComputed, thisExpression) {
              return t.callExpression(this.file.addHelper("set"), [t.callExpression(t.memberExpression(t.identifier("Object"), t.identifier("getPrototypeOf")), [this.isStatic ? this.getObjectRef() : t.memberExpression(this.getObjectRef(), t.identifier("prototype"))]), isComputed ? property : t.literal(property.name), value, thisExpression]);
            };
            ReplaceSupers.prototype.getSuperProperty = function getSuperProperty(property, isComputed, thisExpression) {
              return t.callExpression(this.file.addHelper("get"), [t.callExpression(t.memberExpression(t.identifier("Object"), t.identifier("getPrototypeOf")), [this.isStatic ? this.getObjectRef() : t.memberExpression(this.getObjectRef(), t.identifier("prototype"))]), isComputed ? property : t.literal(property.name), thisExpression]);
            };
            ReplaceSupers.prototype.replace = function replace() {
              this.traverseLevel(this.methodPath.get("value"), true);
            };
            ReplaceSupers.prototype.traverseLevel = function traverseLevel(path, topLevel) {
              var state = {
                self: this,
                topLevel: topLevel
              };
              path.traverse(visitor, state);
            };
            ReplaceSupers.prototype.getThisReference = function getThisReference() {
              if (this.topLevelThisReference) {
                return this.topLevelThisReference;
              } else {
                var ref = this.topLevelThisReference = this.scope.generateUidIdentifier("this");
                this.methodNode.value.body.body.unshift(t.variableDeclaration("var", [t.variableDeclarator(this.topLevelThisReference, t.thisExpression())]));
                return ref;
              }
            };
            ReplaceSupers.prototype.getLooseSuperProperty = function getLooseSuperProperty(id, parent) {
              var methodNode = this.methodNode;
              var methodName = methodNode.key;
              var superRef = this.superRef || t.identifier("Function");
              if (parent.property === id) {
                return;
              } else if (t.isCallExpression(parent, {callee: id})) {
                parent.arguments.unshift(t.thisExpression());
                if (methodName.name === "constructor") {
                  if (parent.arguments.length === 2 && t.isSpreadElement(parent.arguments[1]) && t.isIdentifier(parent.arguments[1].argument, {name: "arguments"})) {
                    parent.arguments[1] = parent.arguments[1].argument;
                    return t.memberExpression(superRef, t.identifier("apply"));
                  } else {
                    return t.memberExpression(superRef, t.identifier("call"));
                  }
                } else {
                  id = superRef;
                  if (!methodNode["static"]) {
                    id = t.memberExpression(id, t.identifier("prototype"));
                  }
                  id = t.memberExpression(id, methodName, methodNode.computed);
                  return t.memberExpression(id, t.identifier("call"));
                }
              } else if (t.isMemberExpression(parent) && !methodNode["static"]) {
                return t.memberExpression(superRef, t.identifier("prototype"));
              } else {
                return superRef;
              }
            };
            ReplaceSupers.prototype.looseHandle = function looseHandle(path, getThisReference) {
              var node = path.node;
              if (path.isSuper()) {
                return this.getLooseSuperProperty(node, path.parent);
              } else if (path.isCallExpression()) {
                var callee = node.callee;
                if (!t.isMemberExpression(callee))
                  return;
                if (!t.isSuper(callee.object))
                  return;
                t.appendToMemberExpression(callee, t.identifier("call"));
                node.arguments.unshift(getThisReference());
                return true;
              }
            };
            ReplaceSupers.prototype.specHandleAssignmentExpression = function specHandleAssignmentExpression(ref, path, node, getThisReference) {
              if (node.operator === "=") {
                return this.setSuperProperty(node.left.property, node.right, node.left.computed, getThisReference());
              } else {
                ref = ref || path.scope.generateUidIdentifier("ref");
                return [t.variableDeclaration("var", [t.variableDeclarator(ref, node.left)]), t.expressionStatement(t.assignmentExpression("=", node.left, t.binaryExpression(node.operator[0], ref, node.right)))];
              }
            };
            ReplaceSupers.prototype.specHandle = function specHandle(path, getThisReference) {
              var methodNode = this.methodNode;
              var property;
              var computed;
              var args;
              var thisReference;
              var parent = path.parent;
              var node = path.node;
              if (isIllegalBareSuper(node, parent)) {
                throw path.errorWithNode(messages.get("classesIllegalBareSuper"));
              }
              if (t.isCallExpression(node)) {
                var callee = node.callee;
                if (t.isSuper(callee)) {
                  property = methodNode.key;
                  computed = methodNode.computed;
                  args = node.arguments;
                  if (methodNode.key.name !== "constructor" || !this.inClass) {
                    var methodName = methodNode.key.name || "METHOD_NAME";
                    throw this.file.errorWithNode(node, messages.get("classesIllegalSuperCall", methodName));
                  }
                } else if (isMemberExpressionSuper(callee)) {
                  property = callee.property;
                  computed = callee.computed;
                  args = node.arguments;
                }
              } else if (t.isMemberExpression(node) && t.isSuper(node.object)) {
                property = node.property;
                computed = node.computed;
              } else if (t.isUpdateExpression(node) && isMemberExpressionSuper(node.argument)) {
                var binary = t.binaryExpression(node.operator[0], node.argument, t.literal(1));
                if (node.prefix) {
                  return this.specHandleAssignmentExpression(null, path, binary, getThisReference);
                } else {
                  var ref = path.scope.generateUidIdentifier("ref");
                  return this.specHandleAssignmentExpression(ref, path, binary, getThisReference).concat(t.expressionStatement(ref));
                }
              } else if (t.isAssignmentExpression(node) && isMemberExpressionSuper(node.left)) {
                return this.specHandleAssignmentExpression(null, path, node, getThisReference);
              }
              if (!property)
                return;
              thisReference = getThisReference();
              var superProperty = this.getSuperProperty(property, computed, thisReference);
              if (args) {
                if (args.length === 1 && t.isSpreadElement(args[0])) {
                  return t.callExpression(t.memberExpression(superProperty, t.identifier("apply")), [thisReference, args[0].argument]);
                } else {
                  return t.callExpression(t.memberExpression(superProperty, t.identifier("call")), [thisReference].concat(args));
                }
              } else {
                return superProperty;
              }
            };
            return ReplaceSupers;
          })();
          exports["default"] = ReplaceSupers;
          module.exports = exports["default"];
        }, {
          "179": 179,
          "43": 43
        }],
        66: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {"default": obj};
          }
          var _pipeline = _dereq_(80);
          var _pipeline2 = _interopRequireDefault(_pipeline);
          var _transformers = _dereq_(126);
          var _transformers2 = _interopRequireDefault(_transformers);
          var _transformersDeprecated = _dereq_(85);
          var _transformersDeprecated2 = _interopRequireDefault(_transformersDeprecated);
          var _transformersAliases = _dereq_(84);
          var _transformersAliases2 = _interopRequireDefault(_transformersAliases);
          var _transformersFilters = _dereq_(125);
          var filters = _interopRequireWildcard(_transformersFilters);
          var pipeline = new _pipeline2["default"]();
          for (var key in _transformers2["default"]) {
            var transformer = _transformers2["default"][key];
            if (typeof transformer === "object") {
              var metadata = transformer.metadata = transformer.metadata || {};
              metadata.group = metadata.group || "builtin-basic";
            }
          }
          pipeline.addTransformers(_transformers2["default"]);
          pipeline.addDeprecated(_transformersDeprecated2["default"]);
          pipeline.addAliases(_transformersAliases2["default"]);
          pipeline.addFilter(filters.internal);
          pipeline.addFilter(filters.blacklist);
          pipeline.addFilter(filters.whitelist);
          pipeline.addFilter(filters.stage);
          pipeline.addFilter(filters.optional);
          var transform = pipeline.transform.bind(pipeline);
          transform.fromAst = pipeline.transformFromAst.bind(pipeline);
          transform.pipeline = pipeline;
          exports["default"] = transform;
          module.exports = exports["default"];
        }, {
          "125": 125,
          "126": 126,
          "80": 80,
          "84": 84,
          "85": 85
        }],
        67: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {"default": obj};
          }
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }
          var _libMetadata = _dereq_(75);
          var metadataVisitor = _interopRequireWildcard(_libMetadata);
          var _messages = _dereq_(43);
          var messages = _interopRequireWildcard(_messages);
          var _libRemaps = _dereq_(76);
          var _libRemaps2 = _interopRequireDefault(_libRemaps);
          var _helpersObject = _dereq_(41);
          var _helpersObject2 = _interopRequireDefault(_helpersObject);
          var _util = _dereq_(182);
          var util = _interopRequireWildcard(_util);
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          var DefaultFormatter = (function() {
            function DefaultFormatter(file) {
              _classCallCheck(this, DefaultFormatter);
              this.sourceScopes = _helpersObject2["default"]();
              this.defaultIds = _helpersObject2["default"]();
              this.ids = _helpersObject2["default"]();
              this.remaps = new _libRemaps2["default"](file, this);
              this.scope = file.scope;
              this.file = file;
              this.hasNonDefaultExports = false;
              this.hasLocalExports = false;
              this.hasLocalImports = false;
              this.localExports = _helpersObject2["default"]();
              this.localImports = _helpersObject2["default"]();
              this.metadata = file.metadata.modules;
              this.getMetadata();
            }
            DefaultFormatter.prototype.addScope = function addScope(path) {
              var source = path.node.source && path.node.source.value;
              if (!source)
                return;
              var existingScope = this.sourceScopes[source];
              if (existingScope && existingScope !== path.scope) {
                throw path.errorWithNode(messages.get("modulesDuplicateDeclarations"));
              }
              this.sourceScopes[source] = path.scope;
            };
            DefaultFormatter.prototype.isModuleType = function isModuleType(node, type) {
              var modules = this.file.dynamicImportTypes[type];
              return modules && modules.indexOf(node) >= 0;
            };
            DefaultFormatter.prototype.transform = function transform() {
              this.remapAssignments();
            };
            DefaultFormatter.prototype.doDefaultExportInterop = function doDefaultExportInterop(node) {
              return (t.isExportDefaultDeclaration(node) || t.isSpecifierDefault(node)) && !this.noInteropRequireExport && !this.hasNonDefaultExports;
            };
            DefaultFormatter.prototype.getMetadata = function getMetadata() {
              var has = false;
              var _arr = this.file.ast.program.body;
              for (var _i = 0; _i < _arr.length; _i++) {
                var node = _arr[_i];
                if (t.isModuleDeclaration(node)) {
                  has = true;
                  break;
                }
              }
              if (has || this.isLoose()) {
                this.file.path.traverse(metadataVisitor, this);
              }
            };
            DefaultFormatter.prototype.remapAssignments = function remapAssignments() {
              if (this.hasLocalExports || this.hasLocalImports) {
                this.remaps.run();
              }
            };
            DefaultFormatter.prototype.remapExportAssignment = function remapExportAssignment(node, exported) {
              var assign = node;
              for (var i = 0; i < exported.length; i++) {
                assign = t.assignmentExpression("=", t.memberExpression(t.identifier("exports"), exported[i]), assign);
              }
              return assign;
            };
            DefaultFormatter.prototype._addExport = function _addExport(name, exported) {
              var info = this.localExports[name] = this.localExports[name] || {
                binding: this.scope.getBindingIdentifier(name),
                exported: []
              };
              info.exported.push(exported);
            };
            DefaultFormatter.prototype.getExport = function getExport(node, scope) {
              if (!t.isIdentifier(node))
                return;
              var local = this.localExports[node.name];
              if (local && local.binding === scope.getBindingIdentifier(node.name)) {
                return local.exported;
              }
            };
            DefaultFormatter.prototype.getModuleName = function getModuleName() {
              var opts = this.file.opts;
              if (opts.moduleId != null && !opts.getModuleId) {
                return opts.moduleId;
              }
              var filenameRelative = opts.filenameRelative;
              var moduleName = "";
              if (opts.moduleRoot != null) {
                moduleName = opts.moduleRoot + "/";
              }
              if (!opts.filenameRelative) {
                return moduleName + opts.filename.replace(/^\//, "");
              }
              if (opts.sourceRoot != null) {
                var sourceRootRegEx = new RegExp("^" + opts.sourceRoot + "\/?");
                filenameRelative = filenameRelative.replace(sourceRootRegEx, "");
              }
              if (!opts.keepModuleIdExtensions) {
                filenameRelative = filenameRelative.replace(/\.(\w*?)$/, "");
              }
              moduleName += filenameRelative;
              moduleName = moduleName.replace(/\\/g, "/");
              if (opts.getModuleId) {
                return opts.getModuleId(moduleName) || moduleName;
              } else {
                return moduleName;
              }
            };
            DefaultFormatter.prototype._pushStatement = function _pushStatement(ref, nodes) {
              if (t.isClass(ref) || t.isFunction(ref)) {
                if (ref.id) {
                  nodes.push(t.toStatement(ref));
                  ref = ref.id;
                }
              }
              return ref;
            };
            DefaultFormatter.prototype._hoistExport = function _hoistExport(declar, assign, priority) {
              if (t.isFunctionDeclaration(declar)) {
                assign._blockHoist = priority || 2;
              }
              return assign;
            };
            DefaultFormatter.prototype.getExternalReference = function getExternalReference(node, nodes) {
              var ids = this.ids;
              var id = node.source.value;
              if (ids[id]) {
                return ids[id];
              } else {
                return this.ids[id] = this._getExternalReference(node, nodes);
              }
            };
            DefaultFormatter.prototype.checkExportIdentifier = function checkExportIdentifier(node) {
              if (t.isIdentifier(node, {name: "__esModule"})) {
                throw this.file.errorWithNode(node, messages.get("modulesIllegalExportName", node.name));
              }
            };
            DefaultFormatter.prototype.exportAllDeclaration = function exportAllDeclaration(node, nodes) {
              var ref = this.getExternalReference(node, nodes);
              nodes.push(this.buildExportsWildcard(ref, node));
            };
            DefaultFormatter.prototype.isLoose = function isLoose() {
              return this.file.isLoose("es6.modules");
            };
            DefaultFormatter.prototype.exportSpecifier = function exportSpecifier(specifier, node, nodes) {
              if (node.source) {
                var ref = this.getExternalReference(node, nodes);
                if (specifier.local.name === "default" && !this.noInteropRequireExport) {
                  ref = t.callExpression(this.file.addHelper("interop-require"), [ref]);
                } else {
                  ref = t.memberExpression(ref, specifier.local);
                  if (!this.isLoose()) {
                    nodes.push(this.buildExportsFromAssignment(specifier.exported, ref, node));
                    return;
                  }
                }
                nodes.push(this.buildExportsAssignment(specifier.exported, ref, node));
              } else {
                nodes.push(this.buildExportsAssignment(specifier.exported, specifier.local, node));
              }
            };
            DefaultFormatter.prototype.buildExportsWildcard = function buildExportsWildcard(objectIdentifier) {
              return t.expressionStatement(t.callExpression(this.file.addHelper("defaults"), [t.identifier("exports"), t.callExpression(this.file.addHelper("interop-export-wildcard"), [objectIdentifier, this.file.addHelper("defaults")])]));
            };
            DefaultFormatter.prototype.buildExportsFromAssignment = function buildExportsFromAssignment(id, init) {
              this.checkExportIdentifier(id);
              return util.template("exports-from-assign", {
                INIT: init,
                ID: t.literal(id.name)
              }, true);
            };
            DefaultFormatter.prototype.buildExportsAssignment = function buildExportsAssignment(id, init) {
              this.checkExportIdentifier(id);
              return util.template("exports-assign", {
                VALUE: init,
                KEY: id
              }, true);
            };
            DefaultFormatter.prototype.exportDeclaration = function exportDeclaration(node, nodes) {
              var declar = node.declaration;
              var id = declar.id;
              if (t.isExportDefaultDeclaration(node)) {
                id = t.identifier("default");
              }
              var assign;
              if (t.isVariableDeclaration(declar)) {
                for (var i = 0; i < declar.declarations.length; i++) {
                  var decl = declar.declarations[i];
                  decl.init = this.buildExportsAssignment(decl.id, decl.init, node).expression;
                  var newDeclar = t.variableDeclaration(declar.kind, [decl]);
                  if (i === 0)
                    t.inherits(newDeclar, declar);
                  nodes.push(newDeclar);
                }
              } else {
                var ref = declar;
                if (t.isFunctionDeclaration(declar) || t.isClassDeclaration(declar)) {
                  ref = declar.id;
                  nodes.push(declar);
                }
                assign = this.buildExportsAssignment(id, ref, node);
                nodes.push(assign);
                this._hoistExport(declar, assign);
              }
            };
            return DefaultFormatter;
          })();
          exports["default"] = DefaultFormatter;
          module.exports = exports["default"];
        }, {
          "179": 179,
          "182": 182,
          "41": 41,
          "43": 43,
          "75": 75,
          "76": 76
        }],
        68: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          var _util = _dereq_(182);
          var util = _interopRequireWildcard(_util);
          exports["default"] = function(Parent) {
            var Constructor = function Constructor() {
              this.noInteropRequireImport = true;
              this.noInteropRequireExport = true;
              Parent.apply(this, arguments);
            };
            util.inherits(Constructor, Parent);
            return Constructor;
          };
          module.exports = exports["default"];
        }, {"182": 182}],
        69: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {"default": obj};
          }
          var _amd = _dereq_(70);
          var _amd2 = _interopRequireDefault(_amd);
          var _strict = _dereq_(68);
          var _strict2 = _interopRequireDefault(_strict);
          exports["default"] = _strict2["default"](_amd2["default"]);
          module.exports = exports["default"];
        }, {
          "68": 68,
          "70": 70
        }],
        70: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {"default": obj};
          }
          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }
          function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
              throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
              }});
            if (superClass)
              Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
          }
          var _default = _dereq_(67);
          var _default2 = _interopRequireDefault(_default);
          var _common = _dereq_(72);
          var _common2 = _interopRequireDefault(_common);
          var _lodashCollectionIncludes = _dereq_(446);
          var _lodashCollectionIncludes2 = _interopRequireDefault(_lodashCollectionIncludes);
          var _lodashObjectValues = _dereq_(550);
          var _lodashObjectValues2 = _interopRequireDefault(_lodashObjectValues);
          var _util = _dereq_(182);
          var util = _interopRequireWildcard(_util);
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          var AMDFormatter = (function(_DefaultFormatter) {
            _inherits(AMDFormatter, _DefaultFormatter);
            function AMDFormatter() {
              _classCallCheck(this, AMDFormatter);
              _DefaultFormatter.apply(this, arguments);
            }
            AMDFormatter.prototype.setup = function setup() {
              _common2["default"].prototype._setup.call(this, this.hasNonDefaultExports);
            };
            AMDFormatter.prototype.buildDependencyLiterals = function buildDependencyLiterals() {
              var names = [];
              for (var name in this.ids) {
                names.push(t.literal(name));
              }
              return names;
            };
            AMDFormatter.prototype.transform = function transform(program) {
              _common2["default"].prototype.transform.apply(this, arguments);
              var body = program.body;
              var names = [t.literal("exports")];
              if (this.passModuleArg)
                names.push(t.literal("module"));
              names = names.concat(this.buildDependencyLiterals());
              names = t.arrayExpression(names);
              var params = _lodashObjectValues2["default"](this.ids);
              if (this.passModuleArg)
                params.unshift(t.identifier("module"));
              params.unshift(t.identifier("exports"));
              var container = t.functionExpression(null, params, t.blockStatement(body));
              var defineArgs = [names, container];
              var moduleName = this.getModuleName();
              if (moduleName)
                defineArgs.unshift(t.literal(moduleName));
              var call = t.callExpression(t.identifier("define"), defineArgs);
              program.body = [t.expressionStatement(call)];
            };
            AMDFormatter.prototype.getModuleName = function getModuleName() {
              if (this.file.opts.moduleIds) {
                return _default2["default"].prototype.getModuleName.apply(this, arguments);
              } else {
                return null;
              }
            };
            AMDFormatter.prototype._getExternalReference = function _getExternalReference(node) {
              return this.scope.generateUidIdentifier(node.source.value);
            };
            AMDFormatter.prototype.importDeclaration = function importDeclaration(node) {
              this.getExternalReference(node);
            };
            AMDFormatter.prototype.importSpecifier = function importSpecifier(specifier, node, nodes, scope) {
              var key = node.source.value;
              var ref = this.getExternalReference(node);
              if (t.isImportNamespaceSpecifier(specifier) || t.isImportDefaultSpecifier(specifier)) {
                this.defaultIds[key] = specifier.local;
              }
              if (this.isModuleType(node, "absolute")) {} else if (this.isModuleType(node, "absoluteDefault")) {
                this.ids[node.source.value] = ref;
                ref = t.memberExpression(ref, t.identifier("default"));
              } else if (t.isImportNamespaceSpecifier(specifier)) {} else if (!_lodashCollectionIncludes2["default"](this.file.dynamicImported, node) && t.isSpecifierDefault(specifier) && !this.noInteropRequireImport) {
                var uid = scope.generateUidIdentifier(specifier.local.name);
                nodes.push(t.variableDeclaration("var", [t.variableDeclarator(uid, t.callExpression(this.file.addHelper("interop-require-default"), [ref]))]));
                ref = t.memberExpression(uid, t.identifier("default"));
              } else {
                var imported = specifier.imported;
                if (t.isSpecifierDefault(specifier))
                  imported = t.identifier("default");
                ref = t.memberExpression(ref, imported);
              }
              this.remaps.add(scope, specifier.local.name, ref);
            };
            AMDFormatter.prototype.exportSpecifier = function exportSpecifier(specifier, node, nodes) {
              if (this.doDefaultExportInterop(specifier)) {
                this.passModuleArg = true;
                if (specifier.exported !== specifier.local && !node.source) {
                  nodes.push(util.template("exports-default-assign", {VALUE: specifier.local}, true));
                  return;
                }
              }
              _common2["default"].prototype.exportSpecifier.apply(this, arguments);
            };
            AMDFormatter.prototype.exportDeclaration = function exportDeclaration(node, nodes) {
              if (this.doDefaultExportInterop(node)) {
                this.passModuleArg = true;
                var declar = node.declaration;
                var assign = util.template("exports-default-assign", {VALUE: this._pushStatement(declar, nodes)}, true);
                if (t.isFunctionDeclaration(declar)) {
                  assign._blockHoist = 3;
                }
                nodes.push(assign);
                return;
              }
              _default2["default"].prototype.exportDeclaration.apply(this, arguments);
            };
            return AMDFormatter;
          })(_default2["default"]);
          exports["default"] = AMDFormatter;
          module.exports = exports["default"];
        }, {
          "179": 179,
          "182": 182,
          "446": 446,
          "550": 550,
          "67": 67,
          "72": 72
        }],
        71: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {"default": obj};
          }
          var _common = _dereq_(72);
          var _common2 = _interopRequireDefault(_common);
          var _strict = _dereq_(68);
          var _strict2 = _interopRequireDefault(_strict);
          exports["default"] = _strict2["default"](_common2["default"]);
          module.exports = exports["default"];
        }, {
          "68": 68,
          "72": 72
        }],
        72: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {"default": obj};
          }
          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }
          function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
              throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
              }});
            if (superClass)
              Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
          }
          var _default = _dereq_(67);
          var _default2 = _interopRequireDefault(_default);
          var _util = _dereq_(182);
          var util = _interopRequireWildcard(_util);
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          var CommonJSFormatter = (function(_DefaultFormatter) {
            _inherits(CommonJSFormatter, _DefaultFormatter);
            function CommonJSFormatter() {
              _classCallCheck(this, CommonJSFormatter);
              _DefaultFormatter.apply(this, arguments);
            }
            CommonJSFormatter.prototype.setup = function setup() {
              this._setup(this.hasLocalExports);
            };
            CommonJSFormatter.prototype._setup = function _setup(conditional) {
              var file = this.file;
              var scope = file.scope;
              scope.rename("module");
              scope.rename("exports");
              if (!this.noInteropRequireImport && conditional) {
                var templateName = "exports-module-declaration";
                if (this.file.isLoose("es6.modules"))
                  templateName += "-loose";
                var declar = util.template(templateName, true);
                declar._blockHoist = 3;
                file.path.unshiftContainer("body", [declar]);
              }
            };
            CommonJSFormatter.prototype.transform = function transform(program) {
              _default2["default"].prototype.transform.apply(this, arguments);
              if (this.hasDefaultOnlyExport) {
                program.body.push(t.expressionStatement(t.assignmentExpression("=", t.memberExpression(t.identifier("module"), t.identifier("exports")), t.memberExpression(t.identifier("exports"), t.identifier("default")))));
              }
            };
            CommonJSFormatter.prototype.importSpecifier = function importSpecifier(specifier, node, nodes, scope) {
              var variableName = specifier.local;
              var ref = this.getExternalReference(node, nodes);
              if (t.isSpecifierDefault(specifier)) {
                if (this.isModuleType(node, "absolute")) {} else if (this.isModuleType(node, "absoluteDefault")) {
                  this.remaps.add(scope, variableName.name, ref);
                } else if (this.noInteropRequireImport) {
                  this.remaps.add(scope, variableName.name, t.memberExpression(ref, t.identifier("default")));
                } else {
                  var uid = this.scope.generateUidIdentifierBasedOnNode(node, "import");
                  nodes.push(t.variableDeclaration("var", [t.variableDeclarator(uid, t.callExpression(this.file.addHelper("interop-require-default"), [ref]))]));
                  this.remaps.add(scope, variableName.name, t.memberExpression(uid, t.identifier("default")));
                }
              } else {
                if (t.isImportNamespaceSpecifier(specifier)) {
                  if (!this.noInteropRequireImport) {
                    ref = t.callExpression(this.file.addHelper("interop-require-wildcard"), [ref]);
                  }
                  nodes.push(t.variableDeclaration("var", [t.variableDeclarator(variableName, ref)]));
                } else {
                  this.remaps.add(scope, variableName.name, t.memberExpression(ref, t.identifier(specifier.imported.name)));
                }
              }
            };
            CommonJSFormatter.prototype.importDeclaration = function importDeclaration(node, nodes) {
              nodes.push(util.template("require", {MODULE_NAME: node.source}, true));
            };
            CommonJSFormatter.prototype.exportSpecifier = function exportSpecifier(specifier) {
              if (this.doDefaultExportInterop(specifier)) {
                this.hasDefaultOnlyExport = true;
              }
              _default2["default"].prototype.exportSpecifier.apply(this, arguments);
            };
            CommonJSFormatter.prototype.exportDeclaration = function exportDeclaration(node) {
              if (this.doDefaultExportInterop(node)) {
                this.hasDefaultOnlyExport = true;
              }
              _default2["default"].prototype.exportDeclaration.apply(this, arguments);
            };
            CommonJSFormatter.prototype._getExternalReference = function _getExternalReference(node, nodes) {
              var call = t.callExpression(t.identifier("require"), [node.source]);
              var uid;
              if (this.isModuleType(node, "absolute")) {} else if (this.isModuleType(node, "absoluteDefault")) {
                call = t.memberExpression(call, t.identifier("default"));
              } else {
                uid = this.scope.generateUidIdentifierBasedOnNode(node, "import");
              }
              uid = uid || node.specifiers[0].local;
              var declar = t.variableDeclaration("var", [t.variableDeclarator(uid, call)]);
              nodes.push(declar);
              return uid;
            };
            return CommonJSFormatter;
          })(_default2["default"]);
          exports["default"] = CommonJSFormatter;
          module.exports = exports["default"];
        }, {
          "179": 179,
          "182": 182,
          "67": 67
        }],
        73: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {"default": obj};
          }
          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }
          function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
              throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
              }});
            if (superClass)
              Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
          }
          var _default = _dereq_(67);
          var _default2 = _interopRequireDefault(_default);
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          var IgnoreFormatter = (function(_DefaultFormatter) {
            _inherits(IgnoreFormatter, _DefaultFormatter);
            function IgnoreFormatter() {
              _classCallCheck(this, IgnoreFormatter);
              _DefaultFormatter.apply(this, arguments);
            }
            IgnoreFormatter.prototype.exportDeclaration = function exportDeclaration(node, nodes) {
              var declar = t.toStatement(node.declaration, true);
              if (declar)
                nodes.push(t.inherits(declar, node));
            };
            IgnoreFormatter.prototype.exportAllDeclaration = function exportAllDeclaration() {};
            IgnoreFormatter.prototype.importDeclaration = function importDeclaration() {};
            IgnoreFormatter.prototype.importSpecifier = function importSpecifier() {};
            IgnoreFormatter.prototype.exportSpecifier = function exportSpecifier() {};
            IgnoreFormatter.prototype.transform = function transform() {};
            return IgnoreFormatter;
          })(_default2["default"]);
          exports["default"] = IgnoreFormatter;
          module.exports = exports["default"];
        }, {
          "179": 179,
          "67": 67
        }],
        74: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          exports["default"] = {
            commonStrict: _dereq_(71),
            amdStrict: _dereq_(69),
            umdStrict: _dereq_(78),
            common: _dereq_(72),
            system: _dereq_(77),
            ignore: _dereq_(73),
            amd: _dereq_(70),
            umd: _dereq_(79)
          };
          module.exports = exports["default"];
        }, {
          "69": 69,
          "70": 70,
          "71": 71,
          "72": 72,
          "73": 73,
          "77": 77,
          "78": 78,
          "79": 79
        }],
        75: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          exports.ExportDeclaration = ExportDeclaration;
          exports.Scope = Scope;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {"default": obj};
          }
          var _lodashObjectExtend = _dereq_(544);
          var _lodashObjectExtend2 = _interopRequireDefault(_lodashObjectExtend);
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          var ModuleDeclaration = {enter: function enter(node, parent, scope, formatter) {
              if (node.source) {
                node.source.value = formatter.file.resolveModuleSource(node.source.value);
                formatter.addScope(this);
              }
            }};
          exports.ModuleDeclaration = ModuleDeclaration;
          var ImportDeclaration = {exit: function exit(node, parent, scope, formatter) {
              formatter.hasLocalImports = true;
              var specifiers = [];
              var imported = [];
              formatter.metadata.imports.push({
                source: node.source.value,
                imported: imported,
                specifiers: specifiers
              });
              var _arr = this.get("specifiers");
              for (var _i = 0; _i < _arr.length; _i++) {
                var specifier = _arr[_i];
                var ids = specifier.getBindingIdentifiers();
                _lodashObjectExtend2["default"](formatter.localImports, ids);
                var local = specifier.node.local.name;
                if (specifier.isImportDefaultSpecifier()) {
                  imported.push("default");
                  specifiers.push({
                    kind: "named",
                    imported: "default",
                    local: local
                  });
                }
                if (specifier.isImportSpecifier()) {
                  var importedName = specifier.node.imported.name;
                  imported.push(importedName);
                  specifiers.push({
                    kind: "named",
                    imported: importedName,
                    local: local
                  });
                }
                if (specifier.isImportNamespaceSpecifier()) {
                  imported.push("*");
                  specifiers.push({
                    kind: "namespace",
                    local: local
                  });
                }
              }
            }};
          exports.ImportDeclaration = ImportDeclaration;
          function ExportDeclaration(node, parent, scope, formatter) {
            formatter.hasLocalExports = true;
            var source = node.source ? node.source.value : null;
            var exports = formatter.metadata.exports;
            var declar = this.get("declaration");
            if (declar.isStatement()) {
              var bindings = declar.getBindingIdentifiers();
              for (var name in bindings) {
                var binding = bindings[name];
                formatter._addExport(name, binding);
                exports.exported.push(name);
                exports.specifiers.push({
                  kind: "local",
                  local: name,
                  exported: this.isExportDefaultDeclaration() ? "default" : name
                });
              }
            }
            if (this.isExportNamedDeclaration() && node.specifiers) {
              var _arr2 = node.specifiers;
              for (var _i2 = 0; _i2 < _arr2.length; _i2++) {
                var specifier = _arr2[_i2];
                var exported = specifier.exported.name;
                exports.exported.push(exported);
                if (t.isExportDefaultSpecifier(specifier)) {
                  exports.specifiers.push({
                    kind: "external",
                    local: exported,
                    exported: exported,
                    source: source
                  });
                }
                if (t.isExportNamespaceSpecifier(specifier)) {
                  exports.specifiers.push({
                    kind: "external-namespace",
                    exported: exported,
                    source: source
                  });
                }
                var local = specifier.local;
                if (!local)
                  continue;
                formatter._addExport(local.name, specifier.exported);
                if (source) {
                  exports.specifiers.push({
                    kind: "external",
                    local: local.name,
                    exported: exported,
                    source: source
                  });
                }
                if (!source) {
                  exports.specifiers.push({
                    kind: "local",
                    local: local.name,
                    exported: exported
                  });
                }
              }
            }
            if (this.isExportAllDeclaration()) {
              exports.specifiers.push({
                kind: "external-all",
                source: source
              });
            }
            if (!t.isExportDefaultDeclaration(node) && !declar.isTypeAlias()) {
              var onlyDefault = node.specifiers && node.specifiers.length === 1 && t.isSpecifierDefault(node.specifiers[0]);
              if (!onlyDefault) {
                formatter.hasNonDefaultExports = true;
              }
            }
          }
          function Scope(node, parent, scope, formatter) {
            if (!formatter.isLoose()) {
              this.skip();
            }
          }
        }, {
          "179": 179,
          "544": 544
        }],
        76: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          var remapVisitor = {
            enter: function enter(node) {
              if (node._skipModulesRemap) {
                return this.skip();
              }
            },
            ReferencedIdentifier: function ReferencedIdentifier(node, parent, scope, remaps) {
              var formatter = remaps.formatter;
              var remap = remaps.get(scope, node.name);
              if (!remap || node === remap)
                return;
              if (!scope.hasBinding(node.name) || scope.bindingIdentifierEquals(node.name, formatter.localImports[node.name])) {
                if (!formatter.isLoose() && this.key === "callee" && this.parentPath.isCallExpression()) {
                  return t.sequenceExpression([t.literal(0), remap]);
                } else {
                  return remap;
                }
              }
            },
            AssignmentExpression: {exit: function exit(node, parent, scope, _ref) {
                var formatter = _ref.formatter;
                if (!node._ignoreModulesRemap) {
                  var exported = formatter.getExport(node.left, scope);
                  if (exported) {
                    return formatter.remapExportAssignment(node, exported);
                  }
                }
              }},
            UpdateExpression: function UpdateExpression(node, parent, scope, _ref2) {
              var formatter = _ref2.formatter;
              var exported = formatter.getExport(node.argument, scope);
              if (!exported)
                return;
              this.skip();
              var assign = t.assignmentExpression(node.operator[0] + "=", node.argument, t.literal(1));
              var remapped = formatter.remapExportAssignment(assign, exported);
              if (t.isExpressionStatement(parent) || node.prefix) {
                return remapped;
              }
              var nodes = [];
              nodes.push(remapped);
              var operator;
              if (node.operator === "--") {
                operator = "+";
              } else {
                operator = "-";
              }
              nodes.push(t.binaryExpression(operator, node.argument, t.literal(1)));
              return t.sequenceExpression(nodes);
            }
          };
          var Remaps = (function() {
            function Remaps(file, formatter) {
              _classCallCheck(this, Remaps);
              this.formatter = formatter;
              this.file = file;
            }
            Remaps.prototype.run = function run() {
              this.file.path.traverse(remapVisitor, this);
            };
            Remaps.prototype._getKey = function _getKey(name) {
              return name + ":moduleRemap";
            };
            Remaps.prototype.get = function get(scope, name) {
              return scope.getData(this._getKey(name));
            };
            Remaps.prototype.add = function add(scope, name, val) {
              if (this.all) {
                this.all.push({
                  name: name,
                  scope: scope,
                  node: val
                });
              }
              return scope.setData(this._getKey(name), val);
            };
            Remaps.prototype.remove = function remove(scope, name) {
              return scope.removeData(this._getKey(name));
            };
            Remaps.prototype.getAll = function getAll() {
              return this.all;
            };
            Remaps.prototype.clearAll = function clearAll() {
              if (this.all) {
                var _arr = this.all;
                for (var _i = 0; _i < _arr.length; _i++) {
                  var remap = _arr[_i];
                  remap.scope.removeData(this._getKey(remap.name));
                }
              }
              this.all = [];
            };
            return Remaps;
          })();
          exports["default"] = Remaps;
          module.exports = exports["default"];
        }, {"179": 179}],
        77: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {"default": obj};
          }
          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }
          function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
              throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
              }});
            if (superClass)
              Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
          }
          var _default = _dereq_(67);
          var _default2 = _interopRequireDefault(_default);
          var _amd = _dereq_(70);
          var _amd2 = _interopRequireDefault(_amd);
          var _util = _dereq_(182);
          var util = _interopRequireWildcard(_util);
          var _lodashArrayLast = _dereq_(440);
          var _lodashArrayLast2 = _interopRequireDefault(_lodashArrayLast);
          var _lodashCollectionMap = _dereq_(447);
          var _lodashCollectionMap2 = _interopRequireDefault(_lodashCollectionMap);
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          var hoistVariablesVisitor = {
            Function: function Function() {
              this.skip();
            },
            VariableDeclaration: function VariableDeclaration(node, parent, scope, state) {
              if (node.kind !== "var" && !t.isProgram(parent)) {
                return;
              }
              if (state.formatter._canHoist(node))
                return;
              var nodes = [];
              for (var i = 0; i < node.declarations.length; i++) {
                var declar = node.declarations[i];
                state.hoistDeclarators.push(t.variableDeclarator(declar.id));
                if (declar.init) {
                  var assign = t.expressionStatement(t.assignmentExpression("=", declar.id, declar.init));
                  nodes.push(assign);
                }
              }
              if (t.isFor(parent) && parent.left === node) {
                return node.declarations[0].id;
              }
              return nodes;
            }
          };
          var hoistFunctionsVisitor = {
            Function: function Function() {
              this.skip();
            },
            enter: function enter(node, parent, scope, state) {
              if (t.isFunctionDeclaration(node) || state.formatter._canHoist(node)) {
                state.handlerBody.push(node);
                this.dangerouslyRemove();
              }
            }
          };
          var runnerSettersVisitor = {enter: function enter(node, parent, scope, state) {
              if (node._importSource === state.source) {
                if (t.isVariableDeclaration(node)) {
                  var _arr = node.declarations;
                  for (var _i = 0; _i < _arr.length; _i++) {
                    var declar = _arr[_i];
                    state.hoistDeclarators.push(t.variableDeclarator(declar.id));
                    state.nodes.push(t.expressionStatement(t.assignmentExpression("=", declar.id, declar.init)));
                  }
                } else {
                  state.nodes.push(node);
                }
                this.dangerouslyRemove();
              }
            }};
          var SystemFormatter = (function(_AMDFormatter) {
            _inherits(SystemFormatter, _AMDFormatter);
            function SystemFormatter(file) {
              _classCallCheck(this, SystemFormatter);
              _AMDFormatter.call(this, file);
              this._setters = null;
              this.exportIdentifier = file.scope.generateUidIdentifier("export");
              this.noInteropRequireExport = true;
              this.noInteropRequireImport = true;
              this.remaps.clearAll();
            }
            SystemFormatter.prototype._addImportSource = function _addImportSource(node, exportNode) {
              if (node)
                node._importSource = exportNode.source && exportNode.source.value;
              return node;
            };
            SystemFormatter.prototype.buildExportsWildcard = function buildExportsWildcard(objectIdentifier, node) {
              var leftIdentifier = this.scope.generateUidIdentifier("key");
              var valIdentifier = t.memberExpression(objectIdentifier, leftIdentifier, true);
              var left = t.variableDeclaration("var", [t.variableDeclarator(leftIdentifier)]);
              var right = objectIdentifier;
              var block = t.blockStatement([t.ifStatement(t.binaryExpression("!==", leftIdentifier, t.literal("default")), t.expressionStatement(this._buildExportCall(leftIdentifier, valIdentifier)))]);
              return this._addImportSource(t.forInStatement(left, right, block), node);
            };
            SystemFormatter.prototype.buildExportsAssignment = function buildExportsAssignment(id, init, node) {
              var call = this._buildExportCall(t.literal(id.name), init, true);
              return this._addImportSource(call, node);
            };
            SystemFormatter.prototype.buildExportsFromAssignment = function buildExportsFromAssignment() {
              return this.buildExportsAssignment.apply(this, arguments);
            };
            SystemFormatter.prototype.remapExportAssignment = function remapExportAssignment(node, exported) {
              var assign = node;
              for (var i = 0; i < exported.length; i++) {
                assign = this._buildExportCall(t.literal(exported[i].name), assign);
              }
              return assign;
            };
            SystemFormatter.prototype._buildExportCall = function _buildExportCall(id, init, isStatement) {
              var call = t.callExpression(this.exportIdentifier, [id, init]);
              if (isStatement) {
                return t.expressionStatement(call);
              } else {
                return call;
              }
            };
            SystemFormatter.prototype.importSpecifier = function importSpecifier(specifier, node, nodes) {
              _amd2["default"].prototype.importSpecifier.apply(this, arguments);
              var _arr2 = this.remaps.getAll();
              for (var _i2 = 0; _i2 < _arr2.length; _i2++) {
                var remap = _arr2[_i2];
                nodes.push(t.variableDeclaration("var", [t.variableDeclarator(t.identifier(remap.name), remap.node)]));
              }
              this.remaps.clearAll();
              this._addImportSource(_lodashArrayLast2["default"](nodes), node);
            };
            SystemFormatter.prototype._buildRunnerSetters = function _buildRunnerSetters(block, hoistDeclarators) {
              var scope = this.file.scope;
              return t.arrayExpression(_lodashCollectionMap2["default"](this.ids, function(uid, source) {
                var state = {
                  hoistDeclarators: hoistDeclarators,
                  source: source,
                  nodes: []
                };
                scope.traverse(block, runnerSettersVisitor, state);
                return t.functionExpression(null, [uid], t.blockStatement(state.nodes));
              }));
            };
            SystemFormatter.prototype._canHoist = function _canHoist(node) {
              return node._blockHoist && !this.file.dynamicImports.length;
            };
            SystemFormatter.prototype.transform = function transform(program) {
              _default2["default"].prototype.transform.apply(this, arguments);
              var hoistDeclarators = [];
              var moduleName = this.getModuleName();
              var moduleNameLiteral = t.literal(moduleName);
              var block = t.blockStatement(program.body);
              var setterListNode = this._buildRunnerSetters(block, hoistDeclarators);
              this._setters = setterListNode;
              var runner = util.template("system", {
                MODULE_DEPENDENCIES: t.arrayExpression(this.buildDependencyLiterals()),
                EXPORT_IDENTIFIER: this.exportIdentifier,
                MODULE_NAME: moduleNameLiteral,
                SETTERS: setterListNode,
                EXECUTE: t.functionExpression(null, [], block)
              }, true);
              var handlerBody = runner.expression.arguments[2].body.body;
              if (!moduleName)
                runner.expression.arguments.shift();
              var returnStatement = handlerBody.pop();
              this.file.scope.traverse(block, hoistVariablesVisitor, {
                formatter: this,
                hoistDeclarators: hoistDeclarators
              });
              if (hoistDeclarators.length) {
                var hoistDeclar = t.variableDeclaration("var", hoistDeclarators);
                hoistDeclar._blockHoist = true;
                handlerBody.unshift(hoistDeclar);
              }
              this.file.scope.traverse(block, hoistFunctionsVisitor, {
                formatter: this,
                handlerBody: handlerBody
              });
              handlerBody.push(returnStatement);
              program.body = [runner];
            };
            return SystemFormatter;
          })(_amd2["default"]);
          exports["default"] = SystemFormatter;
          module.exports = exports["default"];
        }, {
          "179": 179,
          "182": 182,
          "440": 440,
          "447": 447,
          "67": 67,
          "70": 70
        }],
        78: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {"default": obj};
          }
          var _umd = _dereq_(79);
          var _umd2 = _interopRequireDefault(_umd);
          var _strict = _dereq_(68);
          var _strict2 = _interopRequireDefault(_strict);
          exports["default"] = _strict2["default"](_umd2["default"]);
          module.exports = exports["default"];
        }, {
          "68": 68,
          "79": 79
        }],
        79: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {"default": obj};
          }
          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }
          function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
              throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
              }});
            if (superClass)
              Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
          }
          var _default = _dereq_(67);
          var _default2 = _interopRequireDefault(_default);
          var _amd = _dereq_(70);
          var _amd2 = _interopRequireDefault(_amd);
          var _lodashObjectValues = _dereq_(550);
          var _lodashObjectValues2 = _interopRequireDefault(_lodashObjectValues);
          var _path = _dereq_(9);
          var _path2 = _interopRequireDefault(_path);
          var _util = _dereq_(182);
          var util = _interopRequireWildcard(_util);
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          var UMDFormatter = (function(_AMDFormatter) {
            _inherits(UMDFormatter, _AMDFormatter);
            function UMDFormatter() {
              _classCallCheck(this, UMDFormatter);
              _AMDFormatter.apply(this, arguments);
            }
            UMDFormatter.prototype.transform = function transform(program) {
              _default2["default"].prototype.transform.apply(this, arguments);
              var body = program.body;
              var names = [];
              for (var _name in this.ids) {
                names.push(t.literal(_name));
              }
              var ids = _lodashObjectValues2["default"](this.ids);
              var args = [t.identifier("exports")];
              if (this.passModuleArg)
                args.push(t.identifier("module"));
              args = args.concat(ids);
              var factory = t.functionExpression(null, args, t.blockStatement(body));
              var defineArgs = [t.literal("exports")];
              if (this.passModuleArg)
                defineArgs.push(t.literal("module"));
              defineArgs = defineArgs.concat(names);
              defineArgs = [t.arrayExpression(defineArgs)];
              var testExports = util.template("test-exports");
              var testModule = util.template("test-module");
              var commonTests = this.passModuleArg ? t.logicalExpression("&&", testExports, testModule) : testExports;
              var commonArgs = [t.identifier("exports")];
              if (this.passModuleArg)
                commonArgs.push(t.identifier("module"));
              commonArgs = commonArgs.concat(names.map(function(name) {
                return t.callExpression(t.identifier("require"), [name]);
              }));
              var browserArgs = [];
              if (this.passModuleArg)
                browserArgs.push(t.identifier("mod"));
              for (var _name2 in this.ids) {
                var id = this.defaultIds[_name2] || t.identifier(t.toIdentifier(_path2["default"].basename(_name2, _path2["default"].extname(_name2))));
                browserArgs.push(t.memberExpression(t.identifier("global"), id));
              }
              var moduleName = this.getModuleName();
              if (moduleName)
                defineArgs.unshift(t.literal(moduleName));
              var globalArg = this.file.opts.basename;
              if (moduleName)
                globalArg = moduleName;
              globalArg = t.identifier(t.toIdentifier(globalArg));
              var runner = util.template("umd-runner-body", {
                AMD_ARGUMENTS: defineArgs,
                COMMON_TEST: commonTests,
                COMMON_ARGUMENTS: commonArgs,
                BROWSER_ARGUMENTS: browserArgs,
                GLOBAL_ARG: globalArg
              });
              program.body = [t.expressionStatement(t.callExpression(runner, [t.thisExpression(), factory]))];
            };
            return UMDFormatter;
          })(_amd2["default"]);
          exports["default"] = UMDFormatter;
          module.exports = exports["default"];
        }, {
          "179": 179,
          "182": 182,
          "550": 550,
          "67": 67,
          "70": 70,
          "9": 9
        }],
        80: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {"default": obj};
          }
          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }
          var _filePluginManager = _dereq_(52);
          var _filePluginManager2 = _interopRequireDefault(_filePluginManager);
          var _helpersNormalizeAst = _dereq_(40);
          var _helpersNormalizeAst2 = _interopRequireDefault(_helpersNormalizeAst);
          var _plugin = _dereq_(82);
          var _plugin2 = _interopRequireDefault(_plugin);
          var _lodashObjectAssign = _dereq_(542);
          var _lodashObjectAssign2 = _interopRequireDefault(_lodashObjectAssign);
          var _helpersObject = _dereq_(41);
          var _helpersObject2 = _interopRequireDefault(_helpersObject);
          var _file = _dereq_(46);
          var _file2 = _interopRequireDefault(_file);
          var Pipeline = (function() {
            function Pipeline() {
              _classCallCheck(this, Pipeline);
              this.transformers = _helpersObject2["default"]();
              this.namespaces = _helpersObject2["default"]();
              this.deprecated = _helpersObject2["default"]();
              this.aliases = _helpersObject2["default"]();
              this.filters = [];
            }
            Pipeline.prototype.addTransformers = function addTransformers(transformers) {
              for (var key in transformers) {
                this.addTransformer(key, transformers[key]);
              }
              return this;
            };
            Pipeline.prototype.addTransformer = function addTransformer(key, plugin) {
              if (this.transformers[key])
                throw new Error();
              var namespace = key.split(".")[0];
              this.namespaces[namespace] = this.namespaces[namespace] || [];
              this.namespaces[namespace].push(key);
              this.namespaces[key] = namespace;
              if (typeof plugin === "function") {
                plugin = _filePluginManager2["default"].memoisePluginContainer(plugin);
                plugin.key = key;
                plugin.metadata.optional = true;
                if (key === "react.displayName") {
                  plugin.metadata.optional = false;
                }
              } else {
                plugin = new _plugin2["default"](key, plugin);
              }
              this.transformers[key] = plugin;
            };
            Pipeline.prototype.addAliases = function addAliases(names) {
              _lodashObjectAssign2["default"](this.aliases, names);
              return this;
            };
            Pipeline.prototype.addDeprecated = function addDeprecated(names) {
              _lodashObjectAssign2["default"](this.deprecated, names);
              return this;
            };
            Pipeline.prototype.addFilter = function addFilter(filter) {
              this.filters.push(filter);
              return this;
            };
            Pipeline.prototype.canTransform = function canTransform(plugin, fileOpts) {
              if (plugin.metadata.plugin) {
                return true;
              }
              var _arr = this.filters;
              for (var _i = 0; _i < _arr.length; _i++) {
                var filter = _arr[_i];
                var result = filter(plugin, fileOpts);
                if (result != null)
                  return result;
              }
              return true;
            };
            Pipeline.prototype.analyze = function analyze(code) {
              var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
              opts.code = false;
              return this.transform(code, opts);
            };
            Pipeline.prototype.pretransform = function pretransform(code, opts) {
              var file = new _file2["default"](opts, this);
              return file.wrap(code, function() {
                file.addCode(code);
                file.parseCode(code);
                return file;
              });
            };
            Pipeline.prototype.transform = function transform(code, opts) {
              var file = new _file2["default"](opts, this);
              return file.wrap(code, function() {
                file.addCode(code);
                file.parseCode(code);
                return file.transform();
              });
            };
            Pipeline.prototype.transformFromAst = function transformFromAst(ast, code, opts) {
              ast = _helpersNormalizeAst2["default"](ast);
              var file = new _file2["default"](opts, this);
              return file.wrap(code, function() {
                file.addCode(code);
                file.addAst(ast);
                return file.transform();
              });
            };
            Pipeline.prototype._ensureTransformerNames = function _ensureTransformerNames(type, rawKeys) {
              var keys = [];
              for (var i = 0; i < rawKeys.length; i++) {
                var key = rawKeys[i];
                var deprecatedKey = this.deprecated[key];
                var aliasKey = this.aliases[key];
                if (aliasKey) {
                  keys.push(aliasKey);
                } else if (deprecatedKey) {
                  console.error("[BABEL] The transformer " + key + " has been renamed to " + deprecatedKey);
                  rawKeys.push(deprecatedKey);
                } else if (this.transformers[key]) {
                  keys.push(key);
                } else if (this.namespaces[key]) {
                  keys = keys.concat(this.namespaces[key]);
                } else {
                  throw new ReferenceError("Unknown transformer " + key + " specified in " + type);
                }
              }
              return keys;
            };
            return Pipeline;
          })();
          exports["default"] = Pipeline;
          module.exports = exports["default"];
        }, {
          "40": 40,
          "41": 41,
          "46": 46,
          "52": 52,
          "542": 542,
          "82": 82
        }],
        81: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {"default": obj};
          }
          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }
          var _traversal = _dereq_(148);
          var _traversal2 = _interopRequireDefault(_traversal);
          var PluginPass = (function() {
            function PluginPass(file, plugin) {
              _classCallCheck(this, PluginPass);
              this.plugin = plugin;
              this.file = file;
              this.key = plugin.key;
              if (this.canTransform() && plugin.metadata.experimental && !file.opts.experimental) {
                file.log.warn("THE TRANSFORMER " + this.key + " HAS BEEN MARKED AS EXPERIMENTAL AND IS WIP. USE AT YOUR OWN RISK. " + "THIS WILL HIGHLY LIKELY BREAK YOUR CODE SO USE WITH **EXTREME** CAUTION. ENABLE THE " + "`experimental` OPTION TO IGNORE THIS WARNING.");
              }
            }
            PluginPass.prototype.canTransform = function canTransform() {
              return this.file.transformerDependencies[this.key] || this.file.pipeline.canTransform(this.plugin, this.file.opts);
            };
            PluginPass.prototype.transform = function transform() {
              var file = this.file;
              file.log.debug("Start transformer " + this.key);
              _traversal2["default"](file.ast, this.plugin.visitor, file.scope, file);
              file.log.debug("Finish transformer " + this.key);
            };
            return PluginPass;
          })();
          exports["default"] = PluginPass;
          module.exports = exports["default"];
        }, {"148": 148}],
        82: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {"default": obj};
          }
          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }
          var _pluginPass = _dereq_(81);
          var _pluginPass2 = _interopRequireDefault(_pluginPass);
          var _messages = _dereq_(43);
          var messages = _interopRequireWildcard(_messages);
          var _traversal = _dereq_(148);
          var _traversal2 = _interopRequireDefault(_traversal);
          var _lodashObjectAssign = _dereq_(542);
          var _lodashObjectAssign2 = _interopRequireDefault(_lodashObjectAssign);
          var _lodashLangClone = _dereq_(527);
          var _lodashLangClone2 = _interopRequireDefault(_lodashLangClone);
          var _file = _dereq_(46);
          var _file2 = _interopRequireDefault(_file);
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          var VALID_PLUGIN_PROPERTIES = ["visitor", "metadata", "manipulateOptions", "post", "pre"];
          var VALID_METADATA_PROPERTIES = ["dependencies", "optional", "stage", "group", "experimental", "secondPass"];
          var Plugin = (function() {
            function Plugin(key, plugin) {
              _classCallCheck(this, Plugin);
              Plugin.validate(key, plugin);
              plugin = _lodashObjectAssign2["default"]({}, plugin);
              var take = function take(key) {
                var val = plugin[key];
                delete plugin[key];
                return val;
              };
              this.manipulateOptions = take("manipulateOptions");
              this.metadata = take("metadata") || {};
              this.dependencies = this.metadata.dependencies || [];
              this.post = take("post");
              this.pre = take("pre");
              if (this.metadata.stage != null) {
                this.metadata.optional = true;
              }
              this.visitor = this.normalize(_lodashLangClone2["default"](take("visitor")) || {});
              this.key = key;
            }
            Plugin.validate = function validate(name, plugin) {
              for (var key in plugin) {
                if (key[0] === "_")
                  continue;
                if (VALID_PLUGIN_PROPERTIES.indexOf(key) >= 0)
                  continue;
                var msgType = "pluginInvalidProperty";
                if (t.TYPES.indexOf(key) >= 0)
                  msgType = "pluginInvalidPropertyVisitor";
                throw new Error(messages.get(msgType, name, key));
              }
              for (var key in plugin.metadata) {
                if (VALID_METADATA_PROPERTIES.indexOf(key) >= 0)
                  continue;
                throw new Error(messages.get("pluginInvalidProperty", name, "metadata." + key));
              }
            };
            Plugin.prototype.normalize = function normalize(visitor) {
              _traversal2["default"].explode(visitor);
              return visitor;
            };
            Plugin.prototype.buildPass = function buildPass(file) {
              if (!(file instanceof _file2["default"])) {
                throw new TypeError(messages.get("pluginNotFile", this.key));
              }
              return new _pluginPass2["default"](file, this);
            };
            return Plugin;
          })();
          exports["default"] = Plugin;
          module.exports = exports["default"];
        }, {
          "148": 148,
          "179": 179,
          "43": 43,
          "46": 46,
          "527": 527,
          "542": 542,
          "81": 81
        }],
        83: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {"default": obj};
          }
          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }
          var _plugin = _dereq_(82);
          var _plugin2 = _interopRequireDefault(_plugin);
          var Transformer = function Transformer(key, obj) {
            _classCallCheck(this, Transformer);
            var plugin = {};
            plugin.metadata = obj.metadata;
            delete obj.metadata;
            plugin.visitor = obj;
            return new _plugin2["default"](key, plugin);
          };
          exports["default"] = Transformer;
          module.exports = exports["default"];
        }, {"82": 82}],
        84: [function(_dereq_, module, exports) {
          module.exports = {
            "useStrict": "strict",
            "es5.runtime": "runtime",
            "es6.runtime": "runtime",
            "minification.inlineExpressions": "minification.constantFolding"
          };
        }, {}],
        85: [function(_dereq_, module, exports) {
          module.exports = {
            "selfContained": "runtime",
            "unicode-regex": "regex.unicode",
            "spec.typeofSymbol": "es6.spec.symbols",
            "es6.symbols": "es6.spec.symbols",
            "es6.blockScopingTDZ": "es6.spec.blockScoping",
            "utility.inlineExpressions": "minification.constantFolding",
            "utility.deadCodeElimination": "minification.deadCodeElimination",
            "utility.removeConsoleCalls": "minification.removeConsole",
            "utility.removeDebugger": "minification.removeDebugger",
            "es6.parameters.rest": "es6.parameters",
            "es6.parameters.default": "es6.parameters"
          };
        }, {}],
        86: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          var metadata = {group: "builtin-trailing"};
          exports.metadata = metadata;
          var visitor = {MemberExpression: {exit: function exit(node) {
                var prop = node.property;
                if (!node.computed && t.isIdentifier(prop) && !t.isValidIdentifier(prop.name)) {
                  node.property = t.literal(prop.name);
                  node.computed = true;
                }
              }}};
          exports.visitor = visitor;
        }, {"179": 179}],
        87: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          var metadata = {group: "builtin-trailing"};
          exports.metadata = metadata;
          var visitor = {Property: {exit: function exit(node) {
                var key = node.key;
                if (!node.computed && t.isIdentifier(key) && !t.isValidIdentifier(key.name)) {
                  node.key = t.literal(key.name);
                }
              }}};
          exports.visitor = visitor;
        }, {"179": 179}],
        88: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          var _helpersDefineMap = _dereq_(57);
          var defineMap = _interopRequireWildcard(_helpersDefineMap);
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          var visitor = {ObjectExpression: function ObjectExpression(node, parent, scope, file) {
              var hasAny = false;
              var _arr = node.properties;
              for (var _i = 0; _i < _arr.length; _i++) {
                var prop = _arr[_i];
                if (prop.kind === "get" || prop.kind === "set") {
                  hasAny = true;
                  break;
                }
              }
              if (!hasAny)
                return;
              var mutatorMap = {};
              node.properties = node.properties.filter(function(prop) {
                if (prop.kind === "get" || prop.kind === "set") {
                  defineMap.push(mutatorMap, prop, prop.kind, file);
                  return false;
                } else {
                  return true;
                }
              });
              return t.callExpression(t.memberExpression(t.identifier("Object"), t.identifier("defineProperties")), [node, defineMap.toDefineObject(mutatorMap)]);
            }};
          exports.visitor = visitor;
        }, {
          "179": 179,
          "57": 57
        }],
        89: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          var visitor = {ArrowFunctionExpression: function ArrowFunctionExpression(node) {
              this.ensureBlock();
              node.expression = false;
              node.type = "FunctionExpression";
              node.shadow = node.shadow || true;
            }};
          exports.visitor = visitor;
        }, {}],
        90: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {"default": obj};
          }
          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }
          var _traversal = _dereq_(148);
          var _traversal2 = _interopRequireDefault(_traversal);
          var _helpersObject = _dereq_(41);
          var _helpersObject2 = _interopRequireDefault(_helpersObject);
          var _util = _dereq_(182);
          var util = _interopRequireWildcard(_util);
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          var _lodashObjectValues = _dereq_(550);
          var _lodashObjectValues2 = _interopRequireDefault(_lodashObjectValues);
          var _lodashObjectExtend = _dereq_(544);
          var _lodashObjectExtend2 = _interopRequireDefault(_lodashObjectExtend);
          function isLet(node, parent) {
            if (!t.isVariableDeclaration(node))
              return false;
            if (node._let)
              return true;
            if (node.kind !== "let")
              return false;
            if (isLetInitable(node, parent)) {
              for (var i = 0; i < node.declarations.length; i++) {
                var declar = node.declarations[i];
                declar.init = declar.init || t.identifier("undefined");
              }
            }
            node._let = true;
            node.kind = "var";
            return true;
          }
          function isLetInitable(node, parent) {
            return !t.isFor(parent) || !t.isFor(parent, {left: node});
          }
          function isVar(node, parent) {
            return t.isVariableDeclaration(node, {kind: "var"}) && !isLet(node, parent);
          }
          function standardizeLets(declars) {
            var _arr = declars;
            for (var _i = 0; _i < _arr.length; _i++) {
              var declar = _arr[_i];
              delete declar._let;
            }
          }
          var metadata = {group: "builtin-advanced"};
          exports.metadata = metadata;
          var visitor = {
            VariableDeclaration: function VariableDeclaration(node, parent, scope, file) {
              if (!isLet(node, parent))
                return;
              if (isLetInitable(node) && file.transformers["es6.spec.blockScoping"].canTransform()) {
                var nodes = [node];
                for (var i = 0; i < node.declarations.length; i++) {
                  var decl = node.declarations[i];
                  if (decl.init) {
                    var assign = t.assignmentExpression("=", decl.id, decl.init);
                    assign._ignoreBlockScopingTDZ = true;
                    nodes.push(t.expressionStatement(assign));
                  }
                  decl.init = file.addHelper("temporal-undefined");
                }
                node._blockHoist = 2;
                return nodes;
              }
            },
            Loop: function Loop(node, parent, scope, file) {
              var init = node.left || node.init;
              if (isLet(init, node)) {
                t.ensureBlock(node);
                node.body._letDeclarators = [init];
              }
              var blockScoping = new BlockScoping(this, this.get("body"), parent, scope, file);
              return blockScoping.run();
            },
            "BlockStatement|Program": function BlockStatementProgram(block, parent, scope, file) {
              if (!t.isLoop(parent)) {
                var blockScoping = new BlockScoping(null, this, parent, scope, file);
                blockScoping.run();
              }
            }
          };
          exports.visitor = visitor;
          function replace(node, parent, scope, remaps) {
            var remap = remaps[node.name];
            if (!remap)
              return;
            var ownBinding = scope.getBindingIdentifier(node.name);
            if (ownBinding === remap.binding) {
              node.name = remap.uid;
            } else {
              if (this)
                this.skip();
            }
          }
          var replaceVisitor = {
            ReferencedIdentifier: replace,
            AssignmentExpression: function AssignmentExpression(node, parent, scope, remaps) {
              var ids = this.getBindingIdentifiers();
              for (var name in ids) {
                replace(ids[name], node, scope, remaps);
              }
            }
          };
          function traverseReplace(node, parent, scope, remaps) {
            if (t.isIdentifier(node)) {
              replace(node, parent, scope, remaps);
            }
            if (t.isAssignmentExpression(node)) {
              var ids = t.getBindingIdentifiers(node);
              for (var name in ids) {
                replace(ids[name], parent, scope, remaps);
              }
            }
            scope.traverse(node, replaceVisitor, remaps);
          }
          var letReferenceBlockVisitor = {Function: function Function(node, parent, scope, state) {
              this.traverse(letReferenceFunctionVisitor, state);
              return this.skip();
            }};
          var letReferenceFunctionVisitor = {ReferencedIdentifier: function ReferencedIdentifier(node, parent, scope, state) {
              var ref = state.letReferences[node.name];
              if (!ref)
                return;
              var localBinding = scope.getBindingIdentifier(node.name);
              if (localBinding && localBinding !== ref)
                return;
              state.closurify = true;
            }};
          var hoistVarDeclarationsVisitor = {enter: function enter(node, parent, scope, self) {
              if (this.isForStatement()) {
                if (isVar(node.init, node)) {
                  var nodes = self.pushDeclar(node.init);
                  if (nodes.length === 1) {
                    node.init = nodes[0];
                  } else {
                    node.init = t.sequenceExpression(nodes);
                  }
                }
              } else if (this.isFor()) {
                if (isVar(node.left, node)) {
                  self.pushDeclar(node.left);
                  node.left = node.left.declarations[0].id;
                }
              } else if (isVar(node, parent)) {
                return self.pushDeclar(node).map(t.expressionStatement);
              } else if (this.isFunction()) {
                return this.skip();
              }
            }};
          var loopLabelVisitor = {LabeledStatement: function LabeledStatement(node, parent, scope, state) {
              state.innerLabels.push(node.label.name);
            }};
          var continuationVisitor = {enter: function enter(node, parent, scope, state) {
              if (this.isAssignmentExpression() || this.isUpdateExpression()) {
                var bindings = this.getBindingIdentifiers();
                for (var name in bindings) {
                  if (state.outsideReferences[name] !== scope.getBindingIdentifier(name))
                    continue;
                  state.reassignments[name] = true;
                }
              }
            }};
          var loopNodeTo = function loopNodeTo(node) {
            if (t.isBreakStatement(node)) {
              return "break";
            } else if (t.isContinueStatement(node)) {
              return "continue";
            }
          };
          var loopVisitor = {
            Loop: function Loop(node, parent, scope, state) {
              var oldIgnoreLabeless = state.ignoreLabeless;
              state.ignoreLabeless = true;
              this.traverse(loopVisitor, state);
              state.ignoreLabeless = oldIgnoreLabeless;
              this.skip();
            },
            Function: function Function() {
              this.skip();
            },
            SwitchCase: function SwitchCase(node, parent, scope, state) {
              var oldInSwitchCase = state.inSwitchCase;
              state.inSwitchCase = true;
              this.traverse(loopVisitor, state);
              state.inSwitchCase = oldInSwitchCase;
              this.skip();
            },
            enter: function enter(node, parent, scope, state) {
              var replace;
              var loopText = loopNodeTo(node);
              if (loopText) {
                if (node.label) {
                  if (state.innerLabels.indexOf(node.label.name) >= 0) {
                    return;
                  }
                  loopText = loopText + "|" + node.label.name;
                } else {
                  if (state.ignoreLabeless)
                    return;
                  if (state.inSwitchCase)
                    return;
                  if (t.isBreakStatement(node) && t.isSwitchCase(parent))
                    return;
                }
                state.hasBreakContinue = true;
                state.map[loopText] = node;
                replace = t.literal(loopText);
              }
              if (this.isReturnStatement()) {
                state.hasReturn = true;
                replace = t.objectExpression([t.property("init", t.identifier("v"), node.argument || t.identifier("undefined"))]);
              }
              if (replace) {
                replace = t.returnStatement(replace);
                this.skip();
                return t.inherits(replace, node);
              }
            }
          };
          var BlockScoping = (function() {
            function BlockScoping(loopPath, blockPath, parent, scope, file) {
              _classCallCheck(this, BlockScoping);
              this.parent = parent;
              this.scope = scope;
              this.file = file;
              this.blockPath = blockPath;
              this.block = blockPath.node;
              this.outsideLetReferences = _helpersObject2["default"]();
              this.hasLetReferences = false;
              this.letReferences = this.block._letReferences = _helpersObject2["default"]();
              this.body = [];
              if (loopPath) {
                this.loopParent = loopPath.parent;
                this.loopLabel = t.isLabeledStatement(this.loopParent) && this.loopParent.label;
                this.loopPath = loopPath;
                this.loop = loopPath.node;
              }
            }
            BlockScoping.prototype.run = function run() {
              var block = this.block;
              if (block._letDone)
                return;
              block._letDone = true;
              var needsClosure = this.getLetReferences();
              if (t.isFunction(this.parent) || t.isProgram(this.block))
                return;
              if (!this.hasLetReferences)
                return;
              if (needsClosure) {
                this.wrapClosure();
              } else {
                this.remap();
              }
              if (this.loopLabel && !t.isLabeledStatement(this.loopParent)) {
                return t.labeledStatement(this.loopLabel, this.loop);
              }
            };
            BlockScoping.prototype.remap = function remap() {
              var hasRemaps = false;
              var letRefs = this.letReferences;
              var scope = this.scope;
              var remaps = _helpersObject2["default"]();
              for (var key in letRefs) {
                var ref = letRefs[key];
                if (scope.parentHasBinding(key) || scope.hasGlobal(key)) {
                  var uid = scope.generateUidIdentifier(ref.name).name;
                  ref.name = uid;
                  hasRemaps = true;
                  remaps[key] = remaps[uid] = {
                    binding: ref,
                    uid: uid
                  };
                }
              }
              if (!hasRemaps)
                return;
              var loop = this.loop;
              if (loop) {
                traverseReplace(loop.right, loop, scope, remaps);
                traverseReplace(loop.test, loop, scope, remaps);
                traverseReplace(loop.update, loop, scope, remaps);
              }
              this.blockPath.traverse(replaceVisitor, remaps);
            };
            BlockScoping.prototype.wrapClosure = function wrapClosure() {
              var block = this.block;
              var outsideRefs = this.outsideLetReferences;
              if (this.loop) {
                for (var name in outsideRefs) {
                  var id = outsideRefs[name];
                  if (this.scope.hasGlobal(id.name) || this.scope.parentHasBinding(id.name)) {
                    delete outsideRefs[id.name];
                    delete this.letReferences[id.name];
                    this.scope.rename(id.name);
                    this.letReferences[id.name] = id;
                    outsideRefs[id.name] = id;
                  }
                }
              }
              this.has = this.checkLoop();
              this.hoistVarDeclarations();
              var params = _lodashObjectValues2["default"](outsideRefs);
              var args = _lodashObjectValues2["default"](outsideRefs);
              var fn = t.functionExpression(null, params, t.blockStatement(block.body));
              fn.shadow = true;
              this.addContinuations(fn);
              block.body = this.body;
              var ref = fn;
              if (this.loop) {
                ref = this.scope.generateUidIdentifier("loop");
                this.loopPath.insertBefore(t.variableDeclaration("var", [t.variableDeclarator(ref, fn)]));
              }
              var call = t.callExpression(ref, args);
              var ret = this.scope.generateUidIdentifier("ret");
              var hasYield = _traversal2["default"].hasType(fn.body, this.scope, "YieldExpression", t.FUNCTION_TYPES);
              if (hasYield) {
                fn.generator = true;
                call = t.yieldExpression(call, true);
              }
              var hasAsync = _traversal2["default"].hasType(fn.body, this.scope, "AwaitExpression", t.FUNCTION_TYPES);
              if (hasAsync) {
                fn.async = true;
                call = t.awaitExpression(call);
              }
              this.buildClosure(ret, call);
            };
            BlockScoping.prototype.buildClosure = function buildClosure(ret, call) {
              var has = this.has;
              if (has.hasReturn || has.hasBreakContinue) {
                this.buildHas(ret, call);
              } else {
                this.body.push(t.expressionStatement(call));
              }
            };
            BlockScoping.prototype.addContinuations = function addContinuations(fn) {
              var state = {
                reassignments: {},
                outsideReferences: this.outsideLetReferences
              };
              this.scope.traverse(fn, continuationVisitor, state);
              for (var i = 0; i < fn.params.length; i++) {
                var param = fn.params[i];
                if (!state.reassignments[param.name])
                  continue;
                var newParam = this.scope.generateUidIdentifier(param.name);
                fn.params[i] = newParam;
                this.scope.rename(param.name, newParam.name, fn);
                fn.body.body.push(t.expressionStatement(t.assignmentExpression("=", param, newParam)));
              }
            };
            BlockScoping.prototype.getLetReferences = function getLetReferences() {
              var block = this.block;
              var declarators = block._letDeclarators || [];
              for (var i = 0; i < declarators.length; i++) {
                var declar = declarators[i];
                _lodashObjectExtend2["default"](this.outsideLetReferences, t.getBindingIdentifiers(declar));
              }
              if (block.body) {
                for (var i = 0; i < block.body.length; i++) {
                  var declar = block.body[i];
                  if (isLet(declar, block)) {
                    declarators = declarators.concat(declar.declarations);
                  }
                }
              }
              for (var i = 0; i < declarators.length; i++) {
                var declar = declarators[i];
                var keys = t.getBindingIdentifiers(declar);
                _lodashObjectExtend2["default"](this.letReferences, keys);
                this.hasLetReferences = true;
              }
              if (!this.hasLetReferences)
                return;
              standardizeLets(declarators);
              var state = {
                letReferences: this.letReferences,
                closurify: false
              };
              this.blockPath.traverse(letReferenceBlockVisitor, state);
              return state.closurify;
            };
            BlockScoping.prototype.checkLoop = function checkLoop() {
              var state = {
                hasBreakContinue: false,
                ignoreLabeless: false,
                inSwitchCase: false,
                innerLabels: [],
                hasReturn: false,
                isLoop: !!this.loop,
                map: {}
              };
              this.blockPath.traverse(loopLabelVisitor, state);
              this.blockPath.traverse(loopVisitor, state);
              return state;
            };
            BlockScoping.prototype.hoistVarDeclarations = function hoistVarDeclarations() {
              this.blockPath.traverse(hoistVarDeclarationsVisitor, this);
            };
            BlockScoping.prototype.pushDeclar = function pushDeclar(node) {
              var declars = [];
              var names = t.getBindingIdentifiers(node);
              for (var name in names) {
                declars.push(t.variableDeclarator(names[name]));
              }
              this.body.push(t.variableDeclaration(node.kind, declars));
              var replace = [];
              for (var i = 0; i < node.declarations.length; i++) {
                var declar = node.declarations[i];
                if (!declar.init)
                  continue;
                var expr = t.assignmentExpression("=", declar.id, declar.init);
                replace.push(t.inherits(expr, declar));
              }
              return replace;
            };
            BlockScoping.prototype.buildHas = function buildHas(ret, call) {
              var body = this.body;
              body.push(t.variableDeclaration("var", [t.variableDeclarator(ret, call)]));
              var retCheck;
              var has = this.has;
              var cases = [];
              if (has.hasReturn) {
                retCheck = util.template("let-scoping-return", {RETURN: ret});
              }
              if (has.hasBreakContinue) {
                for (var key in has.map) {
                  cases.push(t.switchCase(t.literal(key), [has.map[key]]));
                }
                if (has.hasReturn) {
                  cases.push(t.switchCase(null, [retCheck]));
                }
                if (cases.length === 1) {
                  var single = cases[0];
                  body.push(this.file.attachAuxiliaryComment(t.ifStatement(t.binaryExpression("===", ret, single.test), single.consequent[0])));
                } else {
                  for (var i = 0; i < cases.length; i++) {
                    var caseConsequent = cases[i].consequent[0];
                    if (t.isBreakStatement(caseConsequent) && !caseConsequent.label) {
                      caseConsequent.label = this.loopLabel = this.loopLabel || this.file.scope.generateUidIdentifier("loop");
                    }
                  }
                  body.push(this.file.attachAuxiliaryComment(t.switchStatement(ret, cases)));
                }
              } else {
                if (has.hasReturn) {
                  body.push(this.file.attachAuxiliaryComment(retCheck));
                }
              }
            };
            return BlockScoping;
          })();
        }, {
          "148": 148,
          "179": 179,
          "182": 182,
          "41": 41,
          "544": 544,
          "550": 550
        }],
        91: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {"default": obj};
          }
          var _loose = _dereq_(92);
          var _loose2 = _interopRequireDefault(_loose);
          var _vanilla = _dereq_(93);
          var _vanilla2 = _interopRequireDefault(_vanilla);
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          var _helpersNameMethod = _dereq_(61);
          var visitor = {
            ClassDeclaration: function ClassDeclaration(node) {
              return t.variableDeclaration("let", [t.variableDeclarator(node.id, t.toExpression(node))]);
            },
            ClassExpression: function ClassExpression(node, parent, scope, file) {
              var inferred = _helpersNameMethod.bare(node, parent, scope);
              if (inferred)
                return inferred;
              if (file.isLoose("es6.classes")) {
                return new _loose2["default"](this, file).run();
              } else {
                return new _vanilla2["default"](this, file).run();
              }
            }
          };
          exports.visitor = visitor;
        }, {
          "179": 179,
          "61": 61,
          "92": 92,
          "93": 93
        }],
        92: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {"default": obj};
          }
          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }
          function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
              throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
              }});
            if (superClass)
              Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
          }
          var _vanilla = _dereq_(93);
          var _vanilla2 = _interopRequireDefault(_vanilla);
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          var LooseClassTransformer = (function(_VanillaTransformer) {
            _inherits(LooseClassTransformer, _VanillaTransformer);
            function LooseClassTransformer() {
              _classCallCheck(this, LooseClassTransformer);
              _VanillaTransformer.apply(this, arguments);
              this.isLoose = true;
            }
            LooseClassTransformer.prototype._processMethod = function _processMethod(node) {
              if (!node.decorators) {
                var classRef = this.classRef;
                if (!node["static"])
                  classRef = t.memberExpression(classRef, t.identifier("prototype"));
                var methodName = t.memberExpression(classRef, node.key, node.computed || t.isLiteral(node.key));
                var expr = t.expressionStatement(t.assignmentExpression("=", methodName, node.value));
                t.inheritsComments(expr, node);
                this.body.push(expr);
                return true;
              }
            };
            return LooseClassTransformer;
          })(_vanilla2["default"]);
          exports["default"] = LooseClassTransformer;
          module.exports = exports["default"];
        }, {
          "179": 179,
          "93": 93
        }],
        93: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {"default": obj};
          }
          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }
          var _helpersMemoiseDecorators = _dereq_(60);
          var _helpersMemoiseDecorators2 = _interopRequireDefault(_helpersMemoiseDecorators);
          var _helpersReplaceSupers = _dereq_(65);
          var _helpersReplaceSupers2 = _interopRequireDefault(_helpersReplaceSupers);
          var _helpersNameMethod = _dereq_(61);
          var nameMethod = _interopRequireWildcard(_helpersNameMethod);
          var _helpersDefineMap = _dereq_(57);
          var defineMap = _interopRequireWildcard(_helpersDefineMap);
          var _messages = _dereq_(43);
          var messages = _interopRequireWildcard(_messages);
          var _util = _dereq_(182);
          var util = _interopRequireWildcard(_util);
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          var PROPERTY_COLLISION_METHOD_NAME = "__initializeProperties";
          var collectPropertyReferencesVisitor = {Identifier: {enter: function enter(node, parent, scope, state) {
                if (this.parentPath.isClassProperty({key: node})) {
                  return;
                }
                if (this.isReferenced() && scope.getBinding(node.name) === state.scope.getBinding(node.name)) {
                  state.references[node.name] = true;
                }
              }}};
          var verifyConstructorVisitor = {
            MethodDefinition: function MethodDefinition() {
              this.skip();
            },
            Property: function Property(node) {
              if (node.method)
                this.skip();
            },
            CallExpression: {exit: function exit(node, parent, scope, state) {
                if (this.get("callee").isSuper()) {
                  state.hasBareSuper = true;
                  state.bareSuper = this;
                  if (!state.isDerived) {
                    throw this.errorWithNode("super call is only allowed in derived constructor");
                  }
                }
              }},
            "FunctionDeclaration|FunctionExpression": function FunctionDeclarationFunctionExpression() {
              this.skip();
            },
            ThisExpression: function ThisExpression(node, parent, scope, state) {
              if (state.isDerived && !state.hasBareSuper) {
                if (this.inShadow()) {
                  var thisAlias = state.constructorPath.getData("this");
                  if (!thisAlias) {
                    thisAlias = state.constructorPath.setData("this", state.constructorPath.scope.generateUidIdentifier("this"));
                  }
                  return thisAlias;
                } else {
                  throw this.errorWithNode("'this' is not allowed before super()");
                }
              }
            },
            Super: function Super(node, parent, scope, state) {
              if (state.isDerived && !state.hasBareSuper && !this.parentPath.isCallExpression({callee: node})) {
                throw this.errorWithNode("'super.*' is not allowed before super()");
              }
            }
          };
          var ClassTransformer = (function() {
            function ClassTransformer(path, file) {
              _classCallCheck(this, ClassTransformer);
              this.parent = path.parent;
              this.scope = path.scope;
              this.node = path.node;
              this.path = path;
              this.file = file;
              this.clearDescriptors();
              this.instancePropBody = [];
              this.instancePropRefs = {};
              this.staticPropBody = [];
              this.body = [];
              this.pushedConstructor = false;
              this.pushedInherits = false;
              this.hasDecorators = false;
              this.isLoose = false;
              this.classId = this.node.id;
              this.classRef = this.node.id || this.scope.generateUidIdentifier("class");
              this.directRef = null;
              this.superName = this.node.superClass || t.identifier("Function");
              this.isDerived = !!this.node.superClass;
            }
            ClassTransformer.prototype.run = function run() {
              var superName = this.superName;
              var file = this.file;
              var body = this.body;
              var constructorBody = this.constructorBody = t.blockStatement([]);
              this.constructor = this.buildConstructor();
              var closureParams = [];
              var closureArgs = [];
              if (this.isDerived) {
                closureArgs.push(superName);
                superName = this.scope.generateUidIdentifierBasedOnNode(superName);
                closureParams.push(superName);
                this.superName = superName;
              }
              var decorators = this.node.decorators;
              if (decorators) {
                this.directRef = this.scope.generateUidIdentifier(this.classRef);
              } else {
                this.directRef = this.classRef;
              }
              this.buildBody();
              constructorBody.body.unshift(t.expressionStatement(t.callExpression(file.addHelper("class-call-check"), [t.thisExpression(), this.directRef])));
              this.pushDecorators();
              body = body.concat(this.staticPropBody);
              if (this.classId) {
                if (body.length === 1)
                  return t.toExpression(body[0]);
              }
              body.push(t.returnStatement(this.classRef));
              var container = t.functionExpression(null, closureParams, t.blockStatement(body));
              container.shadow = true;
              return t.callExpression(container, closureArgs);
            };
            ClassTransformer.prototype.buildConstructor = function buildConstructor() {
              var func = t.functionDeclaration(this.classRef, [], this.constructorBody);
              t.inherits(func, this.node);
              return func;
            };
            ClassTransformer.prototype.pushToMap = function pushToMap(node, enumerable) {
              var kind = arguments.length <= 2 || arguments[2] === undefined ? "value" : arguments[2];
              var mutatorMap;
              if (node["static"]) {
                this.hasStaticDescriptors = true;
                mutatorMap = this.staticMutatorMap;
              } else {
                this.hasInstanceDescriptors = true;
                mutatorMap = this.instanceMutatorMap;
              }
              var map = defineMap.push(mutatorMap, node, kind, this.file);
              if (enumerable) {
                map.enumerable = t.literal(true);
              }
              if (map.decorators) {
                this.hasDecorators = true;
              }
            };
            ClassTransformer.prototype.constructorMeMaybe = function constructorMeMaybe() {
              var hasConstructor = false;
              var paths = this.path.get("body.body");
              var _arr = paths;
              for (var _i = 0; _i < _arr.length; _i++) {
                var path = _arr[_i];
                hasConstructor = path.equals("kind", "constructor");
                if (hasConstructor)
                  break;
              }
              if (hasConstructor)
                return;
              var constructor;
              if (this.isDerived) {
                constructor = util.template("class-derived-default-constructor");
              } else {
                constructor = t.functionExpression(null, [], t.blockStatement([]));
              }
              this.path.get("body").unshiftContainer("body", t.methodDefinition(t.identifier("constructor"), constructor, "constructor"));
            };
            ClassTransformer.prototype.buildBody = function buildBody() {
              this.constructorMeMaybe();
              this.pushBody();
              this.placePropertyInitializers();
              if (this.userConstructor) {
                var constructorBody = this.constructorBody;
                constructorBody.body = constructorBody.body.concat(this.userConstructor.body.body);
                t.inherits(this.constructor, this.userConstructor);
                t.inherits(constructorBody, this.userConstructor.body);
              }
              this.pushDescriptors();
            };
            ClassTransformer.prototype.pushBody = function pushBody() {
              var classBodyPaths = this.path.get("body.body");
              var _arr2 = classBodyPaths;
              for (var _i2 = 0; _i2 < _arr2.length; _i2++) {
                var path = _arr2[_i2];
                var node = path.node;
                if (node.decorators) {
                  _helpersMemoiseDecorators2["default"](node.decorators, this.scope);
                }
                if (t.isMethodDefinition(node)) {
                  var isConstructor = node.kind === "constructor";
                  if (isConstructor)
                    this.verifyConstructor(path);
                  var replaceSupers = new _helpersReplaceSupers2["default"]({
                    methodPath: path,
                    methodNode: node,
                    objectRef: this.directRef,
                    superRef: this.superName,
                    isStatic: node["static"],
                    isLoose: this.isLoose,
                    scope: this.scope,
                    file: this.file
                  }, true);
                  replaceSupers.replace();
                  if (isConstructor) {
                    this.pushConstructor(node, path);
                  } else {
                    this.pushMethod(node, path);
                  }
                } else if (t.isClassProperty(node)) {
                  this.pushProperty(node, path);
                }
              }
            };
            ClassTransformer.prototype.clearDescriptors = function clearDescriptors() {
              this.hasInstanceDescriptors = false;
              this.hasStaticDescriptors = false;
              this.instanceMutatorMap = {};
              this.staticMutatorMap = {};
            };
            ClassTransformer.prototype.pushDescriptors = function pushDescriptors() {
              this.pushInherits();
              var body = this.body;
              var instanceProps;
              var staticProps;
              var classHelper = "create-class";
              if (this.hasDecorators)
                classHelper = "create-decorated-class";
              if (this.hasInstanceDescriptors) {
                instanceProps = defineMap.toClassObject(this.instanceMutatorMap);
              }
              if (this.hasStaticDescriptors) {
                staticProps = defineMap.toClassObject(this.staticMutatorMap);
              }
              if (instanceProps || staticProps) {
                if (instanceProps)
                  instanceProps = defineMap.toComputedObjectFromClass(instanceProps);
                if (staticProps)
                  staticProps = defineMap.toComputedObjectFromClass(staticProps);
                var nullNode = t.literal(null);
                var args = [this.classRef, nullNode, nullNode, nullNode, nullNode];
                if (instanceProps)
                  args[1] = instanceProps;
                if (staticProps)
                  args[2] = staticProps;
                if (this.instanceInitializersId) {
                  args[3] = this.instanceInitializersId;
                  body.unshift(this.buildObjectAssignment(this.instanceInitializersId));
                }
                if (this.staticInitializersId) {
                  args[4] = this.staticInitializersId;
                  body.unshift(this.buildObjectAssignment(this.staticInitializersId));
                }
                var lastNonNullIndex = 0;
                for (var i = 0; i < args.length; i++) {
                  if (args[i] !== nullNode)
                    lastNonNullIndex = i;
                }
                args = args.slice(0, lastNonNullIndex + 1);
                body.push(t.expressionStatement(t.callExpression(this.file.addHelper(classHelper), args)));
              }
              this.clearDescriptors();
            };
            ClassTransformer.prototype.buildObjectAssignment = function buildObjectAssignment(id) {
              return t.variableDeclaration("var", [t.variableDeclarator(id, t.objectExpression([]))]);
            };
            ClassTransformer.prototype.placePropertyInitializers = function placePropertyInitializers() {
              var body = this.instancePropBody;
              if (!body.length)
                return;
              if (this.hasPropertyCollision()) {
                var call = t.expressionStatement(t.callExpression(t.memberExpression(t.thisExpression(), t.identifier(PROPERTY_COLLISION_METHOD_NAME)), []));
                this.pushMethod(t.methodDefinition(t.identifier(PROPERTY_COLLISION_METHOD_NAME), t.functionExpression(null, [], t.blockStatement(body))), null, true);
                if (this.isDerived) {
                  this.bareSuper.insertAfter(call);
                } else {
                  this.constructorBody.body.unshift(call);
                }
              } else {
                if (this.isDerived) {
                  this.bareSuper.insertAfter(body);
                } else {
                  this.constructorBody.body = body.concat(this.constructorBody.body);
                }
              }
            };
            ClassTransformer.prototype.hasPropertyCollision = function hasPropertyCollision() {
              if (this.userConstructorPath) {
                for (var name in this.instancePropRefs) {
                  if (this.userConstructorPath.scope.hasOwnBinding(name)) {
                    return true;
                  }
                }
              }
              return false;
            };
            ClassTransformer.prototype.verifyConstructor = function verifyConstructor(path) {
              var state = {
                constructorPath: path.get("value"),
                hasBareSuper: false,
                bareSuper: null,
                isDerived: this.isDerived,
                file: this.file
              };
              state.constructorPath.traverse(verifyConstructorVisitor, state);
              var thisAlias = state.constructorPath.getData("this");
              if (thisAlias && state.bareSuper) {
                state.bareSuper.insertAfter(t.variableDeclaration("var", [t.variableDeclarator(thisAlias, t.thisExpression())]));
              }
              this.bareSuper = state.bareSuper;
              if (!state.hasBareSuper && this.isDerived) {
                throw path.errorWithNode("Derived constructor must call super()");
              }
            };
            ClassTransformer.prototype.pushMethod = function pushMethod(node, path, allowedIllegal) {
              if (!allowedIllegal && t.isLiteral(t.toComputedKey(node), {value: PROPERTY_COLLISION_METHOD_NAME})) {
                throw this.file.errorWithNode(node, messages.get("illegalMethodName", PROPERTY_COLLISION_METHOD_NAME));
              }
              if (node.kind === "method") {
                nameMethod.property(node, this.file, path ? path.get("value").scope : this.scope);
                if (this._processMethod(node))
                  return;
              }
              this.pushToMap(node);
            };
            ClassTransformer.prototype._processMethod = function _processMethod() {
              return false;
            };
            ClassTransformer.prototype.pushProperty = function pushProperty(node, path) {
              path.traverse(collectPropertyReferencesVisitor, {
                references: this.instancePropRefs,
                scope: this.scope
              });
              if (node.decorators) {
                var body = [];
                if (node.value) {
                  body.push(t.returnStatement(node.value));
                  node.value = t.functionExpression(null, [], t.blockStatement(body));
                } else {
                  node.value = t.literal(null);
                }
                this.pushToMap(node, true, "initializer");
                var initializers;
                var target;
                if (node["static"]) {
                  initializers = this.staticInitializersId = this.staticInitializersId || this.scope.generateUidIdentifier("staticInitializers");
                  body = this.staticPropBody;
                  target = this.classRef;
                } else {
                  initializers = this.instanceInitializersId = this.instanceInitializersId || this.scope.generateUidIdentifier("instanceInitializers");
                  body = this.instancePropBody;
                  target = t.thisExpression();
                }
                body.push(t.expressionStatement(t.callExpression(this.file.addHelper("define-decorated-property-descriptor"), [target, t.literal(node.key.name), initializers])));
              } else {
                if (!node.value && !node.decorators)
                  return;
                if (node["static"]) {
                  this.pushToMap(node, true);
                } else if (node.value) {
                  this.instancePropBody.push(t.expressionStatement(t.assignmentExpression("=", t.memberExpression(t.thisExpression(), node.key), node.value)));
                }
              }
            };
            ClassTransformer.prototype.pushConstructor = function pushConstructor(method, path) {
              var fnPath = path.get("value");
              if (fnPath.scope.hasOwnBinding(this.classRef.name)) {
                fnPath.scope.rename(this.classRef.name);
              }
              var construct = this.constructor;
              var fn = method.value;
              this.userConstructorPath = fnPath;
              this.userConstructor = fn;
              this.hasConstructor = true;
              t.inheritsComments(construct, method);
              construct._ignoreUserWhitespace = true;
              construct.params = fn.params;
              t.inherits(construct.body, fn.body);
              this._pushConstructor();
            };
            ClassTransformer.prototype._pushConstructor = function _pushConstructor() {
              if (this.pushedConstructor)
                return;
              this.pushedConstructor = true;
              if (this.hasInstanceDescriptors || this.hasStaticDescriptors) {
                this.pushDescriptors();
              }
              this.body.push(this.constructor);
              this.pushInherits();
            };
            ClassTransformer.prototype.pushInherits = function pushInherits() {
              if (!this.isDerived || this.pushedInherits)
                return;
              this.pushedInherits = true;
              this.body.unshift(t.expressionStatement(t.callExpression(this.file.addHelper("inherits"), [this.classRef, this.superName])));
            };
            ClassTransformer.prototype.pushDecorators = function pushDecorators() {
              var decorators = this.node.decorators;
              if (!decorators)
                return;
              this.body.push(t.variableDeclaration("var", [t.variableDeclarator(this.directRef, this.classRef)]));
              decorators = decorators.reverse();
              var _arr3 = decorators;
              for (var _i3 = 0; _i3 < _arr3.length; _i3++) {
                var decorator = _arr3[_i3];
                var decoratorNode = util.template("class-decorator", {
                  DECORATOR: decorator.expression,
                  CLASS_REF: this.classRef
                }, true);
                decoratorNode.expression._ignoreModulesRemap = true;
                this.body.push(decoratorNode);
              }
            };
            return ClassTransformer;
          })();
          exports["default"] = ClassTransformer;
          module.exports = exports["default"];
        }, {
          "179": 179,
          "182": 182,
          "43": 43,
          "57": 57,
          "60": 60,
          "61": 61,
          "65": 65
        }],
        94: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          var _messages = _dereq_(43);
          var messages = _interopRequireWildcard(_messages);
          var visitor = {
            Scope: function Scope(node, parent, scope) {
              for (var name in scope.bindings) {
                var binding = scope.bindings[name];
                if (binding.kind !== "const" && binding.kind !== "module")
                  continue;
                var _arr = binding.constantViolations;
                for (var _i = 0; _i < _arr.length; _i++) {
                  var violation = _arr[_i];
                  throw violation.errorWithNode(messages.get("readOnly", name));
                }
              }
            },
            VariableDeclaration: function VariableDeclaration(node) {
              if (node.kind === "const")
                node.kind = "let";
            }
          };
          exports.visitor = visitor;
        }, {"43": 43}],
        95: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }
          var _messages = _dereq_(43);
          var messages = _interopRequireWildcard(_messages);
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          var metadata = {group: "builtin-advanced"};
          exports.metadata = metadata;
          var visitor = {
            ForXStatement: function ForXStatement(node, parent, scope, file) {
              var left = node.left;
              if (t.isPattern(left)) {
                var temp = scope.generateUidIdentifier("ref");
                node.left = t.variableDeclaration("var", [t.variableDeclarator(temp)]);
                this.ensureBlock();
                node.body.body.unshift(t.variableDeclaration("var", [t.variableDeclarator(left, temp)]));
                return;
              }
              if (!t.isVariableDeclaration(left))
                return;
              var pattern = left.declarations[0].id;
              if (!t.isPattern(pattern))
                return;
              var key = scope.generateUidIdentifier("ref");
              node.left = t.variableDeclaration(left.kind, [t.variableDeclarator(key, null)]);
              var nodes = [];
              var destructuring = new DestructuringTransformer({
                kind: left.kind,
                file: file,
                scope: scope,
                nodes: nodes
              });
              destructuring.init(pattern, key);
              this.ensureBlock();
              var block = node.body;
              block.body = nodes.concat(block.body);
            },
            Function: function Function(node, parent, scope, file) {
              var hasDestructuring = false;
              var _arr = node.params;
              for (var _i = 0; _i < _arr.length; _i++) {
                var pattern = _arr[_i];
                if (t.isPattern(pattern)) {
                  hasDestructuring = true;
                  break;
                }
              }
              if (!hasDestructuring)
                return;
              var nodes = [];
              for (var i = 0; i < node.params.length; i++) {
                var pattern = node.params[i];
                if (!t.isPattern(pattern))
                  continue;
                var ref = scope.generateUidIdentifier("ref");
                if (t.isAssignmentPattern(pattern)) {
                  var _pattern = pattern;
                  pattern = pattern.left;
                  _pattern.left = ref;
                } else {
                  node.params[i] = ref;
                }
                t.inherits(ref, pattern);
                var destructuring = new DestructuringTransformer({
                  blockHoist: node.params.length - i,
                  nodes: nodes,
                  scope: scope,
                  file: file,
                  kind: "let"
                });
                destructuring.init(pattern, ref);
              }
              this.ensureBlock();
              var block = node.body;
              block.body = nodes.concat(block.body);
            },
            CatchClause: function CatchClause(node, parent, scope, file) {
              var pattern = node.param;
              if (!t.isPattern(pattern))
                return;
              var ref = scope.generateUidIdentifier("ref");
              node.param = ref;
              var nodes = [];
              var destructuring = new DestructuringTransformer({
                kind: "let",
                file: file,
                scope: scope,
                nodes: nodes
              });
              destructuring.init(pattern, ref);
              node.body.body = nodes.concat(node.body.body);
            },
            AssignmentExpression: function AssignmentExpression(node, parent, scope, file) {
              if (!t.isPattern(node.left))
                return;
              var nodes = [];
              var destructuring = new DestructuringTransformer({
                operator: node.operator,
                file: file,
                scope: scope,
                nodes: nodes
              });
              var ref;
              if (this.isCompletionRecord() || !this.parentPath.isExpressionStatement()) {
                ref = scope.generateUidIdentifierBasedOnNode(node.right, "ref");
                nodes.push(t.variableDeclaration("var", [t.variableDeclarator(ref, node.right)]));
                if (t.isArrayExpression(node.right)) {
                  destructuring.arrays[ref.name] = true;
                }
              }
              destructuring.init(node.left, ref || node.right);
              if (ref) {
                nodes.push(t.expressionStatement(ref));
              }
              return nodes;
            },
            VariableDeclaration: function VariableDeclaration(node, parent, scope, file) {
              if (t.isForXStatement(parent))
                return;
              if (!variableDeclarationHasPattern(node))
                return;
              var nodes = [];
              var declar;
              for (var i = 0; i < node.declarations.length; i++) {
                declar = node.declarations[i];
                var patternId = declar.init;
                var pattern = declar.id;
                var destructuring = new DestructuringTransformer({
                  nodes: nodes,
                  scope: scope,
                  kind: node.kind,
                  file: file
                });
                if (t.isPattern(pattern)) {
                  destructuring.init(pattern, patternId);
                  if (+i !== node.declarations.length - 1) {
                    t.inherits(nodes[nodes.length - 1], declar);
                  }
                } else {
                  nodes.push(t.inherits(destructuring.buildVariableAssignment(declar.id, declar.init), declar));
                }
              }
              if (!t.isProgram(parent) && !t.isBlockStatement(parent)) {
                declar = null;
                for (i = 0; i < nodes.length; i++) {
                  node = nodes[i];
                  declar = declar || t.variableDeclaration(node.kind, []);
                  if (!t.isVariableDeclaration(node) && declar.kind !== node.kind) {
                    throw file.errorWithNode(node, messages.get("invalidParentForThisNode"));
                  }
                  declar.declarations = declar.declarations.concat(node.declarations);
                }
                return declar;
              }
              return nodes;
            }
          };
          exports.visitor = visitor;
          function variableDeclarationHasPattern(node) {
            for (var i = 0; i < node.declarations.length; i++) {
              if (t.isPattern(node.declarations[i].id)) {
                return true;
              }
            }
            return false;
          }
          function hasRest(pattern) {
            for (var i = 0; i < pattern.elements.length; i++) {
              if (t.isRestElement(pattern.elements[i])) {
                return true;
              }
            }
            return false;
          }
          var arrayUnpackVisitor = {ReferencedIdentifier: function ReferencedIdentifier(node, parent, scope, state) {
              if (state.bindings[node.name]) {
                state.deopt = true;
                this.stop();
              }
            }};
          var DestructuringTransformer = (function() {
            function DestructuringTransformer(opts) {
              _classCallCheck(this, DestructuringTransformer);
              this.blockHoist = opts.blockHoist;
              this.operator = opts.operator;
              this.arrays = {};
              this.nodes = opts.nodes || [];
              this.scope = opts.scope;
              this.file = opts.file;
              this.kind = opts.kind;
            }
            DestructuringTransformer.prototype.buildVariableAssignment = function buildVariableAssignment(id, init) {
              var op = this.operator;
              if (t.isMemberExpression(id))
                op = "=";
              var node;
              if (op) {
                node = t.expressionStatement(t.assignmentExpression(op, id, init));
              } else {
                node = t.variableDeclaration(this.kind, [t.variableDeclarator(id, init)]);
              }
              node._blockHoist = this.blockHoist;
              return node;
            };
            DestructuringTransformer.prototype.buildVariableDeclaration = function buildVariableDeclaration(id, init) {
              var declar = t.variableDeclaration("var", [t.variableDeclarator(id, init)]);
              declar._blockHoist = this.blockHoist;
              return declar;
            };
            DestructuringTransformer.prototype.push = function push(id, init) {
              if (t.isObjectPattern(id)) {
                this.pushObjectPattern(id, init);
              } else if (t.isArrayPattern(id)) {
                this.pushArrayPattern(id, init);
              } else if (t.isAssignmentPattern(id)) {
                this.pushAssignmentPattern(id, init);
              } else {
                this.nodes.push(this.buildVariableAssignment(id, init));
              }
            };
            DestructuringTransformer.prototype.toArray = function toArray(node, count) {
              if (this.file.isLoose("es6.destructuring") || t.isIdentifier(node) && this.arrays[node.name]) {
                return node;
              } else {
                return this.scope.toArray(node, count);
              }
            };
            DestructuringTransformer.prototype.pushAssignmentPattern = function pushAssignmentPattern(pattern, valueRef) {
              var tempValueRef = this.scope.generateUidIdentifierBasedOnNode(valueRef);
              var declar = t.variableDeclaration("var", [t.variableDeclarator(tempValueRef, valueRef)]);
              declar._blockHoist = this.blockHoist;
              this.nodes.push(declar);
              var tempConditional = t.conditionalExpression(t.binaryExpression("===", tempValueRef, t.identifier("undefined")), pattern.right, tempValueRef);
              var left = pattern.left;
              if (t.isPattern(left)) {
                var tempValueDefault = t.expressionStatement(t.assignmentExpression("=", tempValueRef, tempConditional));
                tempValueDefault._blockHoist = this.blockHoist;
                this.nodes.push(tempValueDefault);
                this.push(left, tempValueRef);
              } else {
                this.nodes.push(this.buildVariableAssignment(left, tempConditional));
              }
            };
            DestructuringTransformer.prototype.pushObjectSpread = function pushObjectSpread(pattern, objRef, spreadProp, spreadPropIndex) {
              var keys = [];
              for (var i = 0; i < pattern.properties.length; i++) {
                var prop = pattern.properties[i];
                if (i >= spreadPropIndex)
                  break;
                if (t.isSpreadProperty(prop))
                  continue;
                var key = prop.key;
                if (t.isIdentifier(key) && !prop.computed)
                  key = t.literal(prop.key.name);
                keys.push(key);
              }
              keys = t.arrayExpression(keys);
              var value = t.callExpression(this.file.addHelper("object-without-properties"), [objRef, keys]);
              this.nodes.push(this.buildVariableAssignment(spreadProp.argument, value));
            };
            DestructuringTransformer.prototype.pushObjectProperty = function pushObjectProperty(prop, propRef) {
              if (t.isLiteral(prop.key))
                prop.computed = true;
              var pattern = prop.value;
              var objRef = t.memberExpression(propRef, prop.key, prop.computed);
              if (t.isPattern(pattern)) {
                this.push(pattern, objRef);
              } else {
                this.nodes.push(this.buildVariableAssignment(pattern, objRef));
              }
            };
            DestructuringTransformer.prototype.pushObjectPattern = function pushObjectPattern(pattern, objRef) {
              if (!pattern.properties.length) {
                this.nodes.push(t.expressionStatement(t.callExpression(this.file.addHelper("object-destructuring-empty"), [objRef])));
              }
              if (pattern.properties.length > 1 && !this.scope.isStatic(objRef)) {
                var temp = this.scope.generateUidIdentifierBasedOnNode(objRef);
                this.nodes.push(this.buildVariableDeclaration(temp, objRef));
                objRef = temp;
              }
              for (var i = 0; i < pattern.properties.length; i++) {
                var prop = pattern.properties[i];
                if (t.isSpreadProperty(prop)) {
                  this.pushObjectSpread(pattern, objRef, prop, i);
                } else {
                  this.pushObjectProperty(prop, objRef);
                }
              }
            };
            DestructuringTransformer.prototype.canUnpackArrayPattern = function canUnpackArrayPattern(pattern, arr) {
              if (!t.isArrayExpression(arr))
                return false;
              if (pattern.elements.length > arr.elements.length)
                return;
              if (pattern.elements.length < arr.elements.length && !hasRest(pattern))
                return false;
              var _arr2 = pattern.elements;
              for (var _i2 = 0; _i2 < _arr2.length; _i2++) {
                var elem = _arr2[_i2];
                if (!elem)
                  return false;
                if (t.isMemberExpression(elem))
                  return false;
              }
              var _arr3 = arr.elements;
              for (var _i3 = 0; _i3 < _arr3.length; _i3++) {
                var elem = _arr3[_i3];
                if (t.isSpreadElement(elem))
                  return false;
              }
              var bindings = t.getBindingIdentifiers(pattern);
              var state = {
                deopt: false,
                bindings: bindings
              };
              this.scope.traverse(arr, arrayUnpackVisitor, state);
              return !state.deopt;
            };
            DestructuringTransformer.prototype.pushUnpackedArrayPattern = function pushUnpackedArrayPattern(pattern, arr) {
              for (var i = 0; i < pattern.elements.length; i++) {
                var elem = pattern.elements[i];
                if (t.isRestElement(elem)) {
                  this.push(elem.argument, t.arrayExpression(arr.elements.slice(i)));
                } else {
                  this.push(elem, arr.elements[i]);
                }
              }
            };
            DestructuringTransformer.prototype.pushArrayPattern = function pushArrayPattern(pattern, arrayRef) {
              if (!pattern.elements)
                return;
              if (this.canUnpackArrayPattern(pattern, arrayRef)) {
                return this.pushUnpackedArrayPattern(pattern, arrayRef);
              }
              var count = !hasRest(pattern) && pattern.elements.length;
              var toArray = this.toArray(arrayRef, count);
              if (t.isIdentifier(toArray)) {
                arrayRef = toArray;
              } else {
                arrayRef = this.scope.generateUidIdentifierBasedOnNode(arrayRef);
                this.arrays[arrayRef.name] = true;
                this.nodes.push(this.buildVariableDeclaration(arrayRef, toArray));
              }
              for (var i = 0; i < pattern.elements.length; i++) {
                var elem = pattern.elements[i];
                if (!elem)
                  continue;
                var elemRef;
                if (t.isRestElement(elem)) {
                  elemRef = this.toArray(arrayRef);
                  if (i > 0) {
                    elemRef = t.callExpression(t.memberExpression(elemRef, t.identifier("slice")), [t.literal(i)]);
                  }
                  elem = elem.argument;
                } else {
                  elemRef = t.memberExpression(arrayRef, t.literal(i), true);
                }
                this.push(elem, elemRef);
              }
            };
            DestructuringTransformer.prototype.init = function init(pattern, ref) {
              if (!t.isArrayExpression(ref) && !t.isMemberExpression(ref)) {
                var memo = this.scope.maybeGenerateMemoised(ref, true);
                if (memo) {
                  this.nodes.push(this.buildVariableDeclaration(memo, ref));
                  ref = memo;
                }
              }
              this.push(pattern, ref);
              return this.nodes;
            };
            return DestructuringTransformer;
          })();
        }, {
          "179": 179,
          "43": 43
        }],
        96: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          exports._ForOfStatementArray = _ForOfStatementArray;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          var _messages = _dereq_(43);
          var messages = _interopRequireWildcard(_messages);
          var _util = _dereq_(182);
          var util = _interopRequireWildcard(_util);
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          var visitor = {ForOfStatement: function ForOfStatement(node, parent, scope, file) {
              if (this.get("right").isArrayExpression()) {
                return _ForOfStatementArray.call(this, node, scope, file);
              }
              var callback = spec;
              if (file.isLoose("es6.forOf"))
                callback = loose;
              var build = callback(node, parent, scope, file);
              var declar = build.declar;
              var loop = build.loop;
              var block = loop.body;
              this.ensureBlock();
              if (declar) {
                block.body.push(declar);
              }
              block.body = block.body.concat(node.body.body);
              t.inherits(loop, node);
              t.inherits(loop.body, node.body);
              if (build.replaceParent) {
                this.parentPath.replaceWithMultiple(build.node);
                this.dangerouslyRemove();
              } else {
                return build.node;
              }
            }};
          exports.visitor = visitor;
          function _ForOfStatementArray(node, scope) {
            var nodes = [];
            var right = node.right;
            if (!t.isIdentifier(right) || !scope.hasBinding(right.name)) {
              var uid = scope.generateUidIdentifier("arr");
              nodes.push(t.variableDeclaration("var", [t.variableDeclarator(uid, right)]));
              right = uid;
            }
            var iterationKey = scope.generateUidIdentifier("i");
            var loop = util.template("for-of-array", {
              BODY: node.body,
              KEY: iterationKey,
              ARR: right
            });
            t.inherits(loop, node);
            t.ensureBlock(loop);
            var iterationValue = t.memberExpression(right, iterationKey, true);
            var left = node.left;
            if (t.isVariableDeclaration(left)) {
              left.declarations[0].init = iterationValue;
              loop.body.body.unshift(left);
            } else {
              loop.body.body.unshift(t.expressionStatement(t.assignmentExpression("=", left, iterationValue)));
            }
            if (this.parentPath.isLabeledStatement()) {
              loop = t.labeledStatement(this.parentPath.node.label, loop);
            }
            nodes.push(loop);
            return nodes;
          }
          var loose = function loose(node, parent, scope, file) {
            var left = node.left;
            var declar,
                id;
            if (t.isIdentifier(left) || t.isPattern(left) || t.isMemberExpression(left)) {
              id = left;
            } else if (t.isVariableDeclaration(left)) {
              id = scope.generateUidIdentifier("ref");
              declar = t.variableDeclaration(left.kind, [t.variableDeclarator(left.declarations[0].id, id)]);
            } else {
              throw file.errorWithNode(left, messages.get("unknownForHead", left.type));
            }
            var iteratorKey = scope.generateUidIdentifier("iterator");
            var isArrayKey = scope.generateUidIdentifier("isArray");
            var loop = util.template("for-of-loose", {
              LOOP_OBJECT: iteratorKey,
              IS_ARRAY: isArrayKey,
              OBJECT: node.right,
              INDEX: scope.generateUidIdentifier("i"),
              ID: id
            });
            if (!declar) {
              loop.body.body.shift();
            }
            return {
              declar: declar,
              node: loop,
              loop: loop
            };
          };
          var spec = function spec(node, parent, scope, file) {
            var left = node.left;
            var declar;
            var stepKey = scope.generateUidIdentifier("step");
            var stepValue = t.memberExpression(stepKey, t.identifier("value"));
            if (t.isIdentifier(left) || t.isPattern(left) || t.isMemberExpression(left)) {
              declar = t.expressionStatement(t.assignmentExpression("=", left, stepValue));
            } else if (t.isVariableDeclaration(left)) {
              declar = t.variableDeclaration(left.kind, [t.variableDeclarator(left.declarations[0].id, stepValue)]);
            } else {
              throw file.errorWithNode(left, messages.get("unknownForHead", left.type));
            }
            var iteratorKey = scope.generateUidIdentifier("iterator");
            var template = util.template("for-of", {
              ITERATOR_HAD_ERROR_KEY: scope.generateUidIdentifier("didIteratorError"),
              ITERATOR_COMPLETION: scope.generateUidIdentifier("iteratorNormalCompletion"),
              ITERATOR_ERROR_KEY: scope.generateUidIdentifier("iteratorError"),
              ITERATOR_KEY: iteratorKey,
              STEP_KEY: stepKey,
              OBJECT: node.right,
              BODY: null
            });
            var isLabeledParent = t.isLabeledStatement(parent);
            var tryBody = template[3].block.body;
            var loop = tryBody[0];
            if (isLabeledParent) {
              tryBody[0] = t.labeledStatement(parent.label, loop);
            }
            return {
              replaceParent: isLabeledParent,
              declar: declar,
              loop: loop,
              node: template
            };
          };
        }, {
          "179": 179,
          "182": 182,
          "43": 43
        }],
        97: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          var metadata = {group: "builtin-pre"};
          exports.metadata = metadata;
          var visitor = {Literal: function Literal(node) {
              if (typeof node.value === "number" && /^0[ob]/i.test(node.raw)) {
                node.raw = undefined;
              }
              if (typeof node.value === "string" && /\\[u]/gi.test(node.raw)) {
                node.raw = undefined;
              }
            }};
          exports.visitor = visitor;
        }, {}],
        98: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          function keepBlockHoist(node, nodes) {
            if (node._blockHoist) {
              for (var i = 0; i < nodes.length; i++) {
                nodes[i]._blockHoist = node._blockHoist;
              }
            }
          }
          var metadata = {group: "builtin-modules"};
          exports.metadata = metadata;
          var visitor = {
            ImportDeclaration: function ImportDeclaration(node, parent, scope, file) {
              if (node.importKind === "type" || node.importKind === "typeof")
                return;
              var nodes = [];
              if (node.specifiers.length) {
                var _arr = node.specifiers;
                for (var _i = 0; _i < _arr.length; _i++) {
                  var specifier = _arr[_i];
                  file.moduleFormatter.importSpecifier(specifier, node, nodes, scope);
                }
              } else {
                file.moduleFormatter.importDeclaration(node, nodes, scope);
              }
              if (nodes.length === 1) {
                nodes[0]._blockHoist = node._blockHoist;
              }
              return nodes;
            },
            ExportAllDeclaration: function ExportAllDeclaration(node, parent, scope, file) {
              var nodes = [];
              file.moduleFormatter.exportAllDeclaration(node, nodes, scope);
              keepBlockHoist(node, nodes);
              return nodes;
            },
            ExportDefaultDeclaration: function ExportDefaultDeclaration(node, parent, scope, file) {
              var nodes = [];
              file.moduleFormatter.exportDeclaration(node, nodes, scope);
              keepBlockHoist(node, nodes);
              return nodes;
            },
            ExportNamedDeclaration: function ExportNamedDeclaration(node, parent, scope, file) {
              if (this.get("declaration").isTypeAlias())
                return;
              var nodes = [];
              if (node.declaration) {
                if (t.isVariableDeclaration(node.declaration)) {
                  var declar = node.declaration.declarations[0];
                  declar.init = declar.init || t.identifier("undefined");
                }
                file.moduleFormatter.exportDeclaration(node, nodes, scope);
              } else if (node.specifiers) {
                for (var i = 0; i < node.specifiers.length; i++) {
                  file.moduleFormatter.exportSpecifier(node.specifiers[i], node, nodes, scope);
                }
              }
              keepBlockHoist(node, nodes);
              return nodes;
            }
          };
          exports.visitor = visitor;
        }, {"179": 179}],
        99: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {"default": obj};
          }
          var _helpersReplaceSupers = _dereq_(65);
          var _helpersReplaceSupers2 = _interopRequireDefault(_helpersReplaceSupers);
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          function Property(path, node, scope, getObjectRef, file) {
            if (!node.method && node.kind === "init")
              return;
            if (!t.isFunction(node.value))
              return;
            var replaceSupers = new _helpersReplaceSupers2["default"]({
              getObjectRef: getObjectRef,
              methodNode: node,
              methodPath: path,
              isStatic: true,
              scope: scope,
              file: file
            });
            replaceSupers.replace();
          }
          var visitor = {ObjectExpression: function ObjectExpression(node, parent, scope, file) {
              var objectRef;
              var getObjectRef = function getObjectRef() {
                return objectRef = objectRef || scope.generateUidIdentifier("obj");
              };
              var propPaths = this.get("properties");
              for (var i = 0; i < node.properties.length; i++) {
                Property(propPaths[i], node.properties[i], scope, getObjectRef, file);
              }
              if (objectRef) {
                scope.push({id: objectRef});
                return t.assignmentExpression("=", objectRef, node);
              }
            }};
          exports.visitor = visitor;
        }, {
          "179": 179,
          "65": 65
        }],
        100: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {"default": obj};
          }
          var _helpersCallDelegate = _dereq_(56);
          var _helpersCallDelegate2 = _interopRequireDefault(_helpersCallDelegate);
          var _helpersGetFunctionArity = _dereq_(59);
          var _helpersGetFunctionArity2 = _interopRequireDefault(_helpersGetFunctionArity);
          var _util = _dereq_(182);
          var util = _interopRequireWildcard(_util);
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          var hasDefaults = function hasDefaults(node) {
            for (var i = 0; i < node.params.length; i++) {
              if (!t.isIdentifier(node.params[i]))
                return true;
            }
            return false;
          };
          var iifeVisitor = {ReferencedIdentifier: function ReferencedIdentifier(node, parent, scope, state) {
              if (node.name !== "eval") {
                if (!state.scope.hasOwnBinding(node.name))
                  return;
                if (state.scope.bindingIdentifierEquals(node.name, node))
                  return;
              }
              state.iife = true;
              this.stop();
            }};
          var visitor = {Function: function Function(node, parent, scope, file) {
              if (!hasDefaults(node))
                return;
              this.ensureBlock();
              var state = {
                iife: false,
                scope: scope
              };
              var body = [];
              var argsIdentifier = t.identifier("arguments");
              argsIdentifier._shadowedFunctionLiteral = this;
              function pushDefNode(left, right, i) {
                var defNode;
                if (exceedsLastNonDefault(i) || t.isPattern(left) || file.transformers["es6.spec.blockScoping"].canTransform()) {
                  defNode = util.template("default-parameter", {
                    VARIABLE_NAME: left,
                    DEFAULT_VALUE: right,
                    ARGUMENT_KEY: t.literal(i),
                    ARGUMENTS: argsIdentifier
                  }, true);
                } else {
                  defNode = util.template("default-parameter-assign", {
                    VARIABLE_NAME: left,
                    DEFAULT_VALUE: right
                  }, true);
                }
                defNode._blockHoist = node.params.length - i;
                body.push(defNode);
              }
              function exceedsLastNonDefault(i) {
                return i + 1 > lastNonDefaultParam;
              }
              var lastNonDefaultParam = _helpersGetFunctionArity2["default"](node);
              var params = this.get("params");
              for (var i = 0; i < params.length; i++) {
                var param = params[i];
                if (!param.isAssignmentPattern()) {
                  if (!param.isIdentifier()) {
                    param.traverse(iifeVisitor, state);
                  }
                  if (file.transformers["es6.spec.blockScoping"].canTransform() && param.isIdentifier()) {
                    pushDefNode(param.node, t.identifier("undefined"), i);
                  }
                  continue;
                }
                var left = param.get("left");
                var right = param.get("right");
                if (exceedsLastNonDefault(i) || left.isPattern()) {
                  var placeholder = scope.generateUidIdentifier("x");
                  placeholder._isDefaultPlaceholder = true;
                  node.params[i] = placeholder;
                } else {
                  node.params[i] = left.node;
                }
                if (!state.iife) {
                  if (right.isIdentifier() && scope.hasOwnBinding(right.node.name)) {
                    state.iife = true;
                  } else {
                    right.traverse(iifeVisitor, state);
                  }
                }
                pushDefNode(left.node, right.node, i);
              }
              node.params = node.params.slice(0, lastNonDefaultParam);
              if (state.iife) {
                body.push(_helpersCallDelegate2["default"](node, scope));
                node.body = t.blockStatement(body);
              } else {
                node.body.body = body.concat(node.body.body);
              }
            }};
          exports.visitor = visitor;
        }, {
          "179": 179,
          "182": 182,
          "56": 56,
          "59": 59
        }],
        101: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          var _traversalVisitors = _dereq_(168);
          var visitors = _interopRequireWildcard(_traversalVisitors);
          var _default = _dereq_(100);
          var def = _interopRequireWildcard(_default);
          var _rest = _dereq_(102);
          var rest = _interopRequireWildcard(_rest);
          var metadata = {group: "builtin-advanced"};
          exports.metadata = metadata;
          var visitor = visitors.merge([rest.visitor, def.visitor]);
          exports.visitor = visitor;
        }, {
          "100": 100,
          "102": 102,
          "168": 168
        }],
        102: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          var _util = _dereq_(182);
          var util = _interopRequireWildcard(_util);
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          var memberExpressionOptimisationVisitor = {
            Scope: function Scope(node, parent, scope, state) {
              if (!scope.bindingIdentifierEquals(state.name, state.outerBinding)) {
                this.skip();
              }
            },
            Flow: function Flow() {
              this.skip();
            },
            Function: function Function(node, parent, scope, state) {
              var oldNoOptimise = state.noOptimise;
              state.noOptimise = true;
              this.traverse(memberExpressionOptimisationVisitor, state);
              state.noOptimise = oldNoOptimise;
              this.skip();
            },
            ReferencedIdentifier: function ReferencedIdentifier(node, parent, scope, state) {
              if (node.name === "arguments") {
                state.deopted = true;
              }
              if (node.name !== state.name)
                return;
              if (state.noOptimise) {
                state.deopted = true;
              } else {
                if (this.parentPath.isMemberExpression({
                  computed: true,
                  object: node
                })) {
                  var prop = this.parentPath.get("property");
                  if (prop.isBaseType("number")) {
                    state.candidates.push(this);
                    return;
                  }
                }
                if (this.parentPath.isSpreadElement() && state.offset === 0) {
                  var call = this.parentPath.parentPath;
                  if (call.isCallExpression() && call.node.arguments.length === 1) {
                    state.candidates.push(this);
                    return;
                  }
                }
                state.references.push(this);
              }
            },
            BindingIdentifier: function BindingIdentifier(node, parent, scope, state) {
              if (node.name === state.name) {
                state.deopted = true;
              }
            }
          };
          function optimiseMemberExpression(parent, offset) {
            if (offset === 0)
              return;
            var newExpr;
            var prop = parent.property;
            if (t.isLiteral(prop)) {
              prop.value += offset;
              prop.raw = String(prop.value);
            } else {
              newExpr = t.binaryExpression("+", prop, t.literal(offset));
              parent.property = newExpr;
            }
          }
          function hasRest(node) {
            return t.isRestElement(node.params[node.params.length - 1]);
          }
          var visitor = {Function: function Function(node, parent, scope) {
              if (!hasRest(node))
                return;
              var restParam = node.params.pop();
              var rest = restParam.argument;
              var argsId = t.identifier("arguments");
              argsId._shadowedFunctionLiteral = this;
              if (t.isPattern(rest)) {
                var pattern = rest;
                rest = scope.generateUidIdentifier("ref");
                var declar = t.variableDeclaration("let", pattern.elements.map(function(elem, index) {
                  var accessExpr = t.memberExpression(rest, t.literal(index), true);
                  return t.variableDeclarator(elem, accessExpr);
                }));
                node.body.body.unshift(declar);
              }
              var state = {
                references: [],
                offset: node.params.length,
                argumentsNode: argsId,
                outerBinding: scope.getBindingIdentifier(rest.name),
                candidates: [],
                name: rest.name,
                deopted: false
              };
              this.traverse(memberExpressionOptimisationVisitor, state);
              if (!state.deopted && !state.references.length) {
                if (state.candidates.length) {
                  var _arr = state.candidates;
                  for (var _i = 0; _i < _arr.length; _i++) {
                    var candidate = _arr[_i];
                    candidate.replaceWith(argsId);
                    if (candidate.parentPath.isMemberExpression()) {
                      optimiseMemberExpression(candidate.parent, state.offset);
                    }
                  }
                }
                return;
              } else {
                state.references = state.references.concat(state.candidates);
              }
              state.deopted = state.deopted || !!node.shadow;
              var start = t.literal(node.params.length);
              var key = scope.generateUidIdentifier("key");
              var len = scope.generateUidIdentifier("len");
              var arrKey = key;
              var arrLen = len;
              if (node.params.length) {
                arrKey = t.binaryExpression("-", key, start);
                arrLen = t.conditionalExpression(t.binaryExpression(">", len, start), t.binaryExpression("-", len, start), t.literal(0));
              }
              var loop = util.template("rest", {
                ARRAY_TYPE: restParam.typeAnnotation,
                ARGUMENTS: argsId,
                ARRAY_KEY: arrKey,
                ARRAY_LEN: arrLen,
                START: start,
                ARRAY: rest,
                KEY: key,
                LEN: len
              });
              if (state.deopted) {
                loop._blockHoist = node.params.length + 1;
                node.body.body.unshift(loop);
              } else {
                loop._blockHoist = 1;
                var target = this.getEarliestCommonAncestorFrom(state.references).getStatementParent();
                var highestLoop;
                target.findParent(function(path) {
                  if (path.isLoop()) {
                    highestLoop = path;
                  } else if (path.isFunction()) {
                    return true;
                  }
                });
                if (highestLoop)
                  target = highestLoop;
                target.insertBefore(loop);
              }
            }};
          exports.visitor = visitor;
        }, {
          "179": 179,
          "182": 182
        }],
        103: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          function loose(node, body, objId) {
            var _arr = node.properties;
            for (var _i = 0; _i < _arr.length; _i++) {
              var prop = _arr[_i];
              body.push(t.expressionStatement(t.assignmentExpression("=", t.memberExpression(objId, prop.key, prop.computed || t.isLiteral(prop.key)), prop.value)));
            }
          }
          function spec(node, body, objId, initProps, file) {
            var _arr2 = node.properties;
            for (var _i2 = 0; _i2 < _arr2.length; _i2++) {
              var prop = _arr2[_i2];
              if (t.isLiteral(t.toComputedKey(prop), {value: "__proto__"})) {
                initProps.push(prop);
                continue;
              }
              var key = prop.key;
              if (t.isIdentifier(key) && !prop.computed) {
                key = t.literal(key.name);
              }
              var bodyNode = t.callExpression(file.addHelper("define-property"), [objId, key, prop.value]);
              body.push(t.expressionStatement(bodyNode));
            }
            if (body.length === 1) {
              var first = body[0].expression;
              if (t.isCallExpression(first)) {
                first.arguments[0] = t.objectExpression(initProps);
                return first;
              }
            }
          }
          var visitor = {ObjectExpression: {exit: function exit(node, parent, scope, file) {
                var hasComputed = false;
                var _arr3 = node.properties;
                for (var _i3 = 0; _i3 < _arr3.length; _i3++) {
                  var prop = _arr3[_i3];
                  hasComputed = t.isProperty(prop, {
                    computed: true,
                    kind: "init"
                  });
                  if (hasComputed)
                    break;
                }
                if (!hasComputed)
                  return;
                var initProps = [];
                var stopInits = false;
                node.properties = node.properties.filter(function(prop) {
                  if (prop.computed) {
                    stopInits = true;
                  }
                  if (prop.kind !== "init" || !stopInits) {
                    initProps.push(prop);
                    return false;
                  } else {
                    return true;
                  }
                });
                var objId = scope.generateUidIdentifierBasedOnNode(parent);
                var body = [];
                var callback = spec;
                if (file.isLoose("es6.properties.computed"))
                  callback = loose;
                var result = callback(node, body, objId, initProps, file);
                if (result)
                  return result;
                body.unshift(t.variableDeclaration("var", [t.variableDeclarator(objId, t.objectExpression(initProps))]));
                body.push(t.expressionStatement(objId));
                return body;
              }}};
          exports.visitor = visitor;
        }, {"179": 179}],
        104: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          var visitor = {Property: function Property(node) {
              if (node.method) {
                node.method = false;
              }
              if (node.shorthand) {
                node.shorthand = false;
              }
            }};
          exports.visitor = visitor;
        }, {}],
        105: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          var _helpersRegex = _dereq_(63);
          var regex = _interopRequireWildcard(_helpersRegex);
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          var visitor = {Literal: function Literal(node) {
              if (!regex.is(node, "y"))
                return;
              return t.newExpression(t.identifier("RegExp"), [t.literal(node.regex.pattern), t.literal(node.regex.flags)]);
            }};
          exports.visitor = visitor;
        }, {
          "179": 179,
          "63": 63
        }],
        106: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {"default": obj};
          }
          var _regexpuRewritePattern = _dereq_(583);
          var _regexpuRewritePattern2 = _interopRequireDefault(_regexpuRewritePattern);
          var _helpersRegex = _dereq_(63);
          var regex = _interopRequireWildcard(_helpersRegex);
          var visitor = {Literal: function Literal(node) {
              if (!regex.is(node, "u"))
                return;
              node.regex.pattern = _regexpuRewritePattern2["default"](node.regex.pattern, node.regex.flags);
              regex.pullFlag(node, "u");
            }};
          exports.visitor = visitor;
        }, {
          "583": 583,
          "63": 63
        }],
        107: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          var metadata = {
            group: "builtin-pre",
            optional: true
          };
          exports.metadata = metadata;
          var visitor = {ArrowFunctionExpression: function ArrowFunctionExpression(node, parent, scope, file) {
              if (node.shadow)
                return;
              node.shadow = {"this": false};
              var boundThis = t.thisExpression();
              boundThis._forceShadow = this;
              t.ensureBlock(node);
              this.get("body").unshiftContainer("body", t.expressionStatement(t.callExpression(file.addHelper("new-arrow-check"), [t.thisExpression(), boundThis])));
              return t.callExpression(t.memberExpression(node, t.identifier("bind")), [t.thisExpression()]);
            }};
          exports.visitor = visitor;
        }, {"179": 179}],
        108: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          function buildAssert(node, file) {
            return t.callExpression(file.addHelper("temporal-assert-defined"), [node, t.literal(node.name), file.addHelper("temporal-undefined")]);
          }
          function references(node, scope, state) {
            var declared = state.letRefs[node.name];
            if (!declared)
              return false;
            return scope.getBindingIdentifier(node.name) === declared;
          }
          var refVisitor = {
            ReferencedIdentifier: function ReferencedIdentifier(node, parent, scope, state) {
              if (t.isFor(parent) && parent.left === node)
                return;
              if (!references(node, scope, state))
                return;
              var assert = buildAssert(node, state.file);
              this.skip();
              if (t.isUpdateExpression(parent)) {
                if (parent._ignoreBlockScopingTDZ)
                  return;
                this.parentPath.replaceWith(t.sequenceExpression([assert, parent]));
              } else {
                return t.logicalExpression("&&", assert, node);
              }
            },
            AssignmentExpression: {exit: function exit(node, parent, scope, state) {
                if (node._ignoreBlockScopingTDZ)
                  return;
                var nodes = [];
                var ids = this.getBindingIdentifiers();
                for (var name in ids) {
                  var id = ids[name];
                  if (references(id, scope, state)) {
                    nodes.push(buildAssert(id, state.file));
                  }
                }
                if (nodes.length) {
                  node._ignoreBlockScopingTDZ = true;
                  nodes.push(node);
                  return nodes.map(t.expressionStatement);
                }
              }}
          };
          var metadata = {
            optional: true,
            group: "builtin-advanced"
          };
          exports.metadata = metadata;
          var visitor = {"Program|Loop|BlockStatement": {exit: function exit(node, parent, scope, file) {
                var letRefs = node._letReferences;
                if (!letRefs)
                  return;
                this.traverse(refVisitor, {
                  letRefs: letRefs,
                  file: file
                });
              }}};
          exports.visitor = visitor;
        }, {"179": 179}],
        109: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          var metadata = {
            group: "builtin-pre",
            optional: true
          };
          exports.metadata = metadata;
          var visitor = {Program: function Program() {
              var id = this.scope.generateUidIdentifier("null");
              this.unshiftContainer("body", [t.variableDeclaration("var", [t.variableDeclarator(id, t.literal(null))]), t.exportNamedDeclaration(null, [t.exportSpecifier(id, t.identifier("__proto__"))])]);
            }};
          exports.visitor = visitor;
        }, {"179": 179}],
        110: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          var metadata = {optional: true};
          exports.metadata = metadata;
          var visitor = {
            UnaryExpression: function UnaryExpression(node, parent, scope, file) {
              if (node._ignoreSpecSymbols)
                return;
              if (this.parentPath.isBinaryExpression() && t.EQUALITY_BINARY_OPERATORS.indexOf(parent.operator) >= 0) {
                var opposite = this.getOpposite();
                if (opposite.isLiteral() && opposite.node.value !== "symbol" && opposite.node.value !== "object")
                  return;
              }
              if (node.operator === "typeof") {
                var call = t.callExpression(file.addHelper("typeof"), [node.argument]);
                if (this.get("argument").isIdentifier()) {
                  var undefLiteral = t.literal("undefined");
                  var unary = t.unaryExpression("typeof", node.argument);
                  unary._ignoreSpecSymbols = true;
                  return t.conditionalExpression(t.binaryExpression("===", unary, undefLiteral), undefLiteral, call);
                } else {
                  return call;
                }
              }
            },
            BinaryExpression: function BinaryExpression(node, parent, scope, file) {
              if (node.operator === "instanceof") {
                return t.callExpression(file.addHelper("instanceof"), [node.left, node.right]);
              }
            },
            "VariableDeclaration|FunctionDeclaration": function VariableDeclarationFunctionDeclaration(node) {
              if (node._generated)
                this.skip();
            }
          };
          exports.visitor = visitor;
        }, {"179": 179}],
        111: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          var metadata = {
            optional: true,
            group: "builtin-pre"
          };
          exports.metadata = metadata;
          var visitor = {TemplateLiteral: function TemplateLiteral(node, parent) {
              if (t.isTaggedTemplateExpression(parent))
                return;
              for (var i = 0; i < node.expressions.length; i++) {
                node.expressions[i] = t.callExpression(t.identifier("String"), [node.expressions[i]]);
              }
            }};
          exports.visitor = visitor;
        }, {"179": 179}],
        112: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          function getSpreadLiteral(spread, scope) {
            if (scope.hub.file.isLoose("es6.spread") && !t.isIdentifier(spread.argument, {name: "arguments"})) {
              return spread.argument;
            } else {
              return scope.toArray(spread.argument, true);
            }
          }
          function hasSpread(nodes) {
            for (var i = 0; i < nodes.length; i++) {
              if (t.isSpreadElement(nodes[i])) {
                return true;
              }
            }
            return false;
          }
          function build(props, scope) {
            var nodes = [];
            var _props = [];
            var push = function push() {
              if (!_props.length)
                return;
              nodes.push(t.arrayExpression(_props));
              _props = [];
            };
            for (var i = 0; i < props.length; i++) {
              var prop = props[i];
              if (t.isSpreadElement(prop)) {
                push();
                nodes.push(getSpreadLiteral(prop, scope));
              } else {
                _props.push(prop);
              }
            }
            push();
            return nodes;
          }
          var metadata = {group: "builtin-advanced"};
          exports.metadata = metadata;
          var visitor = {
            ArrayExpression: function ArrayExpression(node, parent, scope) {
              var elements = node.elements;
              if (!hasSpread(elements))
                return;
              var nodes = build(elements, scope);
              var first = nodes.shift();
              if (!t.isArrayExpression(first)) {
                nodes.unshift(first);
                first = t.arrayExpression([]);
              }
              return t.callExpression(t.memberExpression(first, t.identifier("concat")), nodes);
            },
            CallExpression: function CallExpression(node, parent, scope) {
              var args = node.arguments;
              if (!hasSpread(args))
                return;
              var contextLiteral = t.identifier("undefined");
              node.arguments = [];
              var nodes;
              if (args.length === 1 && args[0].argument.name === "arguments") {
                nodes = [args[0].argument];
              } else {
                nodes = build(args, scope);
              }
              var first = nodes.shift();
              if (nodes.length) {
                node.arguments.push(t.callExpression(t.memberExpression(first, t.identifier("concat")), nodes));
              } else {
                node.arguments.push(first);
              }
              var callee = node.callee;
              if (this.get("callee").isMemberExpression()) {
                var temp = scope.maybeGenerateMemoised(callee.object);
                if (temp) {
                  callee.object = t.assignmentExpression("=", temp, callee.object);
                  contextLiteral = temp;
                } else {
                  contextLiteral = callee.object;
                }
                t.appendToMemberExpression(callee, t.identifier("apply"));
              } else {
                node.callee = t.memberExpression(node.callee, t.identifier("apply"));
              }
              node.arguments.unshift(contextLiteral);
            },
            NewExpression: function NewExpression(node, parent, scope, file) {
              var args = node.arguments;
              if (!hasSpread(args))
                return;
              var nodes = build(args, scope);
              var context = t.arrayExpression([t.literal(null)]);
              args = t.callExpression(t.memberExpression(context, t.identifier("concat")), nodes);
              return t.newExpression(t.callExpression(t.memberExpression(file.addHelper("bind"), t.identifier("apply")), [node.callee, args]), []);
            }
          };
          exports.visitor = visitor;
        }, {"179": 179}],
        113: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {"default": obj};
          }
          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }
          var _lodashCollectionReduceRight = _dereq_(448);
          var _lodashCollectionReduceRight2 = _interopRequireDefault(_lodashCollectionReduceRight);
          var _messages = _dereq_(43);
          var messages = _interopRequireWildcard(_messages);
          var _lodashArrayFlatten = _dereq_(439);
          var _lodashArrayFlatten2 = _interopRequireDefault(_lodashArrayFlatten);
          var _util = _dereq_(182);
          var util = _interopRequireWildcard(_util);
          var _lodashCollectionMap = _dereq_(447);
          var _lodashCollectionMap2 = _interopRequireDefault(_lodashCollectionMap);
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          var metadata = {group: "builtin-trailing"};
          exports.metadata = metadata;
          var visitor = {Function: function Function(node, parent, scope, file) {
              if (node.generator || node.async)
                return;
              var tailCall = new TailCallTransformer(this, scope, file);
              tailCall.run();
            }};
          exports.visitor = visitor;
          function returnBlock(expr) {
            return t.blockStatement([t.returnStatement(expr)]);
          }
          var visitor = {
            enter: function enter(node, parent) {
              if (t.isTryStatement(parent)) {
                if (node === parent.block) {
                  this.skip();
                } else if (parent.finalizer && node !== parent.finalizer) {
                  this.skip();
                }
              }
            },
            ReturnStatement: function ReturnStatement(node, parent, scope, state) {
              return state.subTransform(node.argument);
            },
            Function: function Function() {
              this.skip();
            },
            VariableDeclaration: function VariableDeclaration(node, parent, scope, state) {
              state.vars.push(node);
            },
            ThisExpression: function ThisExpression(node, parent, scope, state) {
              if (!state.isShadowed) {
                state.needsThis = true;
                state.thisPaths.push(this);
              }
            },
            ReferencedIdentifier: function ReferencedIdentifier(node, parent, scope, state) {
              if (node.name === "arguments" && (!state.isShadowed || node._shadowedFunctionLiteral)) {
                state.needsArguments = true;
                state.argumentsPaths.push(this);
              }
            }
          };
          var TailCallTransformer = (function() {
            function TailCallTransformer(path, scope, file) {
              _classCallCheck(this, TailCallTransformer);
              this.hasTailRecursion = false;
              this.needsArguments = false;
              this.argumentsPaths = [];
              this.setsArguments = false;
              this.needsThis = false;
              this.thisPaths = [];
              this.isShadowed = path.isArrowFunctionExpression() || path.is("shadow");
              this.ownerId = path.node.id;
              this.vars = [];
              this.scope = scope;
              this.path = path;
              this.file = file;
              this.node = path.node;
            }
            TailCallTransformer.prototype.getArgumentsId = function getArgumentsId() {
              return this.argumentsId = this.argumentsId || this.scope.generateUidIdentifier("arguments");
            };
            TailCallTransformer.prototype.getThisId = function getThisId() {
              return this.thisId = this.thisId || this.scope.generateUidIdentifier("this");
            };
            TailCallTransformer.prototype.getLeftId = function getLeftId() {
              return this.leftId = this.leftId || this.scope.generateUidIdentifier("left");
            };
            TailCallTransformer.prototype.getFunctionId = function getFunctionId() {
              return this.functionId = this.functionId || this.scope.generateUidIdentifier("function");
            };
            TailCallTransformer.prototype.getAgainId = function getAgainId() {
              return this.againId = this.againId || this.scope.generateUidIdentifier("again");
            };
            TailCallTransformer.prototype.getParams = function getParams() {
              var params = this.params;
              if (!params) {
                params = this.node.params;
                this.paramDecls = [];
                for (var i = 0; i < params.length; i++) {
                  var param = params[i];
                  if (!param._isDefaultPlaceholder) {
                    this.paramDecls.push(t.variableDeclarator(param, params[i] = this.scope.generateUidIdentifier("x")));
                  }
                }
              }
              return this.params = params;
            };
            TailCallTransformer.prototype.hasDeopt = function hasDeopt() {
              var ownerIdInfo = this.scope.getBinding(this.ownerId.name);
              return ownerIdInfo && !ownerIdInfo.constant;
            };
            TailCallTransformer.prototype.run = function run() {
              var node = this.node;
              var ownerId = this.ownerId;
              if (!ownerId)
                return;
              this.path.traverse(visitor, this);
              if (!this.hasTailRecursion)
                return;
              if (this.hasDeopt()) {
                this.file.log.deopt(node, messages.get("tailCallReassignmentDeopt"));
                return;
              }
              var body = this.path.ensureBlock().body;
              for (var i = 0; i < body.length; i++) {
                var bodyNode = body[i];
                if (!t.isFunctionDeclaration(bodyNode))
                  continue;
                bodyNode = body[i] = t.variableDeclaration("var", [t.variableDeclarator(bodyNode.id, t.toExpression(bodyNode))]);
                bodyNode._blockHoist = 2;
              }
              var paramDecls = this.paramDecls;
              if (paramDecls.length > 0) {
                var paramDecl = t.variableDeclaration("var", paramDecls);
                paramDecl._blockHoist = Infinity;
                body.unshift(paramDecl);
              }
              body.unshift(t.expressionStatement(t.assignmentExpression("=", this.getAgainId(), t.literal(false))));
              node.body = util.template("tail-call-body", {
                FUNCTION_ID: this.getFunctionId(),
                AGAIN_ID: this.getAgainId(),
                BLOCK: node.body
              });
              var topVars = [];
              if (this.needsThis) {
                var _arr = this.thisPaths;
                for (var _i = 0; _i < _arr.length; _i++) {
                  var path = _arr[_i];
                  path.replaceWith(this.getThisId());
                }
                topVars.push(t.variableDeclarator(this.getThisId(), t.thisExpression()));
              }
              if (this.needsArguments || this.setsArguments) {
                var _arr2 = this.argumentsPaths;
                for (var _i2 = 0; _i2 < _arr2.length; _i2++) {
                  var _path = _arr2[_i2];
                  _path.replaceWith(this.argumentsId);
                }
                var decl = t.variableDeclarator(this.argumentsId);
                if (this.argumentsId) {
                  decl.init = t.identifier("arguments");
                  decl.init._shadowedFunctionLiteral = this.path;
                }
                topVars.push(decl);
              }
              var leftId = this.leftId;
              if (leftId) {
                topVars.push(t.variableDeclarator(leftId));
              }
              if (topVars.length > 0) {
                node.body.body.unshift(t.variableDeclaration("var", topVars));
              }
            };
            TailCallTransformer.prototype.subTransform = function subTransform(node) {
              if (!node)
                return;
              var handler = this["subTransform" + node.type];
              if (handler)
                return handler.call(this, node);
            };
            TailCallTransformer.prototype.subTransformConditionalExpression = function subTransformConditionalExpression(node) {
              var callConsequent = this.subTransform(node.consequent);
              var callAlternate = this.subTransform(node.alternate);
              if (!callConsequent && !callAlternate) {
                return;
              }
              node.type = "IfStatement";
              node.consequent = callConsequent ? t.toBlock(callConsequent) : returnBlock(node.consequent);
              if (callAlternate) {
                node.alternate = t.isIfStatement(callAlternate) ? callAlternate : t.toBlock(callAlternate);
              } else {
                node.alternate = returnBlock(node.alternate);
              }
              return [node];
            };
            TailCallTransformer.prototype.subTransformLogicalExpression = function subTransformLogicalExpression(node) {
              var callRight = this.subTransform(node.right);
              if (!callRight)
                return;
              var leftId = this.getLeftId();
              var testExpr = t.assignmentExpression("=", leftId, node.left);
              if (node.operator === "&&") {
                testExpr = t.unaryExpression("!", testExpr);
              }
              return [t.ifStatement(testExpr, returnBlock(leftId))].concat(callRight);
            };
            TailCallTransformer.prototype.subTransformSequenceExpression = function subTransformSequenceExpression(node) {
              var seq = node.expressions;
              var lastCall = this.subTransform(seq[seq.length - 1]);
              if (!lastCall) {
                return;
              }
              if (--seq.length === 1) {
                node = seq[0];
              }
              return [t.expressionStatement(node)].concat(lastCall);
            };
            TailCallTransformer.prototype.subTransformCallExpression = function subTransformCallExpression(node) {
              var callee = node.callee;
              var thisBinding,
                  args;
              if (t.isMemberExpression(callee, {computed: false}) && t.isIdentifier(callee.property)) {
                switch (callee.property.name) {
                  case "call":
                    args = t.arrayExpression(node.arguments.slice(1));
                    break;
                  case "apply":
                    args = node.arguments[1] || t.identifier("undefined");
                    this.needsArguments = true;
                    break;
                  default:
                    return;
                }
                thisBinding = node.arguments[0];
                callee = callee.object;
              }
              if (!t.isIdentifier(callee) || !this.scope.bindingIdentifierEquals(callee.name, this.ownerId)) {
                return;
              }
              this.hasTailRecursion = true;
              if (this.hasDeopt())
                return;
              var body = [];
              if (this.needsThis && !t.isThisExpression(thisBinding)) {
                body.push(t.expressionStatement(t.assignmentExpression("=", this.getThisId(), thisBinding || t.identifier("undefined"))));
              }
              if (!args) {
                args = t.arrayExpression(node.arguments);
              }
              var argumentsId = this.getArgumentsId();
              var params = this.getParams();
              if (this.needsArguments) {
                body.push(t.expressionStatement(t.assignmentExpression("=", argumentsId, args)));
              }
              if (t.isArrayExpression(args)) {
                var elems = args.elements;
                while (elems.length < params.length) {
                  elems.push(t.identifier("undefined"));
                }
                for (var i = 0; i < elems.length; i++) {
                  var param = params[i];
                  var elem = elems[i];
                  if (param && !param._isDefaultPlaceholder) {
                    elems[i] = t.assignmentExpression("=", param, elem);
                  } else {}
                }
                if (!this.needsArguments) {
                  var _arr3 = elems;
                  for (var _i3 = 0; _i3 < _arr3.length; _i3++) {
                    var elem = _arr3[_i3];
                    if (!this.scope.isPure(elem)) {
                      body.push(t.expressionStatement(elem));
                    }
                  }
                }
              } else {
                this.setsArguments = true;
                for (var i = 0; i < params.length; i++) {
                  var param = params[i];
                  if (!param._isDefaultPlaceholder) {
                    body.push(t.expressionStatement(t.assignmentExpression("=", param, t.memberExpression(argumentsId, t.literal(i), true))));
                  }
                }
              }
              body.push(t.expressionStatement(t.assignmentExpression("=", this.getAgainId(), t.literal(true))));
              if (this.vars.length > 0) {
                var declarations = _lodashArrayFlatten2["default"](_lodashCollectionMap2["default"](this.vars, function(decl) {
                  return decl.declarations;
                }));
                var assignment = _lodashCollectionReduceRight2["default"](declarations, function(expr, decl) {
                  return t.assignmentExpression("=", decl.id, expr);
                }, t.identifier("undefined"));
                var statement = t.expressionStatement(assignment);
                body.push(statement);
              }
              body.push(t.continueStatement(this.getFunctionId()));
              return body;
            };
            return TailCallTransformer;
          })();
        }, {
          "179": 179,
          "182": 182,
          "43": 43,
          "439": 439,
          "447": 447,
          "448": 448
        }],
        114: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          var metadata = {group: "builtin-pre"};
          exports.metadata = metadata;
          function isString(node) {
            return t.isLiteral(node) && typeof node.value === "string";
          }
          function buildBinaryExpression(left, right) {
            var node = t.binaryExpression("+", left, right);
            node._templateLiteralProduced = true;
            return node;
          }
          function crawl(path) {
            if (path.is("_templateLiteralProduced")) {
              crawl(path.get("left"));
              crawl(path.get("right"));
            } else if (!path.isBaseType("string") && !path.isBaseType("number")) {
              path.replaceWith(t.callExpression(t.identifier("String"), [path.node]));
            }
          }
          var visitor = {
            TaggedTemplateExpression: function TaggedTemplateExpression(node, parent, scope, file) {
              var quasi = node.quasi;
              var args = [];
              var strings = [];
              var raw = [];
              var _arr = quasi.quasis;
              for (var _i = 0; _i < _arr.length; _i++) {
                var elem = _arr[_i];
                strings.push(t.literal(elem.value.cooked));
                raw.push(t.literal(elem.value.raw));
              }
              strings = t.arrayExpression(strings);
              raw = t.arrayExpression(raw);
              var templateName = "tagged-template-literal";
              if (file.isLoose("es6.templateLiterals"))
                templateName += "-loose";
              var templateObject = file.addTemplateObject(templateName, strings, raw);
              args.push(templateObject);
              args = args.concat(quasi.expressions);
              return t.callExpression(node.tag, args);
            },
            TemplateLiteral: function TemplateLiteral(node, parent, scope, file) {
              var nodes = [];
              var _arr2 = node.quasis;
              for (var _i2 = 0; _i2 < _arr2.length; _i2++) {
                var elem = _arr2[_i2];
                nodes.push(t.literal(elem.value.cooked));
                var expr = node.expressions.shift();
                if (expr)
                  nodes.push(expr);
              }
              nodes = nodes.filter(function(n) {
                return !t.isLiteral(n, {value: ""});
              });
              if (!isString(nodes[0]) && !isString(nodes[1])) {
                nodes.unshift(t.literal(""));
              }
              if (nodes.length > 1) {
                var root = buildBinaryExpression(nodes.shift(), nodes.shift());
                var _arr3 = nodes;
                for (var _i3 = 0; _i3 < _arr3.length; _i3++) {
                  var _node = _arr3[_i3];
                  root = buildBinaryExpression(root, _node);
                }
                this.replaceWith(root);
              } else {
                return nodes[0];
              }
            }
          };
          exports.visitor = visitor;
        }, {"179": 179}],
        115: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          var metadata = {stage: 3};
          exports.metadata = metadata;
        }, {}],
        116: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          var metadata = {
            stage: 1,
            dependencies: ["es6.classes"]
          };
          exports.metadata = metadata;
        }, {}],
        117: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {"default": obj};
          }
          var _helpersBuildComprehension = _dereq_(54);
          var _helpersBuildComprehension2 = _interopRequireDefault(_helpersBuildComprehension);
          var _traversal = _dereq_(148);
          var _traversal2 = _interopRequireDefault(_traversal);
          var _util = _dereq_(182);
          var util = _interopRequireWildcard(_util);
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          var metadata = {stage: 0};
          exports.metadata = metadata;
          var visitor = {ComprehensionExpression: function ComprehensionExpression(node, parent, scope) {
              var callback = array;
              if (node.generator)
                callback = generator;
              return callback(node, parent, scope);
            }};
          exports.visitor = visitor;
          function generator(node) {
            var body = [];
            var container = t.functionExpression(null, [], t.blockStatement(body), true);
            container.shadow = true;
            body.push(_helpersBuildComprehension2["default"](node, function() {
              return t.expressionStatement(t.yieldExpression(node.body));
            }));
            return t.callExpression(container, []);
          }
          function array(node, parent, scope) {
            var uid = scope.generateUidIdentifierBasedOnNode(parent);
            var container = util.template("array-comprehension-container", {KEY: uid});
            container.callee.shadow = true;
            var block = container.callee.body;
            var body = block.body;
            if (_traversal2["default"].hasType(node, scope, "YieldExpression", t.FUNCTION_TYPES)) {
              container.callee.generator = true;
              container = t.yieldExpression(container, true);
            }
            var returnStatement = body.pop();
            body.push(_helpersBuildComprehension2["default"](node, function() {
              return util.template("array-push", {
                STATEMENT: node.body,
                KEY: uid
              }, true);
            }));
            body.push(returnStatement);
            return container;
          }
        }, {
          "148": 148,
          "179": 179,
          "182": 182,
          "54": 54
        }],
        118: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {"default": obj};
          }
          var _helpersMemoiseDecorators = _dereq_(60);
          var _helpersMemoiseDecorators2 = _interopRequireDefault(_helpersMemoiseDecorators);
          var _helpersDefineMap = _dereq_(57);
          var defineMap = _interopRequireWildcard(_helpersDefineMap);
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          var metadata = {
            dependencies: ["es6.classes"],
            optional: true,
            stage: 1
          };
          exports.metadata = metadata;
          var visitor = {ObjectExpression: function ObjectExpression(node, parent, scope, file) {
              var hasDecorators = false;
              for (var i = 0; i < node.properties.length; i++) {
                var prop = node.properties[i];
                if (prop.decorators) {
                  hasDecorators = true;
                  break;
                }
              }
              if (!hasDecorators)
                return;
              var mutatorMap = {};
              for (var i = 0; i < node.properties.length; i++) {
                var prop = node.properties[i];
                if (prop.decorators)
                  _helpersMemoiseDecorators2["default"](prop.decorators, scope);
                if (prop.kind === "init" && !prop.method) {
                  prop.kind = "";
                  prop.value = t.functionExpression(null, [], t.blockStatement([t.returnStatement(prop.value)]));
                }
                defineMap.push(mutatorMap, prop, "initializer", file);
              }
              var obj = defineMap.toClassObject(mutatorMap);
              obj = defineMap.toComputedObjectFromClass(obj);
              return t.callExpression(file.addHelper("create-decorated-object"), [obj]);
            }};
          exports.visitor = visitor;
        }, {
          "179": 179,
          "57": 57,
          "60": 60
        }],
        119: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          var metadata = {
            optional: true,
            stage: 0
          };
          exports.metadata = metadata;
          var visitor = {DoExpression: function DoExpression(node) {
              var body = node.body.body;
              if (body.length) {
                return body;
              } else {
                return t.identifier("undefined");
              }
            }};
          exports.visitor = visitor;
        }, {"179": 179}],
        120: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {"default": obj};
          }
          var _helpersBuildBinaryAssignmentOperatorTransformer = _dereq_(53);
          var _helpersBuildBinaryAssignmentOperatorTransformer2 = _interopRequireDefault(_helpersBuildBinaryAssignmentOperatorTransformer);
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          var metadata = {stage: 3};
          exports.metadata = metadata;
          var MATH_POW = t.memberExpression(t.identifier("Math"), t.identifier("pow"));
          var visitor = _helpersBuildBinaryAssignmentOperatorTransformer2["default"]({
            operator: "**",
            build: function build(left, right) {
              return t.callExpression(MATH_POW, [left, right]);
            }
          });
          exports.visitor = visitor;
        }, {
          "179": 179,
          "53": 53
        }],
        121: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          var metadata = {stage: 1};
          exports.metadata = metadata;
          function build(node, nodes, scope) {
            var first = node.specifiers[0];
            if (!t.isExportNamespaceSpecifier(first) && !t.isExportDefaultSpecifier(first))
              return;
            var specifier = node.specifiers.shift();
            var uid = scope.generateUidIdentifier(specifier.exported.name);
            var newSpecifier;
            if (t.isExportNamespaceSpecifier(specifier)) {
              newSpecifier = t.importNamespaceSpecifier(uid);
            } else {
              newSpecifier = t.importDefaultSpecifier(uid);
            }
            nodes.push(t.importDeclaration([newSpecifier], node.source));
            nodes.push(t.exportNamedDeclaration(null, [t.exportSpecifier(uid, specifier.exported)]));
            build(node, nodes, scope);
          }
          var visitor = {ExportNamedDeclaration: function ExportNamedDeclaration(node, parent, scope) {
              var nodes = [];
              build(node, nodes, scope);
              if (!nodes.length)
                return;
              if (node.specifiers.length >= 1) {
                nodes.push(node);
              }
              return nodes;
            }};
          exports.visitor = visitor;
        }, {"179": 179}],
        122: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          var metadata = {
            optional: true,
            stage: 0
          };
          exports.metadata = metadata;
          function getTempId(scope) {
            var id = scope.path.getData("functionBind");
            if (id)
              return id;
            id = scope.generateDeclaredUidIdentifier("context");
            return scope.path.setData("functionBind", id);
          }
          function getStaticContext(bind, scope) {
            var object = bind.object || bind.callee.object;
            return scope.isStatic(object) && object;
          }
          function inferBindContext(bind, scope) {
            var staticContext = getStaticContext(bind, scope);
            if (staticContext)
              return staticContext;
            var tempId = getTempId(scope);
            if (bind.object) {
              bind.callee = t.sequenceExpression([t.assignmentExpression("=", tempId, bind.object), bind.callee]);
            } else {
              bind.callee.object = t.assignmentExpression("=", tempId, bind.callee.object);
            }
            return tempId;
          }
          var visitor = {
            CallExpression: function CallExpression(node, parent, scope) {
              var bind = node.callee;
              if (!t.isBindExpression(bind))
                return;
              var context = inferBindContext(bind, scope);
              node.callee = t.memberExpression(bind.callee, t.identifier("call"));
              node.arguments.unshift(context);
            },
            BindExpression: function BindExpression(node, parent, scope) {
              var context = inferBindContext(node, scope);
              return t.callExpression(t.memberExpression(node.callee, t.identifier("bind")), [context]);
            }
          };
          exports.visitor = visitor;
        }, {"179": 179}],
        123: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          var metadata = {
            stage: 2,
            dependencies: ["es6.destructuring"]
          };
          exports.metadata = metadata;
          var hasSpread = function hasSpread(node) {
            for (var i = 0; i < node.properties.length; i++) {
              if (t.isSpreadProperty(node.properties[i])) {
                return true;
              }
            }
            return false;
          };
          var visitor = {ObjectExpression: function ObjectExpression(node, parent, scope, file) {
              if (!hasSpread(node))
                return;
              var args = [];
              var props = [];
              var push = function push() {
                if (!props.length)
                  return;
                args.push(t.objectExpression(props));
                props = [];
              };
              for (var i = 0; i < node.properties.length; i++) {
                var prop = node.properties[i];
                if (t.isSpreadProperty(prop)) {
                  push();
                  args.push(prop.argument);
                } else {
                  props.push(prop);
                }
              }
              push();
              if (!t.isObjectExpression(args[0])) {
                args.unshift(t.objectExpression([]));
              }
              return t.callExpression(file.addHelper("extends"), args);
            }};
          exports.visitor = visitor;
        }, {"179": 179}],
        124: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          var metadata = {stage: 2};
          exports.metadata = metadata;
        }, {}],
        125: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          exports.internal = internal;
          exports.blacklist = blacklist;
          exports.whitelist = whitelist;
          exports.stage = stage;
          exports.optional = optional;
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {"default": obj};
          }
          var _lodashCollectionIncludes = _dereq_(446);
          var _lodashCollectionIncludes2 = _interopRequireDefault(_lodashCollectionIncludes);
          function internal(transformer) {
            if (transformer.key[0] === "_")
              return true;
          }
          function blacklist(transformer, opts) {
            var blacklist = opts.blacklist;
            if (blacklist.length && _lodashCollectionIncludes2["default"](blacklist, transformer.key))
              return false;
          }
          function whitelist(transformer, opts) {
            var whitelist = opts.whitelist;
            if (whitelist)
              return _lodashCollectionIncludes2["default"](whitelist, transformer.key);
          }
          function stage(transformer, opts) {
            var stage = transformer.metadata.stage;
            if (stage != null && stage >= opts.stage)
              return true;
          }
          function optional(transformer, opts) {
            if (transformer.metadata.optional && !_lodashCollectionIncludes2["default"](opts.optional, transformer.key))
              return false;
          }
        }, {"446": 446}],
        126: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          exports["default"] = {
            "minification.constantFolding": _dereq_(203),
            strict: _dereq_(142),
            eval: _dereq_(205),
            _validation: _dereq_(132),
            _hoistDirectives: _dereq_(128),
            "minification.removeDebugger": _dereq_(214),
            "minification.removeConsole": _dereq_(213),
            "utility.inlineEnvironmentVariables": _dereq_(206),
            "minification.deadCodeElimination": _dereq_(204),
            _modules: _dereq_(130),
            "react.displayName": _dereq_(212),
            "es6.spec.modules": _dereq_(109),
            "es6.spec.arrowFunctions": _dereq_(107),
            "es6.spec.templateLiterals": _dereq_(111),
            "es6.templateLiterals": _dereq_(114),
            "es6.literals": _dereq_(97),
            "validation.undeclaredVariableCheck": _dereq_(217),
            "spec.functionName": _dereq_(144),
            "es7.classProperties": _dereq_(116),
            "es7.trailingFunctionCommas": _dereq_(124),
            "es7.asyncFunctions": _dereq_(115),
            "es7.decorators": _dereq_(118),
            "validation.react": _dereq_(145),
            "es6.arrowFunctions": _dereq_(89),
            "spec.blockScopedFunctions": _dereq_(143),
            "optimisation.react.constantElements": _dereq_(211),
            "optimisation.react.inlineElements": _dereq_(135),
            "es7.comprehensions": _dereq_(117),
            "es6.classes": _dereq_(91),
            asyncToGenerator: _dereq_(136),
            bluebirdCoroutines: _dereq_(137),
            "es6.objectSuper": _dereq_(99),
            "es7.objectRestSpread": _dereq_(123),
            "es7.exponentiationOperator": _dereq_(120),
            "es5.properties.mutators": _dereq_(88),
            "es6.properties.shorthand": _dereq_(104),
            "es6.properties.computed": _dereq_(103),
            "optimisation.flow.forOf": _dereq_(133),
            "es6.forOf": _dereq_(96),
            "es6.regex.sticky": _dereq_(105),
            "es6.regex.unicode": _dereq_(106),
            "es6.constants": _dereq_(94),
            "es7.exportExtensions": _dereq_(121),
            "spec.protoToAssign": _dereq_(210),
            "es7.doExpressions": _dereq_(119),
            "es6.spec.symbols": _dereq_(110),
            "es7.functionBind": _dereq_(122),
            "spec.undefinedToVoid": _dereq_(218),
            "es6.spread": _dereq_(112),
            "es6.parameters": _dereq_(101),
            "es6.destructuring": _dereq_(95),
            "es6.blockScoping": _dereq_(90),
            "es6.spec.blockScoping": _dereq_(108),
            reactCompat: _dereq_(139),
            react: _dereq_(140),
            regenerator: _dereq_(141),
            runtime: _dereq_(216),
            "es6.modules": _dereq_(98),
            _moduleFormatter: _dereq_(129),
            "es6.tailCall": _dereq_(113),
            _shadowFunctions: _dereq_(131),
            "es3.propertyLiterals": _dereq_(87),
            "es3.memberExpressionLiterals": _dereq_(86),
            "minification.memberExpressionLiterals": _dereq_(208),
            "minification.propertyLiterals": _dereq_(209),
            _blockHoist: _dereq_(127),
            jscript: _dereq_(207),
            flow: _dereq_(138),
            "optimisation.modules.system": _dereq_(134)
          };
          module.exports = exports["default"];
        }, {
          "101": 101,
          "103": 103,
          "104": 104,
          "105": 105,
          "106": 106,
          "107": 107,
          "108": 108,
          "109": 109,
          "110": 110,
          "111": 111,
          "112": 112,
          "113": 113,
          "114": 114,
          "115": 115,
          "116": 116,
          "117": 117,
          "118": 118,
          "119": 119,
          "120": 120,
          "121": 121,
          "122": 122,
          "123": 123,
          "124": 124,
          "127": 127,
          "128": 128,
          "129": 129,
          "130": 130,
          "131": 131,
          "132": 132,
          "133": 133,
          "134": 134,
          "135": 135,
          "136": 136,
          "137": 137,
          "138": 138,
          "139": 139,
          "140": 140,
          "141": 141,
          "142": 142,
          "143": 143,
          "144": 144,
          "145": 145,
          "203": 203,
          "204": 204,
          "205": 205,
          "206": 206,
          "207": 207,
          "208": 208,
          "209": 209,
          "210": 210,
          "211": 211,
          "212": 212,
          "213": 213,
          "214": 214,
          "216": 216,
          "217": 217,
          "218": 218,
          "86": 86,
          "87": 87,
          "88": 88,
          "89": 89,
          "90": 90,
          "91": 91,
          "94": 94,
          "95": 95,
          "96": 96,
          "97": 97,
          "98": 98,
          "99": 99
        }],
        127: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {"default": obj};
          }
          var _lodashCollectionSortBy = _dereq_(450);
          var _lodashCollectionSortBy2 = _interopRequireDefault(_lodashCollectionSortBy);
          var metadata = {group: "builtin-trailing"};
          exports.metadata = metadata;
          var visitor = {Block: {exit: function exit(node) {
                var hasChange = false;
                for (var i = 0; i < node.body.length; i++) {
                  var bodyNode = node.body[i];
                  if (bodyNode && bodyNode._blockHoist != null) {
                    hasChange = true;
                    break;
                  }
                }
                if (!hasChange)
                  return;
                node.body = _lodashCollectionSortBy2["default"](node.body, function(bodyNode) {
                  var priority = bodyNode && bodyNode._blockHoist;
                  if (priority == null)
                    priority = 1;
                  if (priority === true)
                    priority = 2;
                  return -1 * priority;
                });
              }}};
          exports.visitor = visitor;
        }, {"450": 450}],
        128: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          var metadata = {group: "builtin-pre"};
          exports.metadata = metadata;
          var visitor = {Block: {exit: function exit(node) {
                for (var i = 0; i < node.body.length; i++) {
                  var bodyNode = node.body[i];
                  if (t.isExpressionStatement(bodyNode) && t.isLiteral(bodyNode.expression)) {
                    bodyNode._blockHoist = Infinity;
                  } else {
                    return;
                  }
                }
              }}};
          exports.visitor = visitor;
        }, {"179": 179}],
        129: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          var metadata = {group: "builtin-modules"};
          exports.metadata = metadata;
          var visitor = {Program: {exit: function exit(program, parent, scope, file) {
                var _arr = file.dynamicImports;
                for (var _i = 0; _i < _arr.length; _i++) {
                  var node = _arr[_i];
                  node._blockHoist = 3;
                }
                program.body = file.dynamicImports.concat(program.body);
                if (!file.transformers["es6.modules"].canTransform())
                  return;
                if (file.moduleFormatter.transform) {
                  file.moduleFormatter.transform(program);
                }
              }}};
          exports.visitor = visitor;
        }, {}],
        130: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          function getDeclar(node) {
            var declar = node.declaration;
            t.inheritsComments(declar, node);
            t.removeComments(node);
            declar._ignoreUserWhitespace = true;
            return declar;
          }
          function buildExportSpecifier(id) {
            return t.exportSpecifier(cloneIdentifier(id), cloneIdentifier(id));
          }
          function cloneIdentifier(_ref) {
            var name = _ref.name;
            var loc = _ref.loc;
            var id = t.identifier(name);
            id._loc = loc;
            return id;
          }
          var metadata = {group: "builtin-pre"};
          exports.metadata = metadata;
          var visitor = {
            ExportDefaultDeclaration: function ExportDefaultDeclaration(node, parent, scope) {
              var declar = node.declaration;
              if (t.isClassDeclaration(declar)) {
                var nodes = [getDeclar(node), node];
                node.declaration = declar.id;
                return nodes;
              } else if (t.isClassExpression(declar)) {
                var temp = scope.generateUidIdentifier("default");
                node.declaration = t.variableDeclaration("var", [t.variableDeclarator(temp, declar)]);
                var nodes = [getDeclar(node), node];
                node.declaration = temp;
                return nodes;
              } else if (t.isFunctionDeclaration(declar)) {
                node._blockHoist = 2;
                var nodes = [getDeclar(node), node];
                node.declaration = declar.id;
                return nodes;
              }
            },
            ExportNamedDeclaration: function ExportNamedDeclaration(node) {
              var declar = node.declaration;
              if (t.isClassDeclaration(declar)) {
                node.specifiers = [buildExportSpecifier(declar.id)];
                var nodes = [getDeclar(node), node];
                node.declaration = null;
                return nodes;
              } else if (t.isFunctionDeclaration(declar)) {
                var newExport = t.exportNamedDeclaration(null, [buildExportSpecifier(declar.id)]);
                newExport._blockHoist = 2;
                return [getDeclar(node), newExport];
              } else if (t.isVariableDeclaration(declar)) {
                var specifiers = [];
                var bindings = this.get("declaration").getBindingIdentifiers();
                for (var key in bindings) {
                  specifiers.push(buildExportSpecifier(bindings[key]));
                }
                return [declar, t.exportNamedDeclaration(null, specifiers)];
              }
            },
            Program: {
              enter: function enter(node) {
                var imports = [];
                var rest = [];
                for (var i = 0; i < node.body.length; i++) {
                  var bodyNode = node.body[i];
                  if (t.isImportDeclaration(bodyNode)) {
                    imports.push(bodyNode);
                  } else {
                    rest.push(bodyNode);
                  }
                }
                node.body = imports.concat(rest);
              },
              exit: function exit(node, parent, scope, file) {
                if (!file.transformers["es6.modules"].canTransform())
                  return;
                if (file.moduleFormatter.setup) {
                  file.moduleFormatter.setup();
                }
              }
            }
          };
          exports.visitor = visitor;
        }, {"179": 179}],
        131: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          var metadata = {group: "builtin-trailing"};
          exports.metadata = metadata;
          function shouldShadow(path, shadowPath) {
            if (path.is("_forceShadow")) {
              return true;
            } else {
              return shadowPath && !shadowPath.isArrowFunctionExpression();
            }
          }
          function remap(path, key, create) {
            var shadowPath = path.inShadow(key);
            if (!shouldShadow(path, shadowPath))
              return;
            var shadowFunction = path.node._shadowedFunctionLiteral;
            var currentFunction;
            var fnPath = path.findParent(function(path) {
              if (path.isProgram() || path.isFunction()) {
                currentFunction = currentFunction || path;
              }
              if (path.isProgram()) {
                return true;
              } else if (path.isFunction()) {
                if (shadowFunction) {
                  return path === shadowFunction || path.node === shadowFunction.node;
                } else {
                  return !path.is("shadow");
                }
              }
              return false;
            });
            if (fnPath === currentFunction)
              return;
            var cached = fnPath.getData(key);
            if (cached)
              return cached;
            var init = create();
            var id = path.scope.generateUidIdentifier(key);
            fnPath.setData(key, id);
            fnPath.scope.push({
              id: id,
              init: init
            });
            return id;
          }
          var visitor = {
            ThisExpression: function ThisExpression() {
              return remap(this, "this", function() {
                return t.thisExpression();
              });
            },
            ReferencedIdentifier: function ReferencedIdentifier(node) {
              if (node.name === "arguments") {
                return remap(this, "arguments", function() {
                  return t.identifier("arguments");
                });
              }
            }
          };
          exports.visitor = visitor;
        }, {"179": 179}],
        132: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          var _messages = _dereq_(43);
          var messages = _interopRequireWildcard(_messages);
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          var metadata = {group: "builtin-pre"};
          exports.metadata = metadata;
          var visitor = {
            ForXStatement: function ForXStatement(node, parent, scope, file) {
              var left = node.left;
              if (t.isVariableDeclaration(left)) {
                var declar = left.declarations[0];
                if (declar.init)
                  throw file.errorWithNode(declar, messages.get("noAssignmentsInForHead"));
              }
            },
            Property: function Property(node, parent, scope, file) {
              if (node.kind === "set") {
                var first = node.value.params[0];
                if (t.isRestElement(first)) {
                  throw file.errorWithNode(first, messages.get("settersNoRest"));
                }
              }
            }
          };
          exports.visitor = visitor;
        }, {
          "179": 179,
          "43": 43
        }],
        133: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          var _es6ForOf = _dereq_(96);
          var metadata = {optional: true};
          exports.metadata = metadata;
          var visitor = {ForOfStatement: function ForOfStatement(node, parent, scope, file) {
              if (this.get("right").isGenericType("Array")) {
                return _es6ForOf._ForOfStatementArray.call(this, node, scope, file);
              }
            }};
          exports.visitor = visitor;
        }, {"96": 96}],
        134: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          var metadata = {
            optional: true,
            group: "builtin-trailing"
          };
          exports.metadata = metadata;
          var visitor = {Program: function Program(node, parent, scope, file) {
              if (file.moduleFormatter._setters) {
                scope.traverse(file.moduleFormatter._setters, optimizeSettersVisitor, {exportFunctionIdentifier: file.moduleFormatter.exportIdentifier});
              }
            }};
          exports.visitor = visitor;
          var optimizeSettersVisitor = {
            FunctionExpression: {
              enter: function enter(node, parent, scope, state) {
                state.hasExports = false;
                state.exportObjectIdentifier = scope.generateUidIdentifier("exportObj");
              },
              exit: function exit(node, parent, scope, state) {
                if (!state.hasExports)
                  return;
                node.body.body.unshift(t.variableDeclaration("var", [t.variableDeclarator(t.cloneDeep(state.exportObjectIdentifier), t.objectExpression([]))]));
                node.body.body.push(t.expressionStatement(t.callExpression(t.cloneDeep(state.exportFunctionIdentifier), [t.cloneDeep(state.exportObjectIdentifier)])));
              }
            },
            CallExpression: function CallExpression(node, parent, scope, state) {
              if (!t.isIdentifier(node.callee, {name: state.exportFunctionIdentifier.name}))
                return;
              state.hasExports = true;
              var memberNode = t.memberExpression(t.cloneDeep(state.exportObjectIdentifier), node.arguments[0], true);
              return t.assignmentExpression("=", memberNode, node.arguments[1]);
            }
          };
        }, {"179": 179}],
        135: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          var _helpersReact = _dereq_(62);
          var react = _interopRequireWildcard(_helpersReact);
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          var metadata = {optional: true};
          exports.metadata = metadata;
          function hasRefOrSpread(attrs) {
            for (var i = 0; i < attrs.length; i++) {
              var attr = attrs[i];
              if (t.isJSXSpreadAttribute(attr))
                return true;
              if (isJSXAttributeOfName(attr, "ref"))
                return true;
            }
            return false;
          }
          function isJSXAttributeOfName(attr, name) {
            return t.isJSXAttribute(attr) && t.isJSXIdentifier(attr.name, {name: name});
          }
          var visitor = {JSXElement: function JSXElement(node, parent, scope, file) {
              var open = node.openingElement;
              if (hasRefOrSpread(open.attributes))
                return;
              var isComponent = true;
              var props = t.objectExpression([]);
              var obj = t.objectExpression([]);
              var key = t.literal(null);
              var type = open.name;
              if (t.isJSXIdentifier(type) && react.isCompatTag(type.name)) {
                type = t.literal(type.name);
                isComponent = false;
              }
              function pushElemProp(key, value) {
                pushProp(obj.properties, t.identifier(key), value);
              }
              function pushProp(objProps, key, value) {
                objProps.push(t.property("init", key, value));
              }
              if (node.children.length) {
                var children = react.buildChildren(node);
                children = children.length === 1 ? children[0] : t.arrayExpression(children);
                pushProp(props.properties, t.identifier("children"), children);
              }
              for (var i = 0; i < open.attributes.length; i++) {
                var attr = open.attributes[i];
                if (isJSXAttributeOfName(attr, "key")) {
                  key = attr.value;
                } else {
                  pushProp(props.properties, attr.name, attr.value || t.identifier("true"));
                }
              }
              if (isComponent) {
                props = t.callExpression(file.addHelper("default-props"), [t.memberExpression(type, t.identifier("defaultProps")), props]);
              }
              pushElemProp("$$typeof", file.addHelper("typeof-react-element"));
              pushElemProp("type", type);
              pushElemProp("key", key);
              pushElemProp("ref", t.literal(null));
              pushElemProp("props", props);
              pushElemProp("_owner", t.literal(null));
              return obj;
            }};
          exports.visitor = visitor;
        }, {
          "179": 179,
          "62": 62
        }],
        136: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {"default": obj};
          }
          var _helpersRemapAsyncToGenerator = _dereq_(64);
          var _helpersRemapAsyncToGenerator2 = _interopRequireDefault(_helpersRemapAsyncToGenerator);
          var _bluebirdCoroutines = _dereq_(137);
          exports.manipulateOptions = _bluebirdCoroutines.manipulateOptions;
          var metadata = {
            optional: true,
            dependencies: ["es7.asyncFunctions", "es6.classes"]
          };
          exports.metadata = metadata;
          var visitor = {Function: function Function(node, parent, scope, file) {
              if (!node.async || node.generator)
                return;
              return _helpersRemapAsyncToGenerator2["default"](this, file.addHelper("async-to-generator"));
            }};
          exports.visitor = visitor;
        }, {
          "137": 137,
          "64": 64
        }],
        137: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          exports.manipulateOptions = manipulateOptions;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {"default": obj};
          }
          var _helpersRemapAsyncToGenerator = _dereq_(64);
          var _helpersRemapAsyncToGenerator2 = _interopRequireDefault(_helpersRemapAsyncToGenerator);
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          function manipulateOptions(opts) {
            opts.blacklist.push("regenerator");
          }
          var metadata = {
            optional: true,
            dependencies: ["es7.asyncFunctions", "es6.classes"]
          };
          exports.metadata = metadata;
          var visitor = {Function: function Function(node, parent, scope, file) {
              if (!node.async || node.generator)
                return;
              return _helpersRemapAsyncToGenerator2["default"](this, t.memberExpression(file.addImport("bluebird", null, "absolute"), t.identifier("coroutine")));
            }};
          exports.visitor = visitor;
        }, {
          "179": 179,
          "64": 64
        }],
        138: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          var metadata = {group: "builtin-trailing"};
          exports.metadata = metadata;
          var FLOW_DIRECTIVE = "@flow";
          var visitor = {
            Program: function Program(node, parent, scope, file) {
              var _arr = file.ast.comments;
              for (var _i = 0; _i < _arr.length; _i++) {
                var comment = _arr[_i];
                if (comment.value.indexOf(FLOW_DIRECTIVE) >= 0) {
                  comment.value = comment.value.replace(FLOW_DIRECTIVE, "");
                  if (!comment.value.replace(/\*/g, "").trim())
                    comment._displayed = true;
                }
              }
            },
            Flow: function Flow() {
              this.dangerouslyRemove();
            },
            ClassProperty: function ClassProperty(node) {
              node.typeAnnotation = null;
              if (!node.value)
                this.dangerouslyRemove();
            },
            Class: function Class(node) {
              node["implements"] = null;
            },
            Function: function Function(node) {
              for (var i = 0; i < node.params.length; i++) {
                var param = node.params[i];
                param.optional = false;
              }
            },
            TypeCastExpression: function TypeCastExpression(node) {
              do {
                node = node.expression;
              } while (t.isTypeCastExpression(node));
              return node;
            }
          };
          exports.visitor = visitor;
        }, {"179": 179}],
        139: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          exports.manipulateOptions = manipulateOptions;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          var _helpersReact = _dereq_(62);
          var react = _interopRequireWildcard(_helpersReact);
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          function manipulateOptions(opts) {
            opts.blacklist.push("react");
          }
          var metadata = {
            optional: true,
            group: "builtin-advanced"
          };
          exports.metadata = metadata;
          var visitor = _dereq_(55)({
            pre: function pre(state) {
              state.callee = state.tagExpr;
            },
            post: function post(state) {
              if (react.isCompatTag(state.tagName)) {
                state.call = t.callExpression(t.memberExpression(t.memberExpression(t.identifier("React"), t.identifier("DOM")), state.tagExpr, t.isLiteral(state.tagExpr)), state.args);
              }
            }
          });
          exports.visitor = visitor;
        }, {
          "179": 179,
          "55": 55,
          "62": 62
        }],
        140: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          var _helpersReact = _dereq_(62);
          var react = _interopRequireWildcard(_helpersReact);
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          var JSX_ANNOTATION_REGEX = /^\*\s*@jsx\s+([^\s]+)/;
          var metadata = {group: "builtin-advanced"};
          exports.metadata = metadata;
          var visitor = _dereq_(55)({
            pre: function pre(state) {
              var tagName = state.tagName;
              var args = state.args;
              if (react.isCompatTag(tagName)) {
                args.push(t.literal(tagName));
              } else {
                args.push(state.tagExpr);
              }
            },
            post: function post(state, file) {
              state.callee = file.get("jsxIdentifier");
            }
          });
          exports.visitor = visitor;
          visitor.Program = function(node, parent, scope, file) {
            var id = file.opts.jsxPragma;
            for (var i = 0; i < file.ast.comments.length; i++) {
              var comment = file.ast.comments[i];
              var matches = JSX_ANNOTATION_REGEX.exec(comment.value);
              if (matches) {
                id = matches[1];
                if (id === "React.DOM") {
                  throw file.errorWithNode(comment, "The @jsx React.DOM pragma has been deprecated as of React 0.12");
                } else {
                  break;
                }
              }
            }
            file.set("jsxIdentifier", id.split(".").map(t.identifier).reduce(function(object, property) {
              return t.memberExpression(object, property);
            }));
          };
        }, {
          "179": 179,
          "55": 55,
          "62": 62
        }],
        141: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {"default": obj};
          }
          var _regenerator = _dereq_(579);
          var _regenerator2 = _interopRequireDefault(_regenerator);
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          var NodePath = _regenerator2["default"].types.NodePath;
          var metadata = {group: "builtin-advanced"};
          exports.metadata = metadata;
          var visitor = {Function: {exit: function exit(node) {
                if (node.async || node.generator) {
                  _regenerator2["default"].transform(convertNodePath(this));
                }
              }}};
          exports.visitor = visitor;
          function convertNodePath(path) {
            var programNode;
            var keysAlongPath = [];
            while (path) {
              var pp = path.parentPath;
              var parentNode = pp && pp.node;
              if (parentNode) {
                keysAlongPath.push(path.key);
                if (parentNode !== path.container) {
                  var found = Object.keys(parentNode).some(function(listKey) {
                    if (parentNode[listKey] === path.container) {
                      keysAlongPath.push(listKey);
                      return true;
                    }
                  });
                  if (!found) {
                    throw new Error("Failed to find container object in parent node");
                  }
                }
                if (t.isProgram(parentNode)) {
                  programNode = parentNode;
                  break;
                }
              }
              path = pp;
            }
            if (!programNode) {
              throw new Error("Failed to find root Program node");
            }
            var nodePath = new NodePath(programNode);
            while (keysAlongPath.length > 0) {
              nodePath = nodePath.get(keysAlongPath.pop());
            }
            return nodePath;
          }
        }, {
          "179": 179,
          "579": 579
        }],
        142: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          var metadata = {group: "builtin-pre"};
          exports.metadata = metadata;
          var THIS_BREAK_KEYS = ["FunctionExpression", "FunctionDeclaration", "ClassProperty"];
          function isUseStrict(node) {
            if (!t.isLiteral(node))
              return false;
            if (node.raw && node.rawValue === node.value) {
              return node.rawValue === "use strict";
            } else {
              return node.value === "use strict";
            }
          }
          var visitor = {
            Program: {enter: function enter(program) {
                var first = program.body[0];
                var directive;
                if (t.isExpressionStatement(first) && isUseStrict(first.expression)) {
                  directive = first;
                } else {
                  directive = t.expressionStatement(t.literal("use strict"));
                  this.unshiftContainer("body", directive);
                  if (first) {
                    directive.leadingComments = first.leadingComments;
                    first.leadingComments = [];
                  }
                }
                directive._blockHoist = Infinity;
              }},
            ThisExpression: function ThisExpression() {
              if (!this.findParent(function(path) {
                return !path.is("shadow") && THIS_BREAK_KEYS.indexOf(path.type) >= 0;
              })) {
                return t.identifier("undefined");
              }
            }
          };
          exports.visitor = visitor;
        }, {"179": 179}],
        143: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          function statementList(key, path) {
            var paths = path.get(key);
            for (var i = 0; i < paths.length; i++) {
              var _path = paths[i];
              var func = _path.node;
              if (!t.isFunctionDeclaration(func))
                continue;
              var declar = t.variableDeclaration("let", [t.variableDeclarator(func.id, t.toExpression(func))]);
              declar._blockHoist = 2;
              func.id = null;
              _path.replaceWith(declar);
            }
          }
          var visitor = {
            BlockStatement: function BlockStatement(node, parent) {
              if (t.isFunction(parent) && parent.body === node || t.isExportDeclaration(parent)) {
                return;
              }
              statementList("body", this);
            },
            SwitchCase: function SwitchCase() {
              statementList("consequent", this);
            }
          };
          exports.visitor = visitor;
        }, {"179": 179}],
        144: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          var _helpersNameMethod = _dereq_(61);
          var metadata = {group: "builtin-basic"};
          exports.metadata = metadata;
          var visitor = {
            "ArrowFunctionExpression|FunctionExpression": {exit: function exit() {
                if (!this.parentPath.isProperty()) {
                  return _helpersNameMethod.bare.apply(this, arguments);
                }
              }},
            ObjectExpression: function ObjectExpression() {
              var props = this.get("properties");
              var _arr = props;
              for (var _i = 0; _i < _arr.length; _i++) {
                var prop = _arr[_i];
                var value = prop.get("value");
                if (value.isFunction()) {
                  var newNode = _helpersNameMethod.bare(value.node, prop.node, value.scope);
                  if (newNode)
                    value.replaceWith(newNode);
                }
              }
            }
          };
          exports.visitor = visitor;
        }, {"61": 61}],
        145: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          var _messages = _dereq_(43);
          var messages = _interopRequireWildcard(_messages);
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          function check(source, file) {
            if (t.isLiteral(source)) {
              var name = source.value;
              var lower = name.toLowerCase();
              if (lower === "react" && name !== lower) {
                throw file.errorWithNode(source, messages.get("didYouMean", "react"));
              }
            }
          }
          var visitor = {
            CallExpression: function CallExpression(node, parent, scope, file) {
              if (this.get("callee").isIdentifier({name: "require"}) && node.arguments.length === 1) {
                check(node.arguments[0], file);
              }
            },
            ModuleDeclaration: function ModuleDeclaration(node, parent, scope, file) {
              check(node.source, file);
            }
          };
          exports.visitor = visitor;
        }, {
          "179": 179,
          "43": 43
        }],
        146: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {"default": obj};
          }
          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }
          var _path = _dereq_(155);
          var _path2 = _interopRequireDefault(_path);
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          var TraversalContext = (function() {
            function TraversalContext(scope, opts, state, parentPath) {
              _classCallCheck(this, TraversalContext);
              this.queue = null;
              this.parentPath = parentPath;
              this.scope = scope;
              this.state = state;
              this.opts = opts;
            }
            TraversalContext.prototype.shouldVisit = function shouldVisit(node) {
              var opts = this.opts;
              if (opts.enter || opts.exit)
                return true;
              if (opts[node.type])
                return true;
              var keys = t.VISITOR_KEYS[node.type];
              if (!keys || !keys.length)
                return false;
              var _arr = keys;
              for (var _i = 0; _i < _arr.length; _i++) {
                var key = _arr[_i];
                if (node[key])
                  return true;
              }
              return false;
            };
            TraversalContext.prototype.create = function create(node, obj, key, listKey) {
              var path = _path2["default"].get({
                parentPath: this.parentPath,
                parent: node,
                container: obj,
                key: key,
                listKey: listKey
              });
              path.unshiftContext(this);
              return path;
            };
            TraversalContext.prototype.visitMultiple = function visitMultiple(container, parent, listKey) {
              if (container.length === 0)
                return false;
              var visited = [];
              var queue = this.queue = [];
              var stop = false;
              for (var key = 0; key < container.length; key++) {
                var self = container[key];
                if (self && this.shouldVisit(self)) {
                  queue.push(this.create(parent, container, key, listKey));
                }
              }
              var _arr2 = queue;
              for (var _i2 = 0; _i2 < _arr2.length; _i2++) {
                var path = _arr2[_i2];
                path.resync();
                if (visited.indexOf(path.node) >= 0)
                  continue;
                visited.push(path.node);
                if (path.visit()) {
                  stop = true;
                  break;
                }
              }
              var _arr3 = queue;
              for (var _i3 = 0; _i3 < _arr3.length; _i3++) {
                var path = _arr3[_i3];
                path.shiftContext();
              }
              this.queue = null;
              return stop;
            };
            TraversalContext.prototype.visitSingle = function visitSingle(node, key) {
              if (this.shouldVisit(node[key])) {
                var path = this.create(node, node, key);
                path.visit();
                path.shiftContext();
              }
            };
            TraversalContext.prototype.visit = function visit(node, key) {
              var nodes = node[key];
              if (!nodes)
                return;
              if (Array.isArray(nodes)) {
                return this.visitMultiple(nodes, node, key);
              } else {
                return this.visitSingle(node, key);
              }
            };
            return TraversalContext;
          })();
          exports["default"] = TraversalContext;
          module.exports = exports["default"];
        }, {
          "155": 155,
          "179": 179
        }],
        147: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }
          var Hub = function Hub(file) {
            _classCallCheck(this, Hub);
            this.file = file;
          };
          exports["default"] = Hub;
          module.exports = exports["default"];
        }, {}],
        148: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          exports["default"] = traverse;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {"default": obj};
          }
          var _context = _dereq_(146);
          var _context2 = _interopRequireDefault(_context);
          var _visitors = _dereq_(168);
          var visitors = _interopRequireWildcard(_visitors);
          var _messages = _dereq_(43);
          var messages = _interopRequireWildcard(_messages);
          var _lodashCollectionIncludes = _dereq_(446);
          var _lodashCollectionIncludes2 = _interopRequireDefault(_lodashCollectionIncludes);
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          function traverse(parent, opts, scope, state, parentPath) {
            if (!parent)
              return;
            if (!opts)
              opts = {};
            if (!opts.noScope && !scope) {
              if (parent.type !== "Program" && parent.type !== "File") {
                throw new Error(messages.get("traverseNeedsParent", parent.type));
              }
            }
            visitors.explode(opts);
            if (Array.isArray(parent)) {
              for (var i = 0; i < parent.length; i++) {
                traverse.node(parent[i], opts, scope, state, parentPath);
              }
            } else {
              traverse.node(parent, opts, scope, state, parentPath);
            }
          }
          traverse.visitors = visitors;
          traverse.verify = visitors.verify;
          traverse.explode = visitors.explode;
          traverse.node = function(node, opts, scope, state, parentPath, skipKeys) {
            var keys = t.VISITOR_KEYS[node.type];
            if (!keys)
              return;
            var context = new _context2["default"](scope, opts, state, parentPath);
            var _arr = keys;
            for (var _i = 0; _i < _arr.length; _i++) {
              var key = _arr[_i];
              if (skipKeys && skipKeys[key])
                continue;
              if (context.visit(node, key))
                return;
            }
          };
          var CLEAR_KEYS = t.COMMENT_KEYS.concat(["_scopeInfo", "_paths", "tokens", "comments", "start", "end", "loc", "raw", "rawValue"]);
          traverse.clearNode = function(node) {
            for (var i = 0; i < CLEAR_KEYS.length; i++) {
              var key = CLEAR_KEYS[i];
              if (node[key] != null)
                node[key] = undefined;
            }
          };
          var clearVisitor = {
            noScope: true,
            exit: traverse.clearNode
          };
          traverse.removeProperties = function(tree) {
            traverse(tree, clearVisitor);
            traverse.clearNode(tree);
            return tree;
          };
          function hasBlacklistedType(node, parent, scope, state) {
            if (node.type === state.type) {
              state.has = true;
              this.skip();
            }
          }
          traverse.hasType = function(tree, scope, type, blacklistTypes) {
            if (_lodashCollectionIncludes2["default"](blacklistTypes, tree.type))
              return false;
            if (tree.type === type)
              return true;
            var state = {
              has: false,
              type: type
            };
            traverse(tree, {
              blacklist: blacklistTypes,
              enter: hasBlacklistedType
            }, scope, state);
            return state.has;
          };
          module.exports = exports["default"];
        }, {
          "146": 146,
          "168": 168,
          "179": 179,
          "43": 43,
          "446": 446
        }],
        149: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          exports.findParent = findParent;
          exports.getFunctionParent = getFunctionParent;
          exports.getStatementParent = getStatementParent;
          exports.getEarliestCommonAncestorFrom = getEarliestCommonAncestorFrom;
          exports.getDeepestCommonAncestorFrom = getDeepestCommonAncestorFrom;
          exports.getAncestry = getAncestry;
          exports.inType = inType;
          exports.inShadow = inShadow;
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {"default": obj};
          }
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          var _index = _dereq_(155);
          var _index2 = _interopRequireDefault(_index);
          function findParent(callback) {
            var path = this;
            while (path = path.parentPath) {
              if (callback(path))
                return path;
            }
            return null;
          }
          function getFunctionParent() {
            return this.findParent(function(path) {
              return path.isFunction() || path.isProgram();
            });
          }
          function getStatementParent() {
            var path = this;
            do {
              if (Array.isArray(path.container)) {
                return path;
              }
            } while (path = path.parentPath);
          }
          function getEarliestCommonAncestorFrom(paths) {
            return this.getDeepestCommonAncestorFrom(paths, function(deepest, i, ancestries) {
              var earliest;
              var keys = t.VISITOR_KEYS[deepest.type];
              var _arr = ancestries;
              for (var _i = 0; _i < _arr.length; _i++) {
                var ancestry = _arr[_i];
                var path = ancestry[i + 1];
                if (!earliest) {
                  earliest = path;
                  continue;
                }
                if (path.listKey && earliest.listKey === path.listKey) {
                  if (path.key < earliest.key) {
                    earliest = path;
                    continue;
                  }
                }
                var earliestKeyIndex = keys.indexOf(earliest.parentKey);
                var currentKeyIndex = keys.indexOf(path.parentKey);
                if (earliestKeyIndex > currentKeyIndex) {
                  earliest = path;
                }
              }
              return earliest;
            });
          }
          function getDeepestCommonAncestorFrom(paths, filter) {
            var _this = this;
            if (!paths.length) {
              return this;
            }
            if (paths.length === 1) {
              return paths[0];
            }
            var minDepth = Infinity;
            var lastCommonIndex,
                lastCommon;
            var ancestries = paths.map(function(path) {
              var ancestry = [];
              do {
                ancestry.unshift(path);
              } while ((path = path.parentPath) && path !== _this);
              if (ancestry.length < minDepth) {
                minDepth = ancestry.length;
              }
              return ancestry;
            });
            var first = ancestries[0];
            depthLoop: for (var i = 0; i < minDepth; i++) {
              var shouldMatch = first[i];
              var _arr2 = ancestries;
              for (var _i2 = 0; _i2 < _arr2.length; _i2++) {
                var ancestry = _arr2[_i2];
                if (ancestry[i] !== shouldMatch) {
                  break depthLoop;
                }
              }
              lastCommonIndex = i;
              lastCommon = shouldMatch;
            }
            if (lastCommon) {
              if (filter) {
                return filter(lastCommon, lastCommonIndex, ancestries);
              } else {
                return lastCommon;
              }
            } else {
              throw new Error("Couldn't find intersection");
            }
          }
          function getAncestry() {
            var path = this;
            var paths = [];
            do {
              paths.push(path);
            } while (path = path.parentPath);
            return paths;
          }
          function inType() {
            var path = this;
            while (path) {
              var _arr3 = arguments;
              for (var _i3 = 0; _i3 < _arr3.length; _i3++) {
                var type = _arr3[_i3];
                if (path.node.type === type)
                  return true;
              }
              path = path.parentPath;
            }
            return false;
          }
          function inShadow(key) {
            var path = this;
            do {
              if (path.isFunction()) {
                var shadow = path.node.shadow;
                if (shadow) {
                  if (!key || shadow[key] !== false) {
                    return path;
                  }
                } else if (path.isArrowFunctionExpression()) {
                  return path;
                }
                return null;
              }
            } while (path = path.parentPath);
            return null;
          }
        }, {
          "155": 155,
          "179": 179
        }],
        150: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          exports.shareCommentsWithSiblings = shareCommentsWithSiblings;
          exports.addComment = addComment;
          exports.addComments = addComments;
          function shareCommentsWithSiblings() {
            var node = this.node;
            if (!node)
              return;
            var trailing = node.trailingComments;
            var leading = node.leadingComments;
            if (!trailing && !leading)
              return;
            var prev = this.getSibling(this.key - 1);
            var next = this.getSibling(this.key + 1);
            if (!prev.node)
              prev = next;
            if (!next.node)
              next = prev;
            prev.addComments("trailing", leading);
            next.addComments("leading", trailing);
          }
          function addComment(type, content, line) {
            this.addComments(type, [{
              type: line ? "CommentLine" : "CommentBlock",
              value: content
            }]);
          }
          function addComments(type, comments) {
            if (!comments)
              return;
            var node = this.node;
            if (!node)
              return;
            var key = type + "Comments";
            if (node[key]) {
              node[key] = node[key].concat(comments);
            } else {
              node[key] = comments;
            }
          }
        }, {}],
        151: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          exports.call = call;
          exports.isBlacklisted = isBlacklisted;
          exports.visit = visit;
          exports.skip = skip;
          exports.skipKey = skipKey;
          exports.stop = stop;
          exports.setScope = setScope;
          exports.setContext = setContext;
          exports.resync = resync;
          exports._resyncParent = _resyncParent;
          exports._resyncKey = _resyncKey;
          exports._resyncList = _resyncList;
          exports._resyncRemoved = _resyncRemoved;
          exports.shiftContext = shiftContext;
          exports.unshiftContext = unshiftContext;
          exports.setup = setup;
          exports.setKey = setKey;
          exports.queueNode = queueNode;
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {"default": obj};
          }
          var _index = _dereq_(148);
          var _index2 = _interopRequireDefault(_index);
          function call(key) {
            var node = this.node;
            if (!node)
              return;
            var opts = this.opts;
            var _arr = [opts[key], opts[node.type] && opts[node.type][key]];
            for (var _i = 0; _i < _arr.length; _i++) {
              var fns = _arr[_i];
              if (!fns)
                continue;
              var _arr2 = fns;
              for (var _i2 = 0; _i2 < _arr2.length; _i2++) {
                var fn = _arr2[_i2];
                if (!fn)
                  continue;
                var _node = this.node;
                if (!_node)
                  return;
                var previousType = this.type;
                var replacement = fn.call(this, _node, this.parent, this.scope, this.state);
                if (replacement) {
                  this.replaceWith(replacement, true);
                }
                if (this.shouldStop || this.shouldSkip || this.removed)
                  return;
                if (previousType !== this.type) {
                  this.queueNode(this);
                  return;
                }
              }
            }
          }
          function isBlacklisted() {
            var blacklist = this.opts.blacklist;
            return blacklist && blacklist.indexOf(this.node.type) > -1;
          }
          function visit() {
            if (this.isBlacklisted())
              return false;
            if (this.opts.shouldSkip && this.opts.shouldSkip(this))
              return false;
            this.call("enter");
            if (this.shouldSkip) {
              return this.shouldStop;
            }
            var node = this.node;
            var opts = this.opts;
            if (node) {
              if (Array.isArray(node)) {
                for (var i = 0; i < node.length; i++) {
                  _index2["default"].node(node[i], opts, this.scope, this.state, this, this.skipKeys);
                }
              } else {
                _index2["default"].node(node, opts, this.scope, this.state, this, this.skipKeys);
                this.call("exit");
              }
            }
            return this.shouldStop;
          }
          function skip() {
            this.shouldSkip = true;
          }
          function skipKey(key) {
            this.skipKeys[key] = true;
          }
          function stop() {
            this.shouldStop = true;
            this.shouldSkip = true;
          }
          function setScope() {
            if (this.opts && this.opts.noScope)
              return;
            var target = this.context || this.parentPath;
            this.scope = this.getScope(target && target.scope);
            if (this.scope)
              this.scope.init();
          }
          function setContext(context) {
            this.shouldSkip = false;
            this.shouldStop = false;
            this.removed = false;
            this.skipKeys = {};
            if (context) {
              this.context = context;
              this.state = context.state;
              this.opts = context.opts;
            }
            this.setScope();
            return this;
          }
          function resync() {
            if (this.removed)
              return;
            this._resyncParent();
            this._resyncList();
            this._resyncKey();
          }
          function _resyncParent() {
            if (this.parentPath) {
              this.parent = this.parentPath.node;
            }
          }
          function _resyncKey() {
            if (!this.container)
              return;
            if (this.node === this.container[this.key])
              return;
            if (Array.isArray(this.container)) {
              for (var i = 0; i < this.container.length; i++) {
                if (this.container[i] === this.node) {
                  return this.setKey(i);
                }
              }
            } else {
              for (var key in this.container) {
                if (this.container[key] === this.node) {
                  return this.setKey(key);
                }
              }
            }
            this.key = null;
          }
          function _resyncList() {
            var listKey = this.listKey;
            var parentPath = this.parentPath;
            if (!listKey || !parentPath)
              return;
            var newContainer = parentPath.node[listKey];
            if (this.container === newContainer)
              return;
            if (newContainer) {
              this.container = newContainer;
            } else {
              this.container = null;
            }
          }
          function _resyncRemoved() {
            if (this.key == null || !this.container || this.container[this.key] !== this.node) {
              this._markRemoved();
            }
          }
          function shiftContext() {
            this.contexts.shift();
            this.setContext(this.contexts[0]);
          }
          function unshiftContext(context) {
            this.contexts.unshift(context);
            this.setContext(context);
          }
          function setup(parentPath, container, listKey, key) {
            this.inList = !!listKey;
            this.listKey = listKey;
            this.parentKey = listKey || key;
            this.container = container;
            this.parentPath = parentPath || this.parentPath;
            this.setKey(key);
          }
          function setKey(key) {
            this.key = key;
            this.node = this.container[this.key];
            this.type = this.node && this.node.type;
          }
          function queueNode(path) {
            var _arr3 = this.contexts;
            for (var _i3 = 0; _i3 < _arr3.length; _i3++) {
              var context = _arr3[_i3];
              if (context.queue) {
                context.queue.push(path);
              }
            }
          }
        }, {"148": 148}],
        152: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          exports.toComputedKey = toComputedKey;
          exports.ensureBlock = ensureBlock;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          function toComputedKey() {
            var node = this.node;
            var key;
            if (this.isMemberExpression()) {
              key = node.property;
            } else if (this.isProperty()) {
              key = node.key;
            } else {
              throw new ReferenceError("todo");
            }
            if (!node.computed) {
              if (t.isIdentifier(key))
                key = t.literal(key.name);
            }
            return key;
          }
          function ensureBlock() {
            return t.ensureBlock(this.node);
          }
        }, {"179": 179}],
        153: [function(_dereq_, module, exports) {
          (function(global) {
            "use strict";
            exports.__esModule = true;
            exports.evaluateTruthy = evaluateTruthy;
            exports.evaluate = evaluate;
            var VALID_CALLEES = ["String", "Number", "Math"];
            function evaluateTruthy() {
              var res = this.evaluate();
              if (res.confident)
                return !!res.value;
            }
            function evaluate() {
              var confident = true;
              var value = evaluate(this);
              if (!confident)
                value = undefined;
              return {
                confident: confident,
                value: value
              };
              function evaluate(path) {
                if (!confident)
                  return;
                var node = path.node;
                if (path.isSequenceExpression()) {
                  var exprs = path.get("expressions");
                  return evaluate(exprs[exprs.length - 1]);
                }
                if (path.isLiteral()) {
                  if (node.regex) {} else {
                    return node.value;
                  }
                }
                if (path.isConditionalExpression()) {
                  if (evaluate(path.get("test"))) {
                    return evaluate(path.get("consequent"));
                  } else {
                    return evaluate(path.get("alternate"));
                  }
                }
                if (path.isTypeCastExpression()) {
                  return evaluate(path.get("expression"));
                }
                if (path.isIdentifier() && !path.scope.hasBinding(node.name, true)) {
                  if (node.name === "undefined") {
                    return undefined;
                  } else if (node.name === "Infinity") {
                    return Infinity;
                  } else if (node.name === "NaN") {
                    return NaN;
                  }
                }
                if (path.isMemberExpression() && !path.parentPath.isCallExpression({callee: node})) {
                  var _property = path.get("property");
                  var object = path.get("object");
                  if (object.isLiteral() && _property.isIdentifier()) {
                    var _value = object.node.value;
                    var type = typeof _value;
                    if (type === "number" || type === "string") {
                      return _value[_property.node.name];
                    }
                  }
                }
                if (path.isReferencedIdentifier()) {
                  var binding = path.scope.getBinding(node.name);
                  if (binding && binding.hasValue) {
                    return binding.value;
                  } else {
                    var resolved = path.resolve();
                    if (resolved === path) {
                      return confident = false;
                    } else {
                      return evaluate(resolved);
                    }
                  }
                }
                if (path.isUnaryExpression({prefix: true})) {
                  var argument = path.get("argument");
                  var arg = evaluate(argument);
                  switch (node.operator) {
                    case "void":
                      return undefined;
                    case "!":
                      return !arg;
                    case "+":
                      return +arg;
                    case "-":
                      return -arg;
                    case "~":
                      return ~arg;
                    case "typeof":
                      if (argument.isFunction()) {
                        return "function";
                      } else {
                        return typeof arg;
                      }
                  }
                }
                if (path.isArrayExpression() || path.isObjectExpression()) {}
                if (path.isLogicalExpression()) {
                  var wasConfident = confident;
                  var left = evaluate(path.get("left"));
                  var leftConfident = confident;
                  confident = wasConfident;
                  var right = evaluate(path.get("right"));
                  var rightConfident = confident;
                  var uncertain = leftConfident !== rightConfident;
                  confident = leftConfident && rightConfident;
                  switch (node.operator) {
                    case "||":
                      if ((left || right) && uncertain) {
                        confident = true;
                      }
                      return left || right;
                    case "&&":
                      if (!left && leftConfident || !right && rightConfident) {
                        confident = true;
                      }
                      return left && right;
                  }
                }
                if (path.isBinaryExpression()) {
                  var left = evaluate(path.get("left"));
                  var right = evaluate(path.get("right"));
                  switch (node.operator) {
                    case "-":
                      return left - right;
                    case "+":
                      return left + right;
                    case "/":
                      return left / right;
                    case "*":
                      return left * right;
                    case "%":
                      return left % right;
                    case "**":
                      return Math.pow(left, right);
                    case "<":
                      return left < right;
                    case ">":
                      return left > right;
                    case "<=":
                      return left <= right;
                    case ">=":
                      return left >= right;
                    case "==":
                      return left == right;
                    case "!=":
                      return left != right;
                    case "===":
                      return left === right;
                    case "!==":
                      return left !== right;
                    case "|":
                      return left | right;
                    case "&":
                      return left & right;
                    case "^":
                      return left ^ right;
                    case "<<":
                      return left << right;
                    case ">>":
                      return left >> right;
                    case ">>>":
                      return left >>> right;
                  }
                }
                if (path.isCallExpression()) {
                  var callee = path.get("callee");
                  var context;
                  var func;
                  if (callee.isIdentifier() && !path.scope.getBinding(callee.node.name, true) && VALID_CALLEES.indexOf(callee.node.name) >= 0) {
                    func = global[node.callee.name];
                  }
                  if (callee.isMemberExpression()) {
                    var object = callee.get("object");
                    var property = callee.get("property");
                    if (object.isIdentifier() && property.isIdentifier() && VALID_CALLEES.indexOf(object.node.name) >= 0) {
                      context = global[object.node.name];
                      func = context[property.node.name];
                    }
                    if (object.isLiteral() && property.isIdentifier()) {
                      var type = typeof object.node.value;
                      if (type === "string" || type === "number") {
                        context = object.node.value;
                        func = context[property.node.name];
                      }
                    }
                  }
                  if (func) {
                    var args = path.get("arguments").map(evaluate);
                    if (!confident)
                      return;
                    return func.apply(context, args);
                  }
                }
                confident = false;
              }
            }
          }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
        }, {}],
        154: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          exports.getStatementParent = getStatementParent;
          exports.getOpposite = getOpposite;
          exports.getCompletionRecords = getCompletionRecords;
          exports.getSibling = getSibling;
          exports.get = get;
          exports._getKey = _getKey;
          exports._getPattern = _getPattern;
          exports.getBindingIdentifiers = getBindingIdentifiers;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {"default": obj};
          }
          var _index = _dereq_(155);
          var _index2 = _interopRequireDefault(_index);
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          function getStatementParent() {
            var path = this;
            do {
              if (!path.parentPath || Array.isArray(path.container) && path.isStatement()) {
                break;
              } else {
                path = path.parentPath;
              }
            } while (path);
            if (path && (path.isProgram() || path.isFile())) {
              throw new Error("File/Program node, we can't possibly find a statement parent to this");
            }
            return path;
          }
          function getOpposite() {
            if (this.key === "left") {
              return this.getSibling("right");
            } else if (this.key === "right") {
              return this.getSibling("left");
            }
          }
          function getCompletionRecords() {
            var paths = [];
            var add = function add(path) {
              if (path)
                paths = paths.concat(path.getCompletionRecords());
            };
            if (this.isIfStatement()) {
              add(this.get("consequent"));
              add(this.get("alternate"));
            } else if (this.isDoExpression() || this.isFor() || this.isWhile()) {
              add(this.get("body"));
            } else if (this.isProgram() || this.isBlockStatement()) {
              add(this.get("body").pop());
            } else if (this.isFunction()) {
              return this.get("body").getCompletionRecords();
            } else if (this.isTryStatement()) {
              add(this.get("block"));
              add(this.get("handler"));
              add(this.get("finalizer"));
            } else {
              paths.push(this);
            }
            return paths;
          }
          function getSibling(key) {
            return _index2["default"].get({
              parentPath: this.parentPath,
              parent: this.parent,
              container: this.container,
              listKey: this.listKey,
              key: key
            });
          }
          function get(key, context) {
            if (context === true)
              context = this.context;
            var parts = key.split(".");
            if (parts.length === 1) {
              return this._getKey(key, context);
            } else {
              return this._getPattern(parts, context);
            }
          }
          function _getKey(key, context) {
            var _this = this;
            var node = this.node;
            var container = node[key];
            if (Array.isArray(container)) {
              return container.map(function(_, i) {
                return _index2["default"].get({
                  listKey: key,
                  parentPath: _this,
                  parent: node,
                  container: container,
                  key: i
                }).setContext(context);
              });
            } else {
              return _index2["default"].get({
                parentPath: this,
                parent: node,
                container: node,
                key: key
              }).setContext(context);
            }
          }
          function _getPattern(parts, context) {
            var path = this;
            var _arr = parts;
            for (var _i = 0; _i < _arr.length; _i++) {
              var part = _arr[_i];
              if (part === ".") {
                path = path.parentPath;
              } else {
                if (Array.isArray(path)) {
                  path = path[part];
                } else {
                  path = path.get(part, context);
                }
              }
            }
            return path;
          }
          function getBindingIdentifiers(duplicates) {
            return t.getBindingIdentifiers(this.node, duplicates);
          }
        }, {
          "155": 155,
          "179": 179
        }],
        155: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {"default": obj};
          }
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }
          var _libVirtualTypes = _dereq_(162);
          var virtualTypes = _interopRequireWildcard(_libVirtualTypes);
          var _index = _dereq_(148);
          var _index2 = _interopRequireDefault(_index);
          var _lodashObjectAssign = _dereq_(542);
          var _lodashObjectAssign2 = _interopRequireDefault(_lodashObjectAssign);
          var _scope = _dereq_(167);
          var _scope2 = _interopRequireDefault(_scope);
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          var NodePath = (function() {
            function NodePath(hub, parent) {
              _classCallCheck(this, NodePath);
              this.contexts = [];
              this.parent = parent;
              this.data = {};
              this.hub = hub;
              this.shouldSkip = false;
              this.shouldStop = false;
              this.removed = false;
              this.state = null;
              this.opts = null;
              this.skipKeys = null;
              this.parentPath = null;
              this.context = null;
              this.container = null;
              this.listKey = null;
              this.inList = false;
              this.parentKey = null;
              this.key = null;
              this.node = null;
              this.scope = null;
              this.type = null;
              this.typeAnnotation = null;
            }
            NodePath.get = function get(_ref) {
              var hub = _ref.hub;
              var parentPath = _ref.parentPath;
              var parent = _ref.parent;
              var container = _ref.container;
              var listKey = _ref.listKey;
              var key = _ref.key;
              if (!hub && parentPath) {
                hub = parentPath.hub;
              }
              var targetNode = container[key];
              var paths = parent._paths = parent._paths || [];
              var path;
              for (var i = 0; i < paths.length; i++) {
                var pathCheck = paths[i];
                if (pathCheck.node === targetNode) {
                  path = pathCheck;
                  break;
                }
              }
              if (!path) {
                path = new NodePath(hub, parent);
                paths.push(path);
              }
              path.setup(parentPath, container, listKey, key);
              return path;
            };
            NodePath.prototype.getScope = function getScope(scope) {
              var ourScope = scope;
              if (this.isScope()) {
                ourScope = new _scope2["default"](this, scope);
              }
              return ourScope;
            };
            NodePath.prototype.setData = function setData(key, val) {
              return this.data[key] = val;
            };
            NodePath.prototype.getData = function getData(key, def) {
              var val = this.data[key];
              if (!val && def)
                val = this.data[key] = def;
              return val;
            };
            NodePath.prototype.errorWithNode = function errorWithNode(msg) {
              var Error = arguments.length <= 1 || arguments[1] === undefined ? SyntaxError : arguments[1];
              return this.hub.file.errorWithNode(this.node, msg, Error);
            };
            NodePath.prototype.traverse = function traverse(visitor, state) {
              _index2["default"](this.node, visitor, this.scope, state, this);
            };
            return NodePath;
          })();
          exports["default"] = NodePath;
          _lodashObjectAssign2["default"](NodePath.prototype, _dereq_(149));
          _lodashObjectAssign2["default"](NodePath.prototype, _dereq_(156));
          _lodashObjectAssign2["default"](NodePath.prototype, _dereq_(165));
          _lodashObjectAssign2["default"](NodePath.prototype, _dereq_(153));
          _lodashObjectAssign2["default"](NodePath.prototype, _dereq_(152));
          _lodashObjectAssign2["default"](NodePath.prototype, _dereq_(159));
          _lodashObjectAssign2["default"](NodePath.prototype, _dereq_(151));
          _lodashObjectAssign2["default"](NodePath.prototype, _dereq_(164));
          _lodashObjectAssign2["default"](NodePath.prototype, _dereq_(163));
          _lodashObjectAssign2["default"](NodePath.prototype, _dereq_(154));
          _lodashObjectAssign2["default"](NodePath.prototype, _dereq_(150));
          var _arr = t.TYPES;
          var _loop = function() {
            var type = _arr[_i];
            var typeKey = "is" + type;
            NodePath.prototype[typeKey] = function(opts) {
              return t[typeKey](this.node, opts);
            };
          };
          for (var _i = 0; _i < _arr.length; _i++) {
            _loop();
          }
          var _loop2 = function(type) {
            if (type[0] === "_")
              return "continue";
            if (t.TYPES.indexOf(type) < 0)
              t.TYPES.push(type);
            NodePath.prototype["is" + type] = function(opts) {
              return virtualTypes[type].checkPath(this, opts);
            };
          };
          for (var type in virtualTypes) {
            var _ret2 = _loop2(type);
            if (_ret2 === "continue")
              continue;
          }
          module.exports = exports["default"];
        }, {
          "148": 148,
          "149": 149,
          "150": 150,
          "151": 151,
          "152": 152,
          "153": 153,
          "154": 154,
          "156": 156,
          "159": 159,
          "162": 162,
          "163": 163,
          "164": 164,
          "165": 165,
          "167": 167,
          "179": 179,
          "542": 542
        }],
        156: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          exports.getTypeAnnotation = getTypeAnnotation;
          exports._getTypeAnnotation = _getTypeAnnotation;
          exports.isBaseType = isBaseType;
          exports.couldBeBaseType = couldBeBaseType;
          exports.baseTypeStrictlyMatches = baseTypeStrictlyMatches;
          exports.isGenericType = isGenericType;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          var _inferers = _dereq_(158);
          var inferers = _interopRequireWildcard(_inferers);
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          function getTypeAnnotation() {
            if (this.typeAnnotation)
              return this.typeAnnotation;
            var type = this._getTypeAnnotation() || t.anyTypeAnnotation();
            if (t.isTypeAnnotation(type))
              type = type.typeAnnotation;
            return this.typeAnnotation = type;
          }
          function _getTypeAnnotation() {
            var node = this.node;
            if (!node) {
              if (this.key === "init" && this.parentPath.isVariableDeclarator()) {
                var declar = this.parentPath.parentPath;
                var declarParent = declar.parentPath;
                if (declar.key === "left" && declarParent.isForInStatement()) {
                  return t.stringTypeAnnotation();
                }
                if (declar.key === "left" && declarParent.isForOfStatement()) {
                  return t.anyTypeAnnotation();
                }
                return t.voidTypeAnnotation();
              } else {
                return;
              }
            }
            if (node.typeAnnotation) {
              return node.typeAnnotation;
            }
            var inferer = inferers[node.type];
            if (inferer) {
              return inferer.call(this, node);
            }
            inferer = inferers[this.parentPath.type];
            if (inferer && inferer.validParent) {
              return this.parentPath.getTypeAnnotation();
            }
          }
          function isBaseType(baseName, soft) {
            return _isBaseType(baseName, this.getTypeAnnotation(), soft);
          }
          function _isBaseType(baseName, type, soft) {
            if (baseName === "string") {
              return t.isStringTypeAnnotation(type);
            } else if (baseName === "number") {
              return t.isNumberTypeAnnotation(type);
            } else if (baseName === "boolean") {
              return t.isBooleanTypeAnnotation(type);
            } else if (baseName === "any") {
              return t.isAnyTypeAnnotation(type);
            } else if (baseName === "mixed") {
              return t.isMixedTypeAnnotation(type);
            } else if (baseName === "void") {
              return t.isVoidTypeAnnotation(type);
            } else {
              if (soft) {
                return false;
              } else {
                throw new Error("Unknown base type " + baseName);
              }
            }
          }
          function couldBeBaseType(name) {
            var type = this.getTypeAnnotation();
            if (t.isAnyTypeAnnotation(type))
              return true;
            if (t.isUnionTypeAnnotation(type)) {
              var _arr = type.types;
              for (var _i = 0; _i < _arr.length; _i++) {
                var type2 = _arr[_i];
                if (t.isAnyTypeAnnotation(type2) || _isBaseType(name, type2, true)) {
                  return true;
                }
              }
              return false;
            } else {
              return _isBaseType(name, type, true);
            }
          }
          function baseTypeStrictlyMatches(right) {
            var left = this.getTypeAnnotation();
            right = right.getTypeAnnotation();
            if (!t.isAnyTypeAnnotation() && t.isFlowBaseAnnotation(left)) {
              return right.type === left.type;
            }
          }
          function isGenericType(genericName) {
            var type = this.getTypeAnnotation();
            return t.isGenericTypeAnnotation(type) && t.isIdentifier(type.id, {name: genericName});
          }
        }, {
          "158": 158,
          "179": 179
        }],
        157: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          exports["default"] = function(node) {
            if (!this.isReferenced())
              return;
            var binding = this.scope.getBinding(node.name);
            if (binding) {
              if (binding.identifier.typeAnnotation) {
                return binding.identifier.typeAnnotation;
              } else {
                return getTypeAnnotationBindingConstantViolations(this, node.name);
              }
            }
            if (node.name === "undefined") {
              return t.voidTypeAnnotation();
            } else if (node.name === "NaN" || node.name === "Infinity") {
              return t.numberTypeAnnotation();
            } else if (node.name === "arguments") {}
          };
          function getTypeAnnotationBindingConstantViolations(path, name) {
            var binding = path.scope.getBinding(name);
            var types = [];
            path.typeAnnotation = t.unionTypeAnnotation(types);
            var functionConstantViolations = [];
            var constantViolations = getConstantViolationsBefore(binding, path, functionConstantViolations);
            var testType = getConditionalAnnotation(path, name);
            if (testType) {
              var testConstantViolations = getConstantViolationsBefore(binding, testType.ifStatement);
              constantViolations = constantViolations.filter(function(path) {
                return testConstantViolations.indexOf(path) < 0;
              });
              types.push(testType.typeAnnotation);
            }
            if (constantViolations.length) {
              var rawConstantViolations = constantViolations.reverse();
              var visitedScopes = [];
              constantViolations = [];
              var _arr = rawConstantViolations;
              for (var _i = 0; _i < _arr.length; _i++) {
                var violation = _arr[_i];
                var violationScope = violation.scope;
                if (visitedScopes.indexOf(violationScope) >= 0)
                  continue;
                visitedScopes.push(violationScope);
                constantViolations.push(violation);
                if (violationScope === path.scope) {
                  constantViolations = [violation];
                  break;
                }
              }
              constantViolations = constantViolations.concat(functionConstantViolations);
              var _arr2 = constantViolations;
              for (var _i2 = 0; _i2 < _arr2.length; _i2++) {
                var violation = _arr2[_i2];
                types.push(violation.getTypeAnnotation());
              }
            }
            if (types.length) {
              return t.createUnionTypeAnnotation(types);
            }
          }
          function getConstantViolationsBefore(binding, path, functions) {
            var violations = binding.constantViolations.slice();
            violations.unshift(binding.path);
            return violations.filter(function(violation) {
              violation = violation.resolve();
              var status = violation._guessExecutionStatusRelativeTo(path);
              if (functions && status === "function")
                functions.push(violation);
              return status === "before";
            });
          }
          function inferAnnotationFromBinaryExpression(name, path) {
            var operator = path.node.operator;
            var right = path.get("right").resolve();
            var left = path.get("left").resolve();
            var target;
            if (left.isIdentifier({name: name})) {
              target = right;
            } else if (right.isIdentifier({name: name})) {
              target = left;
            }
            if (target) {
              if (operator === "===") {
                return target.getTypeAnnotation();
              } else if (t.BOOLEAN_NUMBER_BINARY_OPERATORS.indexOf(operator) >= 0) {
                return t.numberTypeAnnotation();
              } else {
                return;
              }
            } else {
              if (operator !== "===")
                return;
            }
            var typeofPath;
            var typePath;
            if (left.isUnaryExpression({operator: "typeof"})) {
              typeofPath = left;
              typePath = right;
            } else if (right.isUnaryExpression({operator: "typeof"})) {
              typeofPath = right;
              typePath = left;
            }
            if (!typePath && !typeofPath)
              return;
            typePath = typePath.resolve();
            if (!typePath.isLiteral())
              return;
            var typeValue = typePath.node.value;
            if (typeof typeValue !== "string")
              return;
            if (!typeofPath.get("argument").isIdentifier({name: name}))
              return;
            return t.createTypeAnnotationBasedOnTypeof(typePath.node.value);
          }
          function getParentConditionalPath(path) {
            var parentPath;
            while (parentPath = path.parentPath) {
              if (parentPath.isIfStatement() || parentPath.isConditionalExpression()) {
                if (path.key === "test") {
                  return;
                } else {
                  return parentPath;
                }
              } else {
                path = parentPath;
              }
            }
          }
          function getConditionalAnnotation(path, name) {
            var ifStatement = getParentConditionalPath(path);
            if (!ifStatement)
              return;
            var test = ifStatement.get("test");
            var paths = [test];
            var types = [];
            do {
              var _path = paths.shift().resolve();
              if (_path.isLogicalExpression()) {
                paths.push(_path.get("left"));
                paths.push(_path.get("right"));
              }
              if (_path.isBinaryExpression()) {
                var type = inferAnnotationFromBinaryExpression(name, _path);
                if (type)
                  types.push(type);
              }
            } while (paths.length);
            if (types.length) {
              return {
                typeAnnotation: t.createUnionTypeAnnotation(types),
                ifStatement: ifStatement
              };
            } else {
              return getConditionalAnnotation(ifStatement, name);
            }
          }
          module.exports = exports["default"];
        }, {"179": 179}],
        158: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          exports.VariableDeclarator = VariableDeclarator;
          exports.TypeCastExpression = TypeCastExpression;
          exports.NewExpression = NewExpression;
          exports.TemplateLiteral = TemplateLiteral;
          exports.UnaryExpression = UnaryExpression;
          exports.BinaryExpression = BinaryExpression;
          exports.LogicalExpression = LogicalExpression;
          exports.ConditionalExpression = ConditionalExpression;
          exports.SequenceExpression = SequenceExpression;
          exports.AssignmentExpression = AssignmentExpression;
          exports.UpdateExpression = UpdateExpression;
          exports.Literal = Literal;
          exports.ObjectExpression = ObjectExpression;
          exports.ArrayExpression = ArrayExpression;
          exports.RestElement = RestElement;
          exports.CallExpression = CallExpression;
          exports.TaggedTemplateExpression = TaggedTemplateExpression;
          function _interopRequire(obj) {
            return obj && obj.__esModule ? obj["default"] : obj;
          }
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          var _infererReference = _dereq_(157);
          exports.Identifier = _interopRequire(_infererReference);
          function VariableDeclarator() {
            var id = this.get("id");
            if (id.isIdentifier()) {
              return this.get("init").getTypeAnnotation();
            } else {
              return;
            }
          }
          function TypeCastExpression(node) {
            return node.typeAnnotation;
          }
          TypeCastExpression.validParent = true;
          function NewExpression(node) {
            if (this.get("callee").isIdentifier()) {
              return t.genericTypeAnnotation(node.callee);
            }
          }
          function TemplateLiteral() {
            return t.stringTypeAnnotation();
          }
          function UnaryExpression(node) {
            var operator = node.operator;
            if (operator === "void") {
              return t.voidTypeAnnotation();
            } else if (t.NUMBER_UNARY_OPERATORS.indexOf(operator) >= 0) {
              return t.numberTypeAnnotation();
            } else if (t.STRING_UNARY_OPERATORS.indexOf(operator) >= 0) {
              return t.stringTypeAnnotation();
            } else if (t.BOOLEAN_UNARY_OPERATORS.indexOf(operator) >= 0) {
              return t.booleanTypeAnnotation();
            }
          }
          function BinaryExpression(node) {
            var operator = node.operator;
            if (t.NUMBER_BINARY_OPERATORS.indexOf(operator) >= 0) {
              return t.numberTypeAnnotation();
            } else if (t.BOOLEAN_BINARY_OPERATORS.indexOf(operator) >= 0) {
              return t.booleanTypeAnnotation();
            } else if (operator === "+") {
              var right = this.get("right");
              var left = this.get("left");
              if (left.isBaseType("number") && right.isBaseType("number")) {
                return t.numberTypeAnnotation();
              } else if (left.isBaseType("string") || right.isBaseType("string")) {
                return t.stringTypeAnnotation();
              }
              return t.unionTypeAnnotation([t.stringTypeAnnotation(), t.numberTypeAnnotation()]);
            }
          }
          function LogicalExpression() {
            return t.createUnionTypeAnnotation([this.get("left").getTypeAnnotation(), this.get("right").getTypeAnnotation()]);
          }
          function ConditionalExpression() {
            return t.createUnionTypeAnnotation([this.get("consequent").getTypeAnnotation(), this.get("alternate").getTypeAnnotation()]);
          }
          function SequenceExpression() {
            return this.get("expressions").pop().getTypeAnnotation();
          }
          function AssignmentExpression() {
            return this.get("right").getTypeAnnotation();
          }
          function UpdateExpression(node) {
            var operator = node.operator;
            if (operator === "++" || operator === "--") {
              return t.numberTypeAnnotation();
            }
          }
          function Literal(node) {
            var value = node.value;
            if (typeof value === "string")
              return t.stringTypeAnnotation();
            if (typeof value === "number")
              return t.numberTypeAnnotation();
            if (typeof value === "boolean")
              return t.booleanTypeAnnotation();
            if (value === null)
              return t.voidTypeAnnotation();
            if (node.regex)
              return t.genericTypeAnnotation(t.identifier("RegExp"));
          }
          function ObjectExpression() {
            return t.genericTypeAnnotation(t.identifier("Object"));
          }
          function ArrayExpression() {
            return t.genericTypeAnnotation(t.identifier("Array"));
          }
          function RestElement() {
            return ArrayExpression();
          }
          RestElement.validParent = true;
          function Func() {
            return t.genericTypeAnnotation(t.identifier("Function"));
          }
          exports.Function = Func;
          exports.Class = Func;
          function CallExpression() {
            return resolveCall(this.get("callee"));
          }
          function TaggedTemplateExpression() {
            return resolveCall(this.get("tag"));
          }
          function resolveCall(callee) {
            callee = callee.resolve();
            if (callee.isFunction()) {
              if (callee.is("async")) {
                if (callee.is("generator")) {
                  return t.genericTypeAnnotation(t.identifier("AsyncIterator"));
                } else {
                  return t.genericTypeAnnotation(t.identifier("Promise"));
                }
              } else {
                if (callee.node.returnType) {
                  return callee.node.returnType;
                } else {}
              }
            }
          }
        }, {
          "157": 157,
          "179": 179
        }],
        159: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          exports.matchesPattern = matchesPattern;
          exports.has = has;
          exports.isnt = isnt;
          exports.equals = equals;
          exports.isNodeType = isNodeType;
          exports.canHaveVariableDeclarationOrExpression = canHaveVariableDeclarationOrExpression;
          exports.canSwapBetweenExpressionAndStatement = canSwapBetweenExpressionAndStatement;
          exports.isCompletionRecord = isCompletionRecord;
          exports.isStatementOrBlock = isStatementOrBlock;
          exports.referencesImport = referencesImport;
          exports.getSource = getSource;
          exports.willIMaybeExecuteBefore = willIMaybeExecuteBefore;
          exports._guessExecutionStatusRelativeTo = _guessExecutionStatusRelativeTo;
          exports.resolve = resolve;
          exports._resolve = _resolve;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {"default": obj};
          }
          var _lodashCollectionIncludes = _dereq_(446);
          var _lodashCollectionIncludes2 = _interopRequireDefault(_lodashCollectionIncludes);
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          function matchesPattern(pattern, allowPartial) {
            if (!this.isMemberExpression())
              return false;
            var parts = pattern.split(".");
            var search = [this.node];
            var i = 0;
            function matches(name) {
              var part = parts[i];
              return part === "*" || name === part;
            }
            while (search.length) {
              var node = search.shift();
              if (allowPartial && i === parts.length) {
                return true;
              }
              if (t.isIdentifier(node)) {
                if (!matches(node.name))
                  return false;
              } else if (t.isLiteral(node)) {
                if (!matches(node.value))
                  return false;
              } else if (t.isMemberExpression(node)) {
                if (node.computed && !t.isLiteral(node.property)) {
                  return false;
                } else {
                  search.unshift(node.property);
                  search.unshift(node.object);
                  continue;
                }
              } else if (t.isThisExpression(node)) {
                if (!matches("this"))
                  return false;
              } else {
                return false;
              }
              if (++i > parts.length) {
                return false;
              }
            }
            return i === parts.length;
          }
          function has(key) {
            var val = this.node[key];
            if (val && Array.isArray(val)) {
              return !!val.length;
            } else {
              return !!val;
            }
          }
          var is = has;
          exports.is = is;
          function isnt(key) {
            return !this.has(key);
          }
          function equals(key, value) {
            return this.node[key] === value;
          }
          function isNodeType(type) {
            return t.isType(this.type, type);
          }
          function canHaveVariableDeclarationOrExpression() {
            return (this.key === "init" || this.key === "left") && this.parentPath.isFor();
          }
          function canSwapBetweenExpressionAndStatement(replacement) {
            if (this.key !== "body" || !this.parentPath.isArrowFunctionExpression()) {
              return false;
            }
            if (this.isExpression()) {
              return t.isBlockStatement(replacement);
            } else if (this.isBlockStatement()) {
              return t.isExpression(replacement);
            }
            return false;
          }
          function isCompletionRecord(allowInsideFunction) {
            var path = this;
            var first = true;
            do {
              var container = path.container;
              if (path.isFunction() && !first) {
                return !!allowInsideFunction;
              }
              first = false;
              if (Array.isArray(container) && path.key !== container.length - 1) {
                return false;
              }
            } while ((path = path.parentPath) && !path.isProgram());
            return true;
          }
          function isStatementOrBlock() {
            if (this.parentPath.isLabeledStatement() || t.isBlockStatement(this.container)) {
              return false;
            } else {
              return _lodashCollectionIncludes2["default"](t.STATEMENT_OR_BLOCK_KEYS, this.key);
            }
          }
          function referencesImport(moduleSource, importName) {
            if (!this.isReferencedIdentifier())
              return false;
            var binding = this.scope.getBinding(this.node.name);
            if (!binding || binding.kind !== "module")
              return false;
            var path = binding.path;
            var parent = path.parentPath;
            if (!parent.isImportDeclaration())
              return false;
            if (parent.node.source.value === moduleSource) {
              if (!importName)
                return true;
            } else {
              return false;
            }
            if (path.isImportDefaultSpecifier() && importName === "default") {
              return true;
            }
            if (path.isImportNamespaceSpecifier() && importName === "*") {
              return true;
            }
            if (path.isImportSpecifier() && path.node.imported.name === importName) {
              return true;
            }
            return false;
          }
          function getSource() {
            var node = this.node;
            if (node.end) {
              return this.hub.file.code.slice(node.start, node.end);
            } else {
              return "";
            }
          }
          function willIMaybeExecuteBefore(target) {
            return this._guessExecutionStatusRelativeTo(target) !== "after";
          }
          function _guessExecutionStatusRelativeTo(target) {
            var targetFuncParent = target.scope.getFunctionParent();
            var selfFuncParent = this.scope.getFunctionParent();
            if (targetFuncParent !== selfFuncParent) {
              return "function";
            }
            var targetPaths = target.getAncestry();
            var selfPaths = this.getAncestry();
            var commonPath;
            var targetIndex;
            var selfIndex;
            for (selfIndex = 0; selfIndex < selfPaths.length; selfIndex++) {
              var selfPath = selfPaths[selfIndex];
              targetIndex = targetPaths.indexOf(selfPath);
              if (targetIndex >= 0) {
                commonPath = selfPath;
                break;
              }
            }
            if (!commonPath) {
              return "before";
            }
            var targetRelationship = targetPaths[targetIndex - 1];
            var selfRelationship = selfPaths[selfIndex - 1];
            if (!targetRelationship || !selfRelationship) {
              return "before";
            }
            if (targetRelationship.listKey && targetRelationship.container === selfRelationship.container) {
              return targetRelationship.key > selfRelationship.key ? "before" : "after";
            }
            var targetKeyPosition = t.VISITOR_KEYS[targetRelationship.type].indexOf(targetRelationship.key);
            var selfKeyPosition = t.VISITOR_KEYS[selfRelationship.type].indexOf(selfRelationship.key);
            return targetKeyPosition > selfKeyPosition ? "before" : "after";
          }
          function resolve(dangerous, resolved) {
            return this._resolve(dangerous, resolved) || this;
          }
          function _resolve(dangerous, resolved) {
            if (resolved && resolved.indexOf(this) >= 0)
              return;
            resolved = resolved || [];
            resolved.push(this);
            if (this.isVariableDeclarator()) {
              if (this.get("id").isIdentifier()) {
                return this.get("init").resolve(dangerous, resolved);
              } else {}
            } else if (this.isReferencedIdentifier()) {
              var binding = this.scope.getBinding(this.node.name);
              if (!binding)
                return;
              if (!binding.constant)
                return;
              if (binding.kind === "module")
                return;
              if (binding.path !== this) {
                return binding.path.resolve(dangerous, resolved);
              }
            } else if (this.isTypeCastExpression()) {
              return this.get("expression").resolve(dangerous, resolved);
            } else if (dangerous && this.isMemberExpression()) {
              var targetKey = this.toComputedKey();
              if (!t.isLiteral(targetKey))
                return;
              var targetName = targetKey.value;
              var target = this.get("object").resolve(dangerous, resolved);
              if (target.isObjectExpression()) {
                var props = target.get("properties");
                var _arr = props;
                for (var _i = 0; _i < _arr.length; _i++) {
                  var prop = _arr[_i];
                  if (!prop.isProperty())
                    continue;
                  var key = prop.get("key");
                  var match = prop.isnt("computed") && key.isIdentifier({name: targetName});
                  match = match || key.isLiteral({value: targetName});
                  if (match)
                    return prop.get("value").resolve(dangerous, resolved);
                }
              } else if (target.isArrayExpression() && !isNaN(+targetName)) {
                var elems = target.get("elements");
                var elem = elems[targetName];
                if (elem)
                  return elem.resolve(dangerous, resolved);
              }
            }
          }
        }, {
          "179": 179,
          "446": 446
        }],
        160: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }
          var _transformationHelpersReact = _dereq_(62);
          var react = _interopRequireWildcard(_transformationHelpersReact);
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          var referenceVisitor = {ReferencedIdentifier: function ReferencedIdentifier(node, parent, scope, state) {
              if (this.isJSXIdentifier() && react.isCompatTag(node.name)) {
                return;
              }
              var binding = scope.getBinding(node.name);
              if (!binding)
                return;
              if (binding !== state.scope.getBinding(node.name))
                return;
              if (binding.constant) {
                state.bindings[node.name] = binding;
              } else {
                var _arr = binding.constantViolations;
                for (var _i = 0; _i < _arr.length; _i++) {
                  var violationPath = _arr[_i];
                  state.breakOnScopePaths = state.breakOnScopePaths.concat(violationPath.getAncestry());
                }
              }
            }};
          var PathHoister = (function() {
            function PathHoister(path, scope) {
              _classCallCheck(this, PathHoister);
              this.breakOnScopePaths = [];
              this.bindings = {};
              this.scopes = [];
              this.scope = scope;
              this.path = path;
            }
            PathHoister.prototype.isCompatibleScope = function isCompatibleScope(scope) {
              for (var key in this.bindings) {
                var binding = this.bindings[key];
                if (!scope.bindingIdentifierEquals(key, binding.identifier)) {
                  return false;
                }
              }
              return true;
            };
            PathHoister.prototype.getCompatibleScopes = function getCompatibleScopes() {
              var scope = this.path.scope;
              do {
                if (this.isCompatibleScope(scope)) {
                  this.scopes.push(scope);
                } else {
                  break;
                }
                if (this.breakOnScopePaths.indexOf(scope.path) >= 0) {
                  break;
                }
              } while (scope = scope.parent);
            };
            PathHoister.prototype.getAttachmentPath = function getAttachmentPath() {
              var scopes = this.scopes;
              var scope = scopes.pop();
              if (!scope)
                return;
              if (scope.path.isFunction()) {
                if (this.hasOwnParamBindings(scope)) {
                  if (this.scope === scope)
                    return;
                  return scope.path.get("body").get("body")[0];
                } else {
                  return this.getNextScopeStatementParent();
                }
              } else if (scope.path.isProgram()) {
                return this.getNextScopeStatementParent();
              }
            };
            PathHoister.prototype.getNextScopeStatementParent = function getNextScopeStatementParent() {
              var scope = this.scopes.pop();
              if (scope)
                return scope.path.getStatementParent();
            };
            PathHoister.prototype.hasOwnParamBindings = function hasOwnParamBindings(scope) {
              for (var name in this.bindings) {
                if (!scope.hasOwnBinding(name))
                  continue;
                var binding = this.bindings[name];
                if (binding.kind === "param")
                  return true;
              }
              return false;
            };
            PathHoister.prototype.run = function run() {
              var node = this.path.node;
              if (node._hoisted)
                return;
              node._hoisted = true;
              this.path.traverse(referenceVisitor, this);
              this.getCompatibleScopes();
              var attachTo = this.getAttachmentPath();
              if (!attachTo)
                return;
              if (attachTo.getFunctionParent() === this.path.getFunctionParent())
                return;
              var uid = attachTo.scope.generateUidIdentifier("ref");
              attachTo.insertBefore([t.variableDeclaration("var", [t.variableDeclarator(uid, this.path.node)])]);
              var parent = this.path.parentPath;
              if (parent.isJSXElement() && this.path.container === parent.node.children) {
                uid = t.JSXExpressionContainer(uid);
              }
              this.path.replaceWith(uid);
            };
            return PathHoister;
          })();
          exports["default"] = PathHoister;
          module.exports = exports["default"];
        }, {
          "179": 179,
          "62": 62
        }],
        161: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          var pre = [function(self) {
            if (self.key === "body" && (self.isBlockStatement() || self.isClassBody())) {
              self.node.body = [];
              return true;
            }
          }, function(self, parent) {
            var replace = false;
            replace = replace || self.key === "body" && parent.isArrowFunctionExpression();
            replace = replace || self.key === "argument" && parent.isThrowStatement();
            if (replace) {
              self.replaceWith(t.identifier("undefined"));
              return true;
            }
          }];
          exports.pre = pre;
          var post = [function(self, parent) {
            var removeParent = false;
            removeParent = removeParent || self.key === "test" && (parent.isWhile() || parent.isSwitchCase());
            removeParent = removeParent || self.key === "declaration" && parent.isExportDeclaration();
            removeParent = removeParent || self.key === "body" && parent.isLabeledStatement();
            removeParent = removeParent || self.listKey === "declarations" && parent.isVariableDeclaration() && parent.node.declarations.length === 0;
            removeParent = removeParent || self.key === "expression" && parent.isExpressionStatement();
            removeParent = removeParent || self.key === "test" && parent.isIfStatement();
            if (removeParent) {
              parent.dangerouslyRemove();
              return true;
            }
          }, function(self, parent) {
            if (parent.isSequenceExpression() && parent.node.expressions.length === 1) {
              parent.replaceWith(parent.node.expressions[0]);
              return true;
            }
          }, function(self, parent) {
            if (parent.isBinary()) {
              if (self.key === "left") {
                parent.replaceWith(parent.node.right);
              } else {
                parent.replaceWith(parent.node.left);
              }
              return true;
            }
          }];
          exports.post = post;
        }, {"179": 179}],
        162: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          var _transformationHelpersReact = _dereq_(62);
          var react = _interopRequireWildcard(_transformationHelpersReact);
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          var ReferencedIdentifier = {
            types: ["Identifier", "JSXIdentifier"],
            checkPath: function checkPath(_ref, opts) {
              var node = _ref.node;
              var parent = _ref.parent;
              if (!t.isIdentifier(node, opts)) {
                if (t.isJSXIdentifier(node, opts)) {
                  if (react.isCompatTag(node.name))
                    return false;
                } else {
                  return false;
                }
              }
              return t.isReferenced(node, parent);
            }
          };
          exports.ReferencedIdentifier = ReferencedIdentifier;
          var BindingIdentifier = {
            types: ["Identifier"],
            checkPath: function checkPath(_ref2) {
              var node = _ref2.node;
              var parent = _ref2.parent;
              return t.isBinding(node, parent);
            }
          };
          exports.BindingIdentifier = BindingIdentifier;
          var Statement = {
            types: ["Statement"],
            checkPath: function checkPath(_ref3) {
              var node = _ref3.node;
              var parent = _ref3.parent;
              if (t.isStatement(node)) {
                if (t.isVariableDeclaration(node)) {
                  if (t.isForXStatement(parent, {left: node}))
                    return false;
                  if (t.isForStatement(parent, {init: node}))
                    return false;
                }
                return true;
              } else {
                return false;
              }
            }
          };
          exports.Statement = Statement;
          var Expression = {
            types: ["Expression"],
            checkPath: function checkPath(path) {
              if (path.isIdentifier()) {
                return path.isReferencedIdentifier();
              } else {
                return t.isExpression(path.node);
              }
            }
          };
          exports.Expression = Expression;
          var Scope = {
            types: ["Scopable"],
            checkPath: function checkPath(path) {
              return t.isScope(path.node, path.parent);
            }
          };
          exports.Scope = Scope;
          var Referenced = {checkPath: function checkPath(path) {
              return t.isReferenced(path.node, path.parent);
            }};
          exports.Referenced = Referenced;
          var BlockScoped = {checkPath: function checkPath(path) {
              return t.isBlockScoped(path.node);
            }};
          exports.BlockScoped = BlockScoped;
          var Var = {
            types: ["VariableDeclaration"],
            checkPath: function checkPath(path) {
              return t.isVar(path.node);
            }
          };
          exports.Var = Var;
          var DirectiveLiteral = {
            types: ["Literal"],
            checkPath: function checkPath(path) {
              return path.isLiteral() && path.parentPath.isExpressionStatement();
            }
          };
          exports.DirectiveLiteral = DirectiveLiteral;
          var Directive = {
            types: ["ExpressionStatement"],
            checkPath: function checkPath(path) {
              return path.get("expression").isLiteral();
            }
          };
          exports.Directive = Directive;
          var User = {checkPath: function checkPath(path) {
              return path.node && !!path.node.loc;
            }};
          exports.User = User;
          var Generated = {checkPath: function checkPath(path) {
              return !path.isUser();
            }};
          exports.Generated = Generated;
          var Flow = {
            types: ["Flow", "ImportDeclaration", "ExportDeclaration"],
            checkPath: function checkPath(_ref4) {
              var node = _ref4.node;
              if (t.isFlow(node)) {
                return true;
              } else if (t.isImportDeclaration(node)) {
                return node.importKind === "type" || node.importKind === "typeof";
              } else if (t.isExportDeclaration(node)) {
                return node.exportKind === "type";
              } else {
                return false;
              }
            }
          };
          exports.Flow = Flow;
        }, {
          "179": 179,
          "62": 62
        }],
        163: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          exports.insertBefore = insertBefore;
          exports._containerInsert = _containerInsert;
          exports._containerInsertBefore = _containerInsertBefore;
          exports._containerInsertAfter = _containerInsertAfter;
          exports._maybePopFromStatements = _maybePopFromStatements;
          exports.insertAfter = insertAfter;
          exports.updateSiblingKeys = updateSiblingKeys;
          exports._verifyNodeList = _verifyNodeList;
          exports.unshiftContainer = unshiftContainer;
          exports.pushContainer = pushContainer;
          exports.hoist = hoist;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {"default": obj};
          }
          var _libHoister = _dereq_(160);
          var _libHoister2 = _interopRequireDefault(_libHoister);
          var _index = _dereq_(155);
          var _index2 = _interopRequireDefault(_index);
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          function insertBefore(nodes) {
            this._assertUnremoved();
            nodes = this._verifyNodeList(nodes);
            if (this.parentPath.isExpressionStatement() || this.parentPath.isLabeledStatement()) {
              return this.parentPath.insertBefore(nodes);
            } else if (this.isNodeType("Expression") || this.parentPath.isForStatement() && this.key === "init") {
              if (this.node)
                nodes.push(this.node);
              this.replaceExpressionWithStatements(nodes);
            } else {
              this._maybePopFromStatements(nodes);
              if (Array.isArray(this.container)) {
                return this._containerInsertBefore(nodes);
              } else if (this.isStatementOrBlock()) {
                if (this.node)
                  nodes.push(this.node);
                this.node = this.container[this.key] = t.blockStatement(nodes);
              } else {
                throw new Error("We don't know what to do with this node type. We were previously a Statement but we can't fit in here?");
              }
            }
            return [this];
          }
          function _containerInsert(from, nodes) {
            this.updateSiblingKeys(from, nodes.length);
            var paths = [];
            for (var i = 0; i < nodes.length; i++) {
              var to = from + i;
              var node = nodes[i];
              this.container.splice(to, 0, node);
              if (this.context) {
                var path = this.context.create(this.parent, this.container, to, this.listKey);
                paths.push(path);
                this.queueNode(path);
              } else {
                paths.push(_index2["default"].get({
                  parentPath: this,
                  parent: node,
                  container: this.container,
                  listKey: this.listKey,
                  key: to
                }));
              }
            }
            return paths;
          }
          function _containerInsertBefore(nodes) {
            return this._containerInsert(this.key, nodes);
          }
          function _containerInsertAfter(nodes) {
            return this._containerInsert(this.key + 1, nodes);
          }
          function _maybePopFromStatements(nodes) {
            var last = nodes[nodes.length - 1];
            if (t.isExpressionStatement(last) && t.isIdentifier(last.expression) && !this.isCompletionRecord()) {
              nodes.pop();
            }
          }
          function insertAfter(nodes) {
            this._assertUnremoved();
            nodes = this._verifyNodeList(nodes);
            if (this.parentPath.isExpressionStatement() || this.parentPath.isLabeledStatement()) {
              return this.parentPath.insertAfter(nodes);
            } else if (this.isNodeType("Expression") || this.parentPath.isForStatement() && this.key === "init") {
              if (this.node) {
                var temp = this.scope.generateDeclaredUidIdentifier();
                nodes.unshift(t.expressionStatement(t.assignmentExpression("=", temp, this.node)));
                nodes.push(t.expressionStatement(temp));
              }
              this.replaceExpressionWithStatements(nodes);
            } else {
              this._maybePopFromStatements(nodes);
              if (Array.isArray(this.container)) {
                return this._containerInsertAfter(nodes);
              } else if (this.isStatementOrBlock()) {
                if (this.node)
                  nodes.unshift(this.node);
                this.node = this.container[this.key] = t.blockStatement(nodes);
              } else {
                throw new Error("We don't know what to do with this node type. We were previously a Statement but we can't fit in here?");
              }
            }
            return [this];
          }
          function updateSiblingKeys(fromIndex, incrementBy) {
            var paths = this.parent._paths;
            for (var i = 0; i < paths.length; i++) {
              var path = paths[i];
              if (path.key >= fromIndex) {
                path.key += incrementBy;
              }
            }
          }
          function _verifyNodeList(nodes) {
            if (nodes.constructor !== Array) {
              nodes = [nodes];
            }
            for (var i = 0; i < nodes.length; i++) {
              var node = nodes[i];
              if (!node) {
                throw new Error("Node list has falsy node with the index of " + i);
              } else if (typeof node !== "object") {
                throw new Error("Node list contains a non-object node with the index of " + i);
              } else if (!node.type) {
                throw new Error("Node list contains a node without a type with the index of " + i);
              } else if (node instanceof _index2["default"]) {
                nodes[i] = node.node;
              }
            }
            return nodes;
          }
          function unshiftContainer(listKey, nodes) {
            this._assertUnremoved();
            nodes = this._verifyNodeList(nodes);
            var container = this.node[listKey];
            var path = _index2["default"].get({
              parentPath: this,
              parent: this.node,
              container: container,
              listKey: listKey,
              key: 0
            });
            return path.insertBefore(nodes);
          }
          function pushContainer(listKey, nodes) {
            this._assertUnremoved();
            nodes = this._verifyNodeList(nodes);
            var container = this.node[listKey];
            var i = container.length;
            var path = _index2["default"].get({
              parentPath: this,
              parent: this.node,
              container: container,
              listKey: listKey,
              key: i
            });
            return path.replaceWith(nodes, true);
          }
          function hoist() {
            var scope = arguments.length <= 0 || arguments[0] === undefined ? this.scope : arguments[0];
            var hoister = new _libHoister2["default"](this, scope);
            return hoister.run();
          }
        }, {
          "155": 155,
          "160": 160,
          "179": 179
        }],
        164: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          exports.remove = remove;
          exports.dangerouslyRemove = dangerouslyRemove;
          exports._callRemovalHooks = _callRemovalHooks;
          exports._remove = _remove;
          exports._markRemoved = _markRemoved;
          exports._assertUnremoved = _assertUnremoved;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          var _libRemovalHooks = _dereq_(161);
          var removalHooks = _interopRequireWildcard(_libRemovalHooks);
          function remove() {
            console.trace("Path#remove has been renamed to Path#dangerouslyRemove, removing a node is extremely dangerous so please refrain using it.");
            return this.dangerouslyRemove();
          }
          function dangerouslyRemove() {
            this._assertUnremoved();
            this.resync();
            if (this._callRemovalHooks("pre")) {
              this._markRemoved();
              return;
            }
            this.shareCommentsWithSiblings();
            this._remove();
            this._markRemoved();
            this._callRemovalHooks("post");
          }
          function _callRemovalHooks(position) {
            var _arr = removalHooks[position];
            for (var _i = 0; _i < _arr.length; _i++) {
              var fn = _arr[_i];
              if (fn(this, this.parentPath))
                return true;
            }
          }
          function _remove() {
            if (Array.isArray(this.container)) {
              this.container.splice(this.key, 1);
              this.updateSiblingKeys(this.key, -1);
            } else {
              this.container[this.key] = null;
            }
          }
          function _markRemoved() {
            this.shouldSkip = true;
            this.removed = true;
            this.node = null;
          }
          function _assertUnremoved() {
            if (this.removed) {
              throw this.errorWithNode("NodePath has been removed so is read-only.");
            }
          }
        }, {"161": 161}],
        165: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          exports.replaceWithMultiple = replaceWithMultiple;
          exports.replaceWithSourceString = replaceWithSourceString;
          exports.replaceWith = replaceWith;
          exports.replaceExpressionWithStatements = replaceExpressionWithStatements;
          exports.replaceInline = replaceInline;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {"default": obj};
          }
          var _helpersCodeFrame = _dereq_(38);
          var _helpersCodeFrame2 = _interopRequireDefault(_helpersCodeFrame);
          var _index = _dereq_(148);
          var _index2 = _interopRequireDefault(_index);
          var _index3 = _dereq_(155);
          var _index4 = _interopRequireDefault(_index3);
          var _helpersParse = _dereq_(42);
          var _helpersParse2 = _interopRequireDefault(_helpersParse);
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          var hoistVariablesVisitor = {
            Function: function Function() {
              this.skip();
            },
            VariableDeclaration: function VariableDeclaration(node, parent, scope) {
              if (node.kind !== "var")
                return;
              var bindings = this.getBindingIdentifiers();
              for (var key in bindings) {
                scope.push({id: bindings[key]});
              }
              var exprs = [];
              var _arr = node.declarations;
              for (var _i = 0; _i < _arr.length; _i++) {
                var declar = _arr[_i];
                if (declar.init) {
                  exprs.push(t.expressionStatement(t.assignmentExpression("=", declar.id, declar.init)));
                }
              }
              return exprs;
            }
          };
          function replaceWithMultiple(nodes) {
            this.resync();
            nodes = this._verifyNodeList(nodes);
            t.inheritLeadingComments(nodes[0], this.node);
            t.inheritTrailingComments(nodes[nodes.length - 1], this.node);
            this.node = this.container[this.key] = null;
            this.insertAfter(nodes);
            if (!this.node)
              this.dangerouslyRemove();
          }
          function replaceWithSourceString(replacement) {
            this.resync();
            try {
              replacement = "(" + replacement + ")";
              replacement = _helpersParse2["default"](replacement);
            } catch (err) {
              var loc = err.loc;
              if (loc) {
                err.message += " - make sure this is an expression.";
                err.message += "\n" + _helpersCodeFrame2["default"](replacement, loc.line, loc.column + 1);
              }
              throw err;
            }
            replacement = replacement.program.body[0].expression;
            _index2["default"].removeProperties(replacement);
            return this.replaceWith(replacement);
          }
          function replaceWith(replacement, whateverAllowed) {
            this.resync();
            if (this.removed) {
              throw new Error("You can't replace this node, we've already removed it");
            }
            if (replacement instanceof _index4["default"]) {
              replacement = replacement.node;
            }
            if (!replacement) {
              throw new Error("You passed `path.replaceWith()` a falsy node, use `path.dangerouslyRemove()` instead");
            }
            if (this.node === replacement) {
              return;
            }
            if (this.isProgram() && !t.isProgram(replacement)) {
              throw new Error("You can only replace a Program root node with another Program node");
            }
            if (t.isProgram(replacement) && !this.isProgram()) {
              replacement = replacement.body;
              whateverAllowed = true;
            }
            if (Array.isArray(replacement)) {
              if (whateverAllowed) {
                return this.replaceWithMultiple(replacement);
              } else {
                throw new Error("Don't use `path.replaceWith()` with an array of nodes, use `path.replaceWithMultiple()`");
              }
            }
            if (typeof replacement === "string") {
              return this.replaceWithSourceString();
            }
            if (this.isNodeType("Statement") && t.isExpression(replacement)) {
              if (!this.canHaveVariableDeclarationOrExpression() && !this.canSwapBetweenExpressionAndStatement(replacement)) {
                replacement = t.expressionStatement(replacement);
              }
            }
            if (this.isNodeType("Expression") && t.isStatement(replacement)) {
              if (!this.canSwapBetweenExpressionAndStatement(replacement)) {
                return this.replaceExpressionWithStatements([replacement]);
              }
            }
            var oldNode = this.node;
            if (oldNode)
              t.inheritsComments(replacement, oldNode);
            this.node = this.container[this.key] = replacement;
            this.type = replacement.type;
            this.setScope();
          }
          function replaceExpressionWithStatements(nodes) {
            this.resync();
            var toSequenceExpression = t.toSequenceExpression(nodes, this.scope);
            if (toSequenceExpression) {
              return this.replaceWith(toSequenceExpression);
            } else {
              var container = t.functionExpression(null, [], t.blockStatement(nodes));
              container.shadow = true;
              this.replaceWith(t.callExpression(container, []));
              this.traverse(hoistVariablesVisitor);
              var last = this.get("callee").getCompletionRecords();
              var _arr2 = last;
              for (var _i2 = 0; _i2 < _arr2.length; _i2++) {
                var lastNode = _arr2[_i2];
                if (!lastNode.isExpressionStatement())
                  continue;
                var loop = lastNode.findParent(function(path) {
                  return path.isLoop();
                });
                if (loop) {
                  var uid = this.get("callee").scope.generateDeclaredUidIdentifier("ret");
                  this.get("callee.body").pushContainer("body", t.returnStatement(uid));
                  lastNode.get("expression").replaceWith(t.assignmentExpression("=", uid, lastNode.node.expression));
                } else {
                  lastNode.replaceWith(t.returnStatement(lastNode.node.expression));
                }
              }
              return this.node;
            }
          }
          function replaceInline(nodes) {
            this.resync();
            if (Array.isArray(nodes)) {
              if (Array.isArray(this.container)) {
                nodes = this._verifyNodeList(nodes);
                this._containerInsertAfter(nodes);
                return this.dangerouslyRemove();
              } else {
                return this.replaceWithMultiple(nodes);
              }
            } else {
              return this.replaceWith(nodes);
            }
          }
        }, {
          "148": 148,
          "155": 155,
          "179": 179,
          "38": 38,
          "42": 42
        }],
        166: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }
          var Binding = (function() {
            function Binding(_ref) {
              var existing = _ref.existing;
              var identifier = _ref.identifier;
              var scope = _ref.scope;
              var path = _ref.path;
              var kind = _ref.kind;
              _classCallCheck(this, Binding);
              this.constantViolations = [];
              this.constant = true;
              this.identifier = identifier;
              this.references = 0;
              this.referenced = false;
              this.scope = scope;
              this.path = path;
              this.kind = kind;
              this.hasValue = false;
              this.hasDeoptedValue = false;
              this.value = null;
              this.clearValue();
              if (existing) {
                this.constantViolations = [].concat(existing.path, existing.constantViolations, this.constantViolations);
              }
            }
            Binding.prototype.deoptValue = function deoptValue() {
              this.clearValue();
              this.hasDeoptedValue = true;
            };
            Binding.prototype.setValue = function setValue(value) {
              if (this.hasDeoptedValue)
                return;
              this.hasValue = true;
              this.value = value;
            };
            Binding.prototype.clearValue = function clearValue() {
              this.hasDeoptedValue = false;
              this.hasValue = false;
              this.value = null;
            };
            Binding.prototype.reassign = function reassign(path) {
              this.constant = false;
              this.constantViolations.push(path);
            };
            Binding.prototype.reference = function reference() {
              this.referenced = true;
              this.references++;
            };
            Binding.prototype.dereference = function dereference() {
              this.references--;
              this.referenced = !!this.references;
            };
            return Binding;
          })();
          exports["default"] = Binding;
          module.exports = exports["default"];
        }, {}],
        167: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          var _createClass = (function() {
            function defineProperties(target, props) {
              for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor)
                  descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
              }
            }
            return function(Constructor, protoProps, staticProps) {
              if (protoProps)
                defineProperties(Constructor.prototype, protoProps);
              if (staticProps)
                defineProperties(Constructor, staticProps);
              return Constructor;
            };
          })();
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {"default": obj};
          }
          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }
          var _lodashCollectionIncludes = _dereq_(446);
          var _lodashCollectionIncludes2 = _interopRequireDefault(_lodashCollectionIncludes);
          var _repeating = _dereq_(586);
          var _repeating2 = _interopRequireDefault(_repeating);
          var _index = _dereq_(148);
          var _index2 = _interopRequireDefault(_index);
          var _lodashObjectDefaults = _dereq_(543);
          var _lodashObjectDefaults2 = _interopRequireDefault(_lodashObjectDefaults);
          var _messages = _dereq_(43);
          var messages = _interopRequireWildcard(_messages);
          var _binding = _dereq_(166);
          var _binding2 = _interopRequireDefault(_binding);
          var _globals = _dereq_(431);
          var _globals2 = _interopRequireDefault(_globals);
          var _lodashArrayFlatten = _dereq_(439);
          var _lodashArrayFlatten2 = _interopRequireDefault(_lodashArrayFlatten);
          var _lodashObjectExtend = _dereq_(544);
          var _lodashObjectExtend2 = _interopRequireDefault(_lodashObjectExtend);
          var _helpersObject = _dereq_(41);
          var _helpersObject2 = _interopRequireDefault(_helpersObject);
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          var collectorVisitor = {
            For: function For() {
              var _arr = t.FOR_INIT_KEYS;
              for (var _i = 0; _i < _arr.length; _i++) {
                var key = _arr[_i];
                var declar = this.get(key);
                if (declar.isVar())
                  this.scope.getFunctionParent().registerBinding("var", declar);
              }
            },
            Declaration: function Declaration() {
              if (this.isBlockScoped())
                return;
              if (this.isExportDeclaration() && this.get("declaration").isDeclaration())
                return;
              this.scope.getFunctionParent().registerDeclaration(this);
            },
            ReferencedIdentifier: function ReferencedIdentifier(node, parent, scope, state) {
              state.references.push(this);
            },
            ForXStatement: function ForXStatement(node, parent, scope, state) {
              var left = this.get("left");
              if (left.isPattern() || left.isIdentifier()) {
                state.constantViolations.push(left);
              }
            },
            ExportDeclaration: {exit: function exit(node, parent, scope) {
                var declar = node.declaration;
                if (t.isClassDeclaration(declar) || t.isFunctionDeclaration(declar)) {
                  var binding = scope.getBinding(declar.id.name);
                  if (binding)
                    binding.reference();
                } else if (t.isVariableDeclaration(declar)) {
                  var _arr2 = declar.declarations;
                  for (var _i2 = 0; _i2 < _arr2.length; _i2++) {
                    var decl = _arr2[_i2];
                    var ids = t.getBindingIdentifiers(decl);
                    for (var _name in ids) {
                      var binding = scope.getBinding(_name);
                      if (binding)
                        binding.reference();
                    }
                  }
                }
              }},
            LabeledStatement: function LabeledStatement() {
              this.scope.getProgramParent().addGlobal(this.node);
              this.scope.getBlockParent().registerDeclaration(this);
            },
            AssignmentExpression: function AssignmentExpression(node, parent, scope, state) {
              state.assignments.push(this);
            },
            UpdateExpression: function UpdateExpression(node, parent, scope, state) {
              state.constantViolations.push(this.get("argument"));
            },
            UnaryExpression: function UnaryExpression(node, parent, scope, state) {
              if (this.node.operator === "delete") {
                state.constantViolations.push(this.get("argument"));
              }
            },
            BlockScoped: function BlockScoped() {
              var scope = this.scope;
              if (scope.path === this)
                scope = scope.parent;
              scope.getBlockParent().registerDeclaration(this);
            },
            ClassDeclaration: function ClassDeclaration() {
              var name = this.node.id.name;
              this.scope.bindings[name] = this.scope.getBinding(name);
            },
            Block: function Block() {
              var paths = this.get("body");
              var _arr3 = paths;
              for (var _i3 = 0; _i3 < _arr3.length; _i3++) {
                var bodyPath = _arr3[_i3];
                if (bodyPath.isFunctionDeclaration()) {
                  this.scope.getBlockParent().registerDeclaration(bodyPath);
                }
              }
            }
          };
          var renameVisitor = {
            ReferencedIdentifier: function ReferencedIdentifier(node, parent, scope, state) {
              if (node.name === state.oldName) {
                node.name = state.newName;
              }
            },
            Scope: function Scope(node, parent, scope, state) {
              if (!scope.bindingIdentifierEquals(state.oldName, state.binding)) {
                this.skip();
              }
            },
            "AssignmentExpression|Declaration": function AssignmentExpressionDeclaration(node, parent, scope, state) {
              var ids = this.getBindingIdentifiers();
              for (var name in ids) {
                if (name === state.oldName)
                  ids[name].name = state.newName;
              }
            }
          };
          var Scope = (function() {
            function Scope(path, parent) {
              _classCallCheck(this, Scope);
              if (parent && parent.block === path.node) {
                return parent;
              }
              var cached = path.getData("scope");
              if (cached && cached.parent === parent && cached.block === path.node) {
                return cached;
              } else {
                path.setData("scope", this);
              }
              this.parent = parent;
              this.hub = path.hub;
              this.parentBlock = path.parent;
              this.block = path.node;
              this.path = path;
            }
            Scope.prototype.traverse = function traverse(node, opts, state) {
              _index2["default"](node, opts, this, state, this.path);
            };
            Scope.prototype.generateDeclaredUidIdentifier = function generateDeclaredUidIdentifier() {
              var name = arguments.length <= 0 || arguments[0] === undefined ? "temp" : arguments[0];
              var id = this.generateUidIdentifier(name);
              this.push({id: id});
              return id;
            };
            Scope.prototype.generateUidIdentifier = function generateUidIdentifier(name) {
              return t.identifier(this.generateUid(name));
            };
            Scope.prototype.generateUid = function generateUid(name) {
              name = t.toIdentifier(name).replace(/^_+/, "");
              var uid;
              var i = 0;
              do {
                uid = this._generateUid(name, i);
                i++;
              } while (this.hasBinding(uid) || this.hasGlobal(uid) || this.hasReference(uid));
              var program = this.getProgramParent();
              program.references[uid] = true;
              program.uids[uid] = true;
              return uid;
            };
            Scope.prototype._generateUid = function _generateUid(name, i) {
              var id = name;
              if (i > 1)
                id += i;
              return "_" + id;
            };
            Scope.prototype.generateUidIdentifierBasedOnNode = function generateUidIdentifierBasedOnNode(parent, defaultName) {
              var node = parent;
              if (t.isAssignmentExpression(parent)) {
                node = parent.left;
              } else if (t.isVariableDeclarator(parent)) {
                node = parent.id;
              } else if (t.isProperty(node)) {
                node = node.key;
              }
              var parts = [];
              var add = function add(node) {
                if (t.isModuleDeclaration(node)) {
                  if (node.source) {
                    add(node.source);
                  } else if (node.specifiers && node.specifiers.length) {
                    var _arr4 = node.specifiers;
                    for (var _i4 = 0; _i4 < _arr4.length; _i4++) {
                      var specifier = _arr4[_i4];
                      add(specifier);
                    }
                  } else if (node.declaration) {
                    add(node.declaration);
                  }
                } else if (t.isModuleSpecifier(node)) {
                  add(node.local);
                } else if (t.isMemberExpression(node)) {
                  add(node.object);
                  add(node.property);
                } else if (t.isIdentifier(node)) {
                  parts.push(node.name);
                } else if (t.isLiteral(node)) {
                  parts.push(node.value);
                } else if (t.isCallExpression(node)) {
                  add(node.callee);
                } else if (t.isObjectExpression(node) || t.isObjectPattern(node)) {
                  var _arr5 = node.properties;
                  for (var _i5 = 0; _i5 < _arr5.length; _i5++) {
                    var prop = _arr5[_i5];
                    add(prop.key || prop.argument);
                  }
                }
              };
              add(node);
              var id = parts.join("$");
              id = id.replace(/^_/, "") || defaultName || "ref";
              return this.generateUidIdentifier(id);
            };
            Scope.prototype.isStatic = function isStatic(node) {
              if (t.isThisExpression(node) || t.isSuper(node)) {
                return true;
              }
              if (t.isIdentifier(node)) {
                var binding = this.getBinding(node.name);
                if (binding) {
                  return binding.constant;
                } else {
                  return this.hasBinding(node.name);
                }
              }
              return false;
            };
            Scope.prototype.maybeGenerateMemoised = function maybeGenerateMemoised(node, dontPush) {
              if (this.isStatic(node)) {
                return null;
              } else {
                var id = this.generateUidIdentifierBasedOnNode(node);
                if (!dontPush)
                  this.push({id: id});
                return id;
              }
            };
            Scope.prototype.checkBlockScopedCollisions = function checkBlockScopedCollisions(local, kind, name, id) {
              if (kind === "param")
                return;
              if (kind === "hoisted" && local.kind === "let")
                return;
              var duplicate = false;
              if (!duplicate)
                duplicate = kind === "let" || local.kind === "let" || local.kind === "const" || local.kind === "module";
              if (!duplicate)
                duplicate = local.kind === "param" && (kind === "let" || kind === "const");
              if (duplicate) {
                throw this.hub.file.errorWithNode(id, messages.get("scopeDuplicateDeclaration", name), TypeError);
              }
            };
            Scope.prototype.rename = function rename(oldName, newName, block) {
              newName = newName || this.generateUidIdentifier(oldName).name;
              var info = this.getBinding(oldName);
              if (!info)
                return;
              var state = {
                newName: newName,
                oldName: oldName,
                binding: info.identifier,
                info: info
              };
              var scope = info.scope;
              scope.traverse(block || scope.block, renameVisitor, state);
              if (!block) {
                scope.removeOwnBinding(oldName);
                scope.bindings[newName] = info;
                state.binding.name = newName;
              }
              var file = this.hub.file;
              if (file) {
                this._renameFromMap(file.moduleFormatter.localImports, oldName, newName, state.binding);
              }
            };
            Scope.prototype._renameFromMap = function _renameFromMap(map, oldName, newName, value) {
              if (map[oldName]) {
                map[newName] = value;
                map[oldName] = null;
              }
            };
            Scope.prototype.dump = function dump() {
              var sep = _repeating2["default"]("-", 60);
              console.log(sep);
              var scope = this;
              do {
                console.log("#", scope.block.type);
                for (var name in scope.bindings) {
                  var binding = scope.bindings[name];
                  console.log(" -", name, {
                    constant: binding.constant,
                    references: binding.references,
                    kind: binding.kind
                  });
                }
              } while (scope = scope.parent);
              console.log(sep);
            };
            Scope.prototype.toArray = function toArray(node, i) {
              var file = this.hub.file;
              if (t.isIdentifier(node)) {
                var binding = this.getBinding(node.name);
                if (binding && binding.constant && binding.path.isGenericType("Array"))
                  return node;
              }
              if (t.isArrayExpression(node)) {
                return node;
              }
              if (t.isIdentifier(node, {name: "arguments"})) {
                return t.callExpression(t.memberExpression(file.addHelper("slice"), t.identifier("call")), [node]);
              }
              var helperName = "to-array";
              var args = [node];
              if (i === true) {
                helperName = "to-consumable-array";
              } else if (i) {
                args.push(t.literal(i));
                helperName = "sliced-to-array";
                if (this.hub.file.isLoose("es6.forOf"))
                  helperName += "-loose";
              }
              return t.callExpression(file.addHelper(helperName), args);
            };
            Scope.prototype.registerDeclaration = function registerDeclaration(path) {
              if (path.isLabeledStatement()) {
                this.registerBinding("label", path);
              } else if (path.isFunctionDeclaration()) {
                this.registerBinding("hoisted", path.get("id"), path);
              } else if (path.isVariableDeclaration()) {
                var declarations = path.get("declarations");
                var _arr6 = declarations;
                for (var _i6 = 0; _i6 < _arr6.length; _i6++) {
                  var declar = _arr6[_i6];
                  this.registerBinding(path.node.kind, declar);
                }
              } else if (path.isClassDeclaration()) {
                this.registerBinding("let", path);
              } else if (path.isImportDeclaration()) {
                var specifiers = path.get("specifiers");
                var _arr7 = specifiers;
                for (var _i7 = 0; _i7 < _arr7.length; _i7++) {
                  var specifier = _arr7[_i7];
                  this.registerBinding("module", specifier);
                }
              } else if (path.isExportDeclaration()) {
                var declar = path.get("declaration");
                if (declar.isClassDeclaration() || declar.isFunctionDeclaration() || declar.isVariableDeclaration()) {
                  this.registerDeclaration(declar);
                }
              } else {
                this.registerBinding("unknown", path);
              }
            };
            Scope.prototype.registerConstantViolation = function registerConstantViolation(path) {
              var ids = path.getBindingIdentifiers();
              for (var _name2 in ids) {
                var binding = this.getBinding(_name2);
                if (binding)
                  binding.reassign(path);
              }
            };
            Scope.prototype.registerBinding = function registerBinding(kind, path) {
              var bindingPath = arguments.length <= 2 || arguments[2] === undefined ? path : arguments[2];
              return (function() {
                if (!kind)
                  throw new ReferenceError("no `kind`");
                if (path.isVariableDeclaration()) {
                  var declarators = path.get("declarations");
                  var _arr8 = declarators;
                  for (var _i8 = 0; _i8 < _arr8.length; _i8++) {
                    var declar = _arr8[_i8];
                    this.registerBinding(kind, declar);
                  }
                  return;
                }
                var parent = this.getProgramParent();
                var ids = path.getBindingIdentifiers(true);
                for (var name in ids) {
                  var _arr9 = ids[name];
                  for (var _i9 = 0; _i9 < _arr9.length; _i9++) {
                    var id = _arr9[_i9];
                    var local = this.getOwnBinding(name);
                    if (local) {
                      if (local.identifier === id)
                        continue;
                      this.checkBlockScopedCollisions(local, kind, name, id);
                    }
                    parent.references[name] = true;
                    this.bindings[name] = new _binding2["default"]({
                      identifier: id,
                      existing: local,
                      scope: this,
                      path: bindingPath,
                      kind: kind
                    });
                  }
                }
              }).apply(this, arguments);
            };
            Scope.prototype.addGlobal = function addGlobal(node) {
              this.globals[node.name] = node;
            };
            Scope.prototype.hasUid = function hasUid(name) {
              var scope = this;
              do {
                if (scope.uids[name])
                  return true;
              } while (scope = scope.parent);
              return false;
            };
            Scope.prototype.hasGlobal = function hasGlobal(name) {
              var scope = this;
              do {
                if (scope.globals[name])
                  return true;
              } while (scope = scope.parent);
              return false;
            };
            Scope.prototype.hasReference = function hasReference(name) {
              var scope = this;
              do {
                if (scope.references[name])
                  return true;
              } while (scope = scope.parent);
              return false;
            };
            Scope.prototype.isPure = function isPure(node, constantsOnly) {
              if (t.isIdentifier(node)) {
                var binding = this.getBinding(node.name);
                if (!binding)
                  return false;
                if (constantsOnly)
                  return binding.constant;
                return true;
              } else if (t.isClass(node)) {
                return !node.superClass || this.isPure(node.superClass, constantsOnly);
              } else if (t.isBinary(node)) {
                return this.isPure(node.left, constantsOnly) && this.isPure(node.right, constantsOnly);
              } else if (t.isArrayExpression(node)) {
                var _arr10 = node.elements;
                for (var _i10 = 0; _i10 < _arr10.length; _i10++) {
                  var elem = _arr10[_i10];
                  if (!this.isPure(elem, constantsOnly))
                    return false;
                }
                return true;
              } else if (t.isObjectExpression(node)) {
                var _arr11 = node.properties;
                for (var _i11 = 0; _i11 < _arr11.length; _i11++) {
                  var prop = _arr11[_i11];
                  if (!this.isPure(prop, constantsOnly))
                    return false;
                }
                return true;
              } else if (t.isProperty(node)) {
                if (node.computed && !this.isPure(node.key, constantsOnly))
                  return false;
                return this.isPure(node.value, constantsOnly);
              } else {
                return t.isPure(node);
              }
            };
            Scope.prototype.setData = function setData(key, val) {
              return this.data[key] = val;
            };
            Scope.prototype.getData = function getData(key) {
              var scope = this;
              do {
                var data = scope.data[key];
                if (data != null)
                  return data;
              } while (scope = scope.parent);
            };
            Scope.prototype.removeData = function removeData(key) {
              var scope = this;
              do {
                var data = scope.data[key];
                if (data != null)
                  scope.data[key] = null;
              } while (scope = scope.parent);
            };
            Scope.prototype.init = function init() {
              if (!this.references)
                this.crawl();
            };
            Scope.prototype.crawl = function crawl() {
              var path = this.path;
              var info = this.block._scopeInfo;
              if (info)
                return _lodashObjectExtend2["default"](this, info);
              info = this.block._scopeInfo = {
                references: _helpersObject2["default"](),
                bindings: _helpersObject2["default"](),
                globals: _helpersObject2["default"](),
                uids: _helpersObject2["default"](),
                data: _helpersObject2["default"]()
              };
              _lodashObjectExtend2["default"](this, info);
              if (path.isLoop()) {
                var _arr12 = t.FOR_INIT_KEYS;
                for (var _i12 = 0; _i12 < _arr12.length; _i12++) {
                  var key = _arr12[_i12];
                  var node = path.get(key);
                  if (node.isBlockScoped())
                    this.registerBinding(node.node.kind, node);
                }
              }
              if (path.isFunctionExpression() && path.has("id")) {
                this.registerBinding("local", path.get("id"), path);
              }
              if (path.isClassExpression() && path.has("id")) {
                this.registerBinding("local", path);
              }
              if (path.isFunction()) {
                var params = path.get("params");
                var _arr13 = params;
                for (var _i13 = 0; _i13 < _arr13.length; _i13++) {
                  var param = _arr13[_i13];
                  this.registerBinding("param", param);
                }
              }
              if (path.isCatchClause()) {
                this.registerBinding("let", path);
              }
              if (path.isComprehensionExpression()) {
                this.registerBinding("let", path);
              }
              var parent = this.getProgramParent();
              if (parent.crawling)
                return;
              var state = {
                references: [],
                constantViolations: [],
                assignments: []
              };
              this.crawling = true;
              path.traverse(collectorVisitor, state);
              this.crawling = false;
              for (var _iterator = state.assignments,
                  _isArray = Array.isArray(_iterator),
                  _i14 = 0,
                  _iterator = _isArray ? _iterator : _iterator[Symbol.iterator](); ; ) {
                var _ref;
                if (_isArray) {
                  if (_i14 >= _iterator.length)
                    break;
                  _ref = _iterator[_i14++];
                } else {
                  _i14 = _iterator.next();
                  if (_i14.done)
                    break;
                  _ref = _i14.value;
                }
                var _path = _ref;
                var ids = _path.getBindingIdentifiers();
                var programParent = undefined;
                for (var _name3 in ids) {
                  if (_path.scope.getBinding(_name3))
                    continue;
                  programParent = programParent || _path.scope.getProgramParent();
                  programParent.addGlobal(ids[_name3]);
                }
                _path.scope.registerConstantViolation(_path);
              }
              for (var _iterator2 = state.references,
                  _isArray2 = Array.isArray(_iterator2),
                  _i15 = 0,
                  _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator](); ; ) {
                var _ref2;
                if (_isArray2) {
                  if (_i15 >= _iterator2.length)
                    break;
                  _ref2 = _iterator2[_i15++];
                } else {
                  _i15 = _iterator2.next();
                  if (_i15.done)
                    break;
                  _ref2 = _i15.value;
                }
                var ref = _ref2;
                var binding = ref.scope.getBinding(ref.node.name);
                if (binding) {
                  binding.reference(ref);
                } else {
                  ref.scope.getProgramParent().addGlobal(ref.node);
                }
              }
              for (var _iterator3 = state.constantViolations,
                  _isArray3 = Array.isArray(_iterator3),
                  _i16 = 0,
                  _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator](); ; ) {
                var _ref3;
                if (_isArray3) {
                  if (_i16 >= _iterator3.length)
                    break;
                  _ref3 = _iterator3[_i16++];
                } else {
                  _i16 = _iterator3.next();
                  if (_i16.done)
                    break;
                  _ref3 = _i16.value;
                }
                var _path2 = _ref3;
                _path2.scope.registerConstantViolation(_path2);
              }
            };
            Scope.prototype.push = function push(opts) {
              var path = this.path;
              if (path.isSwitchStatement()) {
                path = this.getFunctionParent().path;
              }
              if (path.isLoop() || path.isCatchClause() || path.isFunction()) {
                t.ensureBlock(path.node);
                path = path.get("body");
              }
              if (!path.isBlockStatement() && !path.isProgram()) {
                path = this.getBlockParent().path;
              }
              var unique = opts.unique;
              var kind = opts.kind || "var";
              var blockHoist = opts._blockHoist == null ? 2 : opts._blockHoist;
              var dataKey = "declaration:" + kind + ":" + blockHoist;
              var declarPath = !unique && path.getData(dataKey);
              if (!declarPath) {
                var declar = t.variableDeclaration(kind, []);
                declar._generated = true;
                declar._blockHoist = blockHoist;
                this.hub.file.attachAuxiliaryComment(declar);
                var _path$unshiftContainer = path.unshiftContainer("body", [declar]);
                declarPath = _path$unshiftContainer[0];
                if (!unique)
                  path.setData(dataKey, declarPath);
              }
              var declarator = t.variableDeclarator(opts.id, opts.init);
              declarPath.node.declarations.push(declarator);
              this.registerBinding(kind, declarPath.get("declarations").pop());
            };
            Scope.prototype.getProgramParent = function getProgramParent() {
              var scope = this;
              do {
                if (scope.path.isProgram()) {
                  return scope;
                }
              } while (scope = scope.parent);
              throw new Error("We couldn't find a Function or Program...");
            };
            Scope.prototype.getFunctionParent = function getFunctionParent() {
              var scope = this;
              do {
                if (scope.path.isFunctionParent()) {
                  return scope;
                }
              } while (scope = scope.parent);
              throw new Error("We couldn't find a Function or Program...");
            };
            Scope.prototype.getBlockParent = function getBlockParent() {
              var scope = this;
              do {
                if (scope.path.isBlockParent()) {
                  return scope;
                }
              } while (scope = scope.parent);
              throw new Error("We couldn't find a BlockStatement, For, Switch, Function, Loop or Program...");
            };
            Scope.prototype.getAllBindings = function getAllBindings() {
              var ids = _helpersObject2["default"]();
              var scope = this;
              do {
                _lodashObjectDefaults2["default"](ids, scope.bindings);
                scope = scope.parent;
              } while (scope);
              return ids;
            };
            Scope.prototype.getAllBindingsOfKind = function getAllBindingsOfKind() {
              var ids = _helpersObject2["default"]();
              var _arr14 = arguments;
              for (var _i17 = 0; _i17 < _arr14.length; _i17++) {
                var kind = _arr14[_i17];
                var scope = this;
                do {
                  for (var name in scope.bindings) {
                    var binding = scope.bindings[name];
                    if (binding.kind === kind)
                      ids[name] = binding;
                  }
                  scope = scope.parent;
                } while (scope);
              }
              return ids;
            };
            Scope.prototype.bindingIdentifierEquals = function bindingIdentifierEquals(name, node) {
              return this.getBindingIdentifier(name) === node;
            };
            Scope.prototype.getBinding = function getBinding(name) {
              var scope = this;
              do {
                var binding = scope.getOwnBinding(name);
                if (binding)
                  return binding;
              } while (scope = scope.parent);
            };
            Scope.prototype.getOwnBinding = function getOwnBinding(name) {
              return this.bindings[name];
            };
            Scope.prototype.getBindingIdentifier = function getBindingIdentifier(name) {
              var info = this.getBinding(name);
              return info && info.identifier;
            };
            Scope.prototype.getOwnBindingIdentifier = function getOwnBindingIdentifier(name) {
              var binding = this.bindings[name];
              return binding && binding.identifier;
            };
            Scope.prototype.hasOwnBinding = function hasOwnBinding(name) {
              return !!this.getOwnBinding(name);
            };
            Scope.prototype.hasBinding = function hasBinding(name, noGlobals) {
              if (!name)
                return false;
              if (this.hasOwnBinding(name))
                return true;
              if (this.parentHasBinding(name, noGlobals))
                return true;
              if (this.hasUid(name))
                return true;
              if (!noGlobals && _lodashCollectionIncludes2["default"](Scope.globals, name))
                return true;
              if (!noGlobals && _lodashCollectionIncludes2["default"](Scope.contextVariables, name))
                return true;
              return false;
            };
            Scope.prototype.parentHasBinding = function parentHasBinding(name, noGlobals) {
              return this.parent && this.parent.hasBinding(name, noGlobals);
            };
            Scope.prototype.moveBindingTo = function moveBindingTo(name, scope) {
              var info = this.getBinding(name);
              if (info) {
                info.scope.removeOwnBinding(name);
                info.scope = scope;
                scope.bindings[name] = info;
              }
            };
            Scope.prototype.removeOwnBinding = function removeOwnBinding(name) {
              delete this.bindings[name];
            };
            Scope.prototype.removeBinding = function removeBinding(name) {
              var info = this.getBinding(name);
              if (info) {
                info.scope.removeOwnBinding(name);
              }
              var scope = this;
              do {
                if (scope.uids[name]) {
                  scope.uids[name] = false;
                }
              } while (scope = scope.parent);
            };
            _createClass(Scope, null, [{
              key: "globals",
              value: _lodashArrayFlatten2["default"]([_globals2["default"].builtin, _globals2["default"].browser, _globals2["default"].node].map(Object.keys)),
              enumerable: true
            }, {
              key: "contextVariables",
              value: ["arguments", "undefined", "Infinity", "NaN"],
              enumerable: true
            }]);
            return Scope;
          })();
          exports["default"] = Scope;
          module.exports = exports["default"];
        }, {
          "148": 148,
          "166": 166,
          "179": 179,
          "41": 41,
          "43": 43,
          "431": 431,
          "439": 439,
          "446": 446,
          "543": 543,
          "544": 544,
          "586": 586
        }],
        168: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          exports.explode = explode;
          exports.verify = verify;
          exports.merge = merge;
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {"default": obj};
          }
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          var _pathLibVirtualTypes = _dereq_(162);
          var virtualTypes = _interopRequireWildcard(_pathLibVirtualTypes);
          var _messages = _dereq_(43);
          var messages = _interopRequireWildcard(_messages);
          var _types = _dereq_(179);
          var t = _interopRequireWildcard(_types);
          var _lodashLangClone = _dereq_(527);
          var _lodashLangClone2 = _interopRequireDefault(_lodashLangClone);
          function explode(visitor) {
            if (visitor._exploded)
              return visitor;
            visitor._exploded = true;
            for (var nodeType in visitor) {
              if (shouldIgnoreKey(nodeType))
                continue;
              var parts = nodeType.split("|");
              if (parts.length === 1)
                continue;
              var fns = visitor[nodeType];
              delete visitor[nodeType];
              var _arr = parts;
              for (var _i = 0; _i < _arr.length; _i++) {
                var part = _arr[_i];
                visitor[part] = fns;
              }
            }
            verify(visitor);
            delete visitor.__esModule;
            ensureEntranceObjects(visitor);
            ensureCallbackArrays(visitor);
            var _arr2 = Object.keys(visitor);
            for (var _i2 = 0; _i2 < _arr2.length; _i2++) {
              var nodeType = _arr2[_i2];
              if (shouldIgnoreKey(nodeType))
                continue;
              var wrapper = virtualTypes[nodeType];
              if (!wrapper)
                continue;
              var fns = visitor[nodeType];
              for (var type in fns) {
                fns[type] = wrapCheck(wrapper, fns[type]);
              }
              delete visitor[nodeType];
              if (wrapper.types) {
                var _arr4 = wrapper.types;
                for (var _i4 = 0; _i4 < _arr4.length; _i4++) {
                  var type = _arr4[_i4];
                  if (visitor[type]) {
                    mergePair(visitor[type], fns);
                  } else {
                    visitor[type] = fns;
                  }
                }
              } else {
                mergePair(visitor, fns);
              }
            }
            for (var nodeType in visitor) {
              if (shouldIgnoreKey(nodeType))
                continue;
              var fns = visitor[nodeType];
              var aliases = t.FLIPPED_ALIAS_KEYS[nodeType];
              if (!aliases)
                continue;
              delete visitor[nodeType];
              var _arr3 = aliases;
              for (var _i3 = 0; _i3 < _arr3.length; _i3++) {
                var alias = _arr3[_i3];
                var existing = visitor[alias];
                if (existing) {
                  mergePair(existing, fns);
                } else {
                  visitor[alias] = _lodashLangClone2["default"](fns);
                }
              }
            }
            for (var nodeType in visitor) {
              if (shouldIgnoreKey(nodeType))
                continue;
              ensureCallbackArrays(visitor[nodeType]);
            }
            return visitor;
          }
          function verify(visitor) {
            if (visitor._verified)
              return;
            if (typeof visitor === "function") {
              throw new Error(messages.get("traverseVerifyRootFunction"));
            }
            for (var nodeType in visitor) {
              if (shouldIgnoreKey(nodeType))
                continue;
              if (t.TYPES.indexOf(nodeType) < 0) {
                throw new Error(messages.get("traverseVerifyNodeType", nodeType));
              }
              var visitors = visitor[nodeType];
              if (typeof visitors === "object") {
                for (var visitorKey in visitors) {
                  if (visitorKey === "enter" || visitorKey === "exit")
                    continue;
                  throw new Error(messages.get("traverseVerifyVisitorProperty", nodeType, visitorKey));
                }
              }
            }
            visitor._verified = true;
          }
          function merge(visitors) {
            var rootVisitor = {};
            var _arr5 = visitors;
            for (var _i5 = 0; _i5 < _arr5.length; _i5++) {
              var visitor = _arr5[_i5];
              explode(visitor);
              for (var type in visitor) {
                var nodeVisitor = rootVisitor[type] = rootVisitor[type] || {};
                mergePair(nodeVisitor, visitor[type]);
              }
            }
            return rootVisitor;
          }
          function ensureEntranceObjects(obj) {
            for (var key in obj) {
              if (shouldIgnoreKey(key))
                continue;
              var fns = obj[key];
              if (typeof fns === "function") {
                obj[key] = {enter: fns};
              }
            }
          }
          function ensureCallbackArrays(obj) {
            if (obj.enter && !Array.isArray(obj.enter))
              obj.enter = [obj.enter];
            if (obj.exit && !Array.isArray(obj.exit))
              obj.exit = [obj.exit];
          }
          function wrapCheck(wrapper, fn) {
            return function() {
              if (wrapper.checkPath(this)) {
                return fn.apply(this, arguments);
              }
            };
          }
          function shouldIgnoreKey(key) {
            if (key[0] === "_")
              return true;
            if (key === "enter" || key === "exit" || key === "shouldSkip")
              return true;
            if (key === "blacklist" || key === "noScope" || key === "skipKeys")
              return true;
            return false;
          }
          function mergePair(dest, src) {
            for (var key in src) {
              dest[key] = [].concat(dest[key] || [], src[key]);
            }
          }
        }, {
          "162": 162,
          "179": 179,
          "43": 43,
          "527": 527
        }],
        169: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          exports.toComputedKey = toComputedKey;
          exports.toSequenceExpression = toSequenceExpression;
          exports.toKeyAlias = toKeyAlias;
          exports.toIdentifier = toIdentifier;
          exports.toBindingIdentifierName = toBindingIdentifierName;
          exports.toStatement = toStatement;
          exports.toExpression = toExpression;
          exports.toBlock = toBlock;
          exports.valueToNode = valueToNode;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {"default": obj};
          }
          var _lodashLangIsPlainObject = _dereq_(537);
          var _lodashLangIsPlainObject2 = _interopRequireDefault(_lodashLangIsPlainObject);
          var _lodashLangIsNumber = _dereq_(535);
          var _lodashLangIsNumber2 = _interopRequireDefault(_lodashLangIsNumber);
          var _lodashLangIsRegExp = _dereq_(538);
          var _lodashLangIsRegExp2 = _interopRequireDefault(_lodashLangIsRegExp);
          var _lodashLangIsString = _dereq_(539);
          var _lodashLangIsString2 = _interopRequireDefault(_lodashLangIsString);
          var _traversal = _dereq_(148);
          var _traversal2 = _interopRequireDefault(_traversal);
          var _index = _dereq_(179);
          var t = _interopRequireWildcard(_index);
          function toComputedKey(node) {
            var key = arguments.length <= 1 || arguments[1] === undefined ? node.key || node.property : arguments[1];
            return (function() {
              if (!node.computed) {
                if (t.isIdentifier(key))
                  key = t.literal(key.name);
              }
              return key;
            })();
          }
          function toSequenceExpression(nodes, scope) {
            var declars = [];
            var bailed = false;
            var result = convert(nodes);
            if (bailed)
              return;
            for (var i = 0; i < declars.length; i++) {
              scope.push(declars[i]);
            }
            return result;
            function convert(nodes) {
              var ensureLastUndefined = false;
              var exprs = [];
              var _arr = nodes;
              for (var _i = 0; _i < _arr.length; _i++) {
                var node = _arr[_i];
                if (t.isExpression(node)) {
                  exprs.push(node);
                } else if (t.isExpressionStatement(node)) {
                  exprs.push(node.expression);
                } else if (t.isVariableDeclaration(node)) {
                  if (node.kind !== "var")
                    return bailed = true;
                  var _arr2 = node.declarations;
                  for (var _i2 = 0; _i2 < _arr2.length; _i2++) {
                    var declar = _arr2[_i2];
                    var bindings = t.getBindingIdentifiers(declar);
                    for (var key in bindings) {
                      declars.push({
                        kind: node.kind,
                        id: bindings[key]
                      });
                    }
                    if (declar.init) {
                      exprs.push(t.assignmentExpression("=", declar.id, declar.init));
                    }
                  }
                  ensureLastUndefined = true;
                  continue;
                } else if (t.isIfStatement(node)) {
                  var consequent = node.consequent ? convert([node.consequent]) : t.identifier("undefined");
                  var alternate = node.alternate ? convert([node.alternate]) : t.identifier("undefined");
                  if (!consequent || !alternate)
                    return bailed = true;
                  exprs.push(t.conditionalExpression(node.test, consequent, alternate));
                } else if (t.isBlockStatement(node)) {
                  exprs.push(convert(node.body));
                } else if (t.isEmptyStatement(node)) {
                  ensureLastUndefined = true;
                  continue;
                } else {
                  return bailed = true;
                }
                ensureLastUndefined = false;
              }
              if (ensureLastUndefined) {
                exprs.push(t.identifier("undefined"));
              }
              if (exprs.length === 1) {
                return exprs[0];
              } else {
                return t.sequenceExpression(exprs);
              }
            }
          }
          function toKeyAlias(node) {
            var key = arguments.length <= 1 || arguments[1] === undefined ? node.key : arguments[1];
            return (function() {
              var alias;
              if (node.kind === "method") {
                return toKeyAlias.uid++;
              } else if (t.isIdentifier(key)) {
                alias = key.name;
              } else if (t.isLiteral(key)) {
                alias = JSON.stringify(key.value);
              } else {
                alias = JSON.stringify(_traversal2["default"].removeProperties(t.cloneDeep(key)));
              }
              if (node.computed) {
                alias = "[" + alias + "]";
              }
              return alias;
            })();
          }
          toKeyAlias.uid = 0;
          function toIdentifier(name) {
            if (t.isIdentifier(name))
              return name.name;
            name = name + "";
            name = name.replace(/[^a-zA-Z0-9$_]/g, "-");
            name = name.replace(/^[-0-9]+/, "");
            name = name.replace(/[-\s]+(.)?/g, function(match, c) {
              return c ? c.toUpperCase() : "";
            });
            if (!t.isValidIdentifier(name)) {
              name = "_" + name;
            }
            return name || "_";
          }
          function toBindingIdentifierName(name) {
            name = toIdentifier(name);
            if (name === "eval" || name === "arguments")
              name = "_" + name;
            return name;
          }
          function toStatement(node, ignore) {
            if (t.isStatement(node)) {
              return node;
            }
            var mustHaveId = false;
            var newType;
            if (t.isClass(node)) {
              mustHaveId = true;
              newType = "ClassDeclaration";
            } else if (t.isFunction(node)) {
              mustHaveId = true;
              newType = "FunctionDeclaration";
            } else if (t.isAssignmentExpression(node)) {
              return t.expressionStatement(node);
            }
            if (mustHaveId && !node.id) {
              newType = false;
            }
            if (!newType) {
              if (ignore) {
                return false;
              } else {
                throw new Error("cannot turn " + node.type + " to a statement");
              }
            }
            node.type = newType;
            return node;
          }
          function toExpression(node) {
            if (t.isExpressionStatement(node)) {
              node = node.expression;
            }
            if (t.isClass(node)) {
              node.type = "ClassExpression";
            } else if (t.isFunction(node)) {
              node.type = "FunctionExpression";
            }
            if (t.isExpression(node)) {
              return node;
            } else {
              throw new Error("cannot turn " + node.type + " to an expression");
            }
          }
          function toBlock(node, parent) {
            if (t.isBlockStatement(node)) {
              return node;
            }
            if (t.isEmptyStatement(node)) {
              node = [];
            }
            if (!Array.isArray(node)) {
              if (!t.isStatement(node)) {
                if (t.isFunction(parent)) {
                  node = t.returnStatement(node);
                } else {
                  node = t.expressionStatement(node);
                }
              }
              node = [node];
            }
            return t.blockStatement(node);
          }
          function valueToNode(value) {
            if (value === undefined) {
              return t.identifier("undefined");
            }
            if (value === true || value === false || value === null || _lodashLangIsString2["default"](value) || _lodashLangIsNumber2["default"](value) || _lodashLangIsRegExp2["default"](value)) {
              return t.literal(value);
            }
            if (Array.isArray(value)) {
              return t.arrayExpression(value.map(t.valueToNode));
            }
            if (_lodashLangIsPlainObject2["default"](value)) {
              var props = [];
              for (var key in value) {
                var nodeKey;
                if (t.isValidIdentifier(key)) {
                  nodeKey = t.identifier(key);
                } else {
                  nodeKey = t.literal(key);
                }
                props.push(t.property("init", nodeKey, t.valueToNode(value[key])));
              }
              return t.objectExpression(props);
            }
            throw new Error("don't know how to turn this value into a node");
          }
        }, {
          "148": 148,
          "179": 179,
          "535": 535,
          "537": 537,
          "538": 538,
          "539": 539
        }],
        170: [function(_dereq_, module, exports) {
          "use strict";
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {"default": obj};
          }
          var _index = _dereq_(174);
          var _index2 = _interopRequireDefault(_index);
          _index2["default"]("ArrayExpression", {
            visitor: ["elements"],
            aliases: ["Expression"]
          });
          _index2["default"]("AssignmentExpression", {
            builder: ["operator", "left", "right"],
            visitor: ["left", "right"],
            aliases: ["Expression"]
          });
          _index2["default"]("BinaryExpression", {
            builder: ["operator", "left", "right"],
            visitor: ["left", "right"],
            aliases: ["Binary", "Expression"]
          });
          _index2["default"]("BlockStatement", {
            visitor: ["body"],
            aliases: ["Scopable", "BlockParent", "Block", "Statement"]
          });
          _index2["default"]("BreakStatement", {
            visitor: ["label"],
            aliases: ["Statement", "Terminatorless", "CompletionStatement"]
          });
          _index2["default"]("CallExpression", {
            visitor: ["callee", "arguments"],
            aliases: ["Expression"]
          });
          _index2["default"]("CatchClause", {
            visitor: ["param", "body"],
            aliases: ["Scopable"]
          });
          _index2["default"]("ConditionalExpression", {
            visitor: ["test", "consequent", "alternate"],
            aliases: ["Expression"]
          });
          _index2["default"]("ContinueStatement", {
            visitor: ["label"],
            aliases: ["Statement", "Terminatorless", "CompletionStatement"]
          });
          _index2["default"]("DebuggerStatement", {aliases: ["Statement"]});
          _index2["default"]("DoWhileStatement", {
            visitor: ["body", "test"],
            aliases: ["Statement", "BlockParent", "Loop", "While", "Scopable"]
          });
          _index2["default"]("EmptyStatement", {aliases: ["Statement"]});
          _index2["default"]("ExpressionStatement", {
            visitor: ["expression"],
            aliases: ["Statement"]
          });
          _index2["default"]("File", {
            builder: ["program", "comments", "tokens"],
            visitor: ["program"]
          });
          _index2["default"]("ForInStatement", {
            visitor: ["left", "right", "body"],
            aliases: ["Scopable", "Statement", "For", "BlockParent", "Loop", "ForXStatement"]
          });
          _index2["default"]("ForStatement", {
            visitor: ["init", "test", "update", "body"],
            aliases: ["Scopable", "Statement", "For", "BlockParent", "Loop"]
          });
          _index2["default"]("FunctionDeclaration", {
            builder: {
              id: null,
              params: null,
              body: null,
              generator: false,
              async: false
            },
            visitor: ["id", "params", "body", "returnType", "typeParameters"],
            aliases: ["Scopable", "Function", "Func", "BlockParent", "FunctionParent", "Statement", "Pure", "Declaration"]
          });
          _index2["default"]("FunctionExpression", {
            builder: {
              id: null,
              params: null,
              body: null,
              generator: false,
              async: false
            },
            visitor: ["id", "params", "body", "returnType", "typeParameters"],
            aliases: ["Scopable", "Function", "Func", "BlockParent", "FunctionParent", "Expression", "Pure"]
          });
          _index2["default"]("Identifier", {
            builder: ["name"],
            visitor: ["typeAnnotation"],
            aliases: ["Expression"]
          });
          _index2["default"]("IfStatement", {
            visitor: ["test", "consequent", "alternate"],
            aliases: ["Statement"]
          });
          _index2["default"]("LabeledStatement", {
            visitor: ["label", "body"],
            aliases: ["Statement"]
          });
          _index2["default"]("Literal", {
            builder: ["value"],
            aliases: ["Expression", "Pure"]
          });
          _index2["default"]("LogicalExpression", {
            builder: ["operator", "left", "right"],
            visitor: ["left", "right"],
            aliases: ["Binary", "Expression"]
          });
          _index2["default"]("MemberExpression", {
            builder: {
              object: null,
              property: null,
              computed: false
            },
            visitor: ["object", "property"],
            aliases: ["Expression"]
          });
          _index2["default"]("NewExpression", {
            visitor: ["callee", "arguments"],
            aliases: ["Expression"]
          });
          _index2["default"]("ObjectExpression", {
            visitor: ["properties"],
            aliases: ["Expression"]
          });
          _index2["default"]("Program", {
            visitor: ["body"],
            aliases: ["Scopable", "BlockParent", "Block", "FunctionParent"]
          });
          _index2["default"]("Property", {
            builder: {
              kind: "init",
              key: null,
              value: null,
              computed: false
            },
            visitor: ["key", "value", "decorators"],
            aliases: ["UserWhitespacable"]
          });
          _index2["default"]("RestElement", {visitor: ["argument", "typeAnnotation"]});
          _index2["default"]("ReturnStatement", {
            visitor: ["argument"],
            aliases: ["Statement", "Terminatorless", "CompletionStatement"]
          });
          _index2["default"]("SequenceExpression", {
            visitor: ["expressions"],
            aliases: ["Expression"]
          });
          _index2["default"]("SwitchCase", {visitor: ["test", "consequent"]});
          _index2["default"]("SwitchStatement", {
            visitor: ["discriminant", "cases"],
            aliases: ["Statement", "BlockParent", "Scopable"]
          });
          _index2["default"]("ThisExpression", {aliases: ["Expression"]});
          _index2["default"]("ThrowStatement", {
            visitor: ["argument"],
            aliases: ["Statement", "Terminatorless", "CompletionStatement"]
          });
          _index2["default"]("TryStatement", {
            builder: ["block", "handler", "finalizer"],
            visitor: ["block", "handlers", "handler", "guardedHandlers", "finalizer"],
            aliases: ["Statement"]
          });
          _index2["default"]("UnaryExpression", {
            builder: {
              operator: null,
              argument: null,
              prefix: false
            },
            visitor: ["argument"],
            aliases: ["UnaryLike", "Expression"]
          });
          _index2["default"]("UpdateExpression", {
            builder: {
              operator: null,
              argument: null,
              prefix: false
            },
            visitor: ["argument"],
            aliases: ["Expression"]
          });
          _index2["default"]("VariableDeclaration", {
            builder: ["kind", "declarations"],
            visitor: ["declarations"],
            aliases: ["Statement", "Declaration"]
          });
          _index2["default"]("VariableDeclarator", {visitor: ["id", "init"]});
          _index2["default"]("WhileStatement", {
            visitor: ["test", "body"],
            aliases: ["Statement", "BlockParent", "Loop", "While", "Scopable"]
          });
          _index2["default"]("WithStatement", {
            visitor: ["object", "body"],
            aliases: ["Statement"]
          });
        }, {"174": 174}],
        171: [function(_dereq_, module, exports) {
          "use strict";
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {"default": obj};
          }
          var _index = _dereq_(174);
          var _index2 = _interopRequireDefault(_index);
          _index2["default"]("AssignmentPattern", {
            visitor: ["left", "right"],
            aliases: ["Pattern"]
          });
          _index2["default"]("ArrayPattern", {
            visitor: ["elements", "typeAnnotation"],
            aliases: ["Pattern"]
          });
          _index2["default"]("ArrowFunctionExpression", {
            builder: ["params", "body", "async"],
            visitor: ["params", "body", "returnType"],
            aliases: ["Scopable", "Function", "Func", "BlockParent", "FunctionParent", "Expression", "Pure"]
          });
          _index2["default"]("ClassBody", {visitor: ["body"]});
          _index2["default"]("ClassDeclaration", {
            visitor: ["id", "body", "superClass", "mixins", "typeParameters", "superTypeParameters", "implements", "decorators"],
            aliases: ["Scopable", "Class", "Statement", "Declaration"]
          });
          _index2["default"]("ClassExpression", {
            visitor: ["id", "body", "superClass", "typeParameters", "superTypeParameters", "implements", "decorators"],
            aliases: ["Scopable", "Class", "Expression"]
          });
          _index2["default"]("ExportAllDeclaration", {
            visitor: ["source", "exported"],
            aliases: ["Statement", "Declaration", "ModuleDeclaration", "ExportDeclaration"]
          });
          _index2["default"]("ExportDefaultDeclaration", {
            visitor: ["declaration"],
            aliases: ["Statement", "Declaration", "ModuleDeclaration", "ExportDeclaration"]
          });
          _index2["default"]("ExportNamedDeclaration", {
            visitor: ["declaration", "specifiers", "source"],
            aliases: ["Statement", "Declaration", "ModuleDeclaration", "ExportDeclaration"]
          });
          _index2["default"]("ExportDefaultSpecifier", {
            visitor: ["exported"],
            aliases: ["ModuleSpecifier"]
          });
          _index2["default"]("ExportNamespaceSpecifier", {
            visitor: ["exported"],
            aliases: ["ModuleSpecifier"]
          });
          _index2["default"]("ExportSpecifier", {
            visitor: ["local", "exported"],
            aliases: ["ModuleSpecifier"]
          });
          _index2["default"]("ForOfStatement", {
            visitor: ["left", "right", "body"],
            aliases: ["Scopable", "Statement", "For", "BlockParent", "Loop", "ForXStatement"]
          });
          _index2["default"]("ImportDeclaration", {
            visitor: ["specifiers", "source"],
            aliases: ["Statement", "Declaration", "ModuleDeclaration"]
          });
          _index2["default"]("ImportDefaultSpecifier", {
            visitor: ["local"],
            aliases: ["ModuleSpecifier"]
          });
          _index2["default"]("ImportNamespaceSpecifier", {
            visitor: ["local"],
            aliases: ["ModuleSpecifier"]
          });
          _index2["default"]("ImportSpecifier", {
            visitor: ["local", "imported"],
            aliases: ["ModuleSpecifier"]
          });
          _index2["default"]("MetaProperty", {
            visitor: ["meta", "property"],
            aliases: ["Expression"]
          });
          _index2["default"]("MethodDefinition", {
            builder: {
              key: null,
              value: null,
              kind: "method",
              computed: false,
              "static": false
            },
            visitor: ["key", "value", "decorators"]
          });
          _index2["default"]("ObjectPattern", {
            visitor: ["properties", "typeAnnotation"],
            aliases: ["Pattern"]
          });
          _index2["default"]("SpreadElement", {
            visitor: ["argument"],
            aliases: ["UnaryLike"]
          });
          _index2["default"]("Super", {aliases: ["Expression"]});
          _index2["default"]("TaggedTemplateExpression", {
            visitor: ["tag", "quasi"],
            aliases: ["Expression"]
          });
          _index2["default"]("TemplateElement");
          _index2["default"]("TemplateLiteral", {
            visitor: ["quasis", "expressions"],
            aliases: ["Expression"]
          });
          _index2["default"]("YieldExpression", {
            builder: ["argument", "delegate"],
            visitor: ["argument"],
            aliases: ["Expression", "Terminatorless"]
          });
        }, {"174": 174}],
        172: [function(_dereq_, module, exports) {
          "use strict";
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {"default": obj};
          }
          var _index = _dereq_(174);
          var _index2 = _interopRequireDefault(_index);
          _index2["default"]("AwaitExpression", {
            builder: ["argument", "all"],
            visitor: ["argument"],
            aliases: ["Expression", "Terminatorless"]
          });
          _index2["default"]("BindExpression", {visitor: ["object", "callee"]});
          _index2["default"]("ComprehensionBlock", {visitor: ["left", "right"]});
          _index2["default"]("ComprehensionExpression", {
            visitor: ["filter", "blocks", "body"],
            aliases: ["Expression", "Scopable"]
          });
          _index2["default"]("Decorator", {visitor: ["expression"]});
          _index2["default"]("DoExpression", {
            visitor: ["body"],
            aliases: ["Expression"]
          });
          _index2["default"]("SpreadProperty", {
            visitor: ["argument"],
            aliases: ["UnaryLike"]
          });
        }, {"174": 174}],
        173: [function(_dereq_, module, exports) {
          "use strict";
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {"default": obj};
          }
          var _index = _dereq_(174);
          var _index2 = _interopRequireDefault(_index);
          _index2["default"]("AnyTypeAnnotation", {aliases: ["Flow", "FlowBaseAnnotation"]});
          _index2["default"]("ArrayTypeAnnotation", {
            visitor: ["elementType"],
            aliases: ["Flow"]
          });
          _index2["default"]("BooleanTypeAnnotation", {aliases: ["Flow", "FlowBaseAnnotation"]});
          _index2["default"]("BooleanLiteralTypeAnnotation", {aliases: ["Flow"]});
          _index2["default"]("ClassImplements", {
            visitor: ["id", "typeParameters"],
            aliases: ["Flow"]
          });
          _index2["default"]("ClassProperty", {
            visitor: ["key", "value", "typeAnnotation", "decorators"],
            aliases: ["Flow"]
          });
          _index2["default"]("DeclareClass", {
            visitor: ["id", "typeParameters", "extends", "body"],
            aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"]
          });
          _index2["default"]("DeclareFunction", {
            visitor: ["id"],
            aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"]
          });
          _index2["default"]("DeclareInterface", {
            visitor: ["id", "typeParameters", "extends", "body"],
            aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"]
          });
          _index2["default"]("DeclareModule", {
            visitor: ["id", "body"],
            aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"]
          });
          _index2["default"]("DeclareTypeAlias", {
            visitor: ["id", "typeParameters", "right"],
            aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"]
          });
          _index2["default"]("DeclareVariable", {
            visitor: ["id"],
            aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"]
          });
          _index2["default"]("FunctionTypeAnnotation", {
            visitor: ["typeParameters", "params", "rest", "returnType"],
            aliases: ["Flow"]
          });
          _index2["default"]("FunctionTypeParam", {
            visitor: ["name", "typeAnnotation"],
            aliases: ["Flow"]
          });
          _index2["default"]("GenericTypeAnnotation", {
            visitor: ["id", "typeParameters"],
            aliases: ["Flow"]
          });
          _index2["default"]("InterfaceExtends", {
            visitor: ["id", "typeParameters"],
            aliases: ["Flow"]
          });
          _index2["default"]("InterfaceDeclaration", {
            visitor: ["id", "typeParameters", "extends", "body"],
            aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"]
          });
          _index2["default"]("IntersectionTypeAnnotation", {
            visitor: ["types"],
            aliases: ["Flow"]
          });
          _index2["default"]("MixedTypeAnnotation", {aliases: ["Flow", "FlowBaseAnnotation"]});
          _index2["default"]("NullableTypeAnnotation", {
            visitor: ["typeAnnotation"],
            aliases: ["Flow"]
          });
          _index2["default"]("NullLiteralTypeAnnotation", {aliases: ["Flow"]});
          _index2["default"]("NumberLiteralTypeAnnotation", {aliases: ["Flow"]});
          _index2["default"]("NumberTypeAnnotation", {aliases: ["Flow", "FlowBaseAnnotation"]});
          _index2["default"]("StringLiteralTypeAnnotation", {aliases: ["Flow"]});
          _index2["default"]("StringTypeAnnotation", {aliases: ["Flow", "FlowBaseAnnotation"]});
          _index2["default"]("ThisTypeAnnotation", {aliases: ["Flow", "FlowBaseAnnotation"]});
          _index2["default"]("TupleTypeAnnotation", {
            visitor: ["types"],
            aliases: ["Flow"]
          });
          _index2["default"]("TypeofTypeAnnotation", {
            visitor: ["argument"],
            aliases: ["Flow"]
          });
          _index2["default"]("TypeAlias", {
            visitor: ["id", "typeParameters", "right"],
            aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"]
          });
          _index2["default"]("TypeAnnotation", {
            visitor: ["typeAnnotation"],
            aliases: ["Flow"]
          });
          _index2["default"]("TypeCastExpression", {
            visitor: ["expression", "typeAnnotation"],
            aliases: ["Flow"]
          });
          _index2["default"]("TypeParameterDeclaration", {
            visitor: ["params"],
            aliases: ["Flow"]
          });
          _index2["default"]("TypeParameterInstantiation", {
            visitor: ["params"],
            aliases: ["Flow"]
          });
          _index2["default"]("ObjectTypeAnnotation", {
            visitor: ["properties", "indexers", "callProperties"],
            aliases: ["Flow"]
          });
          _index2["default"]("ObjectTypeCallProperty", {
            visitor: ["value"],
            aliases: ["Flow", "UserWhitespacable"]
          });
          _index2["default"]("ObjectTypeIndexer", {
            visitor: ["id", "key", "value"],
            aliases: ["Flow", "UserWhitespacable"]
          });
          _index2["default"]("ObjectTypeProperty", {
            visitor: ["key", "value"],
            aliases: ["Flow", "UserWhitespacable"]
          });
          _index2["default"]("QualifiedTypeIdentifier", {
            visitor: ["id", "qualification"],
            aliases: ["Flow"]
          });
          _index2["default"]("UnionTypeAnnotation", {
            visitor: ["types"],
            aliases: ["Flow"]
          });
          _index2["default"]("VoidTypeAnnotation", {aliases: ["Flow", "FlowBaseAnnotation"]});
        }, {"174": 174}],
        174: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          exports["default"] = defineType;
          var VISITOR_KEYS = {};
          exports.VISITOR_KEYS = VISITOR_KEYS;
          var ALIAS_KEYS = {};
          exports.ALIAS_KEYS = ALIAS_KEYS;
          var BUILDER_KEYS = {};
          exports.BUILDER_KEYS = BUILDER_KEYS;
          function builderFromArray(arr) {
            var builder = {};
            var _arr = arr;
            for (var _i = 0; _i < _arr.length; _i++) {
              var key = _arr[_i];
              builder[key] = null;
            }
            return builder;
          }
          function defineType(type) {
            var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
            opts.visitor = opts.visitor || [];
            opts.aliases = opts.aliases || [];
            if (!opts.builder)
              opts.builder = builderFromArray(opts.visitor);
            if (Array.isArray(opts.builder))
              opts.builder = builderFromArray(opts.builder);
            VISITOR_KEYS[type] = opts.visitor;
            ALIAS_KEYS[type] = opts.aliases;
            BUILDER_KEYS[type] = opts.builder;
          }
        }, {}],
        175: [function(_dereq_, module, exports) {
          "use strict";
          _dereq_(174);
          _dereq_(170);
          _dereq_(171);
          _dereq_(173);
          _dereq_(176);
          _dereq_(177);
          _dereq_(172);
        }, {
          "170": 170,
          "171": 171,
          "172": 172,
          "173": 173,
          "174": 174,
          "176": 176,
          "177": 177
        }],
        176: [function(_dereq_, module, exports) {
          "use strict";
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {"default": obj};
          }
          var _index = _dereq_(174);
          var _index2 = _interopRequireDefault(_index);
          _index2["default"]("JSXAttribute", {
            visitor: ["name", "value"],
            aliases: ["JSX", "Immutable"]
          });
          _index2["default"]("JSXClosingElement", {
            visitor: ["name"],
            aliases: ["JSX", "Immutable"]
          });
          _index2["default"]("JSXElement", {
            visitor: ["openingElement", "closingElement", "children"],
            aliases: ["JSX", "Immutable", "Expression"]
          });
          _index2["default"]("JSXEmptyExpression", {aliases: ["JSX", "Expression"]});
          _index2["default"]("JSXExpressionContainer", {
            visitor: ["expression"],
            aliases: ["JSX", "Immutable"]
          });
          _index2["default"]("JSXIdentifier", {aliases: ["JSX", "Expression"]});
          _index2["default"]("JSXMemberExpression", {
            visitor: ["object", "property"],
            aliases: ["JSX", "Expression"]
          });
          _index2["default"]("JSXNamespacedName", {
            visitor: ["namespace", "name"],
            aliases: ["JSX"]
          });
          _index2["default"]("JSXOpeningElement", {
            visitor: ["name", "attributes"],
            aliases: ["JSX", "Immutable"]
          });
          _index2["default"]("JSXSpreadAttribute", {
            visitor: ["argument"],
            aliases: ["JSX"]
          });
        }, {"174": 174}],
        177: [function(_dereq_, module, exports) {
          "use strict";
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {"default": obj};
          }
          var _index = _dereq_(174);
          var _index2 = _interopRequireDefault(_index);
          _index2["default"]("Noop", {visitor: []});
          _index2["default"]("ParenthesizedExpression", {
            visitor: ["expression"],
            aliases: ["Expression"]
          });
        }, {"174": 174}],
        178: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          exports.createUnionTypeAnnotation = createUnionTypeAnnotation;
          exports.removeTypeDuplicates = removeTypeDuplicates;
          exports.createTypeAnnotationBasedOnTypeof = createTypeAnnotationBasedOnTypeof;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          var _index = _dereq_(179);
          var t = _interopRequireWildcard(_index);
          function createUnionTypeAnnotation(types) {
            var flattened = removeTypeDuplicates(types);
            if (flattened.length === 1) {
              return flattened[0];
            } else {
              return t.unionTypeAnnotation(flattened);
            }
          }
          function removeTypeDuplicates(nodes) {
            var generics = {};
            var bases = {};
            var typeGroups = [];
            var types = [];
            for (var i = 0; i < nodes.length; i++) {
              var node = nodes[i];
              if (!node)
                continue;
              if (types.indexOf(node) >= 0) {
                continue;
              }
              if (t.isAnyTypeAnnotation(node)) {
                return [node];
              }
              if (t.isFlowBaseAnnotation(node)) {
                bases[node.type] = node;
                continue;
              }
              if (t.isUnionTypeAnnotation(node)) {
                if (typeGroups.indexOf(node.types) < 0) {
                  nodes = nodes.concat(node.types);
                  typeGroups.push(node.types);
                }
                continue;
              }
              if (t.isGenericTypeAnnotation(node)) {
                var _name = node.id.name;
                if (generics[_name]) {
                  var existing = generics[_name];
                  if (existing.typeParameters) {
                    if (node.typeParameters) {
                      existing.typeParameters.params = removeTypeDuplicates(existing.typeParameters.params.concat(node.typeParameters.params));
                    }
                  } else {
                    existing = node.typeParameters;
                  }
                } else {
                  generics[_name] = node;
                }
                continue;
              }
              types.push(node);
            }
            for (var type in bases) {
              types.push(bases[type]);
            }
            for (var _name2 in generics) {
              types.push(generics[_name2]);
            }
            return types;
          }
          function createTypeAnnotationBasedOnTypeof(type) {
            if (type === "string") {
              return t.stringTypeAnnotation();
            } else if (type === "number") {
              return t.numberTypeAnnotation();
            } else if (type === "undefined") {
              return t.voidTypeAnnotation();
            } else if (type === "boolean") {
              return t.booleanTypeAnnotation();
            } else if (type === "function") {
              return t.genericTypeAnnotation(t.identifier("Function"));
            } else if (type === "object") {
              return t.genericTypeAnnotation(t.identifier("Object"));
            } else if (type === "symbol") {
              return t.genericTypeAnnotation(t.identifier("Symbol"));
            } else {
              throw new Error("Invalid typeof value");
            }
          }
        }, {"179": 179}],
        179: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          exports.is = is;
          exports.isType = isType;
          exports.shallowEqual = shallowEqual;
          exports.appendToMemberExpression = appendToMemberExpression;
          exports.prependToMemberExpression = prependToMemberExpression;
          exports.ensureBlock = ensureBlock;
          exports.clone = clone;
          exports.cloneDeep = cloneDeep;
          exports.buildMatchMemberExpression = buildMatchMemberExpression;
          exports.removeComments = removeComments;
          exports.inheritsComments = inheritsComments;
          exports.inheritTrailingComments = inheritTrailingComments;
          exports.inheritLeadingComments = inheritLeadingComments;
          exports.inheritInnerComments = inheritInnerComments;
          exports.inherits = inherits;
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {"default": obj};
          }
          var _toFastProperties = _dereq_(607);
          var _toFastProperties2 = _interopRequireDefault(_toFastProperties);
          var _lodashArrayCompact = _dereq_(438);
          var _lodashArrayCompact2 = _interopRequireDefault(_lodashArrayCompact);
          var _lodashObjectAssign = _dereq_(542);
          var _lodashObjectAssign2 = _interopRequireDefault(_lodashObjectAssign);
          var _lodashCollectionEach = _dereq_(444);
          var _lodashCollectionEach2 = _interopRequireDefault(_lodashCollectionEach);
          var _lodashArrayUniq = _dereq_(442);
          var _lodashArrayUniq2 = _interopRequireDefault(_lodashArrayUniq);
          _dereq_(175);
          var _definitions = _dereq_(174);
          var t = exports;
          function registerType(type, skipAliasCheck) {
            var is = t["is" + type] = function(node, opts) {
              return t.is(type, node, opts, skipAliasCheck);
            };
            t["assert" + type] = function(node, opts) {
              opts = opts || {};
              if (!is(node, opts)) {
                throw new Error("Expected type " + JSON.stringify(type) + " with option " + JSON.stringify(opts));
              }
            };
          }
          var STATEMENT_OR_BLOCK_KEYS = ["consequent", "body", "alternate"];
          exports.STATEMENT_OR_BLOCK_KEYS = STATEMENT_OR_BLOCK_KEYS;
          var FLATTENABLE_KEYS = ["body", "expressions"];
          exports.FLATTENABLE_KEYS = FLATTENABLE_KEYS;
          var FOR_INIT_KEYS = ["left", "init"];
          exports.FOR_INIT_KEYS = FOR_INIT_KEYS;
          var COMMENT_KEYS = ["leadingComments", "trailingComments", "innerComments"];
          exports.COMMENT_KEYS = COMMENT_KEYS;
          var INHERIT_KEYS = {
            optional: ["typeAnnotation", "typeParameters", "returnType"],
            force: ["_scopeInfo", "_paths", "start", "loc", "end"]
          };
          exports.INHERIT_KEYS = INHERIT_KEYS;
          var BOOLEAN_NUMBER_BINARY_OPERATORS = [">", "<", ">=", "<="];
          exports.BOOLEAN_NUMBER_BINARY_OPERATORS = BOOLEAN_NUMBER_BINARY_OPERATORS;
          var EQUALITY_BINARY_OPERATORS = ["==", "===", "!=", "!=="];
          exports.EQUALITY_BINARY_OPERATORS = EQUALITY_BINARY_OPERATORS;
          var COMPARISON_BINARY_OPERATORS = EQUALITY_BINARY_OPERATORS.concat(["in", "instanceof"]);
          exports.COMPARISON_BINARY_OPERATORS = COMPARISON_BINARY_OPERATORS;
          var BOOLEAN_BINARY_OPERATORS = [].concat(COMPARISON_BINARY_OPERATORS, BOOLEAN_NUMBER_BINARY_OPERATORS);
          exports.BOOLEAN_BINARY_OPERATORS = BOOLEAN_BINARY_OPERATORS;
          var NUMBER_BINARY_OPERATORS = ["-", "/", "*", "**", "&", "|", ">>", ">>>", "<<", "^"];
          exports.NUMBER_BINARY_OPERATORS = NUMBER_BINARY_OPERATORS;
          var BOOLEAN_UNARY_OPERATORS = ["delete", "!"];
          exports.BOOLEAN_UNARY_OPERATORS = BOOLEAN_UNARY_OPERATORS;
          var NUMBER_UNARY_OPERATORS = ["+", "-", "++", "--", "~"];
          exports.NUMBER_UNARY_OPERATORS = NUMBER_UNARY_OPERATORS;
          var STRING_UNARY_OPERATORS = ["typeof"];
          exports.STRING_UNARY_OPERATORS = STRING_UNARY_OPERATORS;
          exports.VISITOR_KEYS = _definitions.VISITOR_KEYS;
          exports.BUILDER_KEYS = _definitions.BUILDER_KEYS;
          exports.ALIAS_KEYS = _definitions.ALIAS_KEYS;
          _lodashCollectionEach2["default"](t.VISITOR_KEYS, function(keys, type) {
            registerType(type, true);
          });
          t.FLIPPED_ALIAS_KEYS = {};
          _lodashCollectionEach2["default"](t.ALIAS_KEYS, function(aliases, type) {
            _lodashCollectionEach2["default"](aliases, function(alias) {
              var types = t.FLIPPED_ALIAS_KEYS[alias] = t.FLIPPED_ALIAS_KEYS[alias] || [];
              types.push(type);
            });
          });
          _lodashCollectionEach2["default"](t.FLIPPED_ALIAS_KEYS, function(types, type) {
            t[type.toUpperCase() + "_TYPES"] = types;
            registerType(type, false);
          });
          var TYPES = Object.keys(t.VISITOR_KEYS).concat(Object.keys(t.FLIPPED_ALIAS_KEYS));
          exports.TYPES = TYPES;
          function is(type, node, opts, skipAliasCheck) {
            if (!node)
              return false;
            var matches = isType(node.type, type);
            if (!matches)
              return false;
            if (typeof opts === "undefined") {
              return true;
            } else {
              return t.shallowEqual(node, opts);
            }
          }
          function isType(nodeType, targetType) {
            if (nodeType === targetType)
              return true;
            var aliases = t.FLIPPED_ALIAS_KEYS[targetType];
            if (aliases) {
              if (aliases[0] === nodeType)
                return true;
              var _arr = aliases;
              for (var _i = 0; _i < _arr.length; _i++) {
                var alias = _arr[_i];
                if (nodeType === alias)
                  return true;
              }
            }
            return false;
          }
          _lodashCollectionEach2["default"](t.VISITOR_KEYS, function(keys, type) {
            if (t.BUILDER_KEYS[type])
              return;
            var defs = {};
            _lodashCollectionEach2["default"](keys, function(key) {
              defs[key] = null;
            });
            t.BUILDER_KEYS[type] = defs;
          });
          _lodashCollectionEach2["default"](t.BUILDER_KEYS, function(keys, type) {
            var builder = function builder() {
              var node = {};
              node.type = type;
              var i = 0;
              for (var key in keys) {
                var arg = arguments[i++];
                if (arg === undefined)
                  arg = keys[key];
                node[key] = arg;
              }
              return node;
            };
            t[type] = builder;
            t[type[0].toLowerCase() + type.slice(1)] = builder;
          });
          function shallowEqual(actual, expected) {
            var keys = Object.keys(expected);
            var _arr2 = keys;
            for (var _i2 = 0; _i2 < _arr2.length; _i2++) {
              var key = _arr2[_i2];
              if (actual[key] !== expected[key]) {
                return false;
              }
            }
            return true;
          }
          function appendToMemberExpression(member, append, computed) {
            member.object = t.memberExpression(member.object, member.property, member.computed);
            member.property = append;
            member.computed = !!computed;
            return member;
          }
          function prependToMemberExpression(member, prepend) {
            member.object = t.memberExpression(prepend, member.object);
            return member;
          }
          function ensureBlock(node) {
            var key = arguments.length <= 1 || arguments[1] === undefined ? "body" : arguments[1];
            return node[key] = t.toBlock(node[key], node);
          }
          function clone(node) {
            var newNode = {};
            for (var key in node) {
              if (key[0] === "_")
                continue;
              newNode[key] = node[key];
            }
            return newNode;
          }
          function cloneDeep(node) {
            var newNode = {};
            for (var key in node) {
              if (key[0] === "_")
                continue;
              var val = node[key];
              if (val) {
                if (val.type) {
                  val = t.cloneDeep(val);
                } else if (Array.isArray(val)) {
                  val = val.map(t.cloneDeep);
                }
              }
              newNode[key] = val;
            }
            return newNode;
          }
          function buildMatchMemberExpression(match, allowPartial) {
            var parts = match.split(".");
            return function(member) {
              if (!t.isMemberExpression(member))
                return false;
              var search = [member];
              var i = 0;
              while (search.length) {
                var node = search.shift();
                if (allowPartial && i === parts.length) {
                  return true;
                }
                if (t.isIdentifier(node)) {
                  if (parts[i] !== node.name)
                    return false;
                } else if (t.isLiteral(node)) {
                  if (parts[i] !== node.value)
                    return false;
                } else if (t.isMemberExpression(node)) {
                  if (node.computed && !t.isLiteral(node.property)) {
                    return false;
                  } else {
                    search.push(node.object);
                    search.push(node.property);
                    continue;
                  }
                } else {
                  return false;
                }
                if (++i > parts.length) {
                  return false;
                }
              }
              return true;
            };
          }
          function removeComments(node) {
            var _arr3 = COMMENT_KEYS;
            for (var _i3 = 0; _i3 < _arr3.length; _i3++) {
              var key = _arr3[_i3];
              delete node[key];
            }
            return node;
          }
          function inheritsComments(child, parent) {
            inheritTrailingComments(child, parent);
            inheritLeadingComments(child, parent);
            inheritInnerComments(child, parent);
            return child;
          }
          function inheritTrailingComments(child, parent) {
            _inheritComments("trailingComments", child, parent);
          }
          function inheritLeadingComments(child, parent) {
            _inheritComments("leadingComments", child, parent);
          }
          function inheritInnerComments(child, parent) {
            _inheritComments("innerComments", child, parent);
          }
          function _inheritComments(key, child, parent) {
            if (child && parent) {
              child[key] = _lodashArrayUniq2["default"](_lodashArrayCompact2["default"]([].concat(child[key], parent[key])));
            }
          }
          function inherits(child, parent) {
            if (!child || !parent)
              return child;
            var _arr4 = t.INHERIT_KEYS.optional;
            for (var _i4 = 0; _i4 < _arr4.length; _i4++) {
              var key = _arr4[_i4];
              if (child[key] == null) {
                child[key] = parent[key];
              }
            }
            var _arr5 = t.INHERIT_KEYS.force;
            for (var _i5 = 0; _i5 < _arr5.length; _i5++) {
              var key = _arr5[_i5];
              child[key] = parent[key];
            }
            t.inheritsComments(child, parent);
            return child;
          }
          _toFastProperties2["default"](t);
          _toFastProperties2["default"](t.VISITOR_KEYS);
          _lodashObjectAssign2["default"](t, _dereq_(180));
          _lodashObjectAssign2["default"](t, _dereq_(181));
          _lodashObjectAssign2["default"](t, _dereq_(169));
          _lodashObjectAssign2["default"](t, _dereq_(178));
        }, {
          "169": 169,
          "174": 174,
          "175": 175,
          "178": 178,
          "180": 180,
          "181": 181,
          "438": 438,
          "442": 442,
          "444": 444,
          "542": 542,
          "607": 607
        }],
        180: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          exports.getBindingIdentifiers = getBindingIdentifiers;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          var _index = _dereq_(179);
          var t = _interopRequireWildcard(_index);
          function getBindingIdentifiers(node, duplicates) {
            var search = [].concat(node);
            var ids = Object.create(null);
            while (search.length) {
              var id = search.shift();
              if (!id)
                continue;
              var keys = t.getBindingIdentifiers.keys[id.type];
              if (t.isIdentifier(id)) {
                if (duplicates) {
                  var _ids = ids[id.name] = ids[id.name] || [];
                  _ids.push(id);
                } else {
                  ids[id.name] = id;
                }
              } else if (t.isExportDeclaration(id)) {
                if (t.isDeclaration(node.declaration)) {
                  search.push(node.declaration);
                }
              } else if (keys) {
                for (var i = 0; i < keys.length; i++) {
                  var key = keys[i];
                  if (id[key]) {
                    search = search.concat(id[key]);
                  }
                }
              }
            }
            return ids;
          }
          getBindingIdentifiers.keys = {
            DeclareClass: ["id"],
            DeclareFunction: ["id"],
            DeclareModule: ["id"],
            DeclareVariable: ["id"],
            InterfaceDeclaration: ["id"],
            TypeAlias: ["id"],
            ComprehensionExpression: ["blocks"],
            ComprehensionBlock: ["left"],
            CatchClause: ["param"],
            LabeledStatement: ["label"],
            UnaryExpression: ["argument"],
            AssignmentExpression: ["left"],
            ImportSpecifier: ["local"],
            ImportNamespaceSpecifier: ["local"],
            ImportDefaultSpecifier: ["local"],
            ImportDeclaration: ["specifiers"],
            FunctionDeclaration: ["id", "params"],
            FunctionExpression: ["id", "params"],
            ClassDeclaration: ["id"],
            ClassExpression: ["id"],
            RestElement: ["argument"],
            UpdateExpression: ["argument"],
            SpreadProperty: ["argument"],
            Property: ["value"],
            AssignmentPattern: ["left"],
            ArrayPattern: ["elements"],
            ObjectPattern: ["properties"],
            VariableDeclaration: ["declarations"],
            VariableDeclarator: ["id"]
          };
        }, {"179": 179}],
        181: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          exports.isBinding = isBinding;
          exports.isReferenced = isReferenced;
          exports.isValidIdentifier = isValidIdentifier;
          exports.isLet = isLet;
          exports.isBlockScoped = isBlockScoped;
          exports.isVar = isVar;
          exports.isSpecifierDefault = isSpecifierDefault;
          exports.isScope = isScope;
          exports.isImmutable = isImmutable;
          function _interopRequireWildcard(obj) {
            if (obj && obj.__esModule) {
              return obj;
            } else {
              var newObj = {};
              if (obj != null) {
                for (var key in obj) {
                  if (Object.prototype.hasOwnProperty.call(obj, key))
                    newObj[key] = obj[key];
                }
              }
              newObj["default"] = obj;
              return newObj;
            }
          }
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {"default": obj};
          }
          var _retrievers = _dereq_(180);
          var _esutils = _dereq_(429);
          var _esutils2 = _interopRequireDefault(_esutils);
          var _index = _dereq_(179);
          var t = _interopRequireWildcard(_index);
          function isBinding(node, parent) {
            var keys = _retrievers.getBindingIdentifiers.keys[parent.type];
            if (keys) {
              for (var i = 0; i < keys.length; i++) {
                var key = keys[i];
                var val = parent[key];
                if (Array.isArray(val)) {
                  if (val.indexOf(node) >= 0)
                    return true;
                } else {
                  if (val === node)
                    return true;
                }
              }
            }
            return false;
          }
          function isReferenced(node, parent) {
            switch (parent.type) {
              case "MemberExpression":
              case "JSXMemberExpression":
                if (parent.property === node && parent.computed) {
                  return true;
                } else if (parent.object === node) {
                  return true;
                } else {
                  return false;
                }
              case "MetaProperty":
                return false;
              case "Property":
                if (parent.key === node) {
                  return parent.computed;
                }
              case "VariableDeclarator":
                return parent.id !== node;
              case "ArrowFunctionExpression":
              case "FunctionDeclaration":
              case "FunctionExpression":
                var _arr = parent.params;
                for (var _i = 0; _i < _arr.length; _i++) {
                  var param = _arr[_i];
                  if (param === node)
                    return false;
                }
                return parent.id !== node;
              case "ExportSpecifier":
                if (parent.source) {
                  return false;
                } else {
                  return parent.local === node;
                }
              case "JSXAttribute":
                return parent.name !== node;
              case "ClassProperty":
                return parent.value === node;
              case "ImportDefaultSpecifier":
              case "ImportNamespaceSpecifier":
              case "ImportSpecifier":
                return false;
              case "ClassDeclaration":
              case "ClassExpression":
                return parent.id !== node;
              case "MethodDefinition":
                return parent.key === node && parent.computed;
              case "LabeledStatement":
                return false;
              case "CatchClause":
                return parent.param !== node;
              case "RestElement":
                return false;
              case "AssignmentExpression":
                return parent.right === node;
              case "AssignmentPattern":
                return parent.right === node;
              case "ObjectPattern":
              case "ArrayPattern":
                return false;
            }
            return true;
          }
          function isValidIdentifier(name) {
            if (typeof name !== "string" || _esutils2["default"].keyword.isReservedWordES6(name, true)) {
              return false;
            } else {
              return _esutils2["default"].keyword.isIdentifierNameES6(name);
            }
          }
          function isLet(node) {
            return t.isVariableDeclaration(node) && (node.kind !== "var" || node._let);
          }
          function isBlockScoped(node) {
            return t.isFunctionDeclaration(node) || t.isClassDeclaration(node) || t.isLet(node);
          }
          function isVar(node) {
            return t.isVariableDeclaration(node, {kind: "var"}) && !node._let;
          }
          function isSpecifierDefault(specifier) {
            return t.isImportDefaultSpecifier(specifier) || t.isIdentifier(specifier.imported || specifier.exported, {name: "default"});
          }
          function isScope(node, parent) {
            if (t.isBlockStatement(node) && t.isFunction(parent, {body: node})) {
              return false;
            }
            return t.isScopable(node);
          }
          function isImmutable(node) {
            if (t.isType(node.type, "Immutable"))
              return true;
            if (t.isLiteral(node)) {
              if (node.regex) {
                return false;
              } else {
                return true;
              }
            } else if (t.isIdentifier(node)) {
              if (node.name === "undefined") {
                return true;
              } else {
                return false;
              }
            }
            return false;
          }
        }, {
          "179": 179,
          "180": 180,
          "429": 429
        }],
        182: [function(_dereq_, module, exports) {
          (function(__dirname) {
            "use strict";
            exports.__esModule = true;
            exports.canCompile = canCompile;
            exports.list = list;
            exports.regexify = regexify;
            exports.arrayify = arrayify;
            exports.booleanify = booleanify;
            exports.shouldIgnore = shouldIgnore;
            exports.template = template;
            exports.parseTemplate = parseTemplate;
            function _interopRequireWildcard(obj) {
              if (obj && obj.__esModule) {
                return obj;
              } else {
                var newObj = {};
                if (obj != null) {
                  for (var key in obj) {
                    if (Object.prototype.hasOwnProperty.call(obj, key))
                      newObj[key] = obj[key];
                  }
                }
                newObj["default"] = obj;
                return newObj;
              }
            }
            function _interopRequireDefault(obj) {
              return obj && obj.__esModule ? obj : {"default": obj};
            }
            var _lodashStringEscapeRegExp = _dereq_(551);
            var _lodashStringEscapeRegExp2 = _interopRequireDefault(_lodashStringEscapeRegExp);
            var _lodashStringStartsWith = _dereq_(552);
            var _lodashStringStartsWith2 = _interopRequireDefault(_lodashStringStartsWith);
            var _lodashLangCloneDeep = _dereq_(528);
            var _lodashLangCloneDeep2 = _interopRequireDefault(_lodashLangCloneDeep);
            var _lodashLangIsBoolean = _dereq_(531);
            var _lodashLangIsBoolean2 = _interopRequireDefault(_lodashLangIsBoolean);
            var _messages = _dereq_(43);
            var messages = _interopRequireWildcard(_messages);
            var _minimatch = _dereq_(555);
            var _minimatch2 = _interopRequireDefault(_minimatch);
            var _lodashCollectionContains = _dereq_(443);
            var _lodashCollectionContains2 = _interopRequireDefault(_lodashCollectionContains);
            var _traversal = _dereq_(148);
            var _traversal2 = _interopRequireDefault(_traversal);
            var _lodashLangIsString = _dereq_(539);
            var _lodashLangIsString2 = _interopRequireDefault(_lodashLangIsString);
            var _lodashLangIsRegExp = _dereq_(538);
            var _lodashLangIsRegExp2 = _interopRequireDefault(_lodashLangIsRegExp);
            var _lodashLangIsEmpty = _dereq_(532);
            var _lodashLangIsEmpty2 = _interopRequireDefault(_lodashLangIsEmpty);
            var _helpersParse = _dereq_(42);
            var _helpersParse2 = _interopRequireDefault(_helpersParse);
            var _path = _dereq_(9);
            var _path2 = _interopRequireDefault(_path);
            var _lodashObjectHas = _dereq_(545);
            var _lodashObjectHas2 = _interopRequireDefault(_lodashObjectHas);
            var _fs = _dereq_(3);
            var _fs2 = _interopRequireDefault(_fs);
            var _types = _dereq_(179);
            var t = _interopRequireWildcard(_types);
            var _slash = _dereq_(590);
            var _slash2 = _interopRequireDefault(_slash);
            var _pathExists = _dereq_(558);
            var _pathExists2 = _interopRequireDefault(_pathExists);
            var _util = _dereq_(13);
            exports.inherits = _util.inherits;
            exports.inspect = _util.inspect;
            function canCompile(filename, altExts) {
              var exts = altExts || canCompile.EXTENSIONS;
              var ext = _path2["default"].extname(filename);
              return _lodashCollectionContains2["default"](exts, ext);
            }
            canCompile.EXTENSIONS = [".js", ".jsx", ".es6", ".es"];
            function list(val) {
              if (!val) {
                return [];
              } else if (Array.isArray(val)) {
                return val;
              } else if (typeof val === "string") {
                return val.split(",");
              } else {
                return [val];
              }
            }
            function regexify(val) {
              if (!val)
                return new RegExp(/.^/);
              if (Array.isArray(val))
                val = new RegExp(val.map(_lodashStringEscapeRegExp2["default"]).join("|"), "i");
              if (_lodashLangIsString2["default"](val)) {
                val = _slash2["default"](val);
                if (_lodashStringStartsWith2["default"](val, "./") || _lodashStringStartsWith2["default"](val, "*/"))
                  val = val.slice(2);
                if (_lodashStringStartsWith2["default"](val, "**/"))
                  val = val.slice(3);
                var regex = _minimatch2["default"].makeRe(val, {nocase: true});
                return new RegExp(regex.source.slice(1, -1), "i");
              }
              if (_lodashLangIsRegExp2["default"](val))
                return val;
              throw new TypeError("illegal type for regexify");
            }
            function arrayify(val, mapFn) {
              if (!val)
                return [];
              if (_lodashLangIsBoolean2["default"](val))
                return arrayify([val], mapFn);
              if (_lodashLangIsString2["default"](val))
                return arrayify(list(val), mapFn);
              if (Array.isArray(val)) {
                if (mapFn)
                  val = val.map(mapFn);
                return val;
              }
              return [val];
            }
            function booleanify(val) {
              if (val === "true")
                return true;
              if (val === "false")
                return false;
              return val;
            }
            function shouldIgnore(filename, ignore, only) {
              filename = _slash2["default"](filename);
              if (only) {
                var _arr = only;
                for (var _i = 0; _i < _arr.length; _i++) {
                  var pattern = _arr[_i];
                  if (_shouldIgnore(pattern, filename))
                    return false;
                }
                return true;
              } else if (ignore.length) {
                var _arr2 = ignore;
                for (var _i2 = 0; _i2 < _arr2.length; _i2++) {
                  var pattern = _arr2[_i2];
                  if (_shouldIgnore(pattern, filename))
                    return true;
                }
              }
              return false;
            }
            function _shouldIgnore(pattern, filename) {
              if (typeof pattern === "function") {
                return pattern(filename);
              } else {
                return pattern.test(filename);
              }
            }
            var templateVisitor = {
              noScope: true,
              enter: function enter(node, parent, scope, nodes) {
                if (t.isExpressionStatement(node)) {
                  node = node.expression;
                }
                if (t.isIdentifier(node) && _lodashObjectHas2["default"](nodes, node.name)) {
                  this.skip();
                  this.replaceInline(nodes[node.name]);
                }
              },
              exit: function exit(node) {
                _traversal2["default"].clearNode(node);
              }
            };
            function template(name, nodes, keepExpression) {
              var ast = exports.templates[name];
              if (!ast)
                throw new ReferenceError("unknown template " + name);
              if (nodes === true) {
                keepExpression = true;
                nodes = null;
              }
              ast = _lodashLangCloneDeep2["default"](ast);
              if (!_lodashLangIsEmpty2["default"](nodes)) {
                _traversal2["default"](ast, templateVisitor, null, nodes);
              }
              if (ast.body.length > 1)
                return ast.body;
              var node = ast.body[0];
              if (!keepExpression && t.isExpressionStatement(node)) {
                return node.expression;
              } else {
                return node;
              }
            }
            function parseTemplate(loc, code) {
              var ast = _helpersParse2["default"](code, {
                filename: loc,
                looseModules: true
              }).program;
              ast = _traversal2["default"].removeProperties(ast);
              return ast;
            }
            function loadTemplates() {
              var templates = {};
              var templatesLoc = _path2["default"].join(__dirname, "transformation/templates");
              if (!_pathExists2["default"].sync(templatesLoc)) {
                throw new ReferenceError(messages.get("missingTemplatesDirectory"));
              }
              var _arr3 = _fs2["default"].readdirSync(templatesLoc);
              for (var _i3 = 0; _i3 < _arr3.length; _i3++) {
                var name = _arr3[_i3];
                if (name[0] === ".")
                  return;
                var key = _path2["default"].basename(name, _path2["default"].extname(name));
                var loc = _path2["default"].join(templatesLoc, name);
                var code = _fs2["default"].readFileSync(loc, "utf8");
                templates[key] = parseTemplate(loc, code);
              }
              return templates;
            }
            try {
              exports.templates = _dereq_(611);
            } catch (err) {
              if (err.code !== "MODULE_NOT_FOUND")
                throw err;
              exports.templates = loadTemplates();
            }
          }).call(this, "/lib");
        }, {
          "13": 13,
          "148": 148,
          "179": 179,
          "3": 3,
          "42": 42,
          "43": 43,
          "443": 443,
          "528": 528,
          "531": 531,
          "532": 532,
          "538": 538,
          "539": 539,
          "545": 545,
          "551": 551,
          "552": 552,
          "555": 555,
          "558": 558,
          "590": 590,
          "611": 611,
          "9": 9
        }],
        183: [function(_dereq_, module, exports) {
          var assert = _dereq_(1);
          var stableSort = _dereq_(602);
          function alter(str, fragments) {
            "use strict";
            var isArray = Array.isArray || function(v) {
              return Object.prototype.toString.call(v) === "[object Array]";
            };
            ;
            assert(typeof str === "string");
            assert(isArray(fragments));
            var sortedFragments = stableSort(fragments, function(a, b) {
              return a.start - b.start;
            });
            var outs = [];
            var pos = 0;
            for (var i = 0; i < sortedFragments.length; i++) {
              var frag = sortedFragments[i];
              assert(pos <= frag.start);
              assert(frag.start <= frag.end);
              outs.push(str.slice(pos, frag.start));
              outs.push(frag.str);
              pos = frag.end;
            }
            if (pos < str.length) {
              outs.push(str.slice(pos));
            }
            return outs.join("");
          }
          if (typeof module !== "undefined" && typeof module.exports !== "undefined") {
            module.exports = alter;
          }
        }, {
          "1": 1,
          "602": 602
        }],
        184: [function(_dereq_, module, exports) {
          'use strict';
          module.exports = function() {
            return /[\u001b\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]/g;
          };
        }, {}],
        185: [function(_dereq_, module, exports) {
          'use strict';
          var colorConvert = _dereq_(225);
          function wrapAnsi16(fn, offset) {
            return function() {
              var code = fn.apply(colorConvert, arguments);
              return '\u001b[' + (code + offset) + 'm';
            };
          }
          function wrapAnsi256(fn, offset) {
            return function() {
              var code = fn.apply(colorConvert, arguments);
              return '\u001b[' + (38 + offset) + ';5;' + code + 'm';
            };
          }
          function wrapAnsi16m(fn, offset) {
            return function() {
              var rgb = fn.apply(colorConvert, arguments);
              return '\u001b[' + (38 + offset) + ';2;' + rgb[0] + ';' + rgb[1] + ';' + rgb[2] + 'm';
            };
          }
          function assembleStyles() {
            var styles = {
              modifier: {
                reset: [0, 0],
                bold: [1, 22],
                dim: [2, 22],
                italic: [3, 23],
                underline: [4, 24],
                inverse: [7, 27],
                hidden: [8, 28],
                strikethrough: [9, 29]
              },
              color: {
                black: [30, 39],
                red: [31, 39],
                green: [32, 39],
                yellow: [33, 39],
                blue: [34, 39],
                magenta: [35, 39],
                cyan: [36, 39],
                white: [37, 39],
                gray: [90, 39]
              },
              bgColor: {
                bgBlack: [40, 49],
                bgRed: [41, 49],
                bgGreen: [42, 49],
                bgYellow: [43, 49],
                bgBlue: [44, 49],
                bgMagenta: [45, 49],
                bgCyan: [46, 49],
                bgWhite: [47, 49]
              }
            };
            styles.color.grey = styles.color.gray;
            Object.keys(styles).forEach(function(groupName) {
              var group = styles[groupName];
              Object.keys(group).forEach(function(styleName) {
                var style = group[styleName];
                styles[styleName] = group[styleName] = {
                  open: '\u001b[' + style[0] + 'm',
                  close: '\u001b[' + style[1] + 'm'
                };
              });
              Object.defineProperty(styles, groupName, {
                value: group,
                enumerable: false
              });
            });
            function rgb2rgb(r, g, b) {
              return [r, g, b];
            }
            styles.color.close = '\u001b[39m';
            styles.bgColor.close = '\u001b[49m';
            styles.color.ansi = {};
            styles.color.ansi256 = {};
            styles.color.ansi16m = {rgb: wrapAnsi16m(rgb2rgb, 0)};
            styles.bgColor.ansi = {};
            styles.bgColor.ansi256 = {};
            styles.bgColor.ansi16m = {rgb: wrapAnsi16m(rgb2rgb, 10)};
            for (var key in colorConvert) {
              if (!colorConvert.hasOwnProperty(key) || typeof colorConvert[key] !== 'object') {
                continue;
              }
              var suite = colorConvert[key];
              if ('ansi16' in suite) {
                styles.color.ansi[key] = wrapAnsi16(suite.ansi16, 0);
                styles.bgColor.ansi[key] = wrapAnsi16(suite.ansi16, 10);
              }
              if ('ansi256' in suite) {
                styles.color.ansi256[key] = wrapAnsi256(suite.ansi256, 0);
                styles.bgColor.ansi256[key] = wrapAnsi256(suite.ansi256, 10);
              }
              if ('rgb' in suite) {
                styles.color.ansi16m[key] = wrapAnsi16m(suite.rgb, 0);
                styles.bgColor.ansi16m[key] = wrapAnsi16m(suite.rgb, 10);
              }
            }
            return styles;
          }
          Object.defineProperty(module, 'exports', {
            enumerable: true,
            get: assembleStyles
          });
        }, {"225": 225}],
        186: [function(_dereq_, module, exports) {
          function traverse(root, options) {
            "use strict";
            options = options || {};
            var pre = options.pre;
            var post = options.post;
            var skipProperty = options.skipProperty;
            function visit(node, parent, prop, idx) {
              if (!node || typeof node.type !== "string") {
                return;
              }
              var res = undefined;
              if (pre) {
                res = pre(node, parent, prop, idx);
              }
              if (res !== false) {
                for (var prop in node) {
                  if (skipProperty ? skipProperty(prop, node) : prop[0] === "$") {
                    continue;
                  }
                  var child = node[prop];
                  if (Array.isArray(child)) {
                    for (var i = 0; i < child.length; i++) {
                      visit(child[i], node, prop, i);
                    }
                  } else {
                    visit(child, node, prop);
                  }
                }
              }
              if (post) {
                post(node, parent, prop, idx);
              }
            }
            visit(root, null);
          }
          ;
          if (typeof module !== "undefined" && typeof module.exports !== "undefined") {
            module.exports = traverse;
          }
        }, {}],
        187: [function(_dereq_, module, exports) {
          _dereq_(191);
          var types = _dereq_(201);
          var defaults = _dereq_(200).defaults;
          var def = types.Type.def;
          var or = types.Type.or;
          def("Noop").bases("Node").build();
          def("DoExpression").bases("Expression").build("body").field("body", [def("Statement")]);
          def("Super").bases("Expression").build();
          def("BindExpression").bases("Expression").build("object", "callee").field("object", or(def("Expression"), null)).field("callee", def("Expression"));
          def("Decorator").bases("Node").build("expression").field("expression", def("Expression"));
          def("Property").field("decorators", or([def("Decorator")], null), defaults["null"]);
          def("MethodDefinition").field("decorators", or([def("Decorator")], null), defaults["null"]);
          def("MetaProperty").bases("Expression").build("meta", "property").field("meta", def("Identifier")).field("property", def("Identifier"));
          def("ParenthesizedExpression").bases("Expression").build("expression").field("expression", def("Expression"));
          def("ImportSpecifier").bases("ModuleSpecifier").build("imported", "local").field("imported", def("Identifier"));
          def("ImportDefaultSpecifier").bases("ModuleSpecifier").build("local");
          def("ImportNamespaceSpecifier").bases("ModuleSpecifier").build("local");
          def("ExportDefaultDeclaration").bases("Declaration").build("declaration").field("declaration", or(def("Declaration"), def("Expression")));
          def("ExportNamedDeclaration").bases("Declaration").build("declaration", "specifiers", "source").field("declaration", or(def("Declaration"), null)).field("specifiers", [def("ExportSpecifier")], defaults.emptyArray).field("source", or(def("Literal"), null), defaults["null"]);
          def("ExportSpecifier").bases("ModuleSpecifier").build("local", "exported").field("exported", def("Identifier"));
          def("ExportNamespaceSpecifier").bases("Specifier").build("exported").field("exported", def("Identifier"));
          def("ExportDefaultSpecifier").bases("Specifier").build("exported").field("exported", def("Identifier"));
          def("ExportAllDeclaration").bases("Declaration").build("exported", "source").field("exported", or(def("Identifier"), null)).field("source", def("Literal"));
          def("CommentBlock").bases("Comment").build("value", "leading", "trailing");
          def("CommentLine").bases("Comment").build("value", "leading", "trailing");
        }, {
          "191": 191,
          "200": 200,
          "201": 201
        }],
        188: [function(_dereq_, module, exports) {
          var types = _dereq_(201);
          var Type = types.Type;
          var def = Type.def;
          var or = Type.or;
          var shared = _dereq_(200);
          var defaults = shared.defaults;
          var geq = shared.geq;
          def("Printable").field("loc", or(def("SourceLocation"), null), defaults["null"], true);
          def("Node").bases("Printable").field("type", String).field("comments", or([def("Comment")], null), defaults["null"], true);
          def("SourceLocation").build("start", "end", "source").field("start", def("Position")).field("end", def("Position")).field("source", or(String, null), defaults["null"]);
          def("Position").build("line", "column").field("line", geq(1)).field("column", geq(0));
          def("File").bases("Node").build("program").field("program", def("Program"));
          def("Program").bases("Node").build("body").field("body", [def("Statement")]);
          def("Function").bases("Node").field("id", or(def("Identifier"), null), defaults["null"]).field("params", [def("Pattern")]).field("body", def("BlockStatement"));
          def("Statement").bases("Node");
          def("EmptyStatement").bases("Statement").build();
          def("BlockStatement").bases("Statement").build("body").field("body", [def("Statement")]);
          def("ExpressionStatement").bases("Statement").build("expression").field("expression", def("Expression"));
          def("IfStatement").bases("Statement").build("test", "consequent", "alternate").field("test", def("Expression")).field("consequent", def("Statement")).field("alternate", or(def("Statement"), null), defaults["null"]);
          def("LabeledStatement").bases("Statement").build("label", "body").field("label", def("Identifier")).field("body", def("Statement"));
          def("BreakStatement").bases("Statement").build("label").field("label", or(def("Identifier"), null), defaults["null"]);
          def("ContinueStatement").bases("Statement").build("label").field("label", or(def("Identifier"), null), defaults["null"]);
          def("WithStatement").bases("Statement").build("object", "body").field("object", def("Expression")).field("body", def("Statement"));
          def("SwitchStatement").bases("Statement").build("discriminant", "cases", "lexical").field("discriminant", def("Expression")).field("cases", [def("SwitchCase")]).field("lexical", Boolean, defaults["false"]);
          def("ReturnStatement").bases("Statement").build("argument").field("argument", or(def("Expression"), null));
          def("ThrowStatement").bases("Statement").build("argument").field("argument", def("Expression"));
          def("TryStatement").bases("Statement").build("block", "handler", "finalizer").field("block", def("BlockStatement")).field("handler", or(def("CatchClause"), null), function() {
            return this.handlers && this.handlers[0] || null;
          }).field("handlers", [def("CatchClause")], function() {
            return this.handler ? [this.handler] : [];
          }, true).field("guardedHandlers", [def("CatchClause")], defaults.emptyArray).field("finalizer", or(def("BlockStatement"), null), defaults["null"]);
          def("CatchClause").bases("Node").build("param", "guard", "body").field("param", def("Pattern")).field("guard", or(def("Expression"), null), defaults["null"]).field("body", def("BlockStatement"));
          def("WhileStatement").bases("Statement").build("test", "body").field("test", def("Expression")).field("body", def("Statement"));
          def("DoWhileStatement").bases("Statement").build("body", "test").field("body", def("Statement")).field("test", def("Expression"));
          def("ForStatement").bases("Statement").build("init", "test", "update", "body").field("init", or(def("VariableDeclaration"), def("Expression"), null)).field("test", or(def("Expression"), null)).field("update", or(def("Expression"), null)).field("body", def("Statement"));
          def("ForInStatement").bases("Statement").build("left", "right", "body").field("left", or(def("VariableDeclaration"), def("Expression"))).field("right", def("Expression")).field("body", def("Statement"));
          def("DebuggerStatement").bases("Statement").build();
          def("Declaration").bases("Statement");
          def("FunctionDeclaration").bases("Function", "Declaration").build("id", "params", "body").field("id", def("Identifier"));
          def("FunctionExpression").bases("Function", "Expression").build("id", "params", "body");
          def("VariableDeclaration").bases("Declaration").build("kind", "declarations").field("kind", or("var", "let", "const")).field("declarations", [def("VariableDeclarator")]);
          def("VariableDeclarator").bases("Node").build("id", "init").field("id", def("Pattern")).field("init", or(def("Expression"), null));
          def("Expression").bases("Node", "Pattern");
          def("ThisExpression").bases("Expression").build();
          def("ArrayExpression").bases("Expression").build("elements").field("elements", [or(def("Expression"), null)]);
          def("ObjectExpression").bases("Expression").build("properties").field("properties", [def("Property")]);
          def("Property").bases("Node").build("kind", "key", "value").field("kind", or("init", "get", "set")).field("key", or(def("Literal"), def("Identifier"))).field("value", def("Expression"));
          def("SequenceExpression").bases("Expression").build("expressions").field("expressions", [def("Expression")]);
          var UnaryOperator = or("-", "+", "!", "~", "typeof", "void", "delete");
          def("UnaryExpression").bases("Expression").build("operator", "argument", "prefix").field("operator", UnaryOperator).field("argument", def("Expression")).field("prefix", Boolean, defaults["true"]);
          var BinaryOperator = or("==", "!=", "===", "!==", "<", "<=", ">", ">=", "<<", ">>", ">>>", "+", "-", "*", "/", "%", "&", "|", "^", "in", "instanceof", "..");
          def("BinaryExpression").bases("Expression").build("operator", "left", "right").field("operator", BinaryOperator).field("left", def("Expression")).field("right", def("Expression"));
          var AssignmentOperator = or("=", "+=", "-=", "*=", "/=", "%=", "<<=", ">>=", ">>>=", "|=", "^=", "&=");
          def("AssignmentExpression").bases("Expression").build("operator", "left", "right").field("operator", AssignmentOperator).field("left", def("Pattern")).field("right", def("Expression"));
          var UpdateOperator = or("++", "--");
          def("UpdateExpression").bases("Expression").build("operator", "argument", "prefix").field("operator", UpdateOperator).field("argument", def("Expression")).field("prefix", Boolean);
          var LogicalOperator = or("||", "&&");
          def("LogicalExpression").bases("Expression").build("operator", "left", "right").field("operator", LogicalOperator).field("left", def("Expression")).field("right", def("Expression"));
          def("ConditionalExpression").bases("Expression").build("test", "consequent", "alternate").field("test", def("Expression")).field("consequent", def("Expression")).field("alternate", def("Expression"));
          def("NewExpression").bases("Expression").build("callee", "arguments").field("callee", def("Expression")).field("arguments", [def("Expression")]);
          def("CallExpression").bases("Expression").build("callee", "arguments").field("callee", def("Expression")).field("arguments", [def("Expression")]);
          def("MemberExpression").bases("Expression").build("object", "property", "computed").field("object", def("Expression")).field("property", or(def("Identifier"), def("Expression"))).field("computed", Boolean, defaults["false"]);
          def("Pattern").bases("Node");
          def("SwitchCase").bases("Node").build("test", "consequent").field("test", or(def("Expression"), null)).field("consequent", [def("Statement")]);
          def("Identifier").bases("Node", "Expression", "Pattern").build("name").field("name", String);
          def("Literal").bases("Node", "Expression").build("value").field("value", or(String, Boolean, null, Number, RegExp)).field("regex", or({
            pattern: String,
            flags: String
          }, null), function() {
            if (this.value instanceof RegExp) {
              var flags = "";
              if (this.value.ignoreCase)
                flags += "i";
              if (this.value.multiline)
                flags += "m";
              if (this.value.global)
                flags += "g";
              return {
                pattern: this.value.source,
                flags: flags
              };
            }
            return null;
          });
          def("Comment").bases("Printable").field("value", String).field("leading", Boolean, defaults["true"]).field("trailing", Boolean, defaults["false"]);
        }, {
          "200": 200,
          "201": 201
        }],
        189: [function(_dereq_, module, exports) {
          _dereq_(188);
          var types = _dereq_(201);
          var def = types.Type.def;
          var or = types.Type.or;
          def("XMLDefaultDeclaration").bases("Declaration").field("namespace", def("Expression"));
          def("XMLAnyName").bases("Expression");
          def("XMLQualifiedIdentifier").bases("Expression").field("left", or(def("Identifier"), def("XMLAnyName"))).field("right", or(def("Identifier"), def("Expression"))).field("computed", Boolean);
          def("XMLFunctionQualifiedIdentifier").bases("Expression").field("right", or(def("Identifier"), def("Expression"))).field("computed", Boolean);
          def("XMLAttributeSelector").bases("Expression").field("attribute", def("Expression"));
          def("XMLFilterExpression").bases("Expression").field("left", def("Expression")).field("right", def("Expression"));
          def("XMLElement").bases("XML", "Expression").field("contents", [def("XML")]);
          def("XMLList").bases("XML", "Expression").field("contents", [def("XML")]);
          def("XML").bases("Node");
          def("XMLEscape").bases("XML").field("expression", def("Expression"));
          def("XMLText").bases("XML").field("text", String);
          def("XMLStartTag").bases("XML").field("contents", [def("XML")]);
          def("XMLEndTag").bases("XML").field("contents", [def("XML")]);
          def("XMLPointTag").bases("XML").field("contents", [def("XML")]);
          def("XMLName").bases("XML").field("contents", or(String, [def("XML")]));
          def("XMLAttribute").bases("XML").field("value", String);
          def("XMLCdata").bases("XML").field("contents", String);
          def("XMLComment").bases("XML").field("contents", String);
          def("XMLProcessingInstruction").bases("XML").field("target", String).field("contents", or(String, null));
        }, {
          "188": 188,
          "201": 201
        }],
        190: [function(_dereq_, module, exports) {
          _dereq_(188);
          var types = _dereq_(201);
          var def = types.Type.def;
          var or = types.Type.or;
          var defaults = _dereq_(200).defaults;
          def("Function").field("generator", Boolean, defaults["false"]).field("expression", Boolean, defaults["false"]).field("defaults", [or(def("Expression"), null)], defaults.emptyArray).field("rest", or(def("Identifier"), null), defaults["null"]);
          def("RestElement").bases("Pattern").build("argument").field("argument", def("Pattern"));
          def("SpreadElementPattern").bases("Pattern").build("argument").field("argument", def("Pattern"));
          def("FunctionDeclaration").build("id", "params", "body", "generator", "expression");
          def("FunctionExpression").build("id", "params", "body", "generator", "expression");
          def("ArrowFunctionExpression").bases("Function", "Expression").build("params", "body", "expression").field("id", null, defaults["null"]).field("body", or(def("BlockStatement"), def("Expression"))).field("generator", false, defaults["false"]);
          def("YieldExpression").bases("Expression").build("argument", "delegate").field("argument", or(def("Expression"), null)).field("delegate", Boolean, defaults["false"]);
          def("GeneratorExpression").bases("Expression").build("body", "blocks", "filter").field("body", def("Expression")).field("blocks", [def("ComprehensionBlock")]).field("filter", or(def("Expression"), null));
          def("ComprehensionExpression").bases("Expression").build("body", "blocks", "filter").field("body", def("Expression")).field("blocks", [def("ComprehensionBlock")]).field("filter", or(def("Expression"), null));
          def("ComprehensionBlock").bases("Node").build("left", "right", "each").field("left", def("Pattern")).field("right", def("Expression")).field("each", Boolean);
          def("Property").field("key", or(def("Literal"), def("Identifier"), def("Expression"))).field("value", or(def("Expression"), def("Pattern"))).field("method", Boolean, defaults["false"]).field("shorthand", Boolean, defaults["false"]).field("computed", Boolean, defaults["false"]);
          def("PropertyPattern").bases("Pattern").build("key", "pattern").field("key", or(def("Literal"), def("Identifier"), def("Expression"))).field("pattern", def("Pattern")).field("computed", Boolean, defaults["false"]);
          def("ObjectPattern").bases("Pattern").build("properties").field("properties", [or(def("PropertyPattern"), def("Property"))]);
          def("ArrayPattern").bases("Pattern").build("elements").field("elements", [or(def("Pattern"), null)]);
          def("MethodDefinition").bases("Declaration").build("kind", "key", "value", "static").field("kind", or("constructor", "method", "get", "set")).field("key", or(def("Literal"), def("Identifier"), def("Expression"))).field("value", def("Function")).field("computed", Boolean, defaults["false"]).field("static", Boolean, defaults["false"]);
          def("SpreadElement").bases("Node").build("argument").field("argument", def("Expression"));
          def("ArrayExpression").field("elements", [or(def("Expression"), def("SpreadElement"), def("RestElement"), null)]);
          def("NewExpression").field("arguments", [or(def("Expression"), def("SpreadElement"))]);
          def("CallExpression").field("arguments", [or(def("Expression"), def("SpreadElement"))]);
          def("AssignmentPattern").bases("Pattern").build("left", "right").field("left", def("Pattern")).field("right", def("Expression"));
          var ClassBodyElement = or(def("MethodDefinition"), def("VariableDeclarator"), def("ClassPropertyDefinition"), def("ClassProperty"));
          def("ClassProperty").bases("Declaration").build("key").field("key", or(def("Literal"), def("Identifier"), def("Expression"))).field("computed", Boolean, defaults["false"]);
          def("ClassPropertyDefinition").bases("Declaration").build("definition").field("definition", ClassBodyElement);
          def("ClassBody").bases("Declaration").build("body").field("body", [ClassBodyElement]);
          def("ClassDeclaration").bases("Declaration").build("id", "body", "superClass").field("id", or(def("Identifier"), null)).field("body", def("ClassBody")).field("superClass", or(def("Expression"), null), defaults["null"]);
          def("ClassExpression").bases("Expression").build("id", "body", "superClass").field("id", or(def("Identifier"), null), defaults["null"]).field("body", def("ClassBody")).field("superClass", or(def("Expression"), null), defaults["null"]).field("implements", [def("ClassImplements")], defaults.emptyArray);
          def("ClassImplements").bases("Node").build("id").field("id", def("Identifier")).field("superClass", or(def("Expression"), null), defaults["null"]);
          def("Specifier").bases("Node");
          def("ModuleSpecifier").bases("Specifier").field("local", or(def("Identifier"), null), defaults["null"]).field("id", or(def("Identifier"), null), defaults["null"]).field("name", or(def("Identifier"), null), defaults["null"]);
          def("TaggedTemplateExpression").bases("Expression").build("tag", "quasi").field("tag", def("Expression")).field("quasi", def("TemplateLiteral"));
          def("TemplateLiteral").bases("Expression").build("quasis", "expressions").field("quasis", [def("TemplateElement")]).field("expressions", [def("Expression")]);
          def("TemplateElement").bases("Node").build("value", "tail").field("value", {
            "cooked": String,
            "raw": String
          }).field("tail", Boolean);
        }, {
          "188": 188,
          "200": 200,
          "201": 201
        }],
        191: [function(_dereq_, module, exports) {
          _dereq_(190);
          var types = _dereq_(201);
          var def = types.Type.def;
          var or = types.Type.or;
          var builtin = types.builtInTypes;
          var defaults = _dereq_(200).defaults;
          def("Function").field("async", Boolean, defaults["false"]);
          def("SpreadProperty").bases("Node").build("argument").field("argument", def("Expression"));
          def("ObjectExpression").field("properties", [or(def("Property"), def("SpreadProperty"))]);
          def("SpreadPropertyPattern").bases("Pattern").build("argument").field("argument", def("Pattern"));
          def("ObjectPattern").field("properties", [or(def("Property"), def("PropertyPattern"), def("SpreadPropertyPattern"))]);
          def("AwaitExpression").bases("Expression").build("argument", "all").field("argument", or(def("Expression"), null)).field("all", Boolean, defaults["false"]);
        }, {
          "190": 190,
          "200": 200,
          "201": 201
        }],
        192: [function(_dereq_, module, exports) {
          _dereq_(191);
          var types = _dereq_(201);
          var defaults = _dereq_(200).defaults;
          var def = types.Type.def;
          var or = types.Type.or;
          def("VariableDeclaration").field("declarations", [or(def("VariableDeclarator"), def("Identifier"))]);
          def("Property").field("value", or(def("Expression"), def("Pattern")));
          def("ArrayPattern").field("elements", [or(def("Pattern"), def("SpreadElement"), null)]);
          def("ObjectPattern").field("properties", [or(def("Property"), def("PropertyPattern"), def("SpreadPropertyPattern"), def("SpreadProperty"))]);
          def("ExportSpecifier").bases("ModuleSpecifier").build("id", "name");
          def("ExportBatchSpecifier").bases("Specifier").build();
          def("ImportSpecifier").bases("ModuleSpecifier").build("id", "name");
          def("ImportNamespaceSpecifier").bases("ModuleSpecifier").build("id");
          def("ImportDefaultSpecifier").bases("ModuleSpecifier").build("id");
          def("ExportDeclaration").bases("Declaration").build("default", "declaration", "specifiers", "source").field("default", Boolean).field("declaration", or(def("Declaration"), def("Expression"), null)).field("specifiers", [or(def("ExportSpecifier"), def("ExportBatchSpecifier"))], defaults.emptyArray).field("source", or(def("Literal"), null), defaults["null"]);
          def("ImportDeclaration").bases("Declaration").build("specifiers", "source").field("specifiers", [or(def("ImportSpecifier"), def("ImportNamespaceSpecifier"), def("ImportDefaultSpecifier"))], defaults.emptyArray).field("source", def("Literal"));
          def("Block").bases("Comment").build("value", "leading", "trailing");
          def("Line").bases("Comment").build("value", "leading", "trailing");
        }, {
          "191": 191,
          "200": 200,
          "201": 201
        }],
        193: [function(_dereq_, module, exports) {
          _dereq_(191);
          var types = _dereq_(201);
          var def = types.Type.def;
          var or = types.Type.or;
          var defaults = _dereq_(200).defaults;
          def("JSXAttribute").bases("Node").build("name", "value").field("name", or(def("JSXIdentifier"), def("JSXNamespacedName"))).field("value", or(def("Literal"), def("JSXExpressionContainer"), null), defaults["null"]);
          def("JSXIdentifier").bases("Identifier").build("name").field("name", String);
          def("JSXNamespacedName").bases("Node").build("namespace", "name").field("namespace", def("JSXIdentifier")).field("name", def("JSXIdentifier"));
          def("JSXMemberExpression").bases("MemberExpression").build("object", "property").field("object", or(def("JSXIdentifier"), def("JSXMemberExpression"))).field("property", def("JSXIdentifier")).field("computed", Boolean, defaults.false);
          var JSXElementName = or(def("JSXIdentifier"), def("JSXNamespacedName"), def("JSXMemberExpression"));
          def("JSXSpreadAttribute").bases("Node").build("argument").field("argument", def("Expression"));
          var JSXAttributes = [or(def("JSXAttribute"), def("JSXSpreadAttribute"))];
          def("JSXExpressionContainer").bases("Expression").build("expression").field("expression", def("Expression"));
          def("JSXElement").bases("Expression").build("openingElement", "closingElement", "children").field("openingElement", def("JSXOpeningElement")).field("closingElement", or(def("JSXClosingElement"), null), defaults["null"]).field("children", [or(def("JSXElement"), def("JSXExpressionContainer"), def("JSXText"), def("Literal"))], defaults.emptyArray).field("name", JSXElementName, function() {
            return this.openingElement.name;
          }, true).field("selfClosing", Boolean, function() {
            return this.openingElement.selfClosing;
          }, true).field("attributes", JSXAttributes, function() {
            return this.openingElement.attributes;
          }, true);
          def("JSXOpeningElement").bases("Node").build("name", "attributes", "selfClosing").field("name", JSXElementName).field("attributes", JSXAttributes, defaults.emptyArray).field("selfClosing", Boolean, defaults["false"]);
          def("JSXClosingElement").bases("Node").build("name").field("name", JSXElementName);
          def("JSXText").bases("Literal").build("value").field("value", String);
          def("JSXEmptyExpression").bases("Expression").build();
          def("Type").bases("Node");
          def("AnyTypeAnnotation").bases("Type").build();
          def("MixedTypeAnnotation").bases("Type").build();
          def("VoidTypeAnnotation").bases("Type").build();
          def("NumberTypeAnnotation").bases("Type").build();
          def("NumberLiteralTypeAnnotation").bases("Type").build("value", "raw").field("value", Number).field("raw", String);
          def("StringTypeAnnotation").bases("Type").build();
          def("StringLiteralTypeAnnotation").bases("Type").build("value", "raw").field("value", String).field("raw", String);
          def("BooleanTypeAnnotation").bases("Type").build();
          def("BooleanLiteralTypeAnnotation").bases("Type").build("value", "raw").field("value", Boolean).field("raw", String);
          def("TypeAnnotation").bases("Node").build("typeAnnotation").field("typeAnnotation", def("Type"));
          def("NullableTypeAnnotation").bases("Type").build("typeAnnotation").field("typeAnnotation", def("Type"));
          def("FunctionTypeAnnotation").bases("Type").build("params", "returnType", "rest", "typeParameters").field("params", [def("FunctionTypeParam")]).field("returnType", def("Type")).field("rest", or(def("FunctionTypeParam"), null)).field("typeParameters", or(def("TypeParameterDeclaration"), null));
          def("FunctionTypeParam").bases("Node").build("name", "typeAnnotation", "optional").field("name", def("Identifier")).field("typeAnnotation", def("Type")).field("optional", Boolean);
          def("ArrayTypeAnnotation").bases("Type").build("elementType").field("elementType", def("Type"));
          def("ObjectTypeAnnotation").bases("Type").build("properties").field("properties", [def("ObjectTypeProperty")]).field("indexers", [def("ObjectTypeIndexer")], defaults.emptyArray).field("callProperties", [def("ObjectTypeCallProperty")], defaults.emptyArray);
          def("ObjectTypeProperty").bases("Node").build("key", "value", "optional").field("key", or(def("Literal"), def("Identifier"))).field("value", def("Type")).field("optional", Boolean);
          def("ObjectTypeIndexer").bases("Node").build("id", "key", "value").field("id", def("Identifier")).field("key", def("Type")).field("value", def("Type"));
          def("ObjectTypeCallProperty").bases("Node").build("value").field("value", def("FunctionTypeAnnotation")).field("static", Boolean, false);
          def("QualifiedTypeIdentifier").bases("Node").build("qualification", "id").field("qualification", or(def("Identifier"), def("QualifiedTypeIdentifier"))).field("id", def("Identifier"));
          def("GenericTypeAnnotation").bases("Type").build("id", "typeParameters").field("id", or(def("Identifier"), def("QualifiedTypeIdentifier"))).field("typeParameters", or(def("TypeParameterInstantiation"), null));
          def("MemberTypeAnnotation").bases("Type").build("object", "property").field("object", def("Identifier")).field("property", or(def("MemberTypeAnnotation"), def("GenericTypeAnnotation")));
          def("UnionTypeAnnotation").bases("Type").build("types").field("types", [def("Type")]);
          def("IntersectionTypeAnnotation").bases("Type").build("types").field("types", [def("Type")]);
          def("TypeofTypeAnnotation").bases("Type").build("argument").field("argument", def("Type"));
          def("Identifier").field("typeAnnotation", or(def("TypeAnnotation"), null), defaults["null"]);
          def("TypeParameterDeclaration").bases("Node").build("params").field("params", [def("Identifier")]);
          def("TypeParameterInstantiation").bases("Node").build("params").field("params", [def("Type")]);
          def("Function").field("returnType", or(def("TypeAnnotation"), null), defaults["null"]).field("typeParameters", or(def("TypeParameterDeclaration"), null), defaults["null"]);
          def("ClassProperty").build("key", "value", "typeAnnotation", "static").field("value", or(def("Expression"), null)).field("typeAnnotation", or(def("TypeAnnotation"), null)).field("static", Boolean, defaults["false"]);
          def("ClassImplements").field("typeParameters", or(def("TypeParameterInstantiation"), null), defaults["null"]);
          def("InterfaceDeclaration").bases("Statement").build("id", "body", "extends").field("id", def("Identifier")).field("typeParameters", or(def("TypeParameterDeclaration"), null), defaults["null"]).field("body", def("ObjectTypeAnnotation")).field("extends", [def("InterfaceExtends")]);
          def("InterfaceExtends").bases("Node").build("id").field("id", def("Identifier")).field("typeParameters", or(def("TypeParameterInstantiation"), null));
          def("TypeAlias").bases("Statement").build("id", "typeParameters", "right").field("id", def("Identifier")).field("typeParameters", or(def("TypeParameterDeclaration"), null)).field("right", def("Type"));
          def("TypeCastExpression").bases("Expression").build("expression", "typeAnnotation").field("expression", def("Expression")).field("typeAnnotation", def("TypeAnnotation"));
          def("TupleTypeAnnotation").bases("Type").build("types").field("types", [def("Type")]);
          def("DeclareVariable").bases("Statement").build("id").field("id", def("Identifier"));
          def("DeclareFunction").bases("Statement").build("id").field("id", def("Identifier"));
          def("DeclareClass").bases("InterfaceDeclaration").build("id");
          def("DeclareModule").bases("Statement").build("id", "body").field("id", or(def("Identifier"), def("Literal"))).field("body", def("BlockStatement"));
        }, {
          "191": 191,
          "200": 200,
          "201": 201
        }],
        194: [function(_dereq_, module, exports) {
          _dereq_(188);
          var types = _dereq_(201);
          var def = types.Type.def;
          var or = types.Type.or;
          var shared = _dereq_(200);
          var geq = shared.geq;
          var defaults = shared.defaults;
          def("Function").field("body", or(def("BlockStatement"), def("Expression")));
          def("ForInStatement").build("left", "right", "body", "each").field("each", Boolean, defaults["false"]);
          def("ForOfStatement").bases("Statement").build("left", "right", "body").field("left", or(def("VariableDeclaration"), def("Expression"))).field("right", def("Expression")).field("body", def("Statement"));
          def("LetStatement").bases("Statement").build("head", "body").field("head", [def("VariableDeclarator")]).field("body", def("Statement"));
          def("LetExpression").bases("Expression").build("head", "body").field("head", [def("VariableDeclarator")]).field("body", def("Expression"));
          def("GraphExpression").bases("Expression").build("index", "expression").field("index", geq(0)).field("expression", def("Literal"));
          def("GraphIndexExpression").bases("Expression").build("index").field("index", geq(0));
        }, {
          "188": 188,
          "200": 200,
          "201": 201
        }],
        195: [function(_dereq_, module, exports) {
          var types = _dereq_(202);
          var getFieldNames = types.getFieldNames;
          var getFieldValue = types.getFieldValue;
          var isArray = types.builtInTypes.array;
          var isObject = types.builtInTypes.object;
          var isDate = types.builtInTypes.Date;
          var isRegExp = types.builtInTypes.RegExp;
          var hasOwn = Object.prototype.hasOwnProperty;
          function astNodesAreEquivalent(a, b, problemPath) {
            if (isArray.check(problemPath)) {
              problemPath.length = 0;
            } else {
              problemPath = null;
            }
            return areEquivalent(a, b, problemPath);
          }
          astNodesAreEquivalent.assert = function(a, b) {
            var problemPath = [];
            if (!astNodesAreEquivalent(a, b, problemPath)) {
              if (problemPath.length === 0) {
                if (a !== b) {
                  throw new Error("Nodes must be equal");
                }
              } else {
                throw new Error("Nodes differ in the following path: " + problemPath.map(subscriptForProperty).join(""));
              }
            }
          };
          function subscriptForProperty(property) {
            if (/[_$a-z][_$a-z0-9]*/i.test(property)) {
              return "." + property;
            }
            return "[" + JSON.stringify(property) + "]";
          }
          function areEquivalent(a, b, problemPath) {
            if (a === b) {
              return true;
            }
            if (isArray.check(a)) {
              return arraysAreEquivalent(a, b, problemPath);
            }
            if (isObject.check(a)) {
              return objectsAreEquivalent(a, b, problemPath);
            }
            if (isDate.check(a)) {
              return isDate.check(b) && (+a === +b);
            }
            if (isRegExp.check(a)) {
              return isRegExp.check(b) && (a.source === b.source && a.global === b.global && a.multiline === b.multiline && a.ignoreCase === b.ignoreCase);
            }
            return a == b;
          }
          function arraysAreEquivalent(a, b, problemPath) {
            isArray.assert(a);
            var aLength = a.length;
            if (!isArray.check(b) || b.length !== aLength) {
              if (problemPath) {
                problemPath.push("length");
              }
              return false;
            }
            for (var i = 0; i < aLength; ++i) {
              if (problemPath) {
                problemPath.push(i);
              }
              if (i in a !== i in b) {
                return false;
              }
              if (!areEquivalent(a[i], b[i], problemPath)) {
                return false;
              }
              if (problemPath) {
                var problemPathTail = problemPath.pop();
                if (problemPathTail !== i) {
                  throw new Error("" + problemPathTail);
                }
              }
            }
            return true;
          }
          function objectsAreEquivalent(a, b, problemPath) {
            isObject.assert(a);
            if (!isObject.check(b)) {
              return false;
            }
            if (a.type !== b.type) {
              if (problemPath) {
                problemPath.push("type");
              }
              return false;
            }
            var aNames = getFieldNames(a);
            var aNameCount = aNames.length;
            var bNames = getFieldNames(b);
            var bNameCount = bNames.length;
            if (aNameCount === bNameCount) {
              for (var i = 0; i < aNameCount; ++i) {
                var name = aNames[i];
                var aChild = getFieldValue(a, name);
                var bChild = getFieldValue(b, name);
                if (problemPath) {
                  problemPath.push(name);
                }
                if (!areEquivalent(aChild, bChild, problemPath)) {
                  return false;
                }
                if (problemPath) {
                  var problemPathTail = problemPath.pop();
                  if (problemPathTail !== name) {
                    throw new Error("" + problemPathTail);
                  }
                }
              }
              return true;
            }
            if (!problemPath) {
              return false;
            }
            var seenNames = Object.create(null);
            for (i = 0; i < aNameCount; ++i) {
              seenNames[aNames[i]] = true;
            }
            for (i = 0; i < bNameCount; ++i) {
              name = bNames[i];
              if (!hasOwn.call(seenNames, name)) {
                problemPath.push(name);
                return false;
              }
              delete seenNames[name];
            }
            for (name in seenNames) {
              problemPath.push(name);
              break;
            }
            return false;
          }
          module.exports = astNodesAreEquivalent;
        }, {"202": 202}],
        196: [function(_dereq_, module, exports) {
          var types = _dereq_(201);
          var n = types.namedTypes;
          var b = types.builders;
          var isNumber = types.builtInTypes.number;
          var isArray = types.builtInTypes.array;
          var Path = _dereq_(198);
          var Scope = _dereq_(199);
          function NodePath(value, parentPath, name) {
            if (!(this instanceof NodePath)) {
              throw new Error("NodePath constructor cannot be invoked without 'new'");
            }
            Path.call(this, value, parentPath, name);
          }
          var NPp = NodePath.prototype = Object.create(Path.prototype, {constructor: {
              value: NodePath,
              enumerable: false,
              writable: true,
              configurable: true
            }});
          Object.defineProperties(NPp, {
            node: {get: function() {
                Object.defineProperty(this, "node", {
                  configurable: true,
                  value: this._computeNode()
                });
                return this.node;
              }},
            parent: {get: function() {
                Object.defineProperty(this, "parent", {
                  configurable: true,
                  value: this._computeParent()
                });
                return this.parent;
              }},
            scope: {get: function() {
                Object.defineProperty(this, "scope", {
                  configurable: true,
                  value: this._computeScope()
                });
                return this.scope;
              }}
          });
          NPp.replace = function() {
            delete this.node;
            delete this.parent;
            delete this.scope;
            return Path.prototype.replace.apply(this, arguments);
          };
          NPp.prune = function() {
            var remainingNodePath = this.parent;
            this.replace();
            return cleanUpNodesAfterPrune(remainingNodePath);
          };
          NPp._computeNode = function() {
            var value = this.value;
            if (n.Node.check(value)) {
              return value;
            }
            var pp = this.parentPath;
            return pp && pp.node || null;
          };
          NPp._computeParent = function() {
            var value = this.value;
            var pp = this.parentPath;
            if (!n.Node.check(value)) {
              while (pp && !n.Node.check(pp.value)) {
                pp = pp.parentPath;
              }
              if (pp) {
                pp = pp.parentPath;
              }
            }
            while (pp && !n.Node.check(pp.value)) {
              pp = pp.parentPath;
            }
            return pp || null;
          };
          NPp._computeScope = function() {
            var value = this.value;
            var pp = this.parentPath;
            var scope = pp && pp.scope;
            if (n.Node.check(value) && Scope.isEstablishedBy(value)) {
              scope = new Scope(this, scope);
            }
            return scope || null;
          };
          NPp.getValueProperty = function(name) {
            return types.getFieldValue(this.value, name);
          };
          NPp.needsParens = function(assumeExpressionContext) {
            var pp = this.parentPath;
            if (!pp) {
              return false;
            }
            var node = this.value;
            if (!n.Expression.check(node)) {
              return false;
            }
            if (node.type === "Identifier") {
              return false;
            }
            while (!n.Node.check(pp.value)) {
              pp = pp.parentPath;
              if (!pp) {
                return false;
              }
            }
            var parent = pp.value;
            switch (node.type) {
              case "UnaryExpression":
              case "SpreadElement":
              case "SpreadProperty":
                return parent.type === "MemberExpression" && this.name === "object" && parent.object === node;
              case "BinaryExpression":
              case "LogicalExpression":
                switch (parent.type) {
                  case "CallExpression":
                    return this.name === "callee" && parent.callee === node;
                  case "UnaryExpression":
                  case "SpreadElement":
                  case "SpreadProperty":
                    return true;
                  case "MemberExpression":
                    return this.name === "object" && parent.object === node;
                  case "BinaryExpression":
                  case "LogicalExpression":
                    var po = parent.operator;
                    var pp = PRECEDENCE[po];
                    var no = node.operator;
                    var np = PRECEDENCE[no];
                    if (pp > np) {
                      return true;
                    }
                    if (pp === np && this.name === "right") {
                      if (parent.right !== node) {
                        throw new Error("Nodes must be equal");
                      }
                      return true;
                    }
                  default:
                    return false;
                }
              case "SequenceExpression":
                switch (parent.type) {
                  case "ForStatement":
                    return false;
                  case "ExpressionStatement":
                    return this.name !== "expression";
                  default:
                    return true;
                }
              case "YieldExpression":
                switch (parent.type) {
                  case "BinaryExpression":
                  case "LogicalExpression":
                  case "UnaryExpression":
                  case "SpreadElement":
                  case "SpreadProperty":
                  case "CallExpression":
                  case "MemberExpression":
                  case "NewExpression":
                  case "ConditionalExpression":
                  case "YieldExpression":
                    return true;
                  default:
                    return false;
                }
              case "Literal":
                return parent.type === "MemberExpression" && isNumber.check(node.value) && this.name === "object" && parent.object === node;
              case "AssignmentExpression":
              case "ConditionalExpression":
                switch (parent.type) {
                  case "UnaryExpression":
                  case "SpreadElement":
                  case "SpreadProperty":
                  case "BinaryExpression":
                  case "LogicalExpression":
                    return true;
                  case "CallExpression":
                    return this.name === "callee" && parent.callee === node;
                  case "ConditionalExpression":
                    return this.name === "test" && parent.test === node;
                  case "MemberExpression":
                    return this.name === "object" && parent.object === node;
                  default:
                    return false;
                }
              default:
                if (parent.type === "NewExpression" && this.name === "callee" && parent.callee === node) {
                  return containsCallExpression(node);
                }
            }
            if (assumeExpressionContext !== true && !this.canBeFirstInStatement() && this.firstInStatement())
              return true;
            return false;
          };
          function isBinary(node) {
            return n.BinaryExpression.check(node) || n.LogicalExpression.check(node);
          }
          function isUnaryLike(node) {
            return n.UnaryExpression.check(node) || (n.SpreadElement && n.SpreadElement.check(node)) || (n.SpreadProperty && n.SpreadProperty.check(node));
          }
          var PRECEDENCE = {};
          [["||"], ["&&"], ["|"], ["^"], ["&"], ["==", "===", "!=", "!=="], ["<", ">", "<=", ">=", "in", "instanceof"], [">>", "<<", ">>>"], ["+", "-"], ["*", "/", "%"]].forEach(function(tier, i) {
            tier.forEach(function(op) {
              PRECEDENCE[op] = i;
            });
          });
          function containsCallExpression(node) {
            if (n.CallExpression.check(node)) {
              return true;
            }
            if (isArray.check(node)) {
              return node.some(containsCallExpression);
            }
            if (n.Node.check(node)) {
              return types.someField(node, function(name, child) {
                return containsCallExpression(child);
              });
            }
            return false;
          }
          NPp.canBeFirstInStatement = function() {
            var node = this.node;
            return !n.FunctionExpression.check(node) && !n.ObjectExpression.check(node);
          };
          NPp.firstInStatement = function() {
            return firstInStatement(this);
          };
          function firstInStatement(path) {
            for (var node,
                parent; path.parent; path = path.parent) {
              node = path.node;
              parent = path.parent.node;
              if (n.BlockStatement.check(parent) && path.parent.name === "body" && path.name === 0) {
                if (parent.body[0] !== node) {
                  throw new Error("Nodes must be equal");
                }
                return true;
              }
              if (n.ExpressionStatement.check(parent) && path.name === "expression") {
                if (parent.expression !== node) {
                  throw new Error("Nodes must be equal");
                }
                return true;
              }
              if (n.SequenceExpression.check(parent) && path.parent.name === "expressions" && path.name === 0) {
                if (parent.expressions[0] !== node) {
                  throw new Error("Nodes must be equal");
                }
                continue;
              }
              if (n.CallExpression.check(parent) && path.name === "callee") {
                if (parent.callee !== node) {
                  throw new Error("Nodes must be equal");
                }
                continue;
              }
              if (n.MemberExpression.check(parent) && path.name === "object") {
                if (parent.object !== node) {
                  throw new Error("Nodes must be equal");
                }
                continue;
              }
              if (n.ConditionalExpression.check(parent) && path.name === "test") {
                if (parent.test !== node) {
                  throw new Error("Nodes must be equal");
                }
                continue;
              }
              if (isBinary(parent) && path.name === "left") {
                if (parent.left !== node) {
                  throw new Error("Nodes must be equal");
                }
                continue;
              }
              if (n.UnaryExpression.check(parent) && !parent.prefix && path.name === "argument") {
                if (parent.argument !== node) {
                  throw new Error("Nodes must be equal");
                }
                continue;
              }
              return false;
            }
            return true;
          }
          function cleanUpNodesAfterPrune(remainingNodePath) {
            if (n.VariableDeclaration.check(remainingNodePath.node)) {
              var declarations = remainingNodePath.get('declarations').value;
              if (!declarations || declarations.length === 0) {
                return remainingNodePath.prune();
              }
            } else if (n.ExpressionStatement.check(remainingNodePath.node)) {
              if (!remainingNodePath.get('expression').value) {
                return remainingNodePath.prune();
              }
            } else if (n.IfStatement.check(remainingNodePath.node)) {
              cleanUpIfStatementAfterPrune(remainingNodePath);
            }
            return remainingNodePath;
          }
          function cleanUpIfStatementAfterPrune(ifStatement) {
            var testExpression = ifStatement.get('test').value;
            var alternate = ifStatement.get('alternate').value;
            var consequent = ifStatement.get('consequent').value;
            if (!consequent && !alternate) {
              var testExpressionStatement = b.expressionStatement(testExpression);
              ifStatement.replace(testExpressionStatement);
            } else if (!consequent && alternate) {
              var negatedTestExpression = b.unaryExpression('!', testExpression, true);
              if (n.UnaryExpression.check(testExpression) && testExpression.operator === '!') {
                negatedTestExpression = testExpression.argument;
              }
              ifStatement.get("test").replace(negatedTestExpression);
              ifStatement.get("consequent").replace(alternate);
              ifStatement.get("alternate").replace();
            }
          }
          module.exports = NodePath;
        }, {
          "198": 198,
          "199": 199,
          "201": 201
        }],
        197: [function(_dereq_, module, exports) {
          var types = _dereq_(201);
          var NodePath = _dereq_(196);
          var Printable = types.namedTypes.Printable;
          var isArray = types.builtInTypes.array;
          var isObject = types.builtInTypes.object;
          var isFunction = types.builtInTypes.function;
          var hasOwn = Object.prototype.hasOwnProperty;
          var undefined;
          function PathVisitor() {
            if (!(this instanceof PathVisitor)) {
              throw new Error("PathVisitor constructor cannot be invoked without 'new'");
            }
            this._reusableContextStack = [];
            this._methodNameTable = computeMethodNameTable(this);
            this._shouldVisitComments = hasOwn.call(this._methodNameTable, "Block") || hasOwn.call(this._methodNameTable, "Line");
            this.Context = makeContextConstructor(this);
            this._visiting = false;
            this._changeReported = false;
          }
          function computeMethodNameTable(visitor) {
            var typeNames = Object.create(null);
            for (var methodName in visitor) {
              if (/^visit[A-Z]/.test(methodName)) {
                typeNames[methodName.slice("visit".length)] = true;
              }
            }
            var supertypeTable = types.computeSupertypeLookupTable(typeNames);
            var methodNameTable = Object.create(null);
            var typeNames = Object.keys(supertypeTable);
            var typeNameCount = typeNames.length;
            for (var i = 0; i < typeNameCount; ++i) {
              var typeName = typeNames[i];
              methodName = "visit" + supertypeTable[typeName];
              if (isFunction.check(visitor[methodName])) {
                methodNameTable[typeName] = methodName;
              }
            }
            return methodNameTable;
          }
          PathVisitor.fromMethodsObject = function fromMethodsObject(methods) {
            if (methods instanceof PathVisitor) {
              return methods;
            }
            if (!isObject.check(methods)) {
              return new PathVisitor;
            }
            function Visitor() {
              if (!(this instanceof Visitor)) {
                throw new Error("Visitor constructor cannot be invoked without 'new'");
              }
              PathVisitor.call(this);
            }
            var Vp = Visitor.prototype = Object.create(PVp);
            Vp.constructor = Visitor;
            extend(Vp, methods);
            extend(Visitor, PathVisitor);
            isFunction.assert(Visitor.fromMethodsObject);
            isFunction.assert(Visitor.visit);
            return new Visitor;
          };
          function extend(target, source) {
            for (var property in source) {
              if (hasOwn.call(source, property)) {
                target[property] = source[property];
              }
            }
            return target;
          }
          PathVisitor.visit = function visit(node, methods) {
            return PathVisitor.fromMethodsObject(methods).visit(node);
          };
          var PVp = PathVisitor.prototype;
          PVp.visit = function() {
            if (this._visiting) {
              throw new Error("Recursively calling visitor.visit(path) resets visitor state. " + "Try this.visit(path) or this.traverse(path) instead.");
            }
            this._visiting = true;
            this._changeReported = false;
            this._abortRequested = false;
            var argc = arguments.length;
            var args = new Array(argc);
            for (var i = 0; i < argc; ++i) {
              args[i] = arguments[i];
            }
            if (!(args[0] instanceof NodePath)) {
              args[0] = new NodePath({root: args[0]}).get("root");
            }
            this.reset.apply(this, args);
            try {
              var root = this.visitWithoutReset(args[0]);
              var didNotThrow = true;
            } finally {
              this._visiting = false;
              if (!didNotThrow && this._abortRequested) {
                return args[0].value;
              }
            }
            return root;
          };
          PVp.AbortRequest = function AbortRequest() {};
          PVp.abort = function() {
            var visitor = this;
            visitor._abortRequested = true;
            var request = new visitor.AbortRequest();
            request.cancel = function() {
              visitor._abortRequested = false;
            };
            throw request;
          };
          PVp.reset = function(path) {};
          PVp.visitWithoutReset = function(path) {
            if (this instanceof this.Context) {
              return this.visitor.visitWithoutReset(path);
            }
            if (!(path instanceof NodePath)) {
              throw new Error("");
            }
            var value = path.value;
            var methodName = value && typeof value === "object" && typeof value.type === "string" && this._methodNameTable[value.type];
            if (methodName) {
              var context = this.acquireContext(path);
              try {
                return context.invokeVisitorMethod(methodName);
              } finally {
                this.releaseContext(context);
              }
            } else {
              return visitChildren(path, this);
            }
          };
          function visitChildren(path, visitor) {
            if (!(path instanceof NodePath)) {
              throw new Error("");
            }
            if (!(visitor instanceof PathVisitor)) {
              throw new Error("");
            }
            var value = path.value;
            if (isArray.check(value)) {
              path.each(visitor.visitWithoutReset, visitor);
            } else if (!isObject.check(value)) {} else {
              var childNames = types.getFieldNames(value);
              if (visitor._shouldVisitComments && value.comments && childNames.indexOf("comments") < 0) {
                childNames.push("comments");
              }
              var childCount = childNames.length;
              var childPaths = [];
              for (var i = 0; i < childCount; ++i) {
                var childName = childNames[i];
                if (!hasOwn.call(value, childName)) {
                  value[childName] = types.getFieldValue(value, childName);
                }
                childPaths.push(path.get(childName));
              }
              for (var i = 0; i < childCount; ++i) {
                visitor.visitWithoutReset(childPaths[i]);
              }
            }
            return path.value;
          }
          PVp.acquireContext = function(path) {
            if (this._reusableContextStack.length === 0) {
              return new this.Context(path);
            }
            return this._reusableContextStack.pop().reset(path);
          };
          PVp.releaseContext = function(context) {
            if (!(context instanceof this.Context)) {
              throw new Error("");
            }
            this._reusableContextStack.push(context);
            context.currentPath = null;
          };
          PVp.reportChanged = function() {
            this._changeReported = true;
          };
          PVp.wasChangeReported = function() {
            return this._changeReported;
          };
          function makeContextConstructor(visitor) {
            function Context(path) {
              if (!(this instanceof Context)) {
                throw new Error("");
              }
              if (!(this instanceof PathVisitor)) {
                throw new Error("");
              }
              if (!(path instanceof NodePath)) {
                throw new Error("");
              }
              Object.defineProperty(this, "visitor", {
                value: visitor,
                writable: false,
                enumerable: true,
                configurable: false
              });
              this.currentPath = path;
              this.needToCallTraverse = true;
              Object.seal(this);
            }
            if (!(visitor instanceof PathVisitor)) {
              throw new Error("");
            }
            var Cp = Context.prototype = Object.create(visitor);
            Cp.constructor = Context;
            extend(Cp, sharedContextProtoMethods);
            return Context;
          }
          var sharedContextProtoMethods = Object.create(null);
          sharedContextProtoMethods.reset = function reset(path) {
            if (!(this instanceof this.Context)) {
              throw new Error("");
            }
            if (!(path instanceof NodePath)) {
              throw new Error("");
            }
            this.currentPath = path;
            this.needToCallTraverse = true;
            return this;
          };
          sharedContextProtoMethods.invokeVisitorMethod = function invokeVisitorMethod(methodName) {
            if (!(this instanceof this.Context)) {
              throw new Error("");
            }
            if (!(this.currentPath instanceof NodePath)) {
              throw new Error("");
            }
            var result = this.visitor[methodName].call(this, this.currentPath);
            if (result === false) {
              this.needToCallTraverse = false;
            } else if (result !== undefined) {
              this.currentPath = this.currentPath.replace(result)[0];
              if (this.needToCallTraverse) {
                this.traverse(this.currentPath);
              }
            }
            if (this.needToCallTraverse !== false) {
              throw new Error("Must either call this.traverse or return false in " + methodName);
            }
            var path = this.currentPath;
            return path && path.value;
          };
          sharedContextProtoMethods.traverse = function traverse(path, newVisitor) {
            if (!(this instanceof this.Context)) {
              throw new Error("");
            }
            if (!(path instanceof NodePath)) {
              throw new Error("");
            }
            if (!(this.currentPath instanceof NodePath)) {
              throw new Error("");
            }
            this.needToCallTraverse = false;
            return visitChildren(path, PathVisitor.fromMethodsObject(newVisitor || this.visitor));
          };
          sharedContextProtoMethods.visit = function visit(path, newVisitor) {
            if (!(this instanceof this.Context)) {
              throw new Error("");
            }
            if (!(path instanceof NodePath)) {
              throw new Error("");
            }
            if (!(this.currentPath instanceof NodePath)) {
              throw new Error("");
            }
            this.needToCallTraverse = false;
            return PathVisitor.fromMethodsObject(newVisitor || this.visitor).visitWithoutReset(path);
          };
          sharedContextProtoMethods.reportChanged = function reportChanged() {
            this.visitor.reportChanged();
          };
          sharedContextProtoMethods.abort = function abort() {
            this.needToCallTraverse = false;
            this.visitor.abort();
          };
          module.exports = PathVisitor;
        }, {
          "196": 196,
          "201": 201
        }],
        198: [function(_dereq_, module, exports) {
          var Op = Object.prototype;
          var hasOwn = Op.hasOwnProperty;
          var types = _dereq_(201);
          var isArray = types.builtInTypes.array;
          var isNumber = types.builtInTypes.number;
          var Ap = Array.prototype;
          var slice = Ap.slice;
          var map = Ap.map;
          function Path(value, parentPath, name) {
            if (!(this instanceof Path)) {
              throw new Error("Path constructor cannot be invoked without 'new'");
            }
            if (parentPath) {
              if (!(parentPath instanceof Path)) {
                throw new Error("");
              }
            } else {
              parentPath = null;
              name = null;
            }
            this.value = value;
            this.parentPath = parentPath;
            this.name = name;
            this.__childCache = null;
          }
          var Pp = Path.prototype;
          function getChildCache(path) {
            return path.__childCache || (path.__childCache = Object.create(null));
          }
          function getChildPath(path, name) {
            var cache = getChildCache(path);
            var actualChildValue = path.getValueProperty(name);
            var childPath = cache[name];
            if (!hasOwn.call(cache, name) || childPath.value !== actualChildValue) {
              childPath = cache[name] = new path.constructor(actualChildValue, path, name);
            }
            return childPath;
          }
          Pp.getValueProperty = function getValueProperty(name) {
            return this.value[name];
          };
          Pp.get = function get(name) {
            var path = this;
            var names = arguments;
            var count = names.length;
            for (var i = 0; i < count; ++i) {
              path = getChildPath(path, names[i]);
            }
            return path;
          };
          Pp.each = function each(callback, context) {
            var childPaths = [];
            var len = this.value.length;
            var i = 0;
            for (var i = 0; i < len; ++i) {
              if (hasOwn.call(this.value, i)) {
                childPaths[i] = this.get(i);
              }
            }
            context = context || this;
            for (i = 0; i < len; ++i) {
              if (hasOwn.call(childPaths, i)) {
                callback.call(context, childPaths[i]);
              }
            }
          };
          Pp.map = function map(callback, context) {
            var result = [];
            this.each(function(childPath) {
              result.push(callback.call(this, childPath));
            }, context);
            return result;
          };
          Pp.filter = function filter(callback, context) {
            var result = [];
            this.each(function(childPath) {
              if (callback.call(this, childPath)) {
                result.push(childPath);
              }
            }, context);
            return result;
          };
          function emptyMoves() {}
          function getMoves(path, offset, start, end) {
            isArray.assert(path.value);
            if (offset === 0) {
              return emptyMoves;
            }
            var length = path.value.length;
            if (length < 1) {
              return emptyMoves;
            }
            var argc = arguments.length;
            if (argc === 2) {
              start = 0;
              end = length;
            } else if (argc === 3) {
              start = Math.max(start, 0);
              end = length;
            } else {
              start = Math.max(start, 0);
              end = Math.min(end, length);
            }
            isNumber.assert(start);
            isNumber.assert(end);
            var moves = Object.create(null);
            var cache = getChildCache(path);
            for (var i = start; i < end; ++i) {
              if (hasOwn.call(path.value, i)) {
                var childPath = path.get(i);
                if (childPath.name !== i) {
                  throw new Error("");
                }
                var newIndex = i + offset;
                childPath.name = newIndex;
                moves[newIndex] = childPath;
                delete cache[i];
              }
            }
            delete cache.length;
            return function() {
              for (var newIndex in moves) {
                var childPath = moves[newIndex];
                if (childPath.name !== +newIndex) {
                  throw new Error("");
                }
                cache[newIndex] = childPath;
                path.value[newIndex] = childPath.value;
              }
            };
          }
          Pp.shift = function shift() {
            var move = getMoves(this, -1);
            var result = this.value.shift();
            move();
            return result;
          };
          Pp.unshift = function unshift(node) {
            var move = getMoves(this, arguments.length);
            var result = this.value.unshift.apply(this.value, arguments);
            move();
            return result;
          };
          Pp.push = function push(node) {
            isArray.assert(this.value);
            delete getChildCache(this).length;
            return this.value.push.apply(this.value, arguments);
          };
          Pp.pop = function pop() {
            isArray.assert(this.value);
            var cache = getChildCache(this);
            delete cache[this.value.length - 1];
            delete cache.length;
            return this.value.pop();
          };
          Pp.insertAt = function insertAt(index, node) {
            var argc = arguments.length;
            var move = getMoves(this, argc - 1, index);
            if (move === emptyMoves) {
              return this;
            }
            index = Math.max(index, 0);
            for (var i = 1; i < argc; ++i) {
              this.value[index + i - 1] = arguments[i];
            }
            move();
            return this;
          };
          Pp.insertBefore = function insertBefore(node) {
            var pp = this.parentPath;
            var argc = arguments.length;
            var insertAtArgs = [this.name];
            for (var i = 0; i < argc; ++i) {
              insertAtArgs.push(arguments[i]);
            }
            return pp.insertAt.apply(pp, insertAtArgs);
          };
          Pp.insertAfter = function insertAfter(node) {
            var pp = this.parentPath;
            var argc = arguments.length;
            var insertAtArgs = [this.name + 1];
            for (var i = 0; i < argc; ++i) {
              insertAtArgs.push(arguments[i]);
            }
            return pp.insertAt.apply(pp, insertAtArgs);
          };
          function repairRelationshipWithParent(path) {
            if (!(path instanceof Path)) {
              throw new Error("");
            }
            var pp = path.parentPath;
            if (!pp) {
              return path;
            }
            var parentValue = pp.value;
            var parentCache = getChildCache(pp);
            if (parentValue[path.name] === path.value) {
              parentCache[path.name] = path;
            } else if (isArray.check(parentValue)) {
              var i = parentValue.indexOf(path.value);
              if (i >= 0) {
                parentCache[path.name = i] = path;
              }
            } else {
              parentValue[path.name] = path.value;
              parentCache[path.name] = path;
            }
            if (parentValue[path.name] !== path.value) {
              throw new Error("");
            }
            if (path.parentPath.get(path.name) !== path) {
              throw new Error("");
            }
            return path;
          }
          Pp.replace = function replace(replacement) {
            var results = [];
            var parentValue = this.parentPath.value;
            var parentCache = getChildCache(this.parentPath);
            var count = arguments.length;
            repairRelationshipWithParent(this);
            if (isArray.check(parentValue)) {
              var originalLength = parentValue.length;
              var move = getMoves(this.parentPath, count - 1, this.name + 1);
              var spliceArgs = [this.name, 1];
              for (var i = 0; i < count; ++i) {
                spliceArgs.push(arguments[i]);
              }
              var splicedOut = parentValue.splice.apply(parentValue, spliceArgs);
              if (splicedOut[0] !== this.value) {
                throw new Error("");
              }
              if (parentValue.length !== (originalLength - 1 + count)) {
                throw new Error("");
              }
              move();
              if (count === 0) {
                delete this.value;
                delete parentCache[this.name];
                this.__childCache = null;
              } else {
                if (parentValue[this.name] !== replacement) {
                  throw new Error("");
                }
                if (this.value !== replacement) {
                  this.value = replacement;
                  this.__childCache = null;
                }
                for (i = 0; i < count; ++i) {
                  results.push(this.parentPath.get(this.name + i));
                }
                if (results[0] !== this) {
                  throw new Error("");
                }
              }
            } else if (count === 1) {
              if (this.value !== replacement) {
                this.__childCache = null;
              }
              this.value = parentValue[this.name] = replacement;
              results.push(this);
            } else if (count === 0) {
              delete parentValue[this.name];
              delete this.value;
              this.__childCache = null;
            } else {
              throw new Error("Could not replace path");
            }
            return results;
          };
          module.exports = Path;
        }, {"201": 201}],
        199: [function(_dereq_, module, exports) {
          var types = _dereq_(201);
          var Type = types.Type;
          var namedTypes = types.namedTypes;
          var Node = namedTypes.Node;
          var Expression = namedTypes.Expression;
          var isArray = types.builtInTypes.array;
          var hasOwn = Object.prototype.hasOwnProperty;
          var b = types.builders;
          function Scope(path, parentScope) {
            if (!(this instanceof Scope)) {
              throw new Error("Scope constructor cannot be invoked without 'new'");
            }
            if (!(path instanceof _dereq_(196))) {
              throw new Error("");
            }
            ScopeType.assert(path.value);
            var depth;
            if (parentScope) {
              if (!(parentScope instanceof Scope)) {
                throw new Error("");
              }
              depth = parentScope.depth + 1;
            } else {
              parentScope = null;
              depth = 0;
            }
            Object.defineProperties(this, {
              path: {value: path},
              node: {value: path.value},
              isGlobal: {
                value: !parentScope,
                enumerable: true
              },
              depth: {value: depth},
              parent: {value: parentScope},
              bindings: {value: {}}
            });
          }
          var scopeTypes = [namedTypes.Program, namedTypes.Function, namedTypes.CatchClause];
          var ScopeType = Type.or.apply(Type, scopeTypes);
          Scope.isEstablishedBy = function(node) {
            return ScopeType.check(node);
          };
          var Sp = Scope.prototype;
          Sp.didScan = false;
          Sp.declares = function(name) {
            this.scan();
            return hasOwn.call(this.bindings, name);
          };
          Sp.declareTemporary = function(prefix) {
            if (prefix) {
              if (!/^[a-z$_]/i.test(prefix)) {
                throw new Error("");
              }
            } else {
              prefix = "t$";
            }
            prefix += this.depth.toString(36) + "$";
            this.scan();
            var index = 0;
            while (this.declares(prefix + index)) {
              ++index;
            }
            var name = prefix + index;
            return this.bindings[name] = types.builders.identifier(name);
          };
          Sp.injectTemporary = function(identifier, init) {
            identifier || (identifier = this.declareTemporary());
            var bodyPath = this.path.get("body");
            if (namedTypes.BlockStatement.check(bodyPath.value)) {
              bodyPath = bodyPath.get("body");
            }
            bodyPath.unshift(b.variableDeclaration("var", [b.variableDeclarator(identifier, init || null)]));
            return identifier;
          };
          Sp.scan = function(force) {
            if (force || !this.didScan) {
              for (var name in this.bindings) {
                delete this.bindings[name];
              }
              scanScope(this.path, this.bindings);
              this.didScan = true;
            }
          };
          Sp.getBindings = function() {
            this.scan();
            return this.bindings;
          };
          function scanScope(path, bindings) {
            var node = path.value;
            ScopeType.assert(node);
            if (namedTypes.CatchClause.check(node)) {
              addPattern(path.get("param"), bindings);
            } else {
              recursiveScanScope(path, bindings);
            }
          }
          function recursiveScanScope(path, bindings) {
            var node = path.value;
            if (path.parent && namedTypes.FunctionExpression.check(path.parent.node) && path.parent.node.id) {
              addPattern(path.parent.get("id"), bindings);
            }
            if (!node) {} else if (isArray.check(node)) {
              path.each(function(childPath) {
                recursiveScanChild(childPath, bindings);
              });
            } else if (namedTypes.Function.check(node)) {
              path.get("params").each(function(paramPath) {
                addPattern(paramPath, bindings);
              });
              recursiveScanChild(path.get("body"), bindings);
            } else if (namedTypes.VariableDeclarator.check(node)) {
              addPattern(path.get("id"), bindings);
              recursiveScanChild(path.get("init"), bindings);
            } else if (node.type === "ImportSpecifier" || node.type === "ImportNamespaceSpecifier" || node.type === "ImportDefaultSpecifier") {
              addPattern(path.get(node.local ? "local" : node.name ? "name" : "id"), bindings);
            } else if (Node.check(node) && !Expression.check(node)) {
              types.eachField(node, function(name, child) {
                var childPath = path.get(name);
                if (childPath.value !== child) {
                  throw new Error("");
                }
                recursiveScanChild(childPath, bindings);
              });
            }
          }
          function recursiveScanChild(path, bindings) {
            var node = path.value;
            if (!node || Expression.check(node)) {} else if (namedTypes.FunctionDeclaration.check(node)) {
              addPattern(path.get("id"), bindings);
            } else if (namedTypes.ClassDeclaration && namedTypes.ClassDeclaration.check(node)) {
              addPattern(path.get("id"), bindings);
            } else if (ScopeType.check(node)) {
              if (namedTypes.CatchClause.check(node)) {
                var catchParamName = node.param.name;
                var hadBinding = hasOwn.call(bindings, catchParamName);
                recursiveScanScope(path.get("body"), bindings);
                if (!hadBinding) {
                  delete bindings[catchParamName];
                }
              }
            } else {
              recursiveScanScope(path, bindings);
            }
          }
          function addPattern(patternPath, bindings) {
            var pattern = patternPath.value;
            namedTypes.Pattern.assert(pattern);
            if (namedTypes.Identifier.check(pattern)) {
              if (hasOwn.call(bindings, pattern.name)) {
                bindings[pattern.name].push(patternPath);
              } else {
                bindings[pattern.name] = [patternPath];
              }
            } else if (namedTypes.ObjectPattern && namedTypes.ObjectPattern.check(pattern)) {
              patternPath.get('properties').each(function(propertyPath) {
                var property = propertyPath.value;
                if (namedTypes.Pattern.check(property)) {
                  addPattern(propertyPath, bindings);
                } else if (namedTypes.Property.check(property)) {
                  addPattern(propertyPath.get('value'), bindings);
                } else if (namedTypes.SpreadProperty && namedTypes.SpreadProperty.check(property)) {
                  addPattern(propertyPath.get('argument'), bindings);
                }
              });
            } else if (namedTypes.ArrayPattern && namedTypes.ArrayPattern.check(pattern)) {
              patternPath.get('elements').each(function(elementPath) {
                var element = elementPath.value;
                if (namedTypes.Pattern.check(element)) {
                  addPattern(elementPath, bindings);
                } else if (namedTypes.SpreadElement && namedTypes.SpreadElement.check(element)) {
                  addPattern(elementPath.get("argument"), bindings);
                }
              });
            } else if (namedTypes.PropertyPattern && namedTypes.PropertyPattern.check(pattern)) {
              addPattern(patternPath.get('pattern'), bindings);
            } else if ((namedTypes.SpreadElementPattern && namedTypes.SpreadElementPattern.check(pattern)) || (namedTypes.SpreadPropertyPattern && namedTypes.SpreadPropertyPattern.check(pattern))) {
              addPattern(patternPath.get('argument'), bindings);
            }
          }
          Sp.lookup = function(name) {
            for (var scope = this; scope; scope = scope.parent)
              if (scope.declares(name))
                break;
            return scope;
          };
          Sp.getGlobalScope = function() {
            var scope = this;
            while (!scope.isGlobal)
              scope = scope.parent;
            return scope;
          };
          module.exports = Scope;
        }, {
          "196": 196,
          "201": 201
        }],
        200: [function(_dereq_, module, exports) {
          var types = _dereq_(201);
          var Type = types.Type;
          var builtin = types.builtInTypes;
          var isNumber = builtin.number;
          exports.geq = function(than) {
            return new Type(function(value) {
              return isNumber.check(value) && value >= than;
            }, isNumber + " >= " + than);
          };
          exports.defaults = {
            "null": function() {
              return null;
            },
            "emptyArray": function() {
              return [];
            },
            "false": function() {
              return false;
            },
            "true": function() {
              return true;
            },
            "undefined": function() {}
          };
          var naiveIsPrimitive = Type.or(builtin.string, builtin.number, builtin.boolean, builtin.null, builtin.undefined);
          exports.isPrimitive = new Type(function(value) {
            if (value === null)
              return true;
            var type = typeof value;
            return !(type === "object" || type === "function");
          }, naiveIsPrimitive.toString());
        }, {"201": 201}],
        201: [function(_dereq_, module, exports) {
          var Ap = Array.prototype;
          var slice = Ap.slice;
          var map = Ap.map;
          var each = Ap.forEach;
          var Op = Object.prototype;
          var objToStr = Op.toString;
          var funObjStr = objToStr.call(function() {});
          var strObjStr = objToStr.call("");
          var hasOwn = Op.hasOwnProperty;
          function Type(check, name) {
            var self = this;
            if (!(self instanceof Type)) {
              throw new Error("Type constructor cannot be invoked without 'new'");
            }
            if (objToStr.call(check) !== funObjStr) {
              throw new Error(check + " is not a function");
            }
            var nameObjStr = objToStr.call(name);
            if (!(nameObjStr === funObjStr || nameObjStr === strObjStr)) {
              throw new Error(name + " is neither a function nor a string");
            }
            Object.defineProperties(self, {
              name: {value: name},
              check: {value: function(value, deep) {
                  var result = check.call(self, value, deep);
                  if (!result && deep && objToStr.call(deep) === funObjStr)
                    deep(self, value);
                  return result;
                }}
            });
          }
          var Tp = Type.prototype;
          exports.Type = Type;
          Tp.assert = function(value, deep) {
            if (!this.check(value, deep)) {
              var str = shallowStringify(value);
              throw new Error(str + " does not match type " + this);
            }
            return true;
          };
          function shallowStringify(value) {
            if (isObject.check(value))
              return "{" + Object.keys(value).map(function(key) {
                return key + ": " + value[key];
              }).join(", ") + "}";
            if (isArray.check(value))
              return "[" + value.map(shallowStringify).join(", ") + "]";
            return JSON.stringify(value);
          }
          Tp.toString = function() {
            var name = this.name;
            if (isString.check(name))
              return name;
            if (isFunction.check(name))
              return name.call(this) + "";
            return name + " type";
          };
          var builtInCtorFns = [];
          var builtInCtorTypes = [];
          var builtInTypes = {};
          exports.builtInTypes = builtInTypes;
          function defBuiltInType(example, name) {
            var objStr = objToStr.call(example);
            var type = new Type(function(value) {
              return objToStr.call(value) === objStr;
            }, name);
            builtInTypes[name] = type;
            if (example && typeof example.constructor === "function") {
              builtInCtorFns.push(example.constructor);
              builtInCtorTypes.push(type);
            }
            return type;
          }
          var isString = defBuiltInType("truthy", "string");
          var isFunction = defBuiltInType(function() {}, "function");
          var isArray = defBuiltInType([], "array");
          var isObject = defBuiltInType({}, "object");
          var isRegExp = defBuiltInType(/./, "RegExp");
          var isDate = defBuiltInType(new Date, "Date");
          var isNumber = defBuiltInType(3, "number");
          var isBoolean = defBuiltInType(true, "boolean");
          var isNull = defBuiltInType(null, "null");
          var isUndefined = defBuiltInType(void 0, "undefined");
          function toType(from, name) {
            if (from instanceof Type)
              return from;
            if (from instanceof Def)
              return from.type;
            if (isArray.check(from))
              return Type.fromArray(from);
            if (isObject.check(from))
              return Type.fromObject(from);
            if (isFunction.check(from)) {
              var bicfIndex = builtInCtorFns.indexOf(from);
              if (bicfIndex >= 0) {
                return builtInCtorTypes[bicfIndex];
              }
              return new Type(from, name);
            }
            return new Type(function(value) {
              return value === from;
            }, isUndefined.check(name) ? function() {
              return from + "";
            } : name);
          }
          Type.or = function() {
            var types = [];
            var len = arguments.length;
            for (var i = 0; i < len; ++i)
              types.push(toType(arguments[i]));
            return new Type(function(value, deep) {
              for (var i = 0; i < len; ++i)
                if (types[i].check(value, deep))
                  return true;
              return false;
            }, function() {
              return types.join(" | ");
            });
          };
          Type.fromArray = function(arr) {
            if (!isArray.check(arr)) {
              throw new Error("");
            }
            if (arr.length !== 1) {
              throw new Error("only one element type is permitted for typed arrays");
            }
            return toType(arr[0]).arrayOf();
          };
          Tp.arrayOf = function() {
            var elemType = this;
            return new Type(function(value, deep) {
              return isArray.check(value) && value.every(function(elem) {
                return elemType.check(elem, deep);
              });
            }, function() {
              return "[" + elemType + "]";
            });
          };
          Type.fromObject = function(obj) {
            var fields = Object.keys(obj).map(function(name) {
              return new Field(name, obj[name]);
            });
            return new Type(function(value, deep) {
              return isObject.check(value) && fields.every(function(field) {
                return field.type.check(value[field.name], deep);
              });
            }, function() {
              return "{ " + fields.join(", ") + " }";
            });
          };
          function Field(name, type, defaultFn, hidden) {
            var self = this;
            if (!(self instanceof Field)) {
              throw new Error("Field constructor cannot be invoked without 'new'");
            }
            isString.assert(name);
            type = toType(type);
            var properties = {
              name: {value: name},
              type: {value: type},
              hidden: {value: !!hidden}
            };
            if (isFunction.check(defaultFn)) {
              properties.defaultFn = {value: defaultFn};
            }
            Object.defineProperties(self, properties);
          }
          var Fp = Field.prototype;
          Fp.toString = function() {
            return JSON.stringify(this.name) + ": " + this.type;
          };
          Fp.getValue = function(obj) {
            var value = obj[this.name];
            if (!isUndefined.check(value))
              return value;
            if (this.defaultFn)
              value = this.defaultFn.call(obj);
            return value;
          };
          Type.def = function(typeName) {
            isString.assert(typeName);
            return hasOwn.call(defCache, typeName) ? defCache[typeName] : defCache[typeName] = new Def(typeName);
          };
          var defCache = Object.create(null);
          function Def(typeName) {
            var self = this;
            if (!(self instanceof Def)) {
              throw new Error("Def constructor cannot be invoked without 'new'");
            }
            Object.defineProperties(self, {
              typeName: {value: typeName},
              baseNames: {value: []},
              ownFields: {value: Object.create(null)},
              allSupertypes: {value: Object.create(null)},
              supertypeList: {value: []},
              allFields: {value: Object.create(null)},
              fieldNames: {value: []},
              type: {value: new Type(function(value, deep) {
                  return self.check(value, deep);
                }, typeName)}
            });
          }
          Def.fromValue = function(value) {
            if (value && typeof value === "object") {
              var type = value.type;
              if (typeof type === "string" && hasOwn.call(defCache, type)) {
                var d = defCache[type];
                if (d.finalized) {
                  return d;
                }
              }
            }
            return null;
          };
          var Dp = Def.prototype;
          Dp.isSupertypeOf = function(that) {
            if (that instanceof Def) {
              if (this.finalized !== true || that.finalized !== true) {
                throw new Error("");
              }
              return hasOwn.call(that.allSupertypes, this.typeName);
            } else {
              throw new Error(that + " is not a Def");
            }
          };
          exports.getSupertypeNames = function(typeName) {
            if (!hasOwn.call(defCache, typeName)) {
              throw new Error("");
            }
            var d = defCache[typeName];
            if (d.finalized !== true) {
              throw new Error("");
            }
            return d.supertypeList.slice(1);
          };
          exports.computeSupertypeLookupTable = function(candidates) {
            var table = {};
            var typeNames = Object.keys(defCache);
            var typeNameCount = typeNames.length;
            for (var i = 0; i < typeNameCount; ++i) {
              var typeName = typeNames[i];
              var d = defCache[typeName];
              if (d.finalized !== true) {
                throw new Error("" + typeName);
              }
              for (var j = 0; j < d.supertypeList.length; ++j) {
                var superTypeName = d.supertypeList[j];
                if (hasOwn.call(candidates, superTypeName)) {
                  table[typeName] = superTypeName;
                  break;
                }
              }
            }
            return table;
          };
          Dp.checkAllFields = function(value, deep) {
            var allFields = this.allFields;
            if (this.finalized !== true) {
              throw new Error("" + this.typeName);
            }
            function checkFieldByName(name) {
              var field = allFields[name];
              var type = field.type;
              var child = field.getValue(value);
              return type.check(child, deep);
            }
            return isObject.check(value) && Object.keys(allFields).every(checkFieldByName);
          };
          Dp.check = function(value, deep) {
            if (this.finalized !== true) {
              throw new Error("prematurely checking unfinalized type " + this.typeName);
            }
            if (!isObject.check(value))
              return false;
            var vDef = Def.fromValue(value);
            if (!vDef) {
              if (this.typeName === "SourceLocation" || this.typeName === "Position") {
                return this.checkAllFields(value, deep);
              }
              return false;
            }
            if (deep && vDef === this)
              return this.checkAllFields(value, deep);
            if (!this.isSupertypeOf(vDef))
              return false;
            if (!deep)
              return true;
            return vDef.checkAllFields(value, deep) && this.checkAllFields(value, false);
          };
          Dp.bases = function() {
            var args = slice.call(arguments);
            var bases = this.baseNames;
            if (this.finalized) {
              if (args.length !== bases.length) {
                throw new Error("");
              }
              for (var i = 0; i < args.length; i++) {
                if (args[i] !== bases[i]) {
                  throw new Error("");
                }
              }
              return this;
            }
            args.forEach(function(baseName) {
              isString.assert(baseName);
              if (bases.indexOf(baseName) < 0)
                bases.push(baseName);
            });
            return this;
          };
          Object.defineProperty(Dp, "buildable", {value: false});
          var builders = {};
          exports.builders = builders;
          var nodePrototype = {};
          exports.defineMethod = function(name, func) {
            var old = nodePrototype[name];
            if (isUndefined.check(func)) {
              delete nodePrototype[name];
            } else {
              isFunction.assert(func);
              Object.defineProperty(nodePrototype, name, {
                enumerable: true,
                configurable: true,
                value: func
              });
            }
            return old;
          };
          var isArrayOfString = isString.arrayOf();
          Dp.build = function() {
            var self = this;
            var newBuildParams = slice.call(arguments);
            isArrayOfString.assert(newBuildParams);
            Object.defineProperty(self, "buildParams", {
              value: newBuildParams,
              writable: false,
              enumerable: false,
              configurable: true
            });
            if (self.buildable) {
              return self;
            }
            self.field("type", String, function() {
              return self.typeName;
            });
            Object.defineProperty(self, "buildable", {value: true});
            Object.defineProperty(builders, getBuilderName(self.typeName), {
              enumerable: true,
              value: function() {
                var args = arguments;
                var argc = args.length;
                var built = Object.create(nodePrototype);
                if (!self.finalized) {
                  throw new Error("attempting to instantiate unfinalized type " + self.typeName);
                }
                function add(param, i) {
                  if (hasOwn.call(built, param))
                    return;
                  var all = self.allFields;
                  if (!hasOwn.call(all, param)) {
                    throw new Error("" + param);
                  }
                  var field = all[param];
                  var type = field.type;
                  var value;
                  if (isNumber.check(i) && i < argc) {
                    value = args[i];
                  } else if (field.defaultFn) {
                    value = field.defaultFn.call(built);
                  } else {
                    var message = "no value or default function given for field " + JSON.stringify(param) + " of " + self.typeName + "(" + self.buildParams.map(function(name) {
                      return all[name];
                    }).join(", ") + ")";
                    throw new Error(message);
                  }
                  if (!type.check(value)) {
                    throw new Error(shallowStringify(value) + " does not match field " + field + " of type " + self.typeName);
                  }
                  built[param] = value;
                }
                self.buildParams.forEach(function(param, i) {
                  add(param, i);
                });
                Object.keys(self.allFields).forEach(function(param) {
                  add(param);
                });
                if (built.type !== self.typeName) {
                  throw new Error("");
                }
                return built;
              }
            });
            return self;
          };
          function getBuilderName(typeName) {
            return typeName.replace(/^[A-Z]+/, function(upperCasePrefix) {
              var len = upperCasePrefix.length;
              switch (len) {
                case 0:
                  return "";
                case 1:
                  return upperCasePrefix.toLowerCase();
                default:
                  return upperCasePrefix.slice(0, len - 1).toLowerCase() + upperCasePrefix.charAt(len - 1);
              }
            });
          }
          exports.getBuilderName = getBuilderName;
          function getStatementBuilderName(typeName) {
            typeName = getBuilderName(typeName);
            return typeName.replace(/(Expression)?$/, "Statement");
          }
          exports.getStatementBuilderName = getStatementBuilderName;
          Dp.field = function(name, type, defaultFn, hidden) {
            if (this.finalized) {
              console.error("Ignoring attempt to redefine field " + JSON.stringify(name) + " of finalized type " + JSON.stringify(this.typeName));
              return this;
            }
            this.ownFields[name] = new Field(name, type, defaultFn, hidden);
            return this;
          };
          var namedTypes = {};
          exports.namedTypes = namedTypes;
          function getFieldNames(object) {
            var d = Def.fromValue(object);
            if (d) {
              return d.fieldNames.slice(0);
            }
            if ("type" in object) {
              throw new Error("did not recognize object of type " + JSON.stringify(object.type));
            }
            return Object.keys(object);
          }
          exports.getFieldNames = getFieldNames;
          function getFieldValue(object, fieldName) {
            var d = Def.fromValue(object);
            if (d) {
              var field = d.allFields[fieldName];
              if (field) {
                return field.getValue(object);
              }
            }
            return object[fieldName];
          }
          exports.getFieldValue = getFieldValue;
          exports.eachField = function(object, callback, context) {
            getFieldNames(object).forEach(function(name) {
              callback.call(this, name, getFieldValue(object, name));
            }, context);
          };
          exports.someField = function(object, callback, context) {
            return getFieldNames(object).some(function(name) {
              return callback.call(this, name, getFieldValue(object, name));
            }, context);
          };
          Object.defineProperty(Dp, "finalized", {value: false});
          Dp.finalize = function() {
            var self = this;
            if (!self.finalized) {
              var allFields = self.allFields;
              var allSupertypes = self.allSupertypes;
              self.baseNames.forEach(function(name) {
                var def = defCache[name];
                if (def instanceof Def) {
                  def.finalize();
                  extend(allFields, def.allFields);
                  extend(allSupertypes, def.allSupertypes);
                } else {
                  var message = "unknown supertype name " + JSON.stringify(name) + " for subtype " + JSON.stringify(self.typeName);
                  throw new Error(message);
                }
              });
              extend(allFields, self.ownFields);
              allSupertypes[self.typeName] = self;
              self.fieldNames.length = 0;
              for (var fieldName in allFields) {
                if (hasOwn.call(allFields, fieldName) && !allFields[fieldName].hidden) {
                  self.fieldNames.push(fieldName);
                }
              }
              Object.defineProperty(namedTypes, self.typeName, {
                enumerable: true,
                value: self.type
              });
              Object.defineProperty(self, "finalized", {value: true});
              populateSupertypeList(self.typeName, self.supertypeList);
              if (self.buildable && self.supertypeList.lastIndexOf("Expression") >= 0) {
                wrapExpressionBuilderWithStatement(self.typeName);
              }
            }
          };
          function wrapExpressionBuilderWithStatement(typeName) {
            var wrapperName = getStatementBuilderName(typeName);
            if (builders[wrapperName])
              return;
            var wrapped = builders[getBuilderName(typeName)];
            if (!wrapped)
              return;
            builders[wrapperName] = function() {
              return builders.expressionStatement(wrapped.apply(builders, arguments));
            };
          }
          function populateSupertypeList(typeName, list) {
            list.length = 0;
            list.push(typeName);
            var lastSeen = Object.create(null);
            for (var pos = 0; pos < list.length; ++pos) {
              typeName = list[pos];
              var d = defCache[typeName];
              if (d.finalized !== true) {
                throw new Error("");
              }
              if (hasOwn.call(lastSeen, typeName)) {
                delete list[lastSeen[typeName]];
              }
              lastSeen[typeName] = pos;
              list.push.apply(list, d.baseNames);
            }
            for (var to = 0,
                from = to,
                len = list.length; from < len; ++from) {
              if (hasOwn.call(list, from)) {
                list[to++] = list[from];
              }
            }
            list.length = to;
          }
          function extend(into, from) {
            Object.keys(from).forEach(function(name) {
              into[name] = from[name];
            });
            return into;
          }
          ;
          exports.finalize = function() {
            Object.keys(defCache).forEach(function(name) {
              defCache[name].finalize();
            });
          };
        }, {}],
        202: [function(_dereq_, module, exports) {
          var types = _dereq_(201);
          _dereq_(188);
          _dereq_(190);
          _dereq_(191);
          _dereq_(194);
          _dereq_(189);
          _dereq_(193);
          _dereq_(192);
          _dereq_(187);
          types.finalize();
          exports.Type = types.Type;
          exports.builtInTypes = types.builtInTypes;
          exports.namedTypes = types.namedTypes;
          exports.builders = types.builders;
          exports.defineMethod = types.defineMethod;
          exports.getFieldNames = types.getFieldNames;
          exports.getFieldValue = types.getFieldValue;
          exports.eachField = types.eachField;
          exports.someField = types.someField;
          exports.getSupertypeNames = types.getSupertypeNames;
          exports.astNodesAreEquivalent = _dereq_(195);
          exports.finalize = types.finalize;
          exports.NodePath = _dereq_(196);
          exports.PathVisitor = _dereq_(197);
          exports.visit = exports.PathVisitor.visit;
        }, {
          "187": 187,
          "188": 188,
          "189": 189,
          "190": 190,
          "191": 191,
          "192": 192,
          "193": 193,
          "194": 194,
          "195": 195,
          "196": 196,
          "197": 197,
          "201": 201
        }],
        203: [function(_dereq_, module, exports) {
          "use strict";
          Object.defineProperty(exports, "__esModule", {value: true});
          exports["default"] = function(_ref) {
            var Plugin = _ref.Plugin;
            var t = _ref.types;
            return new Plugin("constant-folding", {
              metadata: {
                group: "builtin-prepass",
                experimental: true
              },
              visitor: {
                AssignmentExpression: function AssignmentExpression() {
                  var left = this.get("left");
                  if (!left.isIdentifier())
                    return;
                  var binding = this.scope.getBinding(left.node.name);
                  if (!binding || binding.hasDeoptValue)
                    return;
                  var evaluated = this.get("right").evaluate();
                  if (evaluated.confident) {
                    binding.setValue(evaluated.value);
                  } else {
                    binding.deoptValue();
                  }
                },
                IfStatement: function IfStatement() {
                  var evaluated = this.get("test").evaluate();
                  if (!evaluated.confident) {
                    return this.skip();
                  }
                  if (evaluated.value) {
                    this.skipKey("alternate");
                  } else {
                    this.skipKey("consequent");
                  }
                },
                Scopable: {
                  enter: function enter() {
                    var funcScope = this.scope.getFunctionParent();
                    for (var name in this.scope.bindings) {
                      var binding = this.scope.bindings[name];
                      var deopt = false;
                      var _iteratorNormalCompletion = true;
                      var _didIteratorError = false;
                      var _iteratorError = undefined;
                      try {
                        for (var _iterator = binding.constantViolations[Symbol.iterator](),
                            _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                          var path = _step.value;
                          var funcViolationScope = path.scope.getFunctionParent();
                          if (funcViolationScope !== funcScope) {
                            deopt = true;
                            break;
                          }
                        }
                      } catch (err) {
                        _didIteratorError = true;
                        _iteratorError = err;
                      } finally {
                        try {
                          if (!_iteratorNormalCompletion && _iterator["return"]) {
                            _iterator["return"]();
                          }
                        } finally {
                          if (_didIteratorError) {
                            throw _iteratorError;
                          }
                        }
                      }
                      if (deopt)
                        binding.deoptValue();
                    }
                  },
                  exit: function exit() {
                    for (var name in this.scope.bindings) {
                      var binding = this.scope.bindings[name];
                      binding.clearValue();
                    }
                  }
                },
                Expression: {exit: function exit() {
                    var res = this.evaluate();
                    if (res.confident)
                      return t.valueToNode(res.value);
                  }}
              }
            });
          };
          module.exports = exports["default"];
        }, {}],
        204: [function(_dereq_, module, exports) {
          "use strict";
          Object.defineProperty(exports, "__esModule", {value: true});
          exports["default"] = function(_ref) {
            var Plugin = _ref.Plugin;
            var t = _ref.types;
            function toStatements(node) {
              if (t.isBlockStatement(node)) {
                var hasBlockScoped = false;
                for (var i = 0; i < node.body.length; i++) {
                  var bodyNode = node.body[i];
                  if (t.isBlockScoped(bodyNode))
                    hasBlockScoped = true;
                }
                if (!hasBlockScoped) {
                  return node.body;
                }
              }
              return node;
            }
            var visitor = {
              ReferencedIdentifier: function ReferencedIdentifier(node, parent, scope) {
                var binding = scope.getBinding(node.name);
                if (!binding || binding.references > 1 || !binding.constant)
                  return;
                if (binding.kind === "param" || binding.kind === "module")
                  return;
                var replacement = binding.path.node;
                if (t.isVariableDeclarator(replacement)) {
                  replacement = replacement.init;
                }
                if (!replacement)
                  return;
                if (!scope.isPure(replacement, true))
                  return;
                if (t.isClass(replacement) || t.isFunction(replacement)) {
                  if (binding.path.scope.parent !== scope)
                    return;
                }
                if (this.findParent(function(path) {
                  return path.node === replacement;
                })) {
                  return;
                }
                t.toExpression(replacement);
                scope.removeBinding(node.name);
                binding.path.dangerouslyRemove();
                return replacement;
              },
              "ClassDeclaration|FunctionDeclaration": function ClassDeclarationFunctionDeclaration(node, parent, scope) {
                var binding = scope.getBinding(node.id.name);
                if (binding && !binding.referenced) {
                  this.dangerouslyRemove();
                }
              },
              VariableDeclarator: function VariableDeclarator(node, parent, scope) {
                if (!t.isIdentifier(node.id) || !scope.isPure(node.init, true))
                  return;
                visitor["ClassDeclaration|FunctionDeclaration"].apply(this, arguments);
              },
              ConditionalExpression: function ConditionalExpression(node) {
                var evaluateTest = this.get("test").evaluateTruthy();
                if (evaluateTest === true) {
                  return node.consequent;
                } else if (evaluateTest === false) {
                  return node.alternate;
                }
              },
              BlockStatement: function BlockStatement() {
                var paths = this.get("body");
                var purge = false;
                for (var i = 0; i < paths.length; i++) {
                  var path = paths[i];
                  if (!purge && path.isCompletionStatement()) {
                    purge = true;
                    continue;
                  }
                  if (purge && !path.isFunctionDeclaration()) {
                    path.dangerouslyRemove();
                  }
                }
              },
              IfStatement: {exit: function exit(node) {
                  var consequent = node.consequent;
                  var alternate = node.alternate;
                  var test = node.test;
                  var evaluateTest = this.get("test").evaluateTruthy();
                  if (evaluateTest === true) {
                    return toStatements(consequent);
                  }
                  if (evaluateTest === false) {
                    if (alternate) {
                      return toStatements(alternate);
                    } else {
                      return this.dangerouslyRemove();
                    }
                  }
                  if (t.isBlockStatement(alternate) && !alternate.body.length) {
                    alternate = node.alternate = null;
                  }
                  if (t.isBlockStatement(consequent) && !consequent.body.length && t.isBlockStatement(alternate) && alternate.body.length) {
                    node.consequent = node.alternate;
                    node.alternate = null;
                    node.test = t.unaryExpression("!", test, true);
                  }
                }}
            };
            return new Plugin("dead-code-elimination", {
              metadata: {
                group: "builtin-pre",
                experimental: true
              },
              visitor: visitor
            });
          };
          module.exports = exports["default"];
        }, {}],
        205: [function(_dereq_, module, exports) {
          "use strict";
          Object.defineProperty(exports, "__esModule", {value: true});
          exports["default"] = function(_ref) {
            var Plugin = _ref.Plugin;
            var parse = _ref.parse;
            var traverse = _ref.traverse;
            return new Plugin("eval", {
              metadata: {group: "builtin-pre"},
              visitor: {CallExpression: function CallExpression(node) {
                  if (this.get("callee").isIdentifier({name: "eval"}) && node.arguments.length === 1) {
                    var evaluate = this.get("arguments")[0].evaluate();
                    if (!evaluate.confident)
                      return;
                    var code = evaluate.value;
                    if (typeof code !== "string")
                      return;
                    var ast = parse(code);
                    traverse.removeProperties(ast);
                    return ast.program;
                  }
                }}
            });
          };
          module.exports = exports["default"];
        }, {}],
        206: [function(_dereq_, module, exports) {
          (function(process) {
            "use strict";
            Object.defineProperty(exports, "__esModule", {value: true});
            exports["default"] = function(_ref) {
              var Plugin = _ref.Plugin;
              var t = _ref.types;
              return new Plugin("inline-environment-variables", {
                metadata: {group: "builtin-pre"},
                visitor: {MemberExpression: function MemberExpression(node) {
                    if (this.get("object").matchesPattern("process.env")) {
                      var key = this.toComputedKey();
                      if (t.isLiteral(key)) {
                        return t.valueToNode(process.env[key.value]);
                      }
                    }
                  }}
              });
            };
            module.exports = exports["default"];
          }).call(this, _dereq_(10));
        }, {"10": 10}],
        207: [function(_dereq_, module, exports) {
          "use strict";
          Object.defineProperty(exports, "__esModule", {value: true});
          exports["default"] = function(_ref) {
            var Plugin = _ref.Plugin;
            var t = _ref.types;
            return new Plugin("jscript", {
              metadata: {group: "builtin-trailing"},
              visitor: {FunctionExpression: {exit: function exit(node) {
                    if (!node.id)
                      return;
                    node._ignoreUserWhitespace = true;
                    return t.callExpression(t.functionExpression(null, [], t.blockStatement([t.toStatement(node), t.returnStatement(node.id)])), []);
                  }}}
            });
          };
          module.exports = exports["default"];
        }, {}],
        208: [function(_dereq_, module, exports) {
          "use strict";
          Object.defineProperty(exports, "__esModule", {value: true});
          exports["default"] = function(_ref) {
            var Plugin = _ref.Plugin;
            var t = _ref.types;
            return new Plugin("member-expression-literals", {
              metadata: {group: "builtin-trailing"},
              visitor: {MemberExpression: {exit: function exit(node) {
                    var prop = node.property;
                    if (node.computed && t.isLiteral(prop) && t.isValidIdentifier(prop.value)) {
                      node.property = t.identifier(prop.value);
                      node.computed = false;
                    }
                  }}}
            });
          };
          module.exports = exports["default"];
        }, {}],
        209: [function(_dereq_, module, exports) {
          "use strict";
          Object.defineProperty(exports, "__esModule", {value: true});
          exports["default"] = function(_ref) {
            var Plugin = _ref.Plugin;
            var t = _ref.types;
            return new Plugin("property-literals", {
              metadata: {group: "builtin-trailing"},
              visitor: {Property: {exit: function exit(node) {
                    var key = node.key;
                    if (t.isLiteral(key) && t.isValidIdentifier(key.value)) {
                      node.key = t.identifier(key.value);
                      node.computed = false;
                    }
                  }}}
            });
          };
          module.exports = exports["default"];
        }, {}],
        210: [function(_dereq_, module, exports) {
          "use strict";
          Object.defineProperty(exports, "__esModule", {value: true});
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {"default": obj};
          }
          var _lodashArrayPull = _dereq_(441);
          var _lodashArrayPull2 = _interopRequireDefault(_lodashArrayPull);
          exports["default"] = function(_ref) {
            var Plugin = _ref.Plugin;
            var t = _ref.types;
            function isProtoKey(node) {
              return t.isLiteral(t.toComputedKey(node, node.key), {value: "__proto__"});
            }
            function isProtoAssignmentExpression(node) {
              var left = node.left;
              return t.isMemberExpression(left) && t.isLiteral(t.toComputedKey(left, left.property), {value: "__proto__"});
            }
            function buildDefaultsCallExpression(expr, ref, file) {
              return t.expressionStatement(t.callExpression(file.addHelper("defaults"), [ref, expr.right]));
            }
            return new Plugin("proto-to-assign", {
              metadata: {secondPass: true},
              visitor: {
                AssignmentExpression: function AssignmentExpression(node, parent, scope, file) {
                  if (!isProtoAssignmentExpression(node))
                    return;
                  var nodes = [];
                  var left = node.left.object;
                  var temp = scope.maybeGenerateMemoised(left);
                  if (temp)
                    nodes.push(t.expressionStatement(t.assignmentExpression("=", temp, left)));
                  nodes.push(buildDefaultsCallExpression(node, temp || left, file));
                  if (temp)
                    nodes.push(temp);
                  return nodes;
                },
                ExpressionStatement: function ExpressionStatement(node, parent, scope, file) {
                  var expr = node.expression;
                  if (!t.isAssignmentExpression(expr, {operator: "="}))
                    return;
                  if (isProtoAssignmentExpression(expr)) {
                    return buildDefaultsCallExpression(expr, expr.left.object, file);
                  }
                },
                ObjectExpression: function ObjectExpression(node, parent, scope, file) {
                  var proto;
                  for (var i = 0; i < node.properties.length; i++) {
                    var prop = node.properties[i];
                    if (isProtoKey(prop)) {
                      proto = prop.value;
                      (0, _lodashArrayPull2["default"])(node.properties, prop);
                    }
                  }
                  if (proto) {
                    var args = [t.objectExpression([]), proto];
                    if (node.properties.length)
                      args.push(node);
                    return t.callExpression(file.addHelper("extends"), args);
                  }
                }
              }
            });
          };
          module.exports = exports["default"];
        }, {"441": 441}],
        211: [function(_dereq_, module, exports) {
          "use strict";
          Object.defineProperty(exports, "__esModule", {value: true});
          exports["default"] = function(_ref) {
            var Plugin = _ref.Plugin;
            var immutabilityVisitor = {enter: function enter(node, parent, scope, state) {
                var _this = this;
                var stop = function stop() {
                  state.isImmutable = false;
                  _this.stop();
                };
                if (this.isJSXClosingElement()) {
                  this.skip();
                  return;
                }
                if (this.isJSXIdentifier({name: "ref"}) && this.parentPath.isJSXAttribute({name: node})) {
                  return stop();
                }
                if (this.isJSXIdentifier() || this.isIdentifier() || this.isJSXMemberExpression()) {
                  return;
                }
                if (!this.isImmutable())
                  stop();
              }};
            return new Plugin("react-constant-elements", {
              metadata: {group: "builtin-basic"},
              visitor: {JSXElement: function JSXElement(node) {
                  if (node._hoisted)
                    return;
                  var state = {isImmutable: true};
                  this.traverse(immutabilityVisitor, state);
                  if (state.isImmutable) {
                    this.hoist();
                  } else {
                    node._hoisted = true;
                  }
                }}
            });
          };
          module.exports = exports["default"];
        }, {}],
        212: [function(_dereq_, module, exports) {
          "use strict";
          Object.defineProperty(exports, "__esModule", {value: true});
          exports["default"] = function(_ref) {
            var Plugin = _ref.Plugin;
            var t = _ref.types;
            function addDisplayName(id, call) {
              var props = call.arguments[0].properties;
              var safe = true;
              for (var i = 0; i < props.length; i++) {
                var prop = props[i];
                var key = t.toComputedKey(prop);
                if (t.isLiteral(key, {value: "displayName"})) {
                  safe = false;
                  break;
                }
              }
              if (safe) {
                props.unshift(t.property("init", t.identifier("displayName"), t.literal(id)));
              }
            }
            var isCreateClassCallExpression = t.buildMatchMemberExpression("React.createClass");
            function isCreateClass(node) {
              if (!node || !t.isCallExpression(node))
                return false;
              if (!isCreateClassCallExpression(node.callee))
                return false;
              var args = node.arguments;
              if (args.length !== 1)
                return false;
              var first = args[0];
              if (!t.isObjectExpression(first))
                return false;
              return true;
            }
            return new Plugin("react-display-name", {
              metadata: {group: "builtin-pre"},
              visitor: {
                ExportDefaultDeclaration: function ExportDefaultDeclaration(node, parent, scope, file) {
                  if (isCreateClass(node.declaration)) {
                    addDisplayName(file.opts.basename, node.declaration);
                  }
                },
                "AssignmentExpression|Property|VariableDeclarator": function AssignmentExpressionPropertyVariableDeclarator(node) {
                  var left,
                      right;
                  if (t.isAssignmentExpression(node)) {
                    left = node.left;
                    right = node.right;
                  } else if (t.isProperty(node)) {
                    left = node.key;
                    right = node.value;
                  } else if (t.isVariableDeclarator(node)) {
                    left = node.id;
                    right = node.init;
                  }
                  if (t.isMemberExpression(left)) {
                    left = left.property;
                  }
                  if (t.isIdentifier(left) && isCreateClass(right)) {
                    addDisplayName(left.name, right);
                  }
                }
              }
            });
          };
          module.exports = exports["default"];
        }, {}],
        213: [function(_dereq_, module, exports) {
          "use strict";
          Object.defineProperty(exports, "__esModule", {value: true});
          exports["default"] = function(_ref) {
            var Plugin = _ref.Plugin;
            var t = _ref.types;
            return new Plugin("remove-console", {
              metadata: {group: "builtin-pre"},
              visitor: {CallExpression: function CallExpression() {
                  if (this.get("callee").matchesPattern("console", true)) {
                    this.dangerouslyRemove();
                  }
                }}
            });
          };
          module.exports = exports["default"];
        }, {}],
        214: [function(_dereq_, module, exports) {
          "use strict";
          Object.defineProperty(exports, "__esModule", {value: true});
          exports["default"] = function(_ref) {
            var Plugin = _ref.Plugin;
            var t = _ref.types;
            return new Plugin("remove-debugger", {
              metadata: {group: "builtin-pre"},
              visitor: {DebuggerStatement: function DebuggerStatement() {
                  this.dangerouslyRemove();
                }}
            });
          };
          module.exports = exports["default"];
        }, {}],
        215: [function(_dereq_, module, exports) {
          module.exports = {
            "builtins": {
              "Symbol": "symbol",
              "Promise": "promise",
              "Map": "map",
              "WeakMap": "weak-map",
              "Set": "set",
              "WeakSet": "weak-set"
            },
            "methods": {
              "Array": {
                "concat": "array/concat",
                "copyWithin": "array/copy-within",
                "entries": "array/entries",
                "every": "array/every",
                "fill": "array/fill",
                "filter": "array/filter",
                "findIndex": "array/find-index",
                "find": "array/find",
                "forEach": "array/for-each",
                "from": "array/from",
                "includes": "array/includes",
                "indexOf": "array/index-of",
                "join": "array/join",
                "keys": "array/keys",
                "lastIndexOf": "array/last-index-of",
                "map": "array/map",
                "of": "array/of",
                "pop": "array/pop",
                "push": "array/push",
                "reduceRight": "array/reduce-right",
                "reduce": "array/reduce",
                "reverse": "array/reverse",
                "shift": "array/shift",
                "slice": "array/slice",
                "some": "array/some",
                "sort": "array/sort",
                "splice": "array/splice",
                "turn": "array/turn",
                "unshift": "array/unshift",
                "values": "array/values"
              },
              "Object": {
                "assign": "object/assign",
                "classof": "object/classof",
                "create": "object/create",
                "define": "object/define",
                "defineProperties": "object/define-properties",
                "defineProperty": "object/define-property",
                "entries": "object/entries",
                "freeze": "object/freeze",
                "getOwnPropertyDescriptor": "object/get-own-property-descriptor",
                "getOwnPropertyDescriptors": "object/get-own-property-descriptors",
                "getOwnPropertyNames": "object/get-own-property-names",
                "getOwnPropertySymbols": "object/get-own-property-symbols",
                "getPrototypePf": "object/get-prototype-of",
                "index": "object/index",
                "isExtensible": "object/is-extensible",
                "isFrozen": "object/is-frozen",
                "isObject": "object/is-object",
                "isSealed": "object/is-sealed",
                "is": "object/is",
                "keys": "object/keys",
                "make": "object/make",
                "preventExtensions": "object/prevent-extensions",
                "seal": "object/seal",
                "setPrototypeOf": "object/set-prototype-of",
                "values": "object/values"
              },
              "RegExp": {"escape": "regexp/escape"},
              "Function": {
                "only": "function/only",
                "part": "function/part"
              },
              "Math": {
                "acosh": "math/acosh",
                "asinh": "math/asinh",
                "atanh": "math/atanh",
                "cbrt": "math/cbrt",
                "clz32": "math/clz32",
                "cosh": "math/cosh",
                "expm1": "math/expm1",
                "fround": "math/fround",
                "hypot": "math/hypot",
                "pot": "math/pot",
                "imul": "math/imul",
                "log10": "math/log10",
                "log1p": "math/log1p",
                "log2": "math/log2",
                "sign": "math/sign",
                "sinh": "math/sinh",
                "tanh": "math/tanh",
                "trunc": "math/trunc"
              },
              "Date": {
                "addLocale": "date/add-locale",
                "formatUTC": "date/format-utc",
                "format": "date/format"
              },
              "Symbol": {
                "for": "symbol/for",
                "hasInstance": "symbol/has-instance",
                "is-concat-spreadable": "symbol/is-concat-spreadable",
                "iterator": "symbol/iterator",
                "keyFor": "symbol/key-for",
                "match": "symbol/match",
                "replace": "symbol/replace",
                "search": "symbol/search",
                "species": "symbol/species",
                "split": "symbol/split",
                "toPrimitive": "symbol/to-primitive",
                "toStringTag": "symbol/to-string-tag",
                "unscopables": "symbol/unscopables"
              },
              "String": {
                "at": "string/at",
                "codePointAt": "string/code-point-at",
                "endsWith": "string/ends-with",
                "escapeHTML": "string/escape-html",
                "fromCodePoint": "string/from-code-point",
                "includes": "string/includes",
                "raw": "string/raw",
                "repeat": "string/repeat",
                "startsWith": "string/starts-with",
                "unescapeHTML": "string/unescape-html"
              },
              "Number": {
                "EPSILON": "number/epsilon",
                "isFinite": "number/is-finite",
                "isInteger": "number/is-integer",
                "isNaN": "number/is-nan",
                "isSafeInteger": "number/is-safe-integer",
                "MAX_SAFE_INTEGER": "number/max-safe-integer",
                "MIN_SAFE_INTEGER": "number/min-safe-integer",
                "parseFloat": "number/parse-float",
                "parseInt": "number/parse-int",
                "random": "number/random"
              },
              "Reflect": {
                "apply": "reflect/apply",
                "construct": "reflect/construct",
                "defineProperty": "reflect/define-property",
                "deleteProperty": "reflect/delete-property",
                "enumerate": "reflect/enumerate",
                "getOwnPropertyDescriptor": "reflect/get-own-property-descriptor",
                "getPrototypeOf": "reflect/get-prototype-of",
                "get": "reflect/get",
                "has": "reflect/has",
                "isExtensible": "reflect/is-extensible",
                "ownKeys": "reflect/own-keys",
                "preventExtensions": "reflect/prevent-extensions",
                "setPrototypeOf": "reflect/set-prototype-of",
                "set": "reflect/set"
              }
            }
          };
        }, {}],
        216: [function(_dereq_, module, exports) {
          "use strict";
          Object.defineProperty(exports, "__esModule", {value: true});
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {"default": obj};
          }
          var _definitions = _dereq_(215);
          var _definitions2 = _interopRequireDefault(_definitions);
          exports["default"] = function(_ref) {
            var Plugin = _ref.Plugin;
            var t = _ref.types;
            var RUNTIME_MODULE_NAME = "babel-runtime";
            function has(obj, key) {
              return Object.prototype.hasOwnProperty.call(obj, key);
            }
            return new Plugin("runtime", {
              metadata: {group: "builtin-post-modules"},
              pre: function pre(file) {
                file.set("helperGenerator", function(name) {
                  return file.addImport(RUNTIME_MODULE_NAME + "/helpers/" + name, name, "absoluteDefault");
                });
                file.setDynamic("regeneratorIdentifier", function() {
                  return file.addImport(RUNTIME_MODULE_NAME + "/regenerator", "regeneratorRuntime", "absoluteDefault");
                });
              },
              visitor: {
                ReferencedIdentifier: function ReferencedIdentifier(node, parent, scope, file) {
                  if (node.name === "regeneratorRuntime") {
                    return file.get("regeneratorIdentifier");
                  }
                  if (t.isMemberExpression(parent))
                    return;
                  if (!has(_definitions2["default"].builtins, node.name))
                    return;
                  if (scope.getBindingIdentifier(node.name))
                    return;
                  var modulePath = _definitions2["default"].builtins[node.name];
                  return file.addImport(RUNTIME_MODULE_NAME + "/core-js/" + modulePath, node.name, "absoluteDefault");
                },
                CallExpression: function CallExpression(node, parent, scope, file) {
                  if (node.arguments.length)
                    return;
                  var callee = node.callee;
                  if (!t.isMemberExpression(callee))
                    return;
                  if (!callee.computed)
                    return;
                  if (!this.get("callee.property").matchesPattern("Symbol.iterator"))
                    return;
                  return t.callExpression(file.addImport(RUNTIME_MODULE_NAME + "/core-js/get-iterator", "getIterator", "absoluteDefault"), [callee.object]);
                },
                BinaryExpression: function BinaryExpression(node, parent, scope, file) {
                  if (node.operator !== "in")
                    return;
                  if (!this.get("left").matchesPattern("Symbol.iterator"))
                    return;
                  return t.callExpression(file.addImport(RUNTIME_MODULE_NAME + "/core-js/is-iterable", "isIterable", "absoluteDefault"), [node.right]);
                },
                MemberExpression: {
                  enter: function enter(node, parent, scope, file) {
                    if (!this.isReferenced())
                      return;
                    var obj = node.object;
                    var prop = node.property;
                    if (!t.isReferenced(obj, node))
                      return;
                    if (node.computed)
                      return;
                    if (!has(_definitions2["default"].methods, obj.name))
                      return;
                    var methods = _definitions2["default"].methods[obj.name];
                    if (!has(methods, prop.name))
                      return;
                    if (scope.getBindingIdentifier(obj.name))
                      return;
                    if (obj.name === "Object" && prop.name === "defineProperty" && this.parentPath.isCallExpression()) {
                      var call = this.parentPath.node;
                      if (call.arguments.length === 3 && t.isLiteral(call.arguments[1]))
                        return;
                    }
                    var modulePath = methods[prop.name];
                    return file.addImport(RUNTIME_MODULE_NAME + "/core-js/" + modulePath, obj.name + "$" + prop.name, "absoluteDefault");
                  },
                  exit: function exit(node, parent, scope, file) {
                    if (!this.isReferenced())
                      return;
                    var prop = node.property;
                    var obj = node.object;
                    if (!has(_definitions2["default"].builtins, obj.name))
                      return;
                    if (scope.getBindingIdentifier(obj.name))
                      return;
                    var modulePath = _definitions2["default"].builtins[obj.name];
                    return t.memberExpression(file.addImport(RUNTIME_MODULE_NAME + "/core-js/" + modulePath, "" + obj.name, "absoluteDefault"), prop);
                  }
                }
              }
            });
          };
          module.exports = exports["default"];
        }, {"215": 215}],
        217: [function(_dereq_, module, exports) {
          "use strict";
          Object.defineProperty(exports, "__esModule", {value: true});
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {"default": obj};
          }
          var _leven = _dereq_(437);
          var _leven2 = _interopRequireDefault(_leven);
          exports["default"] = function(_ref) {
            var Plugin = _ref.Plugin;
            var t = _ref.types;
            var messages = _ref.messages;
            return new Plugin("undeclared-variables-check", {
              metadata: {group: "builtin-pre"},
              visitor: {ReferencedIdentifier: function ReferencedIdentifier(node, parent, scope) {
                  var binding = scope.getBinding(node.name);
                  if (binding && binding.kind === "type" && !this.parentPath.isFlow()) {
                    throw this.errorWithNode(messages.get("undeclaredVariableType", node.name), ReferenceError);
                  }
                  if (scope.hasBinding(node.name))
                    return;
                  var bindings = scope.getAllBindings();
                  var closest;
                  var shortest = -1;
                  for (var name in bindings) {
                    var distance = (0, _leven2["default"])(node.name, name);
                    if (distance <= 0 || distance > 3)
                      continue;
                    if (distance <= shortest)
                      continue;
                    closest = name;
                    shortest = distance;
                  }
                  var msg;
                  if (closest) {
                    msg = messages.get("undeclaredVariableSuggestion", node.name, closest);
                  } else {
                    msg = messages.get("undeclaredVariable", node.name);
                  }
                  throw this.errorWithNode(msg, ReferenceError);
                }}
            });
          };
          module.exports = exports["default"];
        }, {"437": 437}],
        218: [function(_dereq_, module, exports) {
          "use strict";
          Object.defineProperty(exports, "__esModule", {value: true});
          exports["default"] = function(_ref) {
            var Plugin = _ref.Plugin;
            var t = _ref.types;
            return new Plugin("undefined-to-void", {
              metadata: {group: "builtin-basic"},
              visitor: {ReferencedIdentifier: function ReferencedIdentifier(node, parent) {
                  if (node.name === "undefined") {
                    return t.unaryExpression("void", t.literal(0), true);
                  }
                }}
            });
          };
          module.exports = exports["default"];
        }, {}],
        219: [function(_dereq_, module, exports) {
          module.exports = balanced;
          function balanced(a, b, str) {
            var r = range(a, b, str);
            return r && {
              start: r[0],
              end: r[1],
              pre: str.slice(0, r[0]),
              body: str.slice(r[0] + a.length, r[1]),
              post: str.slice(r[1] + b.length)
            };
          }
          balanced.range = range;
          function range(a, b, str) {
            var begs,
                beg,
                left,
                right,
                result;
            var ai = str.indexOf(a);
            var bi = str.indexOf(b, ai + 1);
            var i = ai;
            if (ai >= 0 && bi > 0) {
              begs = [];
              left = str.length;
              while (i < str.length && i >= 0 && !result) {
                if (i == ai) {
                  begs.push(i);
                  ai = str.indexOf(a, i + 1);
                } else if (begs.length == 1) {
                  result = [begs.pop(), bi];
                } else {
                  beg = begs.pop();
                  if (beg < left) {
                    left = beg;
                    right = bi;
                  }
                  bi = str.indexOf(b, i + 1);
                }
                i = ai < bi && ai >= 0 ? ai : bi;
              }
              if (begs.length) {
                result = [left, right];
              }
            }
            return result;
          }
        }, {}],
        220: [function(_dereq_, module, exports) {
          var concatMap = _dereq_(227);
          var balanced = _dereq_(219);
          module.exports = expandTop;
          var escSlash = '\0SLASH' + Math.random() + '\0';
          var escOpen = '\0OPEN' + Math.random() + '\0';
          var escClose = '\0CLOSE' + Math.random() + '\0';
          var escComma = '\0COMMA' + Math.random() + '\0';
          var escPeriod = '\0PERIOD' + Math.random() + '\0';
          function numeric(str) {
            return parseInt(str, 10) == str ? parseInt(str, 10) : str.charCodeAt(0);
          }
          function escapeBraces(str) {
            return str.split('\\\\').join(escSlash).split('\\{').join(escOpen).split('\\}').join(escClose).split('\\,').join(escComma).split('\\.').join(escPeriod);
          }
          function unescapeBraces(str) {
            return str.split(escSlash).join('\\').split(escOpen).join('{').split(escClose).join('}').split(escComma).join(',').split(escPeriod).join('.');
          }
          function parseCommaParts(str) {
            if (!str)
              return [''];
            var parts = [];
            var m = balanced('{', '}', str);
            if (!m)
              return str.split(',');
            var pre = m.pre;
            var body = m.body;
            var post = m.post;
            var p = pre.split(',');
            p[p.length - 1] += '{' + body + '}';
            var postParts = parseCommaParts(post);
            if (post.length) {
              p[p.length - 1] += postParts.shift();
              p.push.apply(p, postParts);
            }
            parts.push.apply(parts, p);
            return parts;
          }
          function expandTop(str) {
            if (!str)
              return [];
            return expand(escapeBraces(str), true).map(unescapeBraces);
          }
          function identity(e) {
            return e;
          }
          function embrace(str) {
            return '{' + str + '}';
          }
          function isPadded(el) {
            return /^-?0\d/.test(el);
          }
          function lte(i, y) {
            return i <= y;
          }
          function gte(i, y) {
            return i >= y;
          }
          function expand(str, isTop) {
            var expansions = [];
            var m = balanced('{', '}', str);
            if (!m || /\$$/.test(m.pre))
              return [str];
            var isNumericSequence = /^-?\d+\.\.-?\d+(?:\.\.-?\d+)?$/.test(m.body);
            var isAlphaSequence = /^[a-zA-Z]\.\.[a-zA-Z](?:\.\.-?\d+)?$/.test(m.body);
            var isSequence = isNumericSequence || isAlphaSequence;
            var isOptions = /^(.*,)+(.+)?$/.test(m.body);
            if (!isSequence && !isOptions) {
              if (m.post.match(/,.*\}/)) {
                str = m.pre + '{' + m.body + escClose + m.post;
                return expand(str);
              }
              return [str];
            }
            var n;
            if (isSequence) {
              n = m.body.split(/\.\./);
            } else {
              n = parseCommaParts(m.body);
              if (n.length === 1) {
                n = expand(n[0], false).map(embrace);
                if (n.length === 1) {
                  var post = m.post.length ? expand(m.post, false) : [''];
                  return post.map(function(p) {
                    return m.pre + n[0] + p;
                  });
                }
              }
            }
            var pre = m.pre;
            var post = m.post.length ? expand(m.post, false) : [''];
            var N;
            if (isSequence) {
              var x = numeric(n[0]);
              var y = numeric(n[1]);
              var width = Math.max(n[0].length, n[1].length);
              var incr = n.length == 3 ? Math.abs(numeric(n[2])) : 1;
              var test = lte;
              var reverse = y < x;
              if (reverse) {
                incr *= -1;
                test = gte;
              }
              var pad = n.some(isPadded);
              N = [];
              for (var i = x; test(i, y); i += incr) {
                var c;
                if (isAlphaSequence) {
                  c = String.fromCharCode(i);
                  if (c === '\\')
                    c = '';
                } else {
                  c = String(i);
                  if (pad) {
                    var need = width - c.length;
                    if (need > 0) {
                      var z = new Array(need + 1).join('0');
                      if (i < 0)
                        c = '-' + z + c.slice(1);
                      else
                        c = z + c;
                    }
                  }
                }
                N.push(c);
              }
            } else {
              N = concatMap(n, function(el) {
                return expand(el, false);
              });
            }
            for (var j = 0; j < N.length; j++) {
              for (var k = 0; k < post.length; k++) {
                var expansion = pre + N[j] + post[k];
                if (!isTop || isSequence || expansion)
                  expansions.push(expansion);
              }
            }
            return expansions;
          }
        }, {
          "219": 219,
          "227": 227
        }],
        221: [function(_dereq_, module, exports) {
          var breakable = (function() {
            "use strict";
            function Val(val, brk) {
              this.val = val;
              this.brk = brk;
            }
            function make_brk() {
              return function brk(val) {
                throw new Val(val, brk);
              };
            }
            function breakable(fn) {
              var brk = make_brk();
              try {
                return fn(brk);
              } catch (e) {
                if (e instanceof Val && e.brk === brk) {
                  return e.val;
                }
                throw e;
              }
            }
            return breakable;
          })();
          if (typeof module !== "undefined" && typeof module.exports !== "undefined") {
            module.exports = breakable;
          }
        }, {}],
        222: [function(_dereq_, module, exports) {
          (function(process) {
            'use strict';
            var escapeStringRegexp = _dereq_(425);
            var ansiStyles = _dereq_(185);
            var stripAnsi = _dereq_(605);
            var hasAnsi = _dereq_(432);
            var supportsColor = _dereq_(606);
            var defineProps = Object.defineProperties;
            var isSimpleWindowsTerm = process.platform === 'win32' && !/^xterm/i.test(process.env.TERM);
            function Chalk(options) {
              this.enabled = !options || options.enabled === undefined ? supportsColor : options.enabled;
            }
            if (isSimpleWindowsTerm) {
              ansiStyles.blue.open = '\u001b[94m';
            }
            var styles = (function() {
              var ret = {};
              Object.keys(ansiStyles).forEach(function(key) {
                ansiStyles[key].closeRe = new RegExp(escapeStringRegexp(ansiStyles[key].close), 'g');
                ret[key] = {get: function() {
                    return build.call(this, this._styles.concat(key));
                  }};
              });
              return ret;
            })();
            var proto = defineProps(function chalk() {}, styles);
            function build(_styles) {
              var builder = function() {
                return applyStyle.apply(builder, arguments);
              };
              builder._styles = _styles;
              builder.enabled = this.enabled;
              builder.__proto__ = proto;
              return builder;
            }
            function applyStyle() {
              var args = arguments;
              var argsLen = args.length;
              var str = argsLen !== 0 && String(arguments[0]);
              if (argsLen > 1) {
                for (var a = 1; a < argsLen; a++) {
                  str += ' ' + args[a];
                }
              }
              if (!this.enabled || !str) {
                return str;
              }
              var nestedStyles = this._styles;
              var i = nestedStyles.length;
              var originalDim = ansiStyles.dim.open;
              if (isSimpleWindowsTerm && (nestedStyles.indexOf('gray') !== -1 || nestedStyles.indexOf('grey') !== -1)) {
                ansiStyles.dim.open = '';
              }
              while (i--) {
                var code = ansiStyles[nestedStyles[i]];
                str = code.open + str.replace(code.closeRe, code.open) + code.close;
              }
              ansiStyles.dim.open = originalDim;
              return str;
            }
            function init() {
              var ret = {};
              Object.keys(styles).forEach(function(name) {
                ret[name] = {get: function() {
                    return build.call(this, [name]);
                  }};
              });
              return ret;
            }
            defineProps(Chalk.prototype, init());
            module.exports = new Chalk();
            module.exports.styles = ansiStyles;
            module.exports.hasColor = hasAnsi;
            module.exports.stripColor = stripAnsi;
            module.exports.supportsColor = supportsColor;
          }).call(this, _dereq_(10));
        }, {
          "10": 10,
          "185": 185,
          "425": 425,
          "432": 432,
          "605": 605,
          "606": 606
        }],
        223: [function(_dereq_, module, exports) {
          var cssKeywords = _dereq_(224);
          var reverseKeywords = {};
          for (var key in cssKeywords) {
            if (cssKeywords.hasOwnProperty(key)) {
              reverseKeywords[cssKeywords[key].join()] = key;
            }
          }
          var convert = module.exports = {
            rgb: {},
            hsl: {},
            hsv: {},
            hwb: {},
            cmyk: {},
            xyz: {},
            lab: {},
            lch: {},
            hex: {},
            keyword: {},
            ansi16: {},
            ansi256: {}
          };
          convert.rgb.hsl = function(rgb) {
            var r = rgb[0] / 255;
            var g = rgb[1] / 255;
            var b = rgb[2] / 255;
            var min = Math.min(r, g, b);
            var max = Math.max(r, g, b);
            var delta = max - min;
            var h;
            var s;
            var l;
            if (max === min) {
              h = 0;
            } else if (r === max) {
              h = (g - b) / delta;
            } else if (g === max) {
              h = 2 + (b - r) / delta;
            } else if (b === max) {
              h = 4 + (r - g) / delta;
            }
            h = Math.min(h * 60, 360);
            if (h < 0) {
              h += 360;
            }
            l = (min + max) / 2;
            if (max === min) {
              s = 0;
            } else if (l <= 0.5) {
              s = delta / (max + min);
            } else {
              s = delta / (2 - max - min);
            }
            return [h, s * 100, l * 100];
          };
          convert.rgb.hsv = function(rgb) {
            var r = rgb[0];
            var g = rgb[1];
            var b = rgb[2];
            var min = Math.min(r, g, b);
            var max = Math.max(r, g, b);
            var delta = max - min;
            var h;
            var s;
            var v;
            if (max === 0) {
              s = 0;
            } else {
              s = (delta / max * 1000) / 10;
            }
            if (max === min) {
              h = 0;
            } else if (r === max) {
              h = (g - b) / delta;
            } else if (g === max) {
              h = 2 + (b - r) / delta;
            } else if (b === max) {
              h = 4 + (r - g) / delta;
            }
            h = Math.min(h * 60, 360);
            if (h < 0) {
              h += 360;
            }
            v = ((max / 255) * 1000) / 10;
            return [h, s, v];
          };
          convert.rgb.hwb = function(rgb) {
            var r = rgb[0];
            var g = rgb[1];
            var b = rgb[2];
            var h = convert.rgb.hsl(rgb)[0];
            var w = 1 / 255 * Math.min(r, Math.min(g, b));
            b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));
            return [h, w * 100, b * 100];
          };
          convert.rgb.cmyk = function(rgb) {
            var r = rgb[0] / 255;
            var g = rgb[1] / 255;
            var b = rgb[2] / 255;
            var c;
            var m;
            var y;
            var k;
            k = Math.min(1 - r, 1 - g, 1 - b);
            c = (1 - r - k) / (1 - k) || 0;
            m = (1 - g - k) / (1 - k) || 0;
            y = (1 - b - k) / (1 - k) || 0;
            return [c * 100, m * 100, y * 100, k * 100];
          };
          convert.rgb.keyword = function(rgb) {
            return reverseKeywords[rgb.join()];
          };
          convert.keyword.rgb = function(keyword) {
            return cssKeywords[keyword];
          };
          convert.rgb.xyz = function(rgb) {
            var r = rgb[0] / 255;
            var g = rgb[1] / 255;
            var b = rgb[2] / 255;
            r = r > 0.04045 ? Math.pow(((r + 0.055) / 1.055), 2.4) : (r / 12.92);
            g = g > 0.04045 ? Math.pow(((g + 0.055) / 1.055), 2.4) : (g / 12.92);
            b = b > 0.04045 ? Math.pow(((b + 0.055) / 1.055), 2.4) : (b / 12.92);
            var x = (r * 0.4124) + (g * 0.3576) + (b * 0.1805);
            var y = (r * 0.2126) + (g * 0.7152) + (b * 0.0722);
            var z = (r * 0.0193) + (g * 0.1192) + (b * 0.9505);
            return [x * 100, y * 100, z * 100];
          };
          convert.rgb.lab = function(rgb) {
            var xyz = convert.rgb.xyz(rgb);
            var x = xyz[0];
            var y = xyz[1];
            var z = xyz[2];
            var l;
            var a;
            var b;
            x /= 95.047;
            y /= 100;
            z /= 108.883;
            x = x > 0.008856 ? Math.pow(x, 1 / 3) : (7.787 * x) + (16 / 116);
            y = y > 0.008856 ? Math.pow(y, 1 / 3) : (7.787 * y) + (16 / 116);
            z = z > 0.008856 ? Math.pow(z, 1 / 3) : (7.787 * z) + (16 / 116);
            l = (116 * y) - 16;
            a = 500 * (x - y);
            b = 200 * (y - z);
            return [l, a, b];
          };
          convert.hsl.rgb = function(hsl) {
            var h = hsl[0] / 360;
            var s = hsl[1] / 100;
            var l = hsl[2] / 100;
            var t1;
            var t2;
            var t3;
            var rgb;
            var val;
            if (s === 0) {
              val = l * 255;
              return [val, val, val];
            }
            if (l < 0.5) {
              t2 = l * (1 + s);
            } else {
              t2 = l + s - l * s;
            }
            t1 = 2 * l - t2;
            rgb = [0, 0, 0];
            for (var i = 0; i < 3; i++) {
              t3 = h + 1 / 3 * -(i - 1);
              if (t3 < 0) {
                t3++;
              }
              if (t3 > 1) {
                t3--;
              }
              if (6 * t3 < 1) {
                val = t1 + (t2 - t1) * 6 * t3;
              } else if (2 * t3 < 1) {
                val = t2;
              } else if (3 * t3 < 2) {
                val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
              } else {
                val = t1;
              }
              rgb[i] = val * 255;
            }
            return rgb;
          };
          convert.hsl.hsv = function(hsl) {
            var h = hsl[0];
            var s = hsl[1] / 100;
            var l = hsl[2] / 100;
            var sv;
            var v;
            if (l === 0) {
              return [0, 0, 0];
            }
            l *= 2;
            s *= (l <= 1) ? l : 2 - l;
            v = (l + s) / 2;
            sv = (2 * s) / (l + s);
            return [h, sv * 100, v * 100];
          };
          convert.hsv.rgb = function(hsv) {
            var h = hsv[0] / 60;
            var s = hsv[1] / 100;
            var v = hsv[2] / 100;
            var hi = Math.floor(h) % 6;
            var f = h - Math.floor(h);
            var p = 255 * v * (1 - s);
            var q = 255 * v * (1 - (s * f));
            var t = 255 * v * (1 - (s * (1 - f)));
            v *= 255;
            switch (hi) {
              case 0:
                return [v, t, p];
              case 1:
                return [q, v, p];
              case 2:
                return [p, v, t];
              case 3:
                return [p, q, v];
              case 4:
                return [t, p, v];
              case 5:
                return [v, p, q];
            }
          };
          convert.hsv.hsl = function(hsv) {
            var h = hsv[0];
            var s = hsv[1] / 100;
            var v = hsv[2] / 100;
            var sl;
            var l;
            l = (2 - s) * v;
            sl = s * v;
            sl /= (l <= 1) ? l : 2 - l;
            sl = sl || 0;
            l /= 2;
            return [h, sl * 100, l * 100];
          };
          convert.hwb.rgb = function(hwb) {
            var h = hwb[0] / 360;
            var wh = hwb[1] / 100;
            var bl = hwb[2] / 100;
            var ratio = wh + bl;
            var i;
            var v;
            var f;
            var n;
            if (ratio > 1) {
              wh /= ratio;
              bl /= ratio;
            }
            i = Math.floor(6 * h);
            v = 1 - bl;
            f = 6 * h - i;
            if ((i & 0x01) !== 0) {
              f = 1 - f;
            }
            n = wh + f * (v - wh);
            var r;
            var g;
            var b;
            switch (i) {
              default:
              case 6:
              case 0:
                r = v;
                g = n;
                b = wh;
                break;
              case 1:
                r = n;
                g = v;
                b = wh;
                break;
              case 2:
                r = wh;
                g = v;
                b = n;
                break;
              case 3:
                r = wh;
                g = n;
                b = v;
                break;
              case 4:
                r = n;
                g = wh;
                b = v;
                break;
              case 5:
                r = v;
                g = wh;
                b = n;
                break;
            }
            return [r * 255, g * 255, b * 255];
          };
          convert.cmyk.rgb = function(cmyk) {
            var c = cmyk[0] / 100;
            var m = cmyk[1] / 100;
            var y = cmyk[2] / 100;
            var k = cmyk[3] / 100;
            var r;
            var g;
            var b;
            r = 1 - Math.min(1, c * (1 - k) + k);
            g = 1 - Math.min(1, m * (1 - k) + k);
            b = 1 - Math.min(1, y * (1 - k) + k);
            return [r * 255, g * 255, b * 255];
          };
          convert.xyz.rgb = function(xyz) {
            var x = xyz[0] / 100;
            var y = xyz[1] / 100;
            var z = xyz[2] / 100;
            var r;
            var g;
            var b;
            r = (x * 3.2406) + (y * -1.5372) + (z * -0.4986);
            g = (x * -0.9689) + (y * 1.8758) + (z * 0.0415);
            b = (x * 0.0557) + (y * -0.2040) + (z * 1.0570);
            r = r > 0.0031308 ? ((1.055 * Math.pow(r, 1.0 / 2.4)) - 0.055) : r *= 12.92;
            g = g > 0.0031308 ? ((1.055 * Math.pow(g, 1.0 / 2.4)) - 0.055) : g *= 12.92;
            b = b > 0.0031308 ? ((1.055 * Math.pow(b, 1.0 / 2.4)) - 0.055) : b *= 12.92;
            r = Math.min(Math.max(0, r), 1);
            g = Math.min(Math.max(0, g), 1);
            b = Math.min(Math.max(0, b), 1);
            return [r * 255, g * 255, b * 255];
          };
          convert.xyz.lab = function(xyz) {
            var x = xyz[0];
            var y = xyz[1];
            var z = xyz[2];
            var l;
            var a;
            var b;
            x /= 95.047;
            y /= 100;
            z /= 108.883;
            x = x > 0.008856 ? Math.pow(x, 1 / 3) : (7.787 * x) + (16 / 116);
            y = y > 0.008856 ? Math.pow(y, 1 / 3) : (7.787 * y) + (16 / 116);
            z = z > 0.008856 ? Math.pow(z, 1 / 3) : (7.787 * z) + (16 / 116);
            l = (116 * y) - 16;
            a = 500 * (x - y);
            b = 200 * (y - z);
            return [l, a, b];
          };
          convert.lab.xyz = function(lab) {
            var l = lab[0];
            var a = lab[1];
            var b = lab[2];
            var x;
            var y;
            var z;
            var y2;
            if (l <= 8) {
              y = (l * 100) / 903.3;
              y2 = (7.787 * (y / 100)) + (16 / 116);
            } else {
              y = 100 * Math.pow((l + 16) / 116, 3);
              y2 = Math.pow(y / 100, 1 / 3);
            }
            x = x / 95.047 <= 0.008856 ? x = (95.047 * ((a / 500) + y2 - (16 / 116))) / 7.787 : 95.047 * Math.pow((a / 500) + y2, 3);
            z = z / 108.883 <= 0.008859 ? z = (108.883 * (y2 - (b / 200) - (16 / 116))) / 7.787 : 108.883 * Math.pow(y2 - (b / 200), 3);
            return [x, y, z];
          };
          convert.lab.lch = function(lab) {
            var l = lab[0];
            var a = lab[1];
            var b = lab[2];
            var hr;
            var h;
            var c;
            hr = Math.atan2(b, a);
            h = hr * 360 / 2 / Math.PI;
            if (h < 0) {
              h += 360;
            }
            c = Math.sqrt(a * a + b * b);
            return [l, c, h];
          };
          convert.lch.lab = function(lch) {
            var l = lch[0];
            var c = lch[1];
            var h = lch[2];
            var a;
            var b;
            var hr;
            hr = h / 360 * 2 * Math.PI;
            a = c * Math.cos(hr);
            b = c * Math.sin(hr);
            return [l, a, b];
          };
          convert.rgb.ansi16 = function(args) {
            var r = args[0];
            var g = args[1];
            var b = args[2];
            var value = 1 in arguments ? arguments[1] : convert.rgb.hsv(args)[2];
            value = Math.round(value / 50);
            if (value === 0) {
              return 30;
            }
            var ansi = 30 + ((Math.round(b / 255) << 2) | (Math.round(g / 255) << 1) | Math.round(r / 255));
            if (value === 2) {
              ansi += 60;
            }
            return ansi;
          };
          convert.hsv.ansi16 = function(args) {
            return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);
          };
          convert.rgb.ansi256 = function(args) {
            var r = args[0];
            var g = args[1];
            var b = args[2];
            if (r === g && g === b) {
              if (r < 8) {
                return 16;
              }
              if (r > 248) {
                return 231;
              }
              return Math.round(((r - 8) / 247) * 24) + 232;
            }
            var ansi = 16 + (36 * Math.round(r / 255 * 5)) + (6 * Math.round(g / 255 * 5)) + Math.round(b / 255 * 5);
            return ansi;
          };
          convert.ansi16.rgb = function(args) {
            var color = args % 10;
            if (color === 0 || color === 7) {
              if (args > 50) {
                color += 3.5;
              }
              color = color / 10.5 * 255;
              return [color, color, color];
            }
            var mult = (~~(args > 50) + 1) * 0.5;
            var r = ((color & 1) * mult) * 255;
            var g = (((color >> 1) & 1) * mult) * 255;
            var b = (((color >> 2) & 1) * mult) * 255;
            return [r, g, b];
          };
          convert.ansi256.rgb = function(args) {
            if (args >= 232) {
              var c = (args - 232) * 10 + 8;
              return [c, c, c];
            }
            args -= 16;
            var rem;
            var r = Math.floor(args / 36) / 5 * 255;
            var g = Math.floor((rem = args % 36) / 6) / 5 * 255;
            var b = (rem % 6) / 5 * 255;
            return [r, g, b];
          };
          convert.rgb.hex = function(args) {
            var integer = ((Math.round(args[0]) & 0xFF) << 16) + ((Math.round(args[1]) & 0xFF) << 8) + (Math.round(args[2]) & 0xFF);
            var string = integer.toString(16).toUpperCase();
            return '000000'.substring(string.length) + string;
          };
          convert.hex.rgb = function(args) {
            var match = args.toString(16).match(/[a-f0-9]{6}/i);
            if (!match) {
              return [0, 0, 0];
            }
            var integer = parseInt(match[0], 16);
            var r = (integer >> 16) & 0xFF;
            var g = (integer >> 8) & 0xFF;
            var b = integer & 0xFF;
            return [r, g, b];
          };
        }, {"224": 224}],
        224: [function(_dereq_, module, exports) {
          module.exports = {
            aliceblue: [240, 248, 255],
            antiquewhite: [250, 235, 215],
            aqua: [0, 255, 255],
            aquamarine: [127, 255, 212],
            azure: [240, 255, 255],
            beige: [245, 245, 220],
            bisque: [255, 228, 196],
            black: [0, 0, 0],
            blanchedalmond: [255, 235, 205],
            blue: [0, 0, 255],
            blueviolet: [138, 43, 226],
            brown: [165, 42, 42],
            burlywood: [222, 184, 135],
            cadetblue: [95, 158, 160],
            chartreuse: [127, 255, 0],
            chocolate: [210, 105, 30],
            coral: [255, 127, 80],
            cornflowerblue: [100, 149, 237],
            cornsilk: [255, 248, 220],
            crimson: [220, 20, 60],
            cyan: [0, 255, 255],
            darkblue: [0, 0, 139],
            darkcyan: [0, 139, 139],
            darkgoldenrod: [184, 134, 11],
            darkgray: [169, 169, 169],
            darkgreen: [0, 100, 0],
            darkgrey: [169, 169, 169],
            darkkhaki: [189, 183, 107],
            darkmagenta: [139, 0, 139],
            darkolivegreen: [85, 107, 47],
            darkorange: [255, 140, 0],
            darkorchid: [153, 50, 204],
            darkred: [139, 0, 0],
            darksalmon: [233, 150, 122],
            darkseagreen: [143, 188, 143],
            darkslateblue: [72, 61, 139],
            darkslategray: [47, 79, 79],
            darkslategrey: [47, 79, 79],
            darkturquoise: [0, 206, 209],
            darkviolet: [148, 0, 211],
            deeppink: [255, 20, 147],
            deepskyblue: [0, 191, 255],
            dimgray: [105, 105, 105],
            dimgrey: [105, 105, 105],
            dodgerblue: [30, 144, 255],
            firebrick: [178, 34, 34],
            floralwhite: [255, 250, 240],
            forestgreen: [34, 139, 34],
            fuchsia: [255, 0, 255],
            gainsboro: [220, 220, 220],
            ghostwhite: [248, 248, 255],
            gold: [255, 215, 0],
            goldenrod: [218, 165, 32],
            gray: [128, 128, 128],
            green: [0, 128, 0],
            greenyellow: [173, 255, 47],
            grey: [128, 128, 128],
            honeydew: [240, 255, 240],
            hotpink: [255, 105, 180],
            indianred: [205, 92, 92],
            indigo: [75, 0, 130],
            ivory: [255, 255, 240],
            khaki: [240, 230, 140],
            lavender: [230, 230, 250],
            lavenderblush: [255, 240, 245],
            lawngreen: [124, 252, 0],
            lemonchiffon: [255, 250, 205],
            lightblue: [173, 216, 230],
            lightcoral: [240, 128, 128],
            lightcyan: [224, 255, 255],
            lightgoldenrodyellow: [250, 250, 210],
            lightgray: [211, 211, 211],
            lightgreen: [144, 238, 144],
            lightgrey: [211, 211, 211],
            lightpink: [255, 182, 193],
            lightsalmon: [255, 160, 122],
            lightseagreen: [32, 178, 170],
            lightskyblue: [135, 206, 250],
            lightslategray: [119, 136, 153],
            lightslategrey: [119, 136, 153],
            lightsteelblue: [176, 196, 222],
            lightyellow: [255, 255, 224],
            lime: [0, 255, 0],
            limegreen: [50, 205, 50],
            linen: [250, 240, 230],
            magenta: [255, 0, 255],
            maroon: [128, 0, 0],
            mediumaquamarine: [102, 205, 170],
            mediumblue: [0, 0, 205],
            mediumorchid: [186, 85, 211],
            mediumpurple: [147, 112, 219],
            mediumseagreen: [60, 179, 113],
            mediumslateblue: [123, 104, 238],
            mediumspringgreen: [0, 250, 154],
            mediumturquoise: [72, 209, 204],
            mediumvioletred: [199, 21, 133],
            midnightblue: [25, 25, 112],
            mintcream: [245, 255, 250],
            mistyrose: [255, 228, 225],
            moccasin: [255, 228, 181],
            navajowhite: [255, 222, 173],
            navy: [0, 0, 128],
            oldlace: [253, 245, 230],
            olive: [128, 128, 0],
            olivedrab: [107, 142, 35],
            orange: [255, 165, 0],
            orangered: [255, 69, 0],
            orchid: [218, 112, 214],
            palegoldenrod: [238, 232, 170],
            palegreen: [152, 251, 152],
            paleturquoise: [175, 238, 238],
            palevioletred: [219, 112, 147],
            papayawhip: [255, 239, 213],
            peachpuff: [255, 218, 185],
            peru: [205, 133, 63],
            pink: [255, 192, 203],
            plum: [221, 160, 221],
            powderblue: [176, 224, 230],
            purple: [128, 0, 128],
            rebeccapurple: [102, 51, 153],
            red: [255, 0, 0],
            rosybrown: [188, 143, 143],
            royalblue: [65, 105, 225],
            saddlebrown: [139, 69, 19],
            salmon: [250, 128, 114],
            sandybrown: [244, 164, 96],
            seagreen: [46, 139, 87],
            seashell: [255, 245, 238],
            sienna: [160, 82, 45],
            silver: [192, 192, 192],
            skyblue: [135, 206, 235],
            slateblue: [106, 90, 205],
            slategray: [112, 128, 144],
            slategrey: [112, 128, 144],
            snow: [255, 250, 250],
            springgreen: [0, 255, 127],
            steelblue: [70, 130, 180],
            tan: [210, 180, 140],
            teal: [0, 128, 128],
            thistle: [216, 191, 216],
            tomato: [255, 99, 71],
            turquoise: [64, 224, 208],
            violet: [238, 130, 238],
            wheat: [245, 222, 179],
            white: [255, 255, 255],
            whitesmoke: [245, 245, 245],
            yellow: [255, 255, 0],
            yellowgreen: [154, 205, 50]
          };
        }, {}],
        225: [function(_dereq_, module, exports) {
          var conversions = _dereq_(223);
          var route = _dereq_(226);
          var convert = {};
          var models = Object.keys(conversions);
          function wrapRaw(fn) {
            var wrappedFn = function(args) {
              if (args === undefined || args === null) {
                return args;
              }
              if (arguments.length > 1) {
                args = Array.prototype.slice.call(arguments);
              }
              return fn(args);
            };
            if ('conversion' in fn) {
              wrappedFn.conversion = fn.conversion;
            }
            return wrappedFn;
          }
          function wrapRounded(fn) {
            var wrappedFn = function(args) {
              if (args === undefined || args === null) {
                return args;
              }
              if (arguments.length > 1) {
                args = Array.prototype.slice.call(arguments);
              }
              var result = fn(args);
              if (typeof result === 'object') {
                for (var len = result.length,
                    i = 0; i < len; i++) {
                  result[i] = Math.round(result[i]);
                }
              }
              return result;
            };
            if ('conversion' in fn) {
              wrappedFn.conversion = fn.conversion;
            }
            return wrappedFn;
          }
          models.forEach(function(fromModel) {
            convert[fromModel] = {};
            var routes = route(fromModel);
            var routeModels = Object.keys(routes);
            routeModels.forEach(function(toModel) {
              var fn = routes[toModel];
              convert[fromModel][toModel] = wrapRounded(fn);
              convert[fromModel][toModel].raw = wrapRaw(fn);
            });
          });
          module.exports = convert;
        }, {
          "223": 223,
          "226": 226
        }],
        226: [function(_dereq_, module, exports) {
          var conversions = _dereq_(223);
          var models = Object.keys(conversions);
          function buildGraph() {
            var graph = {};
            for (var len = models.length,
                i = 0; i < len; i++) {
              graph[models[i]] = {
                distance: -1,
                parent: null
              };
            }
            return graph;
          }
          function deriveBFS(fromModel) {
            var graph = buildGraph();
            var queue = [fromModel];
            graph[fromModel].distance = 0;
            while (queue.length) {
              var current = queue.pop();
              var adjacents = Object.keys(conversions[current]);
              for (var len = adjacents.length,
                  i = 0; i < len; i++) {
                var adjacent = adjacents[i];
                var node = graph[adjacent];
                if (node.distance === -1) {
                  node.distance = graph[current].distance + 1;
                  node.parent = current;
                  queue.unshift(adjacent);
                }
              }
            }
            return graph;
          }
          function link(from, to) {
            return function(args) {
              return to(from(args));
            };
          }
          function wrapConversion(toModel, graph) {
            var path = [graph[toModel].parent, toModel];
            var fn = conversions[graph[toModel].parent][toModel];
            var cur = graph[toModel].parent;
            while (graph[cur].parent) {
              path.unshift(graph[cur].parent);
              fn = link(conversions[graph[cur].parent][cur], fn);
              cur = graph[cur].parent;
            }
            fn.conversion = path;
            return fn;
          }
          module.exports = function(fromModel) {
            var graph = deriveBFS(fromModel);
            var conversion = {};
            var models = Object.keys(graph);
            for (var len = models.length,
                i = 0; i < len; i++) {
              var toModel = models[i];
              var node = graph[toModel];
              if (node.parent === null) {
                continue;
              }
              conversion[toModel] = wrapConversion(toModel, graph);
            }
            return conversion;
          };
        }, {"223": 223}],
        227: [function(_dereq_, module, exports) {
          module.exports = function(xs, fn) {
            var res = [];
            for (var i = 0; i < xs.length; i++) {
              var x = fn(xs[i], i);
              if (isArray(x))
                res.push.apply(res, x);
              else
                res.push(x);
            }
            return res;
          };
          var isArray = Array.isArray || function(xs) {
            return Object.prototype.toString.call(xs) === '[object Array]';
          };
        }, {}],
        228: [function(_dereq_, module, exports) {
          (function(Buffer) {
            'use strict';
            var fs = _dereq_(3);
            var path = _dereq_(9);
            var commentRx = /^\s*\/(?:\/|\*)[@#]\s+sourceMappingURL=data:(?:application|text)\/json;(?:charset[:=]\S+;)?base64,(.*)$/mg;
            var mapFileCommentRx = /(?:\/\/[@#][ \t]+sourceMappingURL=([^\s'"]+?)[ \t]*$)|(?:\/\*[@#][ \t]+sourceMappingURL=([^\*]+?)[ \t]*(?:\*\/){1}[ \t]*$)/mg;
            function decodeBase64(base64) {
              return new Buffer(base64, 'base64').toString();
            }
            function stripComment(sm) {
              return sm.split(',').pop();
            }
            function readFromFileMap(sm, dir) {
              var r = mapFileCommentRx.exec(sm);
              mapFileCommentRx.lastIndex = 0;
              var filename = r[1] || r[2];
              var filepath = path.join(dir, filename);
              try {
                return fs.readFileSync(filepath, 'utf8');
              } catch (e) {
                throw new Error('An error occurred while trying to read the map file at ' + filepath + '\n' + e);
              }
            }
            function Converter(sm, opts) {
              opts = opts || {};
              if (opts.isFileComment)
                sm = readFromFileMap(sm, opts.commentFileDir);
              if (opts.hasComment)
                sm = stripComment(sm);
              if (opts.isEncoded)
                sm = decodeBase64(sm);
              if (opts.isJSON || opts.isEncoded)
                sm = JSON.parse(sm);
              this.sourcemap = sm;
            }
            function convertFromLargeSource(content) {
              var lines = content.split('\n');
              var line;
              for (var i = lines.length - 1; i > 0; i--) {
                line = lines[i];
                if (~line.indexOf('sourceMappingURL=data:'))
                  return exports.fromComment(line);
              }
            }
            Converter.prototype.toJSON = function(space) {
              return JSON.stringify(this.sourcemap, null, space);
            };
            Converter.prototype.toBase64 = function() {
              var json = this.toJSON();
              return new Buffer(json).toString('base64');
            };
            Converter.prototype.toComment = function(options) {
              var base64 = this.toBase64();
              var data = 'sourceMappingURL=data:application/json;base64,' + base64;
              return options && options.multiline ? '/*# ' + data + ' */' : '//# ' + data;
            };
            Converter.prototype.toObject = function() {
              return JSON.parse(this.toJSON());
            };
            Converter.prototype.addProperty = function(key, value) {
              if (this.sourcemap.hasOwnProperty(key))
                throw new Error('property %s already exists on the sourcemap, use set property instead');
              return this.setProperty(key, value);
            };
            Converter.prototype.setProperty = function(key, value) {
              this.sourcemap[key] = value;
              return this;
            };
            Converter.prototype.getProperty = function(key) {
              return this.sourcemap[key];
            };
            exports.fromObject = function(obj) {
              return new Converter(obj);
            };
            exports.fromJSON = function(json) {
              return new Converter(json, {isJSON: true});
            };
            exports.fromBase64 = function(base64) {
              return new Converter(base64, {isEncoded: true});
            };
            exports.fromComment = function(comment) {
              comment = comment.replace(/^\/\*/g, '//').replace(/\*\/$/g, '');
              return new Converter(comment, {
                isEncoded: true,
                hasComment: true
              });
            };
            exports.fromMapFileComment = function(comment, dir) {
              return new Converter(comment, {
                commentFileDir: dir,
                isFileComment: true,
                isJSON: true
              });
            };
            exports.fromSource = function(content, largeSource) {
              if (largeSource) {
                var res = convertFromLargeSource(content);
                return res ? res : null;
              }
              var m = content.match(commentRx);
              commentRx.lastIndex = 0;
              return m ? exports.fromComment(m.pop()) : null;
            };
            exports.fromMapFileSource = function(content, dir) {
              var m = content.match(mapFileCommentRx);
              mapFileCommentRx.lastIndex = 0;
              return m ? exports.fromMapFileComment(m.pop(), dir) : null;
            };
            exports.removeComments = function(src) {
              commentRx.lastIndex = 0;
              return src.replace(commentRx, '');
            };
            exports.removeMapFileComments = function(src) {
              mapFileCommentRx.lastIndex = 0;
              return src.replace(mapFileCommentRx, '');
            };
            exports.generateMapFileComment = function(file, options) {
              var data = 'sourceMappingURL=' + file;
              return options && options.multiline ? '/*# ' + data + ' */' : '//# ' + data;
            };
            Object.defineProperty(exports, 'commentRegex', {get: function getCommentRegex() {
                commentRx.lastIndex = 0;
                return commentRx;
              }});
            Object.defineProperty(exports, 'mapFileCommentRegex', {get: function getMapFileCommentRegex() {
                mapFileCommentRx.lastIndex = 0;
                return mapFileCommentRx;
              }});
          }).call(this, _dereq_(4).Buffer);
        }, {
          "3": 3,
          "4": 4,
          "9": 9
        }],
        229: [function(_dereq_, module, exports) {
          module.exports = function(it) {
            if (typeof it != 'function')
              throw TypeError(it + ' is not a function!');
            return it;
          };
        }, {}],
        230: [function(_dereq_, module, exports) {
          var UNSCOPABLES = _dereq_(310)('unscopables'),
              ArrayProto = Array.prototype;
          if (ArrayProto[UNSCOPABLES] == undefined)
            _dereq_(258)(ArrayProto, UNSCOPABLES, {});
          module.exports = function(key) {
            ArrayProto[UNSCOPABLES][key] = true;
          };
        }, {
          "258": 258,
          "310": 310
        }],
        231: [function(_dereq_, module, exports) {
          var isObject = _dereq_(265);
          module.exports = function(it) {
            if (!isObject(it))
              throw TypeError(it + ' is not an object!');
            return it;
          };
        }, {"265": 265}],
        232: [function(_dereq_, module, exports) {
          'use strict';
          var toObject = _dereq_(307),
              toIndex = _dereq_(303),
              toLength = _dereq_(306);
          module.exports = [].copyWithin || function copyWithin(target, start) {
            var O = toObject(this),
                len = toLength(O.length),
                to = toIndex(target, len),
                from = toIndex(start, len),
                $$ = arguments,
                end = $$.length > 2 ? $$[2] : undefined,
                count = Math.min((end === undefined ? len : toIndex(end, len)) - from, len - to),
                inc = 1;
            if (from < to && to < from + count) {
              inc = -1;
              from += count - 1;
              to += count - 1;
            }
            while (count-- > 0) {
              if (from in O)
                O[to] = O[from];
              else
                delete O[to];
              to += inc;
              from += inc;
            }
            return O;
          };
        }, {
          "303": 303,
          "306": 306,
          "307": 307
        }],
        233: [function(_dereq_, module, exports) {
          'use strict';
          var toObject = _dereq_(307),
              toIndex = _dereq_(303),
              toLength = _dereq_(306);
          module.exports = [].fill || function fill(value) {
            var O = toObject(this),
                length = toLength(O.length),
                $$ = arguments,
                $$len = $$.length,
                index = toIndex($$len > 1 ? $$[1] : undefined, length),
                end = $$len > 2 ? $$[2] : undefined,
                endPos = end === undefined ? length : toIndex(end, length);
            while (endPos > index)
              O[index++] = value;
            return O;
          };
        }, {
          "303": 303,
          "306": 306,
          "307": 307
        }],
        234: [function(_dereq_, module, exports) {
          var toIObject = _dereq_(305),
              toLength = _dereq_(306),
              toIndex = _dereq_(303);
          module.exports = function(IS_INCLUDES) {
            return function($this, el, fromIndex) {
              var O = toIObject($this),
                  length = toLength(O.length),
                  index = toIndex(fromIndex, length),
                  value;
              if (IS_INCLUDES && el != el)
                while (length > index) {
                  value = O[index++];
                  if (value != value)
                    return true;
                }
              else
                for (; length > index; index++)
                  if (IS_INCLUDES || index in O) {
                    if (O[index] === el)
                      return IS_INCLUDES || index;
                  }
              return !IS_INCLUDES && -1;
            };
          };
        }, {
          "303": 303,
          "305": 305,
          "306": 306
        }],
        235: [function(_dereq_, module, exports) {
          var ctx = _dereq_(244),
              IObject = _dereq_(261),
              toObject = _dereq_(307),
              toLength = _dereq_(306),
              asc = _dereq_(236);
          module.exports = function(TYPE) {
            var IS_MAP = TYPE == 1,
                IS_FILTER = TYPE == 2,
                IS_SOME = TYPE == 3,
                IS_EVERY = TYPE == 4,
                IS_FIND_INDEX = TYPE == 6,
                NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
            return function($this, callbackfn, that) {
              var O = toObject($this),
                  self = IObject(O),
                  f = ctx(callbackfn, that, 3),
                  length = toLength(self.length),
                  index = 0,
                  result = IS_MAP ? asc($this, length) : IS_FILTER ? asc($this, 0) : undefined,
                  val,
                  res;
              for (; length > index; index++)
                if (NO_HOLES || index in self) {
                  val = self[index];
                  res = f(val, index, O);
                  if (TYPE) {
                    if (IS_MAP)
                      result[index] = res;
                    else if (res)
                      switch (TYPE) {
                        case 3:
                          return true;
                        case 5:
                          return val;
                        case 6:
                          return index;
                        case 2:
                          result.push(val);
                      }
                    else if (IS_EVERY)
                      return false;
                  }
                }
              return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
            };
          };
        }, {
          "236": 236,
          "244": 244,
          "261": 261,
          "306": 306,
          "307": 307
        }],
        236: [function(_dereq_, module, exports) {
          var isObject = _dereq_(265),
              isArray = _dereq_(263),
              SPECIES = _dereq_(310)('species');
          module.exports = function(original, length) {
            var C;
            if (isArray(original)) {
              C = original.constructor;
              if (typeof C == 'function' && (C === Array || isArray(C.prototype)))
                C = undefined;
              if (isObject(C)) {
                C = C[SPECIES];
                if (C === null)
                  C = undefined;
              }
            }
            return new (C === undefined ? Array : C)(length);
          };
        }, {
          "263": 263,
          "265": 265,
          "310": 310
        }],
        237: [function(_dereq_, module, exports) {
          var cof = _dereq_(238),
              TAG = _dereq_(310)('toStringTag'),
              ARG = cof(function() {
                return arguments;
              }()) == 'Arguments';
          module.exports = function(it) {
            var O,
                T,
                B;
            return it === undefined ? 'Undefined' : it === null ? 'Null' : typeof(T = (O = Object(it))[TAG]) == 'string' ? T : ARG ? cof(O) : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
          };
        }, {
          "238": 238,
          "310": 310
        }],
        238: [function(_dereq_, module, exports) {
          var toString = {}.toString;
          module.exports = function(it) {
            return toString.call(it).slice(8, -1);
          };
        }, {}],
        239: [function(_dereq_, module, exports) {
          'use strict';
          var $ = _dereq_(273),
              hide = _dereq_(258),
              redefineAll = _dereq_(287),
              ctx = _dereq_(244),
              strictNew = _dereq_(296),
              defined = _dereq_(245),
              forOf = _dereq_(254),
              $iterDefine = _dereq_(269),
              step = _dereq_(271),
              ID = _dereq_(309)('id'),
              $has = _dereq_(257),
              isObject = _dereq_(265),
              setSpecies = _dereq_(292),
              DESCRIPTORS = _dereq_(246),
              isExtensible = Object.isExtensible || isObject,
              SIZE = DESCRIPTORS ? '_s' : 'size',
              id = 0;
          var fastKey = function(it, create) {
            if (!isObject(it))
              return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
            if (!$has(it, ID)) {
              if (!isExtensible(it))
                return 'F';
              if (!create)
                return 'E';
              hide(it, ID, ++id);
            }
            return 'O' + it[ID];
          };
          var getEntry = function(that, key) {
            var index = fastKey(key),
                entry;
            if (index !== 'F')
              return that._i[index];
            for (entry = that._f; entry; entry = entry.n) {
              if (entry.k == key)
                return entry;
            }
          };
          module.exports = {
            getConstructor: function(wrapper, NAME, IS_MAP, ADDER) {
              var C = wrapper(function(that, iterable) {
                strictNew(that, C, NAME);
                that._i = $.create(null);
                that._f = undefined;
                that._l = undefined;
                that[SIZE] = 0;
                if (iterable != undefined)
                  forOf(iterable, IS_MAP, that[ADDER], that);
              });
              redefineAll(C.prototype, {
                clear: function clear() {
                  for (var that = this,
                      data = that._i,
                      entry = that._f; entry; entry = entry.n) {
                    entry.r = true;
                    if (entry.p)
                      entry.p = entry.p.n = undefined;
                    delete data[entry.i];
                  }
                  that._f = that._l = undefined;
                  that[SIZE] = 0;
                },
                'delete': function(key) {
                  var that = this,
                      entry = getEntry(that, key);
                  if (entry) {
                    var next = entry.n,
                        prev = entry.p;
                    delete that._i[entry.i];
                    entry.r = true;
                    if (prev)
                      prev.n = next;
                    if (next)
                      next.p = prev;
                    if (that._f == entry)
                      that._f = next;
                    if (that._l == entry)
                      that._l = prev;
                    that[SIZE]--;
                  }
                  return !!entry;
                },
                forEach: function forEach(callbackfn) {
                  var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3),
                      entry;
                  while (entry = entry ? entry.n : this._f) {
                    f(entry.v, entry.k, this);
                    while (entry && entry.r)
                      entry = entry.p;
                  }
                },
                has: function has(key) {
                  return !!getEntry(this, key);
                }
              });
              if (DESCRIPTORS)
                $.setDesc(C.prototype, 'size', {get: function() {
                    return defined(this[SIZE]);
                  }});
              return C;
            },
            def: function(that, key, value) {
              var entry = getEntry(that, key),
                  prev,
                  index;
              if (entry) {
                entry.v = value;
              } else {
                that._l = entry = {
                  i: index = fastKey(key, true),
                  k: key,
                  v: value,
                  p: prev = that._l,
                  n: undefined,
                  r: false
                };
                if (!that._f)
                  that._f = entry;
                if (prev)
                  prev.n = entry;
                that[SIZE]++;
                if (index !== 'F')
                  that._i[index] = entry;
              }
              return that;
            },
            getEntry: getEntry,
            setStrong: function(C, NAME, IS_MAP) {
              $iterDefine(C, NAME, function(iterated, kind) {
                this._t = iterated;
                this._k = kind;
                this._l = undefined;
              }, function() {
                var that = this,
                    kind = that._k,
                    entry = that._l;
                while (entry && entry.r)
                  entry = entry.p;
                if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {
                  that._t = undefined;
                  return step(1);
                }
                if (kind == 'keys')
                  return step(0, entry.k);
                if (kind == 'values')
                  return step(0, entry.v);
                return step(0, [entry.k, entry.v]);
              }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);
              setSpecies(NAME);
            }
          };
        }, {
          "244": 244,
          "245": 245,
          "246": 246,
          "254": 254,
          "257": 257,
          "258": 258,
          "265": 265,
          "269": 269,
          "271": 271,
          "273": 273,
          "287": 287,
          "292": 292,
          "296": 296,
          "309": 309
        }],
        240: [function(_dereq_, module, exports) {
          var forOf = _dereq_(254),
              classof = _dereq_(237);
          module.exports = function(NAME) {
            return function toJSON() {
              if (classof(this) != NAME)
                throw TypeError(NAME + "#toJSON isn't generic");
              var arr = [];
              forOf(this, false, arr.push, arr);
              return arr;
            };
          };
        }, {
          "237": 237,
          "254": 254
        }],
        241: [function(_dereq_, module, exports) {
          'use strict';
          var hide = _dereq_(258),
              redefineAll = _dereq_(287),
              anObject = _dereq_(231),
              isObject = _dereq_(265),
              strictNew = _dereq_(296),
              forOf = _dereq_(254),
              createArrayMethod = _dereq_(235),
              $has = _dereq_(257),
              WEAK = _dereq_(309)('weak'),
              isExtensible = Object.isExtensible || isObject,
              arrayFind = createArrayMethod(5),
              arrayFindIndex = createArrayMethod(6),
              id = 0;
          var frozenStore = function(that) {
            return that._l || (that._l = new FrozenStore);
          };
          var FrozenStore = function() {
            this.a = [];
          };
          var findFrozen = function(store, key) {
            return arrayFind(store.a, function(it) {
              return it[0] === key;
            });
          };
          FrozenStore.prototype = {
            get: function(key) {
              var entry = findFrozen(this, key);
              if (entry)
                return entry[1];
            },
            has: function(key) {
              return !!findFrozen(this, key);
            },
            set: function(key, value) {
              var entry = findFrozen(this, key);
              if (entry)
                entry[1] = value;
              else
                this.a.push([key, value]);
            },
            'delete': function(key) {
              var index = arrayFindIndex(this.a, function(it) {
                return it[0] === key;
              });
              if (~index)
                this.a.splice(index, 1);
              return !!~index;
            }
          };
          module.exports = {
            getConstructor: function(wrapper, NAME, IS_MAP, ADDER) {
              var C = wrapper(function(that, iterable) {
                strictNew(that, C, NAME);
                that._i = id++;
                that._l = undefined;
                if (iterable != undefined)
                  forOf(iterable, IS_MAP, that[ADDER], that);
              });
              redefineAll(C.prototype, {
                'delete': function(key) {
                  if (!isObject(key))
                    return false;
                  if (!isExtensible(key))
                    return frozenStore(this)['delete'](key);
                  return $has(key, WEAK) && $has(key[WEAK], this._i) && delete key[WEAK][this._i];
                },
                has: function has(key) {
                  if (!isObject(key))
                    return false;
                  if (!isExtensible(key))
                    return frozenStore(this).has(key);
                  return $has(key, WEAK) && $has(key[WEAK], this._i);
                }
              });
              return C;
            },
            def: function(that, key, value) {
              if (!isExtensible(anObject(key))) {
                frozenStore(that).set(key, value);
              } else {
                $has(key, WEAK) || hide(key, WEAK, {});
                key[WEAK][that._i] = value;
              }
              return that;
            },
            frozenStore: frozenStore,
            WEAK: WEAK
          };
        }, {
          "231": 231,
          "235": 235,
          "254": 254,
          "257": 257,
          "258": 258,
          "265": 265,
          "287": 287,
          "296": 296,
          "309": 309
        }],
        242: [function(_dereq_, module, exports) {
          'use strict';
          var global = _dereq_(256),
              $export = _dereq_(249),
              redefine = _dereq_(288),
              redefineAll = _dereq_(287),
              forOf = _dereq_(254),
              strictNew = _dereq_(296),
              isObject = _dereq_(265),
              fails = _dereq_(251),
              $iterDetect = _dereq_(270),
              setToStringTag = _dereq_(293);
          module.exports = function(NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {
            var Base = global[NAME],
                C = Base,
                ADDER = IS_MAP ? 'set' : 'add',
                proto = C && C.prototype,
                O = {};
            var fixMethod = function(KEY) {
              var fn = proto[KEY];
              redefine(proto, KEY, KEY == 'delete' ? function(a) {
                return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
              } : KEY == 'has' ? function has(a) {
                return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
              } : KEY == 'get' ? function get(a) {
                return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);
              } : KEY == 'add' ? function add(a) {
                fn.call(this, a === 0 ? 0 : a);
                return this;
              } : function set(a, b) {
                fn.call(this, a === 0 ? 0 : a, b);
                return this;
              });
            };
            if (typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function() {
              new C().entries().next();
            }))) {
              C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
              redefineAll(C.prototype, methods);
            } else {
              var instance = new C,
                  HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance,
                  THROWS_ON_PRIMITIVES = fails(function() {
                    instance.has(1);
                  }),
                  ACCEPT_ITERABLES = $iterDetect(function(iter) {
                    new C(iter);
                  }),
                  BUGGY_ZERO;
              if (!ACCEPT_ITERABLES) {
                C = wrapper(function(target, iterable) {
                  strictNew(target, C, NAME);
                  var that = new Base;
                  if (iterable != undefined)
                    forOf(iterable, IS_MAP, that[ADDER], that);
                  return that;
                });
                C.prototype = proto;
                proto.constructor = C;
              }
              IS_WEAK || instance.forEach(function(val, key) {
                BUGGY_ZERO = 1 / key === -Infinity;
              });
              if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
                fixMethod('delete');
                fixMethod('has');
                IS_MAP && fixMethod('get');
              }
              if (BUGGY_ZERO || HASNT_CHAINING)
                fixMethod(ADDER);
              if (IS_WEAK && proto.clear)
                delete proto.clear;
            }
            setToStringTag(C, NAME);
            O[NAME] = C;
            $export($export.G + $export.W + $export.F * (C != Base), O);
            if (!IS_WEAK)
              common.setStrong(C, NAME, IS_MAP);
            return C;
          };
        }, {
          "249": 249,
          "251": 251,
          "254": 254,
          "256": 256,
          "265": 265,
          "270": 270,
          "287": 287,
          "288": 288,
          "293": 293,
          "296": 296
        }],
        243: [function(_dereq_, module, exports) {
          var core = module.exports = {version: '1.2.6'};
          if (typeof __e == 'number')
            __e = core;
        }, {}],
        244: [function(_dereq_, module, exports) {
          var aFunction = _dereq_(229);
          module.exports = function(fn, that, length) {
            aFunction(fn);
            if (that === undefined)
              return fn;
            switch (length) {
              case 1:
                return function(a) {
                  return fn.call(that, a);
                };
              case 2:
                return function(a, b) {
                  return fn.call(that, a, b);
                };
              case 3:
                return function(a, b, c) {
                  return fn.call(that, a, b, c);
                };
            }
            return function() {
              return fn.apply(that, arguments);
            };
          };
        }, {"229": 229}],
        245: [function(_dereq_, module, exports) {
          module.exports = function(it) {
            if (it == undefined)
              throw TypeError("Can't call method on  " + it);
            return it;
          };
        }, {}],
        246: [function(_dereq_, module, exports) {
          module.exports = !_dereq_(251)(function() {
            return Object.defineProperty({}, 'a', {get: function() {
                return 7;
              }}).a != 7;
          });
        }, {"251": 251}],
        247: [function(_dereq_, module, exports) {
          var isObject = _dereq_(265),
              document = _dereq_(256).document,
              is = isObject(document) && isObject(document.createElement);
          module.exports = function(it) {
            return is ? document.createElement(it) : {};
          };
        }, {
          "256": 256,
          "265": 265
        }],
        248: [function(_dereq_, module, exports) {
          var $ = _dereq_(273);
          module.exports = function(it) {
            var keys = $.getKeys(it),
                getSymbols = $.getSymbols;
            if (getSymbols) {
              var symbols = getSymbols(it),
                  isEnum = $.isEnum,
                  i = 0,
                  key;
              while (symbols.length > i)
                if (isEnum.call(it, key = symbols[i++]))
                  keys.push(key);
            }
            return keys;
          };
        }, {"273": 273}],
        249: [function(_dereq_, module, exports) {
          var global = _dereq_(256),
              core = _dereq_(243),
              hide = _dereq_(258),
              redefine = _dereq_(288),
              ctx = _dereq_(244),
              PROTOTYPE = 'prototype';
          var $export = function(type, name, source) {
            var IS_FORCED = type & $export.F,
                IS_GLOBAL = type & $export.G,
                IS_STATIC = type & $export.S,
                IS_PROTO = type & $export.P,
                IS_BIND = type & $export.B,
                target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE],
                exports = IS_GLOBAL ? core : core[name] || (core[name] = {}),
                expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {}),
                key,
                own,
                out,
                exp;
            if (IS_GLOBAL)
              source = name;
            for (key in source) {
              own = !IS_FORCED && target && key in target;
              out = (own ? target : source)[key];
              exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
              if (target && !own)
                redefine(target, key, out);
              if (exports[key] != out)
                hide(exports, key, exp);
              if (IS_PROTO && expProto[key] != out)
                expProto[key] = out;
            }
          };
          global.core = core;
          $export.F = 1;
          $export.G = 2;
          $export.S = 4;
          $export.P = 8;
          $export.B = 16;
          $export.W = 32;
          module.exports = $export;
        }, {
          "243": 243,
          "244": 244,
          "256": 256,
          "258": 258,
          "288": 288
        }],
        250: [function(_dereq_, module, exports) {
          var MATCH = _dereq_(310)('match');
          module.exports = function(KEY) {
            var re = /./;
            try {
              '/./'[KEY](re);
            } catch (e) {
              try {
                re[MATCH] = false;
                return !'/./'[KEY](re);
              } catch (f) {}
            }
            return true;
          };
        }, {"310": 310}],
        251: [function(_dereq_, module, exports) {
          module.exports = function(exec) {
            try {
              return !!exec();
            } catch (e) {
              return true;
            }
          };
        }, {}],
        252: [function(_dereq_, module, exports) {
          'use strict';
          var hide = _dereq_(258),
              redefine = _dereq_(288),
              fails = _dereq_(251),
              defined = _dereq_(245),
              wks = _dereq_(310);
          module.exports = function(KEY, length, exec) {
            var SYMBOL = wks(KEY),
                original = ''[KEY];
            if (fails(function() {
              var O = {};
              O[SYMBOL] = function() {
                return 7;
              };
              return ''[KEY](O) != 7;
            })) {
              redefine(String.prototype, KEY, exec(defined, SYMBOL, original));
              hide(RegExp.prototype, SYMBOL, length == 2 ? function(string, arg) {
                return original.call(string, this, arg);
              } : function(string) {
                return original.call(string, this);
              });
            }
          };
        }, {
          "245": 245,
          "251": 251,
          "258": 258,
          "288": 288,
          "310": 310
        }],
        253: [function(_dereq_, module, exports) {
          'use strict';
          var anObject = _dereq_(231);
          module.exports = function() {
            var that = anObject(this),
                result = '';
            if (that.global)
              result += 'g';
            if (that.ignoreCase)
              result += 'i';
            if (that.multiline)
              result += 'm';
            if (that.unicode)
              result += 'u';
            if (that.sticky)
              result += 'y';
            return result;
          };
        }, {"231": 231}],
        254: [function(_dereq_, module, exports) {
          var ctx = _dereq_(244),
              call = _dereq_(267),
              isArrayIter = _dereq_(262),
              anObject = _dereq_(231),
              toLength = _dereq_(306),
              getIterFn = _dereq_(311);
          module.exports = function(iterable, entries, fn, that) {
            var iterFn = getIterFn(iterable),
                f = ctx(fn, that, entries ? 2 : 1),
                index = 0,
                length,
                step,
                iterator;
            if (typeof iterFn != 'function')
              throw TypeError(iterable + ' is not iterable!');
            if (isArrayIter(iterFn))
              for (length = toLength(iterable.length); length > index; index++) {
                entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
              }
            else
              for (iterator = iterFn.call(iterable); !(step = iterator.next()).done; ) {
                call(iterator, f, step.value, entries);
              }
          };
        }, {
          "231": 231,
          "244": 244,
          "262": 262,
          "267": 267,
          "306": 306,
          "311": 311
        }],
        255: [function(_dereq_, module, exports) {
          var toIObject = _dereq_(305),
              getNames = _dereq_(273).getNames,
              toString = {}.toString;
          var windowNames = typeof window == 'object' && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];
          var getWindowNames = function(it) {
            try {
              return getNames(it);
            } catch (e) {
              return windowNames.slice();
            }
          };
          module.exports.get = function getOwnPropertyNames(it) {
            if (windowNames && toString.call(it) == '[object Window]')
              return getWindowNames(it);
            return getNames(toIObject(it));
          };
        }, {
          "273": 273,
          "305": 305
        }],
        256: [function(_dereq_, module, exports) {
          var global = module.exports = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
          if (typeof __g == 'number')
            __g = global;
        }, {}],
        257: [function(_dereq_, module, exports) {
          var hasOwnProperty = {}.hasOwnProperty;
          module.exports = function(it, key) {
            return hasOwnProperty.call(it, key);
          };
        }, {}],
        258: [function(_dereq_, module, exports) {
          var $ = _dereq_(273),
              createDesc = _dereq_(286);
          module.exports = _dereq_(246) ? function(object, key, value) {
            return $.setDesc(object, key, createDesc(1, value));
          } : function(object, key, value) {
            object[key] = value;
            return object;
          };
        }, {
          "246": 246,
          "273": 273,
          "286": 286
        }],
        259: [function(_dereq_, module, exports) {
          module.exports = _dereq_(256).document && document.documentElement;
        }, {"256": 256}],
        260: [function(_dereq_, module, exports) {
          module.exports = function(fn, args, that) {
            var un = that === undefined;
            switch (args.length) {
              case 0:
                return un ? fn() : fn.call(that);
              case 1:
                return un ? fn(args[0]) : fn.call(that, args[0]);
              case 2:
                return un ? fn(args[0], args[1]) : fn.call(that, args[0], args[1]);
              case 3:
                return un ? fn(args[0], args[1], args[2]) : fn.call(that, args[0], args[1], args[2]);
              case 4:
                return un ? fn(args[0], args[1], args[2], args[3]) : fn.call(that, args[0], args[1], args[2], args[3]);
            }
            return fn.apply(that, args);
          };
        }, {}],
        261: [function(_dereq_, module, exports) {
          var cof = _dereq_(238);
          module.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it) {
            return cof(it) == 'String' ? it.split('') : Object(it);
          };
        }, {"238": 238}],
        262: [function(_dereq_, module, exports) {
          var Iterators = _dereq_(272),
              ITERATOR = _dereq_(310)('iterator'),
              ArrayProto = Array.prototype;
          module.exports = function(it) {
            return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
          };
        }, {
          "272": 272,
          "310": 310
        }],
        263: [function(_dereq_, module, exports) {
          var cof = _dereq_(238);
          module.exports = Array.isArray || function(arg) {
            return cof(arg) == 'Array';
          };
        }, {"238": 238}],
        264: [function(_dereq_, module, exports) {
          var isObject = _dereq_(265),
              floor = Math.floor;
          module.exports = function isInteger(it) {
            return !isObject(it) && isFinite(it) && floor(it) === it;
          };
        }, {"265": 265}],
        265: [function(_dereq_, module, exports) {
          module.exports = function(it) {
            return typeof it === 'object' ? it !== null : typeof it === 'function';
          };
        }, {}],
        266: [function(_dereq_, module, exports) {
          var isObject = _dereq_(265),
              cof = _dereq_(238),
              MATCH = _dereq_(310)('match');
          module.exports = function(it) {
            var isRegExp;
            return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');
          };
        }, {
          "238": 238,
          "265": 265,
          "310": 310
        }],
        267: [function(_dereq_, module, exports) {
          var anObject = _dereq_(231);
          module.exports = function(iterator, fn, value, entries) {
            try {
              return entries ? fn(anObject(value)[0], value[1]) : fn(value);
            } catch (e) {
              var ret = iterator['return'];
              if (ret !== undefined)
                anObject(ret.call(iterator));
              throw e;
            }
          };
        }, {"231": 231}],
        268: [function(_dereq_, module, exports) {
          'use strict';
          var $ = _dereq_(273),
              descriptor = _dereq_(286),
              setToStringTag = _dereq_(293),
              IteratorPrototype = {};
          _dereq_(258)(IteratorPrototype, _dereq_(310)('iterator'), function() {
            return this;
          });
          module.exports = function(Constructor, NAME, next) {
            Constructor.prototype = $.create(IteratorPrototype, {next: descriptor(1, next)});
            setToStringTag(Constructor, NAME + ' Iterator');
          };
        }, {
          "258": 258,
          "273": 273,
          "286": 286,
          "293": 293,
          "310": 310
        }],
        269: [function(_dereq_, module, exports) {
          'use strict';
          var LIBRARY = _dereq_(275),
              $export = _dereq_(249),
              redefine = _dereq_(288),
              hide = _dereq_(258),
              has = _dereq_(257),
              Iterators = _dereq_(272),
              $iterCreate = _dereq_(268),
              setToStringTag = _dereq_(293),
              getProto = _dereq_(273).getProto,
              ITERATOR = _dereq_(310)('iterator'),
              BUGGY = !([].keys && 'next' in [].keys()),
              FF_ITERATOR = '@@iterator',
              KEYS = 'keys',
              VALUES = 'values';
          var returnThis = function() {
            return this;
          };
          module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
            $iterCreate(Constructor, NAME, next);
            var getMethod = function(kind) {
              if (!BUGGY && kind in proto)
                return proto[kind];
              switch (kind) {
                case KEYS:
                  return function keys() {
                    return new Constructor(this, kind);
                  };
                case VALUES:
                  return function values() {
                    return new Constructor(this, kind);
                  };
              }
              return function entries() {
                return new Constructor(this, kind);
              };
            };
            var TAG = NAME + ' Iterator',
                DEF_VALUES = DEFAULT == VALUES,
                VALUES_BUG = false,
                proto = Base.prototype,
                $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT],
                $default = $native || getMethod(DEFAULT),
                methods,
                key;
            if ($native) {
              var IteratorPrototype = getProto($default.call(new Base));
              setToStringTag(IteratorPrototype, TAG, true);
              if (!LIBRARY && has(proto, FF_ITERATOR))
                hide(IteratorPrototype, ITERATOR, returnThis);
              if (DEF_VALUES && $native.name !== VALUES) {
                VALUES_BUG = true;
                $default = function values() {
                  return $native.call(this);
                };
              }
            }
            if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
              hide(proto, ITERATOR, $default);
            }
            Iterators[NAME] = $default;
            Iterators[TAG] = returnThis;
            if (DEFAULT) {
              methods = {
                values: DEF_VALUES ? $default : getMethod(VALUES),
                keys: IS_SET ? $default : getMethod(KEYS),
                entries: !DEF_VALUES ? $default : getMethod('entries')
              };
              if (FORCED)
                for (key in methods) {
                  if (!(key in proto))
                    redefine(proto, key, methods[key]);
                }
              else
                $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
            }
            return methods;
          };
        }, {
          "249": 249,
          "257": 257,
          "258": 258,
          "268": 268,
          "272": 272,
          "273": 273,
          "275": 275,
          "288": 288,
          "293": 293,
          "310": 310
        }],
        270: [function(_dereq_, module, exports) {
          var ITERATOR = _dereq_(310)('iterator'),
              SAFE_CLOSING = false;
          try {
            var riter = [7][ITERATOR]();
            riter['return'] = function() {
              SAFE_CLOSING = true;
            };
            Array.from(riter, function() {
              throw 2;
            });
          } catch (e) {}
          module.exports = function(exec, skipClosing) {
            if (!skipClosing && !SAFE_CLOSING)
              return false;
            var safe = false;
            try {
              var arr = [7],
                  iter = arr[ITERATOR]();
              iter.next = function() {
                safe = true;
              };
              arr[ITERATOR] = function() {
                return iter;
              };
              exec(arr);
            } catch (e) {}
            return safe;
          };
        }, {"310": 310}],
        271: [function(_dereq_, module, exports) {
          module.exports = function(done, value) {
            return {
              value: value,
              done: !!done
            };
          };
        }, {}],
        272: [function(_dereq_, module, exports) {
          module.exports = {};
        }, {}],
        273: [function(_dereq_, module, exports) {
          var $Object = Object;
          module.exports = {
            create: $Object.create,
            getProto: $Object.getPrototypeOf,
            isEnum: {}.propertyIsEnumerable,
            getDesc: $Object.getOwnPropertyDescriptor,
            setDesc: $Object.defineProperty,
            setDescs: $Object.defineProperties,
            getKeys: $Object.keys,
            getNames: $Object.getOwnPropertyNames,
            getSymbols: $Object.getOwnPropertySymbols,
            each: [].forEach
          };
        }, {}],
        274: [function(_dereq_, module, exports) {
          var $ = _dereq_(273),
              toIObject = _dereq_(305);
          module.exports = function(object, el) {
            var O = toIObject(object),
                keys = $.getKeys(O),
                length = keys.length,
                index = 0,
                key;
            while (length > index)
              if (O[key = keys[index++]] === el)
                return key;
          };
        }, {
          "273": 273,
          "305": 305
        }],
        275: [function(_dereq_, module, exports) {
          module.exports = false;
        }, {}],
        276: [function(_dereq_, module, exports) {
          module.exports = Math.expm1 || function expm1(x) {
            return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1;
          };
        }, {}],
        277: [function(_dereq_, module, exports) {
          module.exports = Math.log1p || function log1p(x) {
            return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x);
          };
        }, {}],
        278: [function(_dereq_, module, exports) {
          module.exports = Math.sign || function sign(x) {
            return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
          };
        }, {}],
        279: [function(_dereq_, module, exports) {
          var global = _dereq_(256),
              macrotask = _dereq_(302).set,
              Observer = global.MutationObserver || global.WebKitMutationObserver,
              process = global.process,
              Promise = global.Promise,
              isNode = _dereq_(238)(process) == 'process',
              head,
              last,
              notify;
          var flush = function() {
            var parent,
                domain,
                fn;
            if (isNode && (parent = process.domain)) {
              process.domain = null;
              parent.exit();
            }
            while (head) {
              domain = head.domain;
              fn = head.fn;
              if (domain)
                domain.enter();
              fn();
              if (domain)
                domain.exit();
              head = head.next;
            }
            last = undefined;
            if (parent)
              parent.enter();
          };
          if (isNode) {
            notify = function() {
              process.nextTick(flush);
            };
          } else if (Observer) {
            var toggle = 1,
                node = document.createTextNode('');
            new Observer(flush).observe(node, {characterData: true});
            notify = function() {
              node.data = toggle = -toggle;
            };
          } else if (Promise && Promise.resolve) {
            notify = function() {
              Promise.resolve().then(flush);
            };
          } else {
            notify = function() {
              macrotask.call(global, flush);
            };
          }
          module.exports = function asap(fn) {
            var task = {
              fn: fn,
              next: undefined,
              domain: isNode && process.domain
            };
            if (last)
              last.next = task;
            if (!head) {
              head = task;
              notify();
            }
            last = task;
          };
        }, {
          "238": 238,
          "256": 256,
          "302": 302
        }],
        280: [function(_dereq_, module, exports) {
          var $ = _dereq_(273),
              toObject = _dereq_(307),
              IObject = _dereq_(261);
          module.exports = _dereq_(251)(function() {
            var a = Object.assign,
                A = {},
                B = {},
                S = Symbol(),
                K = 'abcdefghijklmnopqrst';
            A[S] = 7;
            K.split('').forEach(function(k) {
              B[k] = k;
            });
            return a({}, A)[S] != 7 || Object.keys(a({}, B)).join('') != K;
          }) ? function assign(target, source) {
            var T = toObject(target),
                $$ = arguments,
                $$len = $$.length,
                index = 1,
                getKeys = $.getKeys,
                getSymbols = $.getSymbols,
                isEnum = $.isEnum;
            while ($$len > index) {
              var S = IObject($$[index++]),
                  keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S),
                  length = keys.length,
                  j = 0,
                  key;
              while (length > j)
                if (isEnum.call(S, key = keys[j++]))
                  T[key] = S[key];
            }
            return T;
          } : Object.assign;
        }, {
          "251": 251,
          "261": 261,
          "273": 273,
          "307": 307
        }],
        281: [function(_dereq_, module, exports) {
          var $export = _dereq_(249),
              core = _dereq_(243),
              fails = _dereq_(251);
          module.exports = function(KEY, exec) {
            var fn = (core.Object || {})[KEY] || Object[KEY],
                exp = {};
            exp[KEY] = exec(fn);
            $export($export.S + $export.F * fails(function() {
              fn(1);
            }), 'Object', exp);
          };
        }, {
          "243": 243,
          "249": 249,
          "251": 251
        }],
        282: [function(_dereq_, module, exports) {
          var $ = _dereq_(273),
              toIObject = _dereq_(305),
              isEnum = $.isEnum;
          module.exports = function(isEntries) {
            return function(it) {
              var O = toIObject(it),
                  keys = $.getKeys(O),
                  length = keys.length,
                  i = 0,
                  result = [],
                  key;
              while (length > i)
                if (isEnum.call(O, key = keys[i++])) {
                  result.push(isEntries ? [key, O[key]] : O[key]);
                }
              return result;
            };
          };
        }, {
          "273": 273,
          "305": 305
        }],
        283: [function(_dereq_, module, exports) {
          var $ = _dereq_(273),
              anObject = _dereq_(231),
              Reflect = _dereq_(256).Reflect;
          module.exports = Reflect && Reflect.ownKeys || function ownKeys(it) {
            var keys = $.getNames(anObject(it)),
                getSymbols = $.getSymbols;
            return getSymbols ? keys.concat(getSymbols(it)) : keys;
          };
        }, {
          "231": 231,
          "256": 256,
          "273": 273
        }],
        284: [function(_dereq_, module, exports) {
          'use strict';
          var path = _dereq_(285),
              invoke = _dereq_(260),
              aFunction = _dereq_(229);
          module.exports = function() {
            var fn = aFunction(this),
                length = arguments.length,
                pargs = Array(length),
                i = 0,
                _ = path._,
                holder = false;
            while (length > i)
              if ((pargs[i] = arguments[i++]) === _)
                holder = true;
            return function() {
              var that = this,
                  $$ = arguments,
                  $$len = $$.length,
                  j = 0,
                  k = 0,
                  args;
              if (!holder && !$$len)
                return invoke(fn, pargs, that);
              args = pargs.slice();
              if (holder)
                for (; length > j; j++)
                  if (args[j] === _)
                    args[j] = $$[k++];
              while ($$len > k)
                args.push($$[k++]);
              return invoke(fn, args, that);
            };
          };
        }, {
          "229": 229,
          "260": 260,
          "285": 285
        }],
        285: [function(_dereq_, module, exports) {
          module.exports = _dereq_(256);
        }, {"256": 256}],
        286: [function(_dereq_, module, exports) {
          module.exports = function(bitmap, value) {
            return {
              enumerable: !(bitmap & 1),
              configurable: !(bitmap & 2),
              writable: !(bitmap & 4),
              value: value
            };
          };
        }, {}],
        287: [function(_dereq_, module, exports) {
          var redefine = _dereq_(288);
          module.exports = function(target, src) {
            for (var key in src)
              redefine(target, key, src[key]);
            return target;
          };
        }, {"288": 288}],
        288: [function(_dereq_, module, exports) {
          var global = _dereq_(256),
              hide = _dereq_(258),
              SRC = _dereq_(309)('src'),
              TO_STRING = 'toString',
              $toString = Function[TO_STRING],
              TPL = ('' + $toString).split(TO_STRING);
          _dereq_(243).inspectSource = function(it) {
            return $toString.call(it);
          };
          (module.exports = function(O, key, val, safe) {
            if (typeof val == 'function') {
              val.hasOwnProperty(SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));
              val.hasOwnProperty('name') || hide(val, 'name', key);
            }
            if (O === global) {
              O[key] = val;
            } else {
              if (!safe)
                delete O[key];
              hide(O, key, val);
            }
          })(Function.prototype, TO_STRING, function toString() {
            return typeof this == 'function' && this[SRC] || $toString.call(this);
          });
        }, {
          "243": 243,
          "256": 256,
          "258": 258,
          "309": 309
        }],
        289: [function(_dereq_, module, exports) {
          module.exports = function(regExp, replace) {
            var replacer = replace === Object(replace) ? function(part) {
              return replace[part];
            } : replace;
            return function(it) {
              return String(it).replace(regExp, replacer);
            };
          };
        }, {}],
        290: [function(_dereq_, module, exports) {
          module.exports = Object.is || function is(x, y) {
            return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
          };
        }, {}],
        291: [function(_dereq_, module, exports) {
          var getDesc = _dereq_(273).getDesc,
              isObject = _dereq_(265),
              anObject = _dereq_(231);
          var check = function(O, proto) {
            anObject(O);
            if (!isObject(proto) && proto !== null)
              throw TypeError(proto + ": can't set as prototype!");
          };
          module.exports = {
            set: Object.setPrototypeOf || ('__proto__' in {} ? function(test, buggy, set) {
              try {
                set = _dereq_(244)(Function.call, getDesc(Object.prototype, '__proto__').set, 2);
                set(test, []);
                buggy = !(test instanceof Array);
              } catch (e) {
                buggy = true;
              }
              return function setPrototypeOf(O, proto) {
                check(O, proto);
                if (buggy)
                  O.__proto__ = proto;
                else
                  set(O, proto);
                return O;
              };
            }({}, false) : undefined),
            check: check
          };
        }, {
          "231": 231,
          "244": 244,
          "265": 265,
          "273": 273
        }],
        292: [function(_dereq_, module, exports) {
          'use strict';
          var global = _dereq_(256),
              $ = _dereq_(273),
              DESCRIPTORS = _dereq_(246),
              SPECIES = _dereq_(310)('species');
          module.exports = function(KEY) {
            var C = global[KEY];
            if (DESCRIPTORS && C && !C[SPECIES])
              $.setDesc(C, SPECIES, {
                configurable: true,
                get: function() {
                  return this;
                }
              });
          };
        }, {
          "246": 246,
          "256": 256,
          "273": 273,
          "310": 310
        }],
        293: [function(_dereq_, module, exports) {
          var def = _dereq_(273).setDesc,
              has = _dereq_(257),
              TAG = _dereq_(310)('toStringTag');
          module.exports = function(it, tag, stat) {
            if (it && !has(it = stat ? it : it.prototype, TAG))
              def(it, TAG, {
                configurable: true,
                value: tag
              });
          };
        }, {
          "257": 257,
          "273": 273,
          "310": 310
        }],
        294: [function(_dereq_, module, exports) {
          var global = _dereq_(256),
              SHARED = '__core-js_shared__',
              store = global[SHARED] || (global[SHARED] = {});
          module.exports = function(key) {
            return store[key] || (store[key] = {});
          };
        }, {"256": 256}],
        295: [function(_dereq_, module, exports) {
          var anObject = _dereq_(231),
              aFunction = _dereq_(229),
              SPECIES = _dereq_(310)('species');
          module.exports = function(O, D) {
            var C = anObject(O).constructor,
                S;
            return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
          };
        }, {
          "229": 229,
          "231": 231,
          "310": 310
        }],
        296: [function(_dereq_, module, exports) {
          module.exports = function(it, Constructor, name) {
            if (!(it instanceof Constructor))
              throw TypeError(name + ": use the 'new' operator!");
            return it;
          };
        }, {}],
        297: [function(_dereq_, module, exports) {
          var toInteger = _dereq_(304),
              defined = _dereq_(245);
          module.exports = function(TO_STRING) {
            return function(that, pos) {
              var s = String(defined(that)),
                  i = toInteger(pos),
                  l = s.length,
                  a,
                  b;
              if (i < 0 || i >= l)
                return TO_STRING ? '' : undefined;
              a = s.charCodeAt(i);
              return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff ? TO_STRING ? s.charAt(i) : a : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
            };
          };
        }, {
          "245": 245,
          "304": 304
        }],
        298: [function(_dereq_, module, exports) {
          var isRegExp = _dereq_(266),
              defined = _dereq_(245);
          module.exports = function(that, searchString, NAME) {
            if (isRegExp(searchString))
              throw TypeError('String#' + NAME + " doesn't accept regex!");
            return String(defined(that));
          };
        }, {
          "245": 245,
          "266": 266
        }],
        299: [function(_dereq_, module, exports) {
          var toLength = _dereq_(306),
              repeat = _dereq_(300),
              defined = _dereq_(245);
          module.exports = function(that, maxLength, fillString, left) {
            var S = String(defined(that)),
                stringLength = S.length,
                fillStr = fillString === undefined ? ' ' : String(fillString),
                intMaxLength = toLength(maxLength);
            if (intMaxLength <= stringLength)
              return S;
            if (fillStr == '')
              fillStr = ' ';
            var fillLen = intMaxLength - stringLength,
                stringFiller = repeat.call(fillStr, Math.ceil(fillLen / fillStr.length));
            if (stringFiller.length > fillLen)
              stringFiller = stringFiller.slice(0, fillLen);
            return left ? stringFiller + S : S + stringFiller;
          };
        }, {
          "245": 245,
          "300": 300,
          "306": 306
        }],
        300: [function(_dereq_, module, exports) {
          'use strict';
          var toInteger = _dereq_(304),
              defined = _dereq_(245);
          module.exports = function repeat(count) {
            var str = String(defined(this)),
                res = '',
                n = toInteger(count);
            if (n < 0 || n == Infinity)
              throw RangeError("Count can't be negative");
            for (; n > 0; (n >>>= 1) && (str += str))
              if (n & 1)
                res += str;
            return res;
          };
        }, {
          "245": 245,
          "304": 304
        }],
        301: [function(_dereq_, module, exports) {
          var $export = _dereq_(249),
              defined = _dereq_(245),
              fails = _dereq_(251),
              spaces = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' + '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF',
              space = '[' + spaces + ']',
              non = '\u200b\u0085',
              ltrim = RegExp('^' + space + space + '*'),
              rtrim = RegExp(space + space + '*$');
          var exporter = function(KEY, exec) {
            var exp = {};
            exp[KEY] = exec(trim);
            $export($export.P + $export.F * fails(function() {
              return !!spaces[KEY]() || non[KEY]() != non;
            }), 'String', exp);
          };
          var trim = exporter.trim = function(string, TYPE) {
            string = String(defined(string));
            if (TYPE & 1)
              string = string.replace(ltrim, '');
            if (TYPE & 2)
              string = string.replace(rtrim, '');
            return string;
          };
          module.exports = exporter;
        }, {
          "245": 245,
          "249": 249,
          "251": 251
        }],
        302: [function(_dereq_, module, exports) {
          var ctx = _dereq_(244),
              invoke = _dereq_(260),
              html = _dereq_(259),
              cel = _dereq_(247),
              global = _dereq_(256),
              process = global.process,
              setTask = global.setImmediate,
              clearTask = global.clearImmediate,
              MessageChannel = global.MessageChannel,
              counter = 0,
              queue = {},
              ONREADYSTATECHANGE = 'onreadystatechange',
              defer,
              channel,
              port;
          var run = function() {
            var id = +this;
            if (queue.hasOwnProperty(id)) {
              var fn = queue[id];
              delete queue[id];
              fn();
            }
          };
          var listner = function(event) {
            run.call(event.data);
          };
          if (!setTask || !clearTask) {
            setTask = function setImmediate(fn) {
              var args = [],
                  i = 1;
              while (arguments.length > i)
                args.push(arguments[i++]);
              queue[++counter] = function() {
                invoke(typeof fn == 'function' ? fn : Function(fn), args);
              };
              defer(counter);
              return counter;
            };
            clearTask = function clearImmediate(id) {
              delete queue[id];
            };
            if (_dereq_(238)(process) == 'process') {
              defer = function(id) {
                process.nextTick(ctx(run, id, 1));
              };
            } else if (MessageChannel) {
              channel = new MessageChannel;
              port = channel.port2;
              channel.port1.onmessage = listner;
              defer = ctx(port.postMessage, port, 1);
            } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {
              defer = function(id) {
                global.postMessage(id + '', '*');
              };
              global.addEventListener('message', listner, false);
            } else if (ONREADYSTATECHANGE in cel('script')) {
              defer = function(id) {
                html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function() {
                  html.removeChild(this);
                  run.call(id);
                };
              };
            } else {
              defer = function(id) {
                setTimeout(ctx(run, id, 1), 0);
              };
            }
          }
          module.exports = {
            set: setTask,
            clear: clearTask
          };
        }, {
          "238": 238,
          "244": 244,
          "247": 247,
          "256": 256,
          "259": 259,
          "260": 260
        }],
        303: [function(_dereq_, module, exports) {
          var toInteger = _dereq_(304),
              max = Math.max,
              min = Math.min;
          module.exports = function(index, length) {
            index = toInteger(index);
            return index < 0 ? max(index + length, 0) : min(index, length);
          };
        }, {"304": 304}],
        304: [function(_dereq_, module, exports) {
          var ceil = Math.ceil,
              floor = Math.floor;
          module.exports = function(it) {
            return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
          };
        }, {}],
        305: [function(_dereq_, module, exports) {
          var IObject = _dereq_(261),
              defined = _dereq_(245);
          module.exports = function(it) {
            return IObject(defined(it));
          };
        }, {
          "245": 245,
          "261": 261
        }],
        306: [function(_dereq_, module, exports) {
          var toInteger = _dereq_(304),
              min = Math.min;
          module.exports = function(it) {
            return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0;
          };
        }, {"304": 304}],
        307: [function(_dereq_, module, exports) {
          var defined = _dereq_(245);
          module.exports = function(it) {
            return Object(defined(it));
          };
        }, {"245": 245}],
        308: [function(_dereq_, module, exports) {
          var isObject = _dereq_(265);
          module.exports = function(it, S) {
            if (!isObject(it))
              return it;
            var fn,
                val;
            if (S && typeof(fn = it.toString) == 'function' && !isObject(val = fn.call(it)))
              return val;
            if (typeof(fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))
              return val;
            if (!S && typeof(fn = it.toString) == 'function' && !isObject(val = fn.call(it)))
              return val;
            throw TypeError("Can't convert object to primitive value");
          };
        }, {"265": 265}],
        309: [function(_dereq_, module, exports) {
          var id = 0,
              px = Math.random();
          module.exports = function(key) {
            return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
          };
        }, {}],
        310: [function(_dereq_, module, exports) {
          var store = _dereq_(294)('wks'),
              uid = _dereq_(309),
              Symbol = _dereq_(256).Symbol;
          module.exports = function(name) {
            return store[name] || (store[name] = Symbol && Symbol[name] || (Symbol || uid)('Symbol.' + name));
          };
        }, {
          "256": 256,
          "294": 294,
          "309": 309
        }],
        311: [function(_dereq_, module, exports) {
          var classof = _dereq_(237),
              ITERATOR = _dereq_(310)('iterator'),
              Iterators = _dereq_(272);
          module.exports = _dereq_(243).getIteratorMethod = function(it) {
            if (it != undefined)
              return it[ITERATOR] || it['@@iterator'] || Iterators[classof(it)];
          };
        }, {
          "237": 237,
          "243": 243,
          "272": 272,
          "310": 310
        }],
        312: [function(_dereq_, module, exports) {
          'use strict';
          var $ = _dereq_(273),
              $export = _dereq_(249),
              DESCRIPTORS = _dereq_(246),
              createDesc = _dereq_(286),
              html = _dereq_(259),
              cel = _dereq_(247),
              has = _dereq_(257),
              cof = _dereq_(238),
              invoke = _dereq_(260),
              fails = _dereq_(251),
              anObject = _dereq_(231),
              aFunction = _dereq_(229),
              isObject = _dereq_(265),
              toObject = _dereq_(307),
              toIObject = _dereq_(305),
              toInteger = _dereq_(304),
              toIndex = _dereq_(303),
              toLength = _dereq_(306),
              IObject = _dereq_(261),
              IE_PROTO = _dereq_(309)('__proto__'),
              createArrayMethod = _dereq_(235),
              arrayIndexOf = _dereq_(234)(false),
              ObjectProto = Object.prototype,
              ArrayProto = Array.prototype,
              arraySlice = ArrayProto.slice,
              arrayJoin = ArrayProto.join,
              defineProperty = $.setDesc,
              getOwnDescriptor = $.getDesc,
              defineProperties = $.setDescs,
              factories = {},
              IE8_DOM_DEFINE;
          if (!DESCRIPTORS) {
            IE8_DOM_DEFINE = !fails(function() {
              return defineProperty(cel('div'), 'a', {get: function() {
                  return 7;
                }}).a != 7;
            });
            $.setDesc = function(O, P, Attributes) {
              if (IE8_DOM_DEFINE)
                try {
                  return defineProperty(O, P, Attributes);
                } catch (e) {}
              if ('get' in Attributes || 'set' in Attributes)
                throw TypeError('Accessors not supported!');
              if ('value' in Attributes)
                anObject(O)[P] = Attributes.value;
              return O;
            };
            $.getDesc = function(O, P) {
              if (IE8_DOM_DEFINE)
                try {
                  return getOwnDescriptor(O, P);
                } catch (e) {}
              if (has(O, P))
                return createDesc(!ObjectProto.propertyIsEnumerable.call(O, P), O[P]);
            };
            $.setDescs = defineProperties = function(O, Properties) {
              anObject(O);
              var keys = $.getKeys(Properties),
                  length = keys.length,
                  i = 0,
                  P;
              while (length > i)
                $.setDesc(O, P = keys[i++], Properties[P]);
              return O;
            };
          }
          $export($export.S + $export.F * !DESCRIPTORS, 'Object', {
            getOwnPropertyDescriptor: $.getDesc,
            defineProperty: $.setDesc,
            defineProperties: defineProperties
          });
          var keys1 = ('constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,' + 'toLocaleString,toString,valueOf').split(','),
              keys2 = keys1.concat('length', 'prototype'),
              keysLen1 = keys1.length;
          var createDict = function() {
            var iframe = cel('iframe'),
                i = keysLen1,
                gt = '>',
                iframeDocument;
            iframe.style.display = 'none';
            html.appendChild(iframe);
            iframe.src = 'javascript:';
            iframeDocument = iframe.contentWindow.document;
            iframeDocument.open();
            iframeDocument.write('<script>document.F=Object</script' + gt);
            iframeDocument.close();
            createDict = iframeDocument.F;
            while (i--)
              delete createDict.prototype[keys1[i]];
            return createDict();
          };
          var createGetKeys = function(names, length) {
            return function(object) {
              var O = toIObject(object),
                  i = 0,
                  result = [],
                  key;
              for (key in O)
                if (key != IE_PROTO)
                  has(O, key) && result.push(key);
              while (length > i)
                if (has(O, key = names[i++])) {
                  ~arrayIndexOf(result, key) || result.push(key);
                }
              return result;
            };
          };
          var Empty = function() {};
          $export($export.S, 'Object', {
            getPrototypeOf: $.getProto = $.getProto || function(O) {
              O = toObject(O);
              if (has(O, IE_PROTO))
                return O[IE_PROTO];
              if (typeof O.constructor == 'function' && O instanceof O.constructor) {
                return O.constructor.prototype;
              }
              return O instanceof Object ? ObjectProto : null;
            },
            getOwnPropertyNames: $.getNames = $.getNames || createGetKeys(keys2, keys2.length, true),
            create: $.create = $.create || function(O, Properties) {
              var result;
              if (O !== null) {
                Empty.prototype = anObject(O);
                result = new Empty();
                Empty.prototype = null;
                result[IE_PROTO] = O;
              } else
                result = createDict();
              return Properties === undefined ? result : defineProperties(result, Properties);
            },
            keys: $.getKeys = $.getKeys || createGetKeys(keys1, keysLen1, false)
          });
          var construct = function(F, len, args) {
            if (!(len in factories)) {
              for (var n = [],
                  i = 0; i < len; i++)
                n[i] = 'a[' + i + ']';
              factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');
            }
            return factories[len](F, args);
          };
          $export($export.P, 'Function', {bind: function bind(that) {
              var fn = aFunction(this),
                  partArgs = arraySlice.call(arguments, 1);
              var bound = function() {
                var args = partArgs.concat(arraySlice.call(arguments));
                return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);
              };
              if (isObject(fn.prototype))
                bound.prototype = fn.prototype;
              return bound;
            }});
          $export($export.P + $export.F * fails(function() {
            if (html)
              arraySlice.call(html);
          }), 'Array', {slice: function(begin, end) {
              var len = toLength(this.length),
                  klass = cof(this);
              end = end === undefined ? len : end;
              if (klass == 'Array')
                return arraySlice.call(this, begin, end);
              var start = toIndex(begin, len),
                  upTo = toIndex(end, len),
                  size = toLength(upTo - start),
                  cloned = Array(size),
                  i = 0;
              for (; i < size; i++)
                cloned[i] = klass == 'String' ? this.charAt(start + i) : this[start + i];
              return cloned;
            }});
          $export($export.P + $export.F * (IObject != Object), 'Array', {join: function join(separator) {
              return arrayJoin.call(IObject(this), separator === undefined ? ',' : separator);
            }});
          $export($export.S, 'Array', {isArray: _dereq_(263)});
          var createArrayReduce = function(isRight) {
            return function(callbackfn, memo) {
              aFunction(callbackfn);
              var O = IObject(this),
                  length = toLength(O.length),
                  index = isRight ? length - 1 : 0,
                  i = isRight ? -1 : 1;
              if (arguments.length < 2)
                for (; ; ) {
                  if (index in O) {
                    memo = O[index];
                    index += i;
                    break;
                  }
                  index += i;
                  if (isRight ? index < 0 : length <= index) {
                    throw TypeError('Reduce of empty array with no initial value');
                  }
                }
              for (; isRight ? index >= 0 : length > index; index += i)
                if (index in O) {
                  memo = callbackfn(memo, O[index], index, this);
                }
              return memo;
            };
          };
          var methodize = function($fn) {
            return function(arg1) {
              return $fn(this, arg1, arguments[1]);
            };
          };
          $export($export.P, 'Array', {
            forEach: $.each = $.each || methodize(createArrayMethod(0)),
            map: methodize(createArrayMethod(1)),
            filter: methodize(createArrayMethod(2)),
            some: methodize(createArrayMethod(3)),
            every: methodize(createArrayMethod(4)),
            reduce: createArrayReduce(false),
            reduceRight: createArrayReduce(true),
            indexOf: methodize(arrayIndexOf),
            lastIndexOf: function(el, fromIndex) {
              var O = toIObject(this),
                  length = toLength(O.length),
                  index = length - 1;
              if (arguments.length > 1)
                index = Math.min(index, toInteger(fromIndex));
              if (index < 0)
                index = toLength(length + index);
              for (; index >= 0; index--)
                if (index in O)
                  if (O[index] === el)
                    return index;
              return -1;
            }
          });
          $export($export.S, 'Date', {now: function() {
              return +new Date;
            }});
          var lz = function(num) {
            return num > 9 ? num : '0' + num;
          };
          $export($export.P + $export.F * (fails(function() {
            return new Date(-5e13 - 1).toISOString() != '0385-07-25T07:06:39.999Z';
          }) || !fails(function() {
            new Date(NaN).toISOString();
          })), 'Date', {toISOString: function toISOString() {
              if (!isFinite(this))
                throw RangeError('Invalid time value');
              var d = this,
                  y = d.getUTCFullYear(),
                  m = d.getUTCMilliseconds(),
                  s = y < 0 ? '-' : y > 9999 ? '+' : '';
              return s + ('00000' + Math.abs(y)).slice(s ? -6 : -4) + '-' + lz(d.getUTCMonth() + 1) + '-' + lz(d.getUTCDate()) + 'T' + lz(d.getUTCHours()) + ':' + lz(d.getUTCMinutes()) + ':' + lz(d.getUTCSeconds()) + '.' + (m > 99 ? m : '0' + lz(m)) + 'Z';
            }});
        }, {
          "229": 229,
          "231": 231,
          "234": 234,
          "235": 235,
          "238": 238,
          "246": 246,
          "247": 247,
          "249": 249,
          "251": 251,
          "257": 257,
          "259": 259,
          "260": 260,
          "261": 261,
          "263": 263,
          "265": 265,
          "273": 273,
          "286": 286,
          "303": 303,
          "304": 304,
          "305": 305,
          "306": 306,
          "307": 307,
          "309": 309
        }],
        313: [function(_dereq_, module, exports) {
          var $export = _dereq_(249);
          $export($export.P, 'Array', {copyWithin: _dereq_(232)});
          _dereq_(230)('copyWithin');
        }, {
          "230": 230,
          "232": 232,
          "249": 249
        }],
        314: [function(_dereq_, module, exports) {
          var $export = _dereq_(249);
          $export($export.P, 'Array', {fill: _dereq_(233)});
          _dereq_(230)('fill');
        }, {
          "230": 230,
          "233": 233,
          "249": 249
        }],
        315: [function(_dereq_, module, exports) {
          'use strict';
          var $export = _dereq_(249),
              $find = _dereq_(235)(6),
              KEY = 'findIndex',
              forced = true;
          if (KEY in [])
            Array(1)[KEY](function() {
              forced = false;
            });
          $export($export.P + $export.F * forced, 'Array', {findIndex: function findIndex(callbackfn) {
              return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
            }});
          _dereq_(230)(KEY);
        }, {
          "230": 230,
          "235": 235,
          "249": 249
        }],
        316: [function(_dereq_, module, exports) {
          'use strict';
          var $export = _dereq_(249),
              $find = _dereq_(235)(5),
              KEY = 'find',
              forced = true;
          if (KEY in [])
            Array(1)[KEY](function() {
              forced = false;
            });
          $export($export.P + $export.F * forced, 'Array', {find: function find(callbackfn) {
              return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
            }});
          _dereq_(230)(KEY);
        }, {
          "230": 230,
          "235": 235,
          "249": 249
        }],
        317: [function(_dereq_, module, exports) {
          'use strict';
          var ctx = _dereq_(244),
              $export = _dereq_(249),
              toObject = _dereq_(307),
              call = _dereq_(267),
              isArrayIter = _dereq_(262),
              toLength = _dereq_(306),
              getIterFn = _dereq_(311);
          $export($export.S + $export.F * !_dereq_(270)(function(iter) {
            Array.from(iter);
          }), 'Array', {from: function from(arrayLike) {
              var O = toObject(arrayLike),
                  C = typeof this == 'function' ? this : Array,
                  $$ = arguments,
                  $$len = $$.length,
                  mapfn = $$len > 1 ? $$[1] : undefined,
                  mapping = mapfn !== undefined,
                  index = 0,
                  iterFn = getIterFn(O),
                  length,
                  result,
                  step,
                  iterator;
              if (mapping)
                mapfn = ctx(mapfn, $$len > 2 ? $$[2] : undefined, 2);
              if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {
                for (iterator = iterFn.call(O), result = new C; !(step = iterator.next()).done; index++) {
                  result[index] = mapping ? call(iterator, mapfn, [step.value, index], true) : step.value;
                }
              } else {
                length = toLength(O.length);
                for (result = new C(length); length > index; index++) {
                  result[index] = mapping ? mapfn(O[index], index) : O[index];
                }
              }
              result.length = index;
              return result;
            }});
        }, {
          "244": 244,
          "249": 249,
          "262": 262,
          "267": 267,
          "270": 270,
          "306": 306,
          "307": 307,
          "311": 311
        }],
        318: [function(_dereq_, module, exports) {
          'use strict';
          var addToUnscopables = _dereq_(230),
              step = _dereq_(271),
              Iterators = _dereq_(272),
              toIObject = _dereq_(305);
          module.exports = _dereq_(269)(Array, 'Array', function(iterated, kind) {
            this._t = toIObject(iterated);
            this._i = 0;
            this._k = kind;
          }, function() {
            var O = this._t,
                kind = this._k,
                index = this._i++;
            if (!O || index >= O.length) {
              this._t = undefined;
              return step(1);
            }
            if (kind == 'keys')
              return step(0, index);
            if (kind == 'values')
              return step(0, O[index]);
            return step(0, [index, O[index]]);
          }, 'values');
          Iterators.Arguments = Iterators.Array;
          addToUnscopables('keys');
          addToUnscopables('values');
          addToUnscopables('entries');
        }, {
          "230": 230,
          "269": 269,
          "271": 271,
          "272": 272,
          "305": 305
        }],
        319: [function(_dereq_, module, exports) {
          'use strict';
          var $export = _dereq_(249);
          $export($export.S + $export.F * _dereq_(251)(function() {
            function F() {}
            return !(Array.of.call(F) instanceof F);
          }), 'Array', {of: function of() {
              var index = 0,
                  $$ = arguments,
                  $$len = $$.length,
                  result = new (typeof this == 'function' ? this : Array)($$len);
              while ($$len > index)
                result[index] = $$[index++];
              result.length = $$len;
              return result;
            }});
        }, {
          "249": 249,
          "251": 251
        }],
        320: [function(_dereq_, module, exports) {
          _dereq_(292)('Array');
        }, {"292": 292}],
        321: [function(_dereq_, module, exports) {
          'use strict';
          var $ = _dereq_(273),
              isObject = _dereq_(265),
              HAS_INSTANCE = _dereq_(310)('hasInstance'),
              FunctionProto = Function.prototype;
          if (!(HAS_INSTANCE in FunctionProto))
            $.setDesc(FunctionProto, HAS_INSTANCE, {value: function(O) {
                if (typeof this != 'function' || !isObject(O))
                  return false;
                if (!isObject(this.prototype))
                  return O instanceof this;
                while (O = $.getProto(O))
                  if (this.prototype === O)
                    return true;
                return false;
              }});
        }, {
          "265": 265,
          "273": 273,
          "310": 310
        }],
        322: [function(_dereq_, module, exports) {
          var setDesc = _dereq_(273).setDesc,
              createDesc = _dereq_(286),
              has = _dereq_(257),
              FProto = Function.prototype,
              nameRE = /^\s*function ([^ (]*)/,
              NAME = 'name';
          NAME in FProto || _dereq_(246) && setDesc(FProto, NAME, {
            configurable: true,
            get: function() {
              var match = ('' + this).match(nameRE),
                  name = match ? match[1] : '';
              has(this, NAME) || setDesc(this, NAME, createDesc(5, name));
              return name;
            }
          });
        }, {
          "246": 246,
          "257": 257,
          "273": 273,
          "286": 286
        }],
        323: [function(_dereq_, module, exports) {
          'use strict';
          var strong = _dereq_(239);
          _dereq_(242)('Map', function(get) {
            return function Map() {
              return get(this, arguments.length > 0 ? arguments[0] : undefined);
            };
          }, {
            get: function get(key) {
              var entry = strong.getEntry(this, key);
              return entry && entry.v;
            },
            set: function set(key, value) {
              return strong.def(this, key === 0 ? 0 : key, value);
            }
          }, strong, true);
        }, {
          "239": 239,
          "242": 242
        }],
        324: [function(_dereq_, module, exports) {
          var $export = _dereq_(249),
              log1p = _dereq_(277),
              sqrt = Math.sqrt,
              $acosh = Math.acosh;
          $export($export.S + $export.F * !($acosh && Math.floor($acosh(Number.MAX_VALUE)) == 710), 'Math', {acosh: function acosh(x) {
              return (x = +x) < 1 ? NaN : x > 94906265.62425156 ? Math.log(x) + Math.LN2 : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));
            }});
        }, {
          "249": 249,
          "277": 277
        }],
        325: [function(_dereq_, module, exports) {
          var $export = _dereq_(249);
          function asinh(x) {
            return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1));
          }
          $export($export.S, 'Math', {asinh: asinh});
        }, {"249": 249}],
        326: [function(_dereq_, module, exports) {
          var $export = _dereq_(249);
          $export($export.S, 'Math', {atanh: function atanh(x) {
              return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2;
            }});
        }, {"249": 249}],
        327: [function(_dereq_, module, exports) {
          var $export = _dereq_(249),
              sign = _dereq_(278);
          $export($export.S, 'Math', {cbrt: function cbrt(x) {
              return sign(x = +x) * Math.pow(Math.abs(x), 1 / 3);
            }});
        }, {
          "249": 249,
          "278": 278
        }],
        328: [function(_dereq_, module, exports) {
          var $export = _dereq_(249);
          $export($export.S, 'Math', {clz32: function clz32(x) {
              return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32;
            }});
        }, {"249": 249}],
        329: [function(_dereq_, module, exports) {
          var $export = _dereq_(249),
              exp = Math.exp;
          $export($export.S, 'Math', {cosh: function cosh(x) {
              return (exp(x = +x) + exp(-x)) / 2;
            }});
        }, {"249": 249}],
        330: [function(_dereq_, module, exports) {
          var $export = _dereq_(249);
          $export($export.S, 'Math', {expm1: _dereq_(276)});
        }, {
          "249": 249,
          "276": 276
        }],
        331: [function(_dereq_, module, exports) {
          var $export = _dereq_(249),
              sign = _dereq_(278),
              pow = Math.pow,
              EPSILON = pow(2, -52),
              EPSILON32 = pow(2, -23),
              MAX32 = pow(2, 127) * (2 - EPSILON32),
              MIN32 = pow(2, -126);
          var roundTiesToEven = function(n) {
            return n + 1 / EPSILON - 1 / EPSILON;
          };
          $export($export.S, 'Math', {fround: function fround(x) {
              var $abs = Math.abs(x),
                  $sign = sign(x),
                  a,
                  result;
              if ($abs < MIN32)
                return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
              a = (1 + EPSILON32 / EPSILON) * $abs;
              result = a - (a - $abs);
              if (result > MAX32 || result != result)
                return $sign * Infinity;
              return $sign * result;
            }});
        }, {
          "249": 249,
          "278": 278
        }],
        332: [function(_dereq_, module, exports) {
          var $export = _dereq_(249),
              abs = Math.abs;
          $export($export.S, 'Math', {hypot: function hypot(value1, value2) {
              var sum = 0,
                  i = 0,
                  $$ = arguments,
                  $$len = $$.length,
                  larg = 0,
                  arg,
                  div;
              while (i < $$len) {
                arg = abs($$[i++]);
                if (larg < arg) {
                  div = larg / arg;
                  sum = sum * div * div + 1;
                  larg = arg;
                } else if (arg > 0) {
                  div = arg / larg;
                  sum += div * div;
                } else
                  sum += arg;
              }
              return larg === Infinity ? Infinity : larg * Math.sqrt(sum);
            }});
        }, {"249": 249}],
        333: [function(_dereq_, module, exports) {
          var $export = _dereq_(249),
              $imul = Math.imul;
          $export($export.S + $export.F * _dereq_(251)(function() {
            return $imul(0xffffffff, 5) != -5 || $imul.length != 2;
          }), 'Math', {imul: function imul(x, y) {
              var UINT16 = 0xffff,
                  xn = +x,
                  yn = +y,
                  xl = UINT16 & xn,
                  yl = UINT16 & yn;
              return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);
            }});
        }, {
          "249": 249,
          "251": 251
        }],
        334: [function(_dereq_, module, exports) {
          var $export = _dereq_(249);
          $export($export.S, 'Math', {log10: function log10(x) {
              return Math.log(x) / Math.LN10;
            }});
        }, {"249": 249}],
        335: [function(_dereq_, module, exports) {
          var $export = _dereq_(249);
          $export($export.S, 'Math', {log1p: _dereq_(277)});
        }, {
          "249": 249,
          "277": 277
        }],
        336: [function(_dereq_, module, exports) {
          var $export = _dereq_(249);
          $export($export.S, 'Math', {log2: function log2(x) {
              return Math.log(x) / Math.LN2;
            }});
        }, {"249": 249}],
        337: [function(_dereq_, module, exports) {
          var $export = _dereq_(249);
          $export($export.S, 'Math', {sign: _dereq_(278)});
        }, {
          "249": 249,
          "278": 278
        }],
        338: [function(_dereq_, module, exports) {
          var $export = _dereq_(249),
              expm1 = _dereq_(276),
              exp = Math.exp;
          $export($export.S + $export.F * _dereq_(251)(function() {
            return !Math.sinh(-2e-17) != -2e-17;
          }), 'Math', {sinh: function sinh(x) {
              return Math.abs(x = +x) < 1 ? (expm1(x) - expm1(-x)) / 2 : (exp(x - 1) - exp(-x - 1)) * (Math.E / 2);
            }});
        }, {
          "249": 249,
          "251": 251,
          "276": 276
        }],
        339: [function(_dereq_, module, exports) {
          var $export = _dereq_(249),
              expm1 = _dereq_(276),
              exp = Math.exp;
          $export($export.S, 'Math', {tanh: function tanh(x) {
              var a = expm1(x = +x),
                  b = expm1(-x);
              return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));
            }});
        }, {
          "249": 249,
          "276": 276
        }],
        340: [function(_dereq_, module, exports) {
          var $export = _dereq_(249);
          $export($export.S, 'Math', {trunc: function trunc(it) {
              return (it > 0 ? Math.floor : Math.ceil)(it);
            }});
        }, {"249": 249}],
        341: [function(_dereq_, module, exports) {
          'use strict';
          var $ = _dereq_(273),
              global = _dereq_(256),
              has = _dereq_(257),
              cof = _dereq_(238),
              toPrimitive = _dereq_(308),
              fails = _dereq_(251),
              $trim = _dereq_(301).trim,
              NUMBER = 'Number',
              $Number = global[NUMBER],
              Base = $Number,
              proto = $Number.prototype,
              BROKEN_COF = cof($.create(proto)) == NUMBER,
              TRIM = 'trim' in String.prototype;
          var toNumber = function(argument) {
            var it = toPrimitive(argument, false);
            if (typeof it == 'string' && it.length > 2) {
              it = TRIM ? it.trim() : $trim(it, 3);
              var first = it.charCodeAt(0),
                  third,
                  radix,
                  maxCode;
              if (first === 43 || first === 45) {
                third = it.charCodeAt(2);
                if (third === 88 || third === 120)
                  return NaN;
              } else if (first === 48) {
                switch (it.charCodeAt(1)) {
                  case 66:
                  case 98:
                    radix = 2;
                    maxCode = 49;
                    break;
                  case 79:
                  case 111:
                    radix = 8;
                    maxCode = 55;
                    break;
                  default:
                    return +it;
                }
                for (var digits = it.slice(2),
                    i = 0,
                    l = digits.length,
                    code; i < l; i++) {
                  code = digits.charCodeAt(i);
                  if (code < 48 || code > maxCode)
                    return NaN;
                }
                return parseInt(digits, radix);
              }
            }
            return +it;
          };
          if (!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')) {
            $Number = function Number(value) {
              var it = arguments.length < 1 ? 0 : value,
                  that = this;
              return that instanceof $Number && (BROKEN_COF ? fails(function() {
                proto.valueOf.call(that);
              }) : cof(that) != NUMBER) ? new Base(toNumber(it)) : toNumber(it);
            };
            $.each.call(_dereq_(246) ? $.getNames(Base) : ('MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' + 'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' + 'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger').split(','), function(key) {
              if (has(Base, key) && !has($Number, key)) {
                $.setDesc($Number, key, $.getDesc(Base, key));
              }
            });
            $Number.prototype = proto;
            proto.constructor = $Number;
            _dereq_(288)(global, NUMBER, $Number);
          }
        }, {
          "238": 238,
          "246": 246,
          "251": 251,
          "256": 256,
          "257": 257,
          "273": 273,
          "288": 288,
          "301": 301,
          "308": 308
        }],
        342: [function(_dereq_, module, exports) {
          var $export = _dereq_(249);
          $export($export.S, 'Number', {EPSILON: Math.pow(2, -52)});
        }, {"249": 249}],
        343: [function(_dereq_, module, exports) {
          var $export = _dereq_(249),
              _isFinite = _dereq_(256).isFinite;
          $export($export.S, 'Number', {isFinite: function isFinite(it) {
              return typeof it == 'number' && _isFinite(it);
            }});
        }, {
          "249": 249,
          "256": 256
        }],
        344: [function(_dereq_, module, exports) {
          var $export = _dereq_(249);
          $export($export.S, 'Number', {isInteger: _dereq_(264)});
        }, {
          "249": 249,
          "264": 264
        }],
        345: [function(_dereq_, module, exports) {
          var $export = _dereq_(249);
          $export($export.S, 'Number', {isNaN: function isNaN(number) {
              return number != number;
            }});
        }, {"249": 249}],
        346: [function(_dereq_, module, exports) {
          var $export = _dereq_(249),
              isInteger = _dereq_(264),
              abs = Math.abs;
          $export($export.S, 'Number', {isSafeInteger: function isSafeInteger(number) {
              return isInteger(number) && abs(number) <= 0x1fffffffffffff;
            }});
        }, {
          "249": 249,
          "264": 264
        }],
        347: [function(_dereq_, module, exports) {
          var $export = _dereq_(249);
          $export($export.S, 'Number', {MAX_SAFE_INTEGER: 0x1fffffffffffff});
        }, {"249": 249}],
        348: [function(_dereq_, module, exports) {
          var $export = _dereq_(249);
          $export($export.S, 'Number', {MIN_SAFE_INTEGER: -0x1fffffffffffff});
        }, {"249": 249}],
        349: [function(_dereq_, module, exports) {
          var $export = _dereq_(249);
          $export($export.S, 'Number', {parseFloat: parseFloat});
        }, {"249": 249}],
        350: [function(_dereq_, module, exports) {
          var $export = _dereq_(249);
          $export($export.S, 'Number', {parseInt: parseInt});
        }, {"249": 249}],
        351: [function(_dereq_, module, exports) {
          var $export = _dereq_(249);
          $export($export.S + $export.F, 'Object', {assign: _dereq_(280)});
        }, {
          "249": 249,
          "280": 280
        }],
        352: [function(_dereq_, module, exports) {
          var isObject = _dereq_(265);
          _dereq_(281)('freeze', function($freeze) {
            return function freeze(it) {
              return $freeze && isObject(it) ? $freeze(it) : it;
            };
          });
        }, {
          "265": 265,
          "281": 281
        }],
        353: [function(_dereq_, module, exports) {
          var toIObject = _dereq_(305);
          _dereq_(281)('getOwnPropertyDescriptor', function($getOwnPropertyDescriptor) {
            return function getOwnPropertyDescriptor(it, key) {
              return $getOwnPropertyDescriptor(toIObject(it), key);
            };
          });
        }, {
          "281": 281,
          "305": 305
        }],
        354: [function(_dereq_, module, exports) {
          _dereq_(281)('getOwnPropertyNames', function() {
            return _dereq_(255).get;
          });
        }, {
          "255": 255,
          "281": 281
        }],
        355: [function(_dereq_, module, exports) {
          var toObject = _dereq_(307);
          _dereq_(281)('getPrototypeOf', function($getPrototypeOf) {
            return function getPrototypeOf(it) {
              return $getPrototypeOf(toObject(it));
            };
          });
        }, {
          "281": 281,
          "307": 307
        }],
        356: [function(_dereq_, module, exports) {
          var isObject = _dereq_(265);
          _dereq_(281)('isExtensible', function($isExtensible) {
            return function isExtensible(it) {
              return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;
            };
          });
        }, {
          "265": 265,
          "281": 281
        }],
        357: [function(_dereq_, module, exports) {
          var isObject = _dereq_(265);
          _dereq_(281)('isFrozen', function($isFrozen) {
            return function isFrozen(it) {
              return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;
            };
          });
        }, {
          "265": 265,
          "281": 281
        }],
        358: [function(_dereq_, module, exports) {
          var isObject = _dereq_(265);
          _dereq_(281)('isSealed', function($isSealed) {
            return function isSealed(it) {
              return isObject(it) ? $isSealed ? $isSealed(it) : false : true;
            };
          });
        }, {
          "265": 265,
          "281": 281
        }],
        359: [function(_dereq_, module, exports) {
          var $export = _dereq_(249);
          $export($export.S, 'Object', {is: _dereq_(290)});
        }, {
          "249": 249,
          "290": 290
        }],
        360: [function(_dereq_, module, exports) {
          var toObject = _dereq_(307);
          _dereq_(281)('keys', function($keys) {
            return function keys(it) {
              return $keys(toObject(it));
            };
          });
        }, {
          "281": 281,
          "307": 307
        }],
        361: [function(_dereq_, module, exports) {
          var isObject = _dereq_(265);
          _dereq_(281)('preventExtensions', function($preventExtensions) {
            return function preventExtensions(it) {
              return $preventExtensions && isObject(it) ? $preventExtensions(it) : it;
            };
          });
        }, {
          "265": 265,
          "281": 281
        }],
        362: [function(_dereq_, module, exports) {
          var isObject = _dereq_(265);
          _dereq_(281)('seal', function($seal) {
            return function seal(it) {
              return $seal && isObject(it) ? $seal(it) : it;
            };
          });
        }, {
          "265": 265,
          "281": 281
        }],
        363: [function(_dereq_, module, exports) {
          var $export = _dereq_(249);
          $export($export.S, 'Object', {setPrototypeOf: _dereq_(291).set});
        }, {
          "249": 249,
          "291": 291
        }],
        364: [function(_dereq_, module, exports) {
          'use strict';
          var classof = _dereq_(237),
              test = {};
          test[_dereq_(310)('toStringTag')] = 'z';
          if (test + '' != '[object z]') {
            _dereq_(288)(Object.prototype, 'toString', function toString() {
              return '[object ' + classof(this) + ']';
            }, true);
          }
        }, {
          "237": 237,
          "288": 288,
          "310": 310
        }],
        365: [function(_dereq_, module, exports) {
          'use strict';
          var $ = _dereq_(273),
              LIBRARY = _dereq_(275),
              global = _dereq_(256),
              ctx = _dereq_(244),
              classof = _dereq_(237),
              $export = _dereq_(249),
              isObject = _dereq_(265),
              anObject = _dereq_(231),
              aFunction = _dereq_(229),
              strictNew = _dereq_(296),
              forOf = _dereq_(254),
              setProto = _dereq_(291).set,
              same = _dereq_(290),
              SPECIES = _dereq_(310)('species'),
              speciesConstructor = _dereq_(295),
              asap = _dereq_(279),
              PROMISE = 'Promise',
              process = global.process,
              isNode = classof(process) == 'process',
              P = global[PROMISE],
              Wrapper;
          var testResolve = function(sub) {
            var test = new P(function() {});
            if (sub)
              test.constructor = Object;
            return P.resolve(test) === test;
          };
          var USE_NATIVE = function() {
            var works = false;
            function P2(x) {
              var self = new P(x);
              setProto(self, P2.prototype);
              return self;
            }
            try {
              works = P && P.resolve && testResolve();
              setProto(P2, P);
              P2.prototype = $.create(P.prototype, {constructor: {value: P2}});
              if (!(P2.resolve(5).then(function() {}) instanceof P2)) {
                works = false;
              }
              if (works && _dereq_(246)) {
                var thenableThenGotten = false;
                P.resolve($.setDesc({}, 'then', {get: function() {
                    thenableThenGotten = true;
                  }}));
                works = thenableThenGotten;
              }
            } catch (e) {
              works = false;
            }
            return works;
          }();
          var sameConstructor = function(a, b) {
            if (LIBRARY && a === P && b === Wrapper)
              return true;
            return same(a, b);
          };
          var getConstructor = function(C) {
            var S = anObject(C)[SPECIES];
            return S != undefined ? S : C;
          };
          var isThenable = function(it) {
            var then;
            return isObject(it) && typeof(then = it.then) == 'function' ? then : false;
          };
          var PromiseCapability = function(C) {
            var resolve,
                reject;
            this.promise = new C(function($$resolve, $$reject) {
              if (resolve !== undefined || reject !== undefined)
                throw TypeError('Bad Promise constructor');
              resolve = $$resolve;
              reject = $$reject;
            });
            this.resolve = aFunction(resolve), this.reject = aFunction(reject);
          };
          var perform = function(exec) {
            try {
              exec();
            } catch (e) {
              return {error: e};
            }
          };
          var notify = function(record, isReject) {
            if (record.n)
              return;
            record.n = true;
            var chain = record.c;
            asap(function() {
              var value = record.v,
                  ok = record.s == 1,
                  i = 0;
              var run = function(reaction) {
                var handler = ok ? reaction.ok : reaction.fail,
                    resolve = reaction.resolve,
                    reject = reaction.reject,
                    result,
                    then;
                try {
                  if (handler) {
                    if (!ok)
                      record.h = true;
                    result = handler === true ? value : handler(value);
                    if (result === reaction.promise) {
                      reject(TypeError('Promise-chain cycle'));
                    } else if (then = isThenable(result)) {
                      then.call(result, resolve, reject);
                    } else
                      resolve(result);
                  } else
                    reject(value);
                } catch (e) {
                  reject(e);
                }
              };
              while (chain.length > i)
                run(chain[i++]);
              chain.length = 0;
              record.n = false;
              if (isReject)
                setTimeout(function() {
                  var promise = record.p,
                      handler,
                      console;
                  if (isUnhandled(promise)) {
                    if (isNode) {
                      process.emit('unhandledRejection', value, promise);
                    } else if (handler = global.onunhandledrejection) {
                      handler({
                        promise: promise,
                        reason: value
                      });
                    } else if ((console = global.console) && console.error) {
                      console.error('Unhandled promise rejection', value);
                    }
                  }
                  record.a = undefined;
                }, 1);
            });
          };
          var isUnhandled = function(promise) {
            var record = promise._d,
                chain = record.a || record.c,
                i = 0,
                reaction;
            if (record.h)
              return false;
            while (chain.length > i) {
              reaction = chain[i++];
              if (reaction.fail || !isUnhandled(reaction.promise))
                return false;
            }
            return true;
          };
          var $reject = function(value) {
            var record = this;
            if (record.d)
              return;
            record.d = true;
            record = record.r || record;
            record.v = value;
            record.s = 2;
            record.a = record.c.slice();
            notify(record, true);
          };
          var $resolve = function(value) {
            var record = this,
                then;
            if (record.d)
              return;
            record.d = true;
            record = record.r || record;
            try {
              if (record.p === value)
                throw TypeError("Promise can't be resolved itself");
              if (then = isThenable(value)) {
                asap(function() {
                  var wrapper = {
                    r: record,
                    d: false
                  };
                  try {
                    then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
                  } catch (e) {
                    $reject.call(wrapper, e);
                  }
                });
              } else {
                record.v = value;
                record.s = 1;
                notify(record, false);
              }
            } catch (e) {
              $reject.call({
                r: record,
                d: false
              }, e);
            }
          };
          if (!USE_NATIVE) {
            P = function Promise(executor) {
              aFunction(executor);
              var record = this._d = {
                p: strictNew(this, P, PROMISE),
                c: [],
                a: undefined,
                s: 0,
                d: false,
                v: undefined,
                h: false,
                n: false
              };
              try {
                executor(ctx($resolve, record, 1), ctx($reject, record, 1));
              } catch (err) {
                $reject.call(record, err);
              }
            };
            _dereq_(287)(P.prototype, {
              then: function then(onFulfilled, onRejected) {
                var reaction = new PromiseCapability(speciesConstructor(this, P)),
                    promise = reaction.promise,
                    record = this._d;
                reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
                reaction.fail = typeof onRejected == 'function' && onRejected;
                record.c.push(reaction);
                if (record.a)
                  record.a.push(reaction);
                if (record.s)
                  notify(record, false);
                return promise;
              },
              'catch': function(onRejected) {
                return this.then(undefined, onRejected);
              }
            });
          }
          $export($export.G + $export.W + $export.F * !USE_NATIVE, {Promise: P});
          _dereq_(293)(P, PROMISE);
          _dereq_(292)(PROMISE);
          Wrapper = _dereq_(243)[PROMISE];
          $export($export.S + $export.F * !USE_NATIVE, PROMISE, {reject: function reject(r) {
              var capability = new PromiseCapability(this),
                  $$reject = capability.reject;
              $$reject(r);
              return capability.promise;
            }});
          $export($export.S + $export.F * (!USE_NATIVE || testResolve(true)), PROMISE, {resolve: function resolve(x) {
              if (x instanceof P && sameConstructor(x.constructor, this))
                return x;
              var capability = new PromiseCapability(this),
                  $$resolve = capability.resolve;
              $$resolve(x);
              return capability.promise;
            }});
          $export($export.S + $export.F * !(USE_NATIVE && _dereq_(270)(function(iter) {
            P.all(iter)['catch'](function() {});
          })), PROMISE, {
            all: function all(iterable) {
              var C = getConstructor(this),
                  capability = new PromiseCapability(C),
                  resolve = capability.resolve,
                  reject = capability.reject,
                  values = [];
              var abrupt = perform(function() {
                forOf(iterable, false, values.push, values);
                var remaining = values.length,
                    results = Array(remaining);
                if (remaining)
                  $.each.call(values, function(promise, index) {
                    var alreadyCalled = false;
                    C.resolve(promise).then(function(value) {
                      if (alreadyCalled)
                        return;
                      alreadyCalled = true;
                      results[index] = value;
                      --remaining || resolve(results);
                    }, reject);
                  });
                else
                  resolve(results);
              });
              if (abrupt)
                reject(abrupt.error);
              return capability.promise;
            },
            race: function race(iterable) {
              var C = getConstructor(this),
                  capability = new PromiseCapability(C),
                  reject = capability.reject;
              var abrupt = perform(function() {
                forOf(iterable, false, function(promise) {
                  C.resolve(promise).then(capability.resolve, reject);
                });
              });
              if (abrupt)
                reject(abrupt.error);
              return capability.promise;
            }
          });
        }, {
          "229": 229,
          "231": 231,
          "237": 237,
          "243": 243,
          "244": 244,
          "246": 246,
          "249": 249,
          "254": 254,
          "256": 256,
          "265": 265,
          "270": 270,
          "273": 273,
          "275": 275,
          "279": 279,
          "287": 287,
          "290": 290,
          "291": 291,
          "292": 292,
          "293": 293,
          "295": 295,
          "296": 296,
          "310": 310
        }],
        366: [function(_dereq_, module, exports) {
          var $export = _dereq_(249),
              _apply = Function.apply;
          $export($export.S, 'Reflect', {apply: function apply(target, thisArgument, argumentsList) {
              return _apply.call(target, thisArgument, argumentsList);
            }});
        }, {"249": 249}],
        367: [function(_dereq_, module, exports) {
          var $ = _dereq_(273),
              $export = _dereq_(249),
              aFunction = _dereq_(229),
              anObject = _dereq_(231),
              isObject = _dereq_(265),
              bind = Function.bind || _dereq_(243).Function.prototype.bind;
          $export($export.S + $export.F * _dereq_(251)(function() {
            function F() {}
            return !(Reflect.construct(function() {}, [], F) instanceof F);
          }), 'Reflect', {construct: function construct(Target, args) {
              aFunction(Target);
              var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);
              if (Target == newTarget) {
                if (args != undefined)
                  switch (anObject(args).length) {
                    case 0:
                      return new Target;
                    case 1:
                      return new Target(args[0]);
                    case 2:
                      return new Target(args[0], args[1]);
                    case 3:
                      return new Target(args[0], args[1], args[2]);
                    case 4:
                      return new Target(args[0], args[1], args[2], args[3]);
                  }
                var $args = [null];
                $args.push.apply($args, args);
                return new (bind.apply(Target, $args));
              }
              var proto = newTarget.prototype,
                  instance = $.create(isObject(proto) ? proto : Object.prototype),
                  result = Function.apply.call(Target, instance, args);
              return isObject(result) ? result : instance;
            }});
        }, {
          "229": 229,
          "231": 231,
          "243": 243,
          "249": 249,
          "251": 251,
          "265": 265,
          "273": 273
        }],
        368: [function(_dereq_, module, exports) {
          var $ = _dereq_(273),
              $export = _dereq_(249),
              anObject = _dereq_(231);
          $export($export.S + $export.F * _dereq_(251)(function() {
            Reflect.defineProperty($.setDesc({}, 1, {value: 1}), 1, {value: 2});
          }), 'Reflect', {defineProperty: function defineProperty(target, propertyKey, attributes) {
              anObject(target);
              try {
                $.setDesc(target, propertyKey, attributes);
                return true;
              } catch (e) {
                return false;
              }
            }});
        }, {
          "231": 231,
          "249": 249,
          "251": 251,
          "273": 273
        }],
        369: [function(_dereq_, module, exports) {
          var $export = _dereq_(249),
              getDesc = _dereq_(273).getDesc,
              anObject = _dereq_(231);
          $export($export.S, 'Reflect', {deleteProperty: function deleteProperty(target, propertyKey) {
              var desc = getDesc(anObject(target), propertyKey);
              return desc && !desc.configurable ? false : delete target[propertyKey];
            }});
        }, {
          "231": 231,
          "249": 249,
          "273": 273
        }],
        370: [function(_dereq_, module, exports) {
          'use strict';
          var $export = _dereq_(249),
              anObject = _dereq_(231);
          var Enumerate = function(iterated) {
            this._t = anObject(iterated);
            this._i = 0;
            var keys = this._k = [],
                key;
            for (key in iterated)
              keys.push(key);
          };
          _dereq_(268)(Enumerate, 'Object', function() {
            var that = this,
                keys = that._k,
                key;
            do {
              if (that._i >= keys.length)
                return {
                  value: undefined,
                  done: true
                };
            } while (!((key = keys[that._i++]) in that._t));
            return {
              value: key,
              done: false
            };
          });
          $export($export.S, 'Reflect', {enumerate: function enumerate(target) {
              return new Enumerate(target);
            }});
        }, {
          "231": 231,
          "249": 249,
          "268": 268
        }],
        371: [function(_dereq_, module, exports) {
          var $ = _dereq_(273),
              $export = _dereq_(249),
              anObject = _dereq_(231);
          $export($export.S, 'Reflect', {getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey) {
              return $.getDesc(anObject(target), propertyKey);
            }});
        }, {
          "231": 231,
          "249": 249,
          "273": 273
        }],
        372: [function(_dereq_, module, exports) {
          var $export = _dereq_(249),
              getProto = _dereq_(273).getProto,
              anObject = _dereq_(231);
          $export($export.S, 'Reflect', {getPrototypeOf: function getPrototypeOf(target) {
              return getProto(anObject(target));
            }});
        }, {
          "231": 231,
          "249": 249,
          "273": 273
        }],
        373: [function(_dereq_, module, exports) {
          var $ = _dereq_(273),
              has = _dereq_(257),
              $export = _dereq_(249),
              isObject = _dereq_(265),
              anObject = _dereq_(231);
          function get(target, propertyKey) {
            var receiver = arguments.length < 3 ? target : arguments[2],
                desc,
                proto;
            if (anObject(target) === receiver)
              return target[propertyKey];
            if (desc = $.getDesc(target, propertyKey))
              return has(desc, 'value') ? desc.value : desc.get !== undefined ? desc.get.call(receiver) : undefined;
            if (isObject(proto = $.getProto(target)))
              return get(proto, propertyKey, receiver);
          }
          $export($export.S, 'Reflect', {get: get});
        }, {
          "231": 231,
          "249": 249,
          "257": 257,
          "265": 265,
          "273": 273
        }],
        374: [function(_dereq_, module, exports) {
          var $export = _dereq_(249);
          $export($export.S, 'Reflect', {has: function has(target, propertyKey) {
              return propertyKey in target;
            }});
        }, {"249": 249}],
        375: [function(_dereq_, module, exports) {
          var $export = _dereq_(249),
              anObject = _dereq_(231),
              $isExtensible = Object.isExtensible;
          $export($export.S, 'Reflect', {isExtensible: function isExtensible(target) {
              anObject(target);
              return $isExtensible ? $isExtensible(target) : true;
            }});
        }, {
          "231": 231,
          "249": 249
        }],
        376: [function(_dereq_, module, exports) {
          var $export = _dereq_(249);
          $export($export.S, 'Reflect', {ownKeys: _dereq_(283)});
        }, {
          "249": 249,
          "283": 283
        }],
        377: [function(_dereq_, module, exports) {
          var $export = _dereq_(249),
              anObject = _dereq_(231),
              $preventExtensions = Object.preventExtensions;
          $export($export.S, 'Reflect', {preventExtensions: function preventExtensions(target) {
              anObject(target);
              try {
                if ($preventExtensions)
                  $preventExtensions(target);
                return true;
              } catch (e) {
                return false;
              }
            }});
        }, {
          "231": 231,
          "249": 249
        }],
        378: [function(_dereq_, module, exports) {
          var $export = _dereq_(249),
              setProto = _dereq_(291);
          if (setProto)
            $export($export.S, 'Reflect', {setPrototypeOf: function setPrototypeOf(target, proto) {
                setProto.check(target, proto);
                try {
                  setProto.set(target, proto);
                  return true;
                } catch (e) {
                  return false;
                }
              }});
        }, {
          "249": 249,
          "291": 291
        }],
        379: [function(_dereq_, module, exports) {
          var $ = _dereq_(273),
              has = _dereq_(257),
              $export = _dereq_(249),
              createDesc = _dereq_(286),
              anObject = _dereq_(231),
              isObject = _dereq_(265);
          function set(target, propertyKey, V) {
            var receiver = arguments.length < 4 ? target : arguments[3],
                ownDesc = $.getDesc(anObject(target), propertyKey),
                existingDescriptor,
                proto;
            if (!ownDesc) {
              if (isObject(proto = $.getProto(target))) {
                return set(proto, propertyKey, V, receiver);
              }
              ownDesc = createDesc(0);
            }
            if (has(ownDesc, 'value')) {
              if (ownDesc.writable === false || !isObject(receiver))
                return false;
              existingDescriptor = $.getDesc(receiver, propertyKey) || createDesc(0);
              existingDescriptor.value = V;
              $.setDesc(receiver, propertyKey, existingDescriptor);
              return true;
            }
            return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true);
          }
          $export($export.S, 'Reflect', {set: set});
        }, {
          "231": 231,
          "249": 249,
          "257": 257,
          "265": 265,
          "273": 273,
          "286": 286
        }],
        380: [function(_dereq_, module, exports) {
          var $ = _dereq_(273),
              global = _dereq_(256),
              isRegExp = _dereq_(266),
              $flags = _dereq_(253),
              $RegExp = global.RegExp,
              Base = $RegExp,
              proto = $RegExp.prototype,
              re1 = /a/g,
              re2 = /a/g,
              CORRECT_NEW = new $RegExp(re1) !== re1;
          if (_dereq_(246) && (!CORRECT_NEW || _dereq_(251)(function() {
            re2[_dereq_(310)('match')] = false;
            return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';
          }))) {
            $RegExp = function RegExp(p, f) {
              var piRE = isRegExp(p),
                  fiU = f === undefined;
              return !(this instanceof $RegExp) && piRE && p.constructor === $RegExp && fiU ? p : CORRECT_NEW ? new Base(piRE && !fiU ? p.source : p, f) : Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? $flags.call(p) : f);
            };
            $.each.call($.getNames(Base), function(key) {
              key in $RegExp || $.setDesc($RegExp, key, {
                configurable: true,
                get: function() {
                  return Base[key];
                },
                set: function(it) {
                  Base[key] = it;
                }
              });
            });
            proto.constructor = $RegExp;
            $RegExp.prototype = proto;
            _dereq_(288)(global, 'RegExp', $RegExp);
          }
          _dereq_(292)('RegExp');
        }, {
          "246": 246,
          "251": 251,
          "253": 253,
          "256": 256,
          "266": 266,
          "273": 273,
          "288": 288,
          "292": 292,
          "310": 310
        }],
        381: [function(_dereq_, module, exports) {
          var $ = _dereq_(273);
          if (_dereq_(246) && /./g.flags != 'g')
            $.setDesc(RegExp.prototype, 'flags', {
              configurable: true,
              get: _dereq_(253)
            });
        }, {
          "246": 246,
          "253": 253,
          "273": 273
        }],
        382: [function(_dereq_, module, exports) {
          _dereq_(252)('match', 1, function(defined, MATCH) {
            return function match(regexp) {
              'use strict';
              var O = defined(this),
                  fn = regexp == undefined ? undefined : regexp[MATCH];
              return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
            };
          });
        }, {"252": 252}],
        383: [function(_dereq_, module, exports) {
          _dereq_(252)('replace', 2, function(defined, REPLACE, $replace) {
            return function replace(searchValue, replaceValue) {
              'use strict';
              var O = defined(this),
                  fn = searchValue == undefined ? undefined : searchValue[REPLACE];
              return fn !== undefined ? fn.call(searchValue, O, replaceValue) : $replace.call(String(O), searchValue, replaceValue);
            };
          });
        }, {"252": 252}],
        384: [function(_dereq_, module, exports) {
          _dereq_(252)('search', 1, function(defined, SEARCH) {
            return function search(regexp) {
              'use strict';
              var O = defined(this),
                  fn = regexp == undefined ? undefined : regexp[SEARCH];
              return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
            };
          });
        }, {"252": 252}],
        385: [function(_dereq_, module, exports) {
          _dereq_(252)('split', 2, function(defined, SPLIT, $split) {
            return function split(separator, limit) {
              'use strict';
              var O = defined(this),
                  fn = separator == undefined ? undefined : separator[SPLIT];
              return fn !== undefined ? fn.call(separator, O, limit) : $split.call(String(O), separator, limit);
            };
          });
        }, {"252": 252}],
        386: [function(_dereq_, module, exports) {
          'use strict';
          var strong = _dereq_(239);
          _dereq_(242)('Set', function(get) {
            return function Set() {
              return get(this, arguments.length > 0 ? arguments[0] : undefined);
            };
          }, {add: function add(value) {
              return strong.def(this, value = value === 0 ? 0 : value, value);
            }}, strong);
        }, {
          "239": 239,
          "242": 242
        }],
        387: [function(_dereq_, module, exports) {
          'use strict';
          var $export = _dereq_(249),
              $at = _dereq_(297)(false);
          $export($export.P, 'String', {codePointAt: function codePointAt(pos) {
              return $at(this, pos);
            }});
        }, {
          "249": 249,
          "297": 297
        }],
        388: [function(_dereq_, module, exports) {
          'use strict';
          var $export = _dereq_(249),
              toLength = _dereq_(306),
              context = _dereq_(298),
              ENDS_WITH = 'endsWith',
              $endsWith = ''[ENDS_WITH];
          $export($export.P + $export.F * _dereq_(250)(ENDS_WITH), 'String', {endsWith: function endsWith(searchString) {
              var that = context(this, searchString, ENDS_WITH),
                  $$ = arguments,
                  endPosition = $$.length > 1 ? $$[1] : undefined,
                  len = toLength(that.length),
                  end = endPosition === undefined ? len : Math.min(toLength(endPosition), len),
                  search = String(searchString);
              return $endsWith ? $endsWith.call(that, search, end) : that.slice(end - search.length, end) === search;
            }});
        }, {
          "249": 249,
          "250": 250,
          "298": 298,
          "306": 306
        }],
        389: [function(_dereq_, module, exports) {
          var $export = _dereq_(249),
              toIndex = _dereq_(303),
              fromCharCode = String.fromCharCode,
              $fromCodePoint = String.fromCodePoint;
          $export($export.S + $export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {fromCodePoint: function fromCodePoint(x) {
              var res = [],
                  $$ = arguments,
                  $$len = $$.length,
                  i = 0,
                  code;
              while ($$len > i) {
                code = +$$[i++];
                if (toIndex(code, 0x10ffff) !== code)
                  throw RangeError(code + ' is not a valid code point');
                res.push(code < 0x10000 ? fromCharCode(code) : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00));
              }
              return res.join('');
            }});
        }, {
          "249": 249,
          "303": 303
        }],
        390: [function(_dereq_, module, exports) {
          'use strict';
          var $export = _dereq_(249),
              context = _dereq_(298),
              INCLUDES = 'includes';
          $export($export.P + $export.F * _dereq_(250)(INCLUDES), 'String', {includes: function includes(searchString) {
              return !!~context(this, searchString, INCLUDES).indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);
            }});
        }, {
          "249": 249,
          "250": 250,
          "298": 298
        }],
        391: [function(_dereq_, module, exports) {
          'use strict';
          var $at = _dereq_(297)(true);
          _dereq_(269)(String, 'String', function(iterated) {
            this._t = String(iterated);
            this._i = 0;
          }, function() {
            var O = this._t,
                index = this._i,
                point;
            if (index >= O.length)
              return {
                value: undefined,
                done: true
              };
            point = $at(O, index);
            this._i += point.length;
            return {
              value: point,
              done: false
            };
          });
        }, {
          "269": 269,
          "297": 297
        }],
        392: [function(_dereq_, module, exports) {
          var $export = _dereq_(249),
              toIObject = _dereq_(305),
              toLength = _dereq_(306);
          $export($export.S, 'String', {raw: function raw(callSite) {
              var tpl = toIObject(callSite.raw),
                  len = toLength(tpl.length),
                  $$ = arguments,
                  $$len = $$.length,
                  res = [],
                  i = 0;
              while (len > i) {
                res.push(String(tpl[i++]));
                if (i < $$len)
                  res.push(String($$[i]));
              }
              return res.join('');
            }});
        }, {
          "249": 249,
          "305": 305,
          "306": 306
        }],
        393: [function(_dereq_, module, exports) {
          var $export = _dereq_(249);
          $export($export.P, 'String', {repeat: _dereq_(300)});
        }, {
          "249": 249,
          "300": 300
        }],
        394: [function(_dereq_, module, exports) {
          'use strict';
          var $export = _dereq_(249),
              toLength = _dereq_(306),
              context = _dereq_(298),
              STARTS_WITH = 'startsWith',
              $startsWith = ''[STARTS_WITH];
          $export($export.P + $export.F * _dereq_(250)(STARTS_WITH), 'String', {startsWith: function startsWith(searchString) {
              var that = context(this, searchString, STARTS_WITH),
                  $$ = arguments,
                  index = toLength(Math.min($$.length > 1 ? $$[1] : undefined, that.length)),
                  search = String(searchString);
              return $startsWith ? $startsWith.call(that, search, index) : that.slice(index, index + search.length) === search;
            }});
        }, {
          "249": 249,
          "250": 250,
          "298": 298,
          "306": 306
        }],
        395: [function(_dereq_, module, exports) {
          'use strict';
          _dereq_(301)('trim', function($trim) {
            return function trim() {
              return $trim(this, 3);
            };
          });
        }, {"301": 301}],
        396: [function(_dereq_, module, exports) {
          'use strict';
          var $ = _dereq_(273),
              global = _dereq_(256),
              has = _dereq_(257),
              DESCRIPTORS = _dereq_(246),
              $export = _dereq_(249),
              redefine = _dereq_(288),
              $fails = _dereq_(251),
              shared = _dereq_(294),
              setToStringTag = _dereq_(293),
              uid = _dereq_(309),
              wks = _dereq_(310),
              keyOf = _dereq_(274),
              $names = _dereq_(255),
              enumKeys = _dereq_(248),
              isArray = _dereq_(263),
              anObject = _dereq_(231),
              toIObject = _dereq_(305),
              createDesc = _dereq_(286),
              getDesc = $.getDesc,
              setDesc = $.setDesc,
              _create = $.create,
              getNames = $names.get,
              $Symbol = global.Symbol,
              $JSON = global.JSON,
              _stringify = $JSON && $JSON.stringify,
              setter = false,
              HIDDEN = wks('_hidden'),
              isEnum = $.isEnum,
              SymbolRegistry = shared('symbol-registry'),
              AllSymbols = shared('symbols'),
              useNative = typeof $Symbol == 'function',
              ObjectProto = Object.prototype;
          var setSymbolDesc = DESCRIPTORS && $fails(function() {
            return _create(setDesc({}, 'a', {get: function() {
                return setDesc(this, 'a', {value: 7}).a;
              }})).a != 7;
          }) ? function(it, key, D) {
            var protoDesc = getDesc(ObjectProto, key);
            if (protoDesc)
              delete ObjectProto[key];
            setDesc(it, key, D);
            if (protoDesc && it !== ObjectProto)
              setDesc(ObjectProto, key, protoDesc);
          } : setDesc;
          var wrap = function(tag) {
            var sym = AllSymbols[tag] = _create($Symbol.prototype);
            sym._k = tag;
            DESCRIPTORS && setter && setSymbolDesc(ObjectProto, tag, {
              configurable: true,
              set: function(value) {
                if (has(this, HIDDEN) && has(this[HIDDEN], tag))
                  this[HIDDEN][tag] = false;
                setSymbolDesc(this, tag, createDesc(1, value));
              }
            });
            return sym;
          };
          var isSymbol = function(it) {
            return typeof it == 'symbol';
          };
          var $defineProperty = function defineProperty(it, key, D) {
            if (D && has(AllSymbols, key)) {
              if (!D.enumerable) {
                if (!has(it, HIDDEN))
                  setDesc(it, HIDDEN, createDesc(1, {}));
                it[HIDDEN][key] = true;
              } else {
                if (has(it, HIDDEN) && it[HIDDEN][key])
                  it[HIDDEN][key] = false;
                D = _create(D, {enumerable: createDesc(0, false)});
              }
              return setSymbolDesc(it, key, D);
            }
            return setDesc(it, key, D);
          };
          var $defineProperties = function defineProperties(it, P) {
            anObject(it);
            var keys = enumKeys(P = toIObject(P)),
                i = 0,
                l = keys.length,
                key;
            while (l > i)
              $defineProperty(it, key = keys[i++], P[key]);
            return it;
          };
          var $create = function create(it, P) {
            return P === undefined ? _create(it) : $defineProperties(_create(it), P);
          };
          var $propertyIsEnumerable = function propertyIsEnumerable(key) {
            var E = isEnum.call(this, key);
            return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
          };
          var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
            var D = getDesc(it = toIObject(it), key);
            if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key]))
              D.enumerable = true;
            return D;
          };
          var $getOwnPropertyNames = function getOwnPropertyNames(it) {
            var names = getNames(toIObject(it)),
                result = [],
                i = 0,
                key;
            while (names.length > i)
              if (!has(AllSymbols, key = names[i++]) && key != HIDDEN)
                result.push(key);
            return result;
          };
          var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
            var names = getNames(toIObject(it)),
                result = [],
                i = 0,
                key;
            while (names.length > i)
              if (has(AllSymbols, key = names[i++]))
                result.push(AllSymbols[key]);
            return result;
          };
          var $stringify = function stringify(it) {
            if (it === undefined || isSymbol(it))
              return;
            var args = [it],
                i = 1,
                $$ = arguments,
                replacer,
                $replacer;
            while ($$.length > i)
              args.push($$[i++]);
            replacer = args[1];
            if (typeof replacer == 'function')
              $replacer = replacer;
            if ($replacer || !isArray(replacer))
              replacer = function(key, value) {
                if ($replacer)
                  value = $replacer.call(this, key, value);
                if (!isSymbol(value))
                  return value;
              };
            args[1] = replacer;
            return _stringify.apply($JSON, args);
          };
          var buggyJSON = $fails(function() {
            var S = $Symbol();
            return _stringify([S]) != '[null]' || _stringify({a: S}) != '{}' || _stringify(Object(S)) != '{}';
          });
          if (!useNative) {
            $Symbol = function Symbol() {
              if (isSymbol(this))
                throw TypeError('Symbol is not a constructor');
              return wrap(uid(arguments.length > 0 ? arguments[0] : undefined));
            };
            redefine($Symbol.prototype, 'toString', function toString() {
              return this._k;
            });
            isSymbol = function(it) {
              return it instanceof $Symbol;
            };
            $.create = $create;
            $.isEnum = $propertyIsEnumerable;
            $.getDesc = $getOwnPropertyDescriptor;
            $.setDesc = $defineProperty;
            $.setDescs = $defineProperties;
            $.getNames = $names.get = $getOwnPropertyNames;
            $.getSymbols = $getOwnPropertySymbols;
            if (DESCRIPTORS && !_dereq_(275)) {
              redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
            }
          }
          var symbolStatics = {
            'for': function(key) {
              return has(SymbolRegistry, key += '') ? SymbolRegistry[key] : SymbolRegistry[key] = $Symbol(key);
            },
            keyFor: function keyFor(key) {
              return keyOf(SymbolRegistry, key);
            },
            useSetter: function() {
              setter = true;
            },
            useSimple: function() {
              setter = false;
            }
          };
          $.each.call(('hasInstance,isConcatSpreadable,iterator,match,replace,search,' + 'species,split,toPrimitive,toStringTag,unscopables').split(','), function(it) {
            var sym = wks(it);
            symbolStatics[it] = useNative ? sym : wrap(sym);
          });
          setter = true;
          $export($export.G + $export.W, {Symbol: $Symbol});
          $export($export.S, 'Symbol', symbolStatics);
          $export($export.S + $export.F * !useNative, 'Object', {
            create: $create,
            defineProperty: $defineProperty,
            defineProperties: $defineProperties,
            getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
            getOwnPropertyNames: $getOwnPropertyNames,
            getOwnPropertySymbols: $getOwnPropertySymbols
          });
          $JSON && $export($export.S + $export.F * (!useNative || buggyJSON), 'JSON', {stringify: $stringify});
          setToStringTag($Symbol, 'Symbol');
          setToStringTag(Math, 'Math', true);
          setToStringTag(global.JSON, 'JSON', true);
        }, {
          "231": 231,
          "246": 246,
          "248": 248,
          "249": 249,
          "251": 251,
          "255": 255,
          "256": 256,
          "257": 257,
          "263": 263,
          "273": 273,
          "274": 274,
          "275": 275,
          "286": 286,
          "288": 288,
          "293": 293,
          "294": 294,
          "305": 305,
          "309": 309,
          "310": 310
        }],
        397: [function(_dereq_, module, exports) {
          'use strict';
          var $ = _dereq_(273),
              redefine = _dereq_(288),
              weak = _dereq_(241),
              isObject = _dereq_(265),
              has = _dereq_(257),
              frozenStore = weak.frozenStore,
              WEAK = weak.WEAK,
              isExtensible = Object.isExtensible || isObject,
              tmp = {};
          var $WeakMap = _dereq_(242)('WeakMap', function(get) {
            return function WeakMap() {
              return get(this, arguments.length > 0 ? arguments[0] : undefined);
            };
          }, {
            get: function get(key) {
              if (isObject(key)) {
                if (!isExtensible(key))
                  return frozenStore(this).get(key);
                if (has(key, WEAK))
                  return key[WEAK][this._i];
              }
            },
            set: function set(key, value) {
              return weak.def(this, key, value);
            }
          }, weak, true, true);
          if (new $WeakMap().set((Object.freeze || Object)(tmp), 7).get(tmp) != 7) {
            $.each.call(['delete', 'has', 'get', 'set'], function(key) {
              var proto = $WeakMap.prototype,
                  method = proto[key];
              redefine(proto, key, function(a, b) {
                if (isObject(a) && !isExtensible(a)) {
                  var result = frozenStore(this)[key](a, b);
                  return key == 'set' ? this : result;
                }
                return method.call(this, a, b);
              });
            });
          }
        }, {
          "241": 241,
          "242": 242,
          "257": 257,
          "265": 265,
          "273": 273,
          "288": 288
        }],
        398: [function(_dereq_, module, exports) {
          'use strict';
          var weak = _dereq_(241);
          _dereq_(242)('WeakSet', function(get) {
            return function WeakSet() {
              return get(this, arguments.length > 0 ? arguments[0] : undefined);
            };
          }, {add: function add(value) {
              return weak.def(this, value, true);
            }}, weak, false, true);
        }, {
          "241": 241,
          "242": 242
        }],
        399: [function(_dereq_, module, exports) {
          'use strict';
          var $export = _dereq_(249),
              $includes = _dereq_(234)(true);
          $export($export.P, 'Array', {includes: function includes(el) {
              return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
            }});
          _dereq_(230)('includes');
        }, {
          "230": 230,
          "234": 234,
          "249": 249
        }],
        400: [function(_dereq_, module, exports) {
          var $export = _dereq_(249);
          $export($export.P, 'Map', {toJSON: _dereq_(240)('Map')});
        }, {
          "240": 240,
          "249": 249
        }],
        401: [function(_dereq_, module, exports) {
          var $export = _dereq_(249),
              $entries = _dereq_(282)(true);
          $export($export.S, 'Object', {entries: function entries(it) {
              return $entries(it);
            }});
        }, {
          "249": 249,
          "282": 282
        }],
        402: [function(_dereq_, module, exports) {
          var $ = _dereq_(273),
              $export = _dereq_(249),
              ownKeys = _dereq_(283),
              toIObject = _dereq_(305),
              createDesc = _dereq_(286);
          $export($export.S, 'Object', {getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
              var O = toIObject(object),
                  setDesc = $.setDesc,
                  getDesc = $.getDesc,
                  keys = ownKeys(O),
                  result = {},
                  i = 0,
                  key,
                  D;
              while (keys.length > i) {
                D = getDesc(O, key = keys[i++]);
                if (key in result)
                  setDesc(result, key, createDesc(0, D));
                else
                  result[key] = D;
              }
              return result;
            }});
        }, {
          "249": 249,
          "273": 273,
          "283": 283,
          "286": 286,
          "305": 305
        }],
        403: [function(_dereq_, module, exports) {
          var $export = _dereq_(249),
              $values = _dereq_(282)(false);
          $export($export.S, 'Object', {values: function values(it) {
              return $values(it);
            }});
        }, {
          "249": 249,
          "282": 282
        }],
        404: [function(_dereq_, module, exports) {
          var $export = _dereq_(249),
              $re = _dereq_(289)(/[\\^$*+?.()|[\]{}]/g, '\\$&');
          $export($export.S, 'RegExp', {escape: function escape(it) {
              return $re(it);
            }});
        }, {
          "249": 249,
          "289": 289
        }],
        405: [function(_dereq_, module, exports) {
          var $export = _dereq_(249);
          $export($export.P, 'Set', {toJSON: _dereq_(240)('Set')});
        }, {
          "240": 240,
          "249": 249
        }],
        406: [function(_dereq_, module, exports) {
          'use strict';
          var $export = _dereq_(249),
              $at = _dereq_(297)(true);
          $export($export.P, 'String', {at: function at(pos) {
              return $at(this, pos);
            }});
        }, {
          "249": 249,
          "297": 297
        }],
        407: [function(_dereq_, module, exports) {
          'use strict';
          var $export = _dereq_(249),
              $pad = _dereq_(299);
          $export($export.P, 'String', {padLeft: function padLeft(maxLength) {
              return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);
            }});
        }, {
          "249": 249,
          "299": 299
        }],
        408: [function(_dereq_, module, exports) {
          'use strict';
          var $export = _dereq_(249),
              $pad = _dereq_(299);
          $export($export.P, 'String', {padRight: function padRight(maxLength) {
              return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false);
            }});
        }, {
          "249": 249,
          "299": 299
        }],
        409: [function(_dereq_, module, exports) {
          'use strict';
          _dereq_(301)('trimLeft', function($trim) {
            return function trimLeft() {
              return $trim(this, 1);
            };
          });
        }, {"301": 301}],
        410: [function(_dereq_, module, exports) {
          'use strict';
          _dereq_(301)('trimRight', function($trim) {
            return function trimRight() {
              return $trim(this, 2);
            };
          });
        }, {"301": 301}],
        411: [function(_dereq_, module, exports) {
          var $ = _dereq_(273),
              $export = _dereq_(249),
              $ctx = _dereq_(244),
              $Array = _dereq_(243).Array || Array,
              statics = {};
          var setStatics = function(keys, length) {
            $.each.call(keys.split(','), function(key) {
              if (length == undefined && key in $Array)
                statics[key] = $Array[key];
              else if (key in [])
                statics[key] = $ctx(Function.call, [][key], length);
            });
          };
          setStatics('pop,reverse,shift,keys,values,entries', 1);
          setStatics('indexOf,every,some,forEach,map,filter,find,findIndex,includes', 3);
          setStatics('join,slice,concat,push,splice,unshift,sort,lastIndexOf,' + 'reduce,reduceRight,copyWithin,fill');
          $export($export.S, 'Array', statics);
        }, {
          "243": 243,
          "244": 244,
          "249": 249,
          "273": 273
        }],
        412: [function(_dereq_, module, exports) {
          _dereq_(318);
          var global = _dereq_(256),
              hide = _dereq_(258),
              Iterators = _dereq_(272),
              ITERATOR = _dereq_(310)('iterator'),
              NL = global.NodeList,
              HTC = global.HTMLCollection,
              NLProto = NL && NL.prototype,
              HTCProto = HTC && HTC.prototype,
              ArrayValues = Iterators.NodeList = Iterators.HTMLCollection = Iterators.Array;
          if (NLProto && !NLProto[ITERATOR])
            hide(NLProto, ITERATOR, ArrayValues);
          if (HTCProto && !HTCProto[ITERATOR])
            hide(HTCProto, ITERATOR, ArrayValues);
        }, {
          "256": 256,
          "258": 258,
          "272": 272,
          "310": 310,
          "318": 318
        }],
        413: [function(_dereq_, module, exports) {
          var $export = _dereq_(249),
              $task = _dereq_(302);
          $export($export.G + $export.B, {
            setImmediate: $task.set,
            clearImmediate: $task.clear
          });
        }, {
          "249": 249,
          "302": 302
        }],
        414: [function(_dereq_, module, exports) {
          var global = _dereq_(256),
              $export = _dereq_(249),
              invoke = _dereq_(260),
              partial = _dereq_(284),
              navigator = global.navigator,
              MSIE = !!navigator && /MSIE .\./.test(navigator.userAgent);
          var wrap = function(set) {
            return MSIE ? function(fn, time) {
              return set(invoke(partial, [].slice.call(arguments, 2), typeof fn == 'function' ? fn : Function(fn)), time);
            } : set;
          };
          $export($export.G + $export.B + $export.F * MSIE, {
            setTimeout: wrap(global.setTimeout),
            setInterval: wrap(global.setInterval)
          });
        }, {
          "249": 249,
          "256": 256,
          "260": 260,
          "284": 284
        }],
        415: [function(_dereq_, module, exports) {
          _dereq_(312);
          _dereq_(396);
          _dereq_(351);
          _dereq_(359);
          _dereq_(363);
          _dereq_(364);
          _dereq_(352);
          _dereq_(362);
          _dereq_(361);
          _dereq_(357);
          _dereq_(358);
          _dereq_(356);
          _dereq_(353);
          _dereq_(355);
          _dereq_(360);
          _dereq_(354);
          _dereq_(322);
          _dereq_(321);
          _dereq_(341);
          _dereq_(342);
          _dereq_(343);
          _dereq_(344);
          _dereq_(345);
          _dereq_(346);
          _dereq_(347);
          _dereq_(348);
          _dereq_(349);
          _dereq_(350);
          _dereq_(324);
          _dereq_(325);
          _dereq_(326);
          _dereq_(327);
          _dereq_(328);
          _dereq_(329);
          _dereq_(330);
          _dereq_(331);
          _dereq_(332);
          _dereq_(333);
          _dereq_(334);
          _dereq_(335);
          _dereq_(336);
          _dereq_(337);
          _dereq_(338);
          _dereq_(339);
          _dereq_(340);
          _dereq_(389);
          _dereq_(392);
          _dereq_(395);
          _dereq_(391);
          _dereq_(387);
          _dereq_(388);
          _dereq_(390);
          _dereq_(393);
          _dereq_(394);
          _dereq_(317);
          _dereq_(319);
          _dereq_(318);
          _dereq_(320);
          _dereq_(313);
          _dereq_(314);
          _dereq_(316);
          _dereq_(315);
          _dereq_(380);
          _dereq_(381);
          _dereq_(382);
          _dereq_(383);
          _dereq_(384);
          _dereq_(385);
          _dereq_(365);
          _dereq_(323);
          _dereq_(386);
          _dereq_(397);
          _dereq_(398);
          _dereq_(366);
          _dereq_(367);
          _dereq_(368);
          _dereq_(369);
          _dereq_(370);
          _dereq_(373);
          _dereq_(371);
          _dereq_(372);
          _dereq_(374);
          _dereq_(375);
          _dereq_(376);
          _dereq_(377);
          _dereq_(379);
          _dereq_(378);
          _dereq_(399);
          _dereq_(406);
          _dereq_(407);
          _dereq_(408);
          _dereq_(409);
          _dereq_(410);
          _dereq_(404);
          _dereq_(402);
          _dereq_(403);
          _dereq_(401);
          _dereq_(400);
          _dereq_(405);
          _dereq_(411);
          _dereq_(414);
          _dereq_(413);
          _dereq_(412);
          module.exports = _dereq_(243);
        }, {
          "243": 243,
          "312": 312,
          "313": 313,
          "314": 314,
          "315": 315,
          "316": 316,
          "317": 317,
          "318": 318,
          "319": 319,
          "320": 320,
          "321": 321,
          "322": 322,
          "323": 323,
          "324": 324,
          "325": 325,
          "326": 326,
          "327": 327,
          "328": 328,
          "329": 329,
          "330": 330,
          "331": 331,
          "332": 332,
          "333": 333,
          "334": 334,
          "335": 335,
          "336": 336,
          "337": 337,
          "338": 338,
          "339": 339,
          "340": 340,
          "341": 341,
          "342": 342,
          "343": 343,
          "344": 344,
          "345": 345,
          "346": 346,
          "347": 347,
          "348": 348,
          "349": 349,
          "350": 350,
          "351": 351,
          "352": 352,
          "353": 353,
          "354": 354,
          "355": 355,
          "356": 356,
          "357": 357,
          "358": 358,
          "359": 359,
          "360": 360,
          "361": 361,
          "362": 362,
          "363": 363,
          "364": 364,
          "365": 365,
          "366": 366,
          "367": 367,
          "368": 368,
          "369": 369,
          "370": 370,
          "371": 371,
          "372": 372,
          "373": 373,
          "374": 374,
          "375": 375,
          "376": 376,
          "377": 377,
          "378": 378,
          "379": 379,
          "380": 380,
          "381": 381,
          "382": 382,
          "383": 383,
          "384": 384,
          "385": 385,
          "386": 386,
          "387": 387,
          "388": 388,
          "389": 389,
          "390": 390,
          "391": 391,
          "392": 392,
          "393": 393,
          "394": 394,
          "395": 395,
          "396": 396,
          "397": 397,
          "398": 398,
          "399": 399,
          "400": 400,
          "401": 401,
          "402": 402,
          "403": 403,
          "404": 404,
          "405": 405,
          "406": 406,
          "407": 407,
          "408": 408,
          "409": 409,
          "410": 410,
          "411": 411,
          "412": 412,
          "413": 413,
          "414": 414
        }],
        416: [function(_dereq_, module, exports) {
          exports = module.exports = debug;
          exports.coerce = coerce;
          exports.disable = disable;
          exports.enable = enable;
          exports.enabled = enabled;
          exports.humanize = _dereq_(556);
          exports.names = [];
          exports.skips = [];
          exports.formatters = {};
          var prevColor = 0;
          var prevTime;
          function selectColor() {
            return exports.colors[prevColor++ % exports.colors.length];
          }
          function debug(namespace) {
            function disabled() {}
            disabled.enabled = false;
            function enabled() {
              var self = enabled;
              var curr = +new Date();
              var ms = curr - (prevTime || curr);
              self.diff = ms;
              self.prev = prevTime;
              self.curr = curr;
              prevTime = curr;
              if (null == self.useColors)
                self.useColors = exports.useColors();
              if (null == self.color && self.useColors)
                self.color = selectColor();
              var args = Array.prototype.slice.call(arguments);
              args[0] = exports.coerce(args[0]);
              if ('string' !== typeof args[0]) {
                args = ['%o'].concat(args);
              }
              var index = 0;
              args[0] = args[0].replace(/%([a-z%])/g, function(match, format) {
                if (match === '%%')
                  return match;
                index++;
                var formatter = exports.formatters[format];
                if ('function' === typeof formatter) {
                  var val = args[index];
                  match = formatter.call(self, val);
                  args.splice(index, 1);
                  index--;
                }
                return match;
              });
              if ('function' === typeof exports.formatArgs) {
                args = exports.formatArgs.apply(self, args);
              }
              var logFn = enabled.log || exports.log || console.log.bind(console);
              logFn.apply(self, args);
            }
            enabled.enabled = true;
            var fn = exports.enabled(namespace) ? enabled : disabled;
            fn.namespace = namespace;
            return fn;
          }
          function enable(namespaces) {
            exports.save(namespaces);
            var split = (namespaces || '').split(/[\s,]+/);
            var len = split.length;
            for (var i = 0; i < len; i++) {
              if (!split[i])
                continue;
              namespaces = split[i].replace(/\*/g, '.*?');
              if (namespaces[0] === '-') {
                exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
              } else {
                exports.names.push(new RegExp('^' + namespaces + '$'));
              }
            }
          }
          function disable() {
            exports.enable('');
          }
          function enabled(name) {
            var i,
                len;
            for (i = 0, len = exports.skips.length; i < len; i++) {
              if (exports.skips[i].test(name)) {
                return false;
              }
            }
            for (i = 0, len = exports.names.length; i < len; i++) {
              if (exports.names[i].test(name)) {
                return true;
              }
            }
            return false;
          }
          function coerce(val) {
            if (val instanceof Error)
              return val.stack || val.message;
            return val;
          }
        }, {"556": 556}],
        417: [function(_dereq_, module, exports) {
          (function(process) {
            var tty = _dereq_(11);
            var util = _dereq_(13);
            exports = module.exports = _dereq_(416);
            exports.log = log;
            exports.formatArgs = formatArgs;
            exports.save = save;
            exports.load = load;
            exports.useColors = useColors;
            exports.colors = [6, 2, 3, 4, 5, 1];
            var fd = parseInt(process.env.DEBUG_FD, 10) || 2;
            var stream = 1 === fd ? process.stdout : 2 === fd ? process.stderr : createWritableStdioStream(fd);
            function useColors() {
              var debugColors = (process.env.DEBUG_COLORS || '').trim().toLowerCase();
              if (0 === debugColors.length) {
                return tty.isatty(fd);
              } else {
                return '0' !== debugColors && 'no' !== debugColors && 'false' !== debugColors && 'disabled' !== debugColors;
              }
            }
            var inspect = (4 === util.inspect.length ? function(v, colors) {
              return util.inspect(v, void 0, void 0, colors);
            } : function(v, colors) {
              return util.inspect(v, {colors: colors});
            });
            exports.formatters.o = function(v) {
              return inspect(v, this.useColors).replace(/\s*\n\s*/g, ' ');
            };
            function formatArgs() {
              var args = arguments;
              var useColors = this.useColors;
              var name = this.namespace;
              if (useColors) {
                var c = this.color;
                args[0] = '  \u001b[3' + c + ';1m' + name + ' ' + '\u001b[0m' + args[0] + '\u001b[3' + c + 'm' + ' +' + exports.humanize(this.diff) + '\u001b[0m';
              } else {
                args[0] = new Date().toUTCString() + ' ' + name + ' ' + args[0];
              }
              return args;
            }
            function log() {
              return stream.write(util.format.apply(this, arguments) + '\n');
            }
            function save(namespaces) {
              if (null == namespaces) {
                delete process.env.DEBUG;
              } else {
                process.env.DEBUG = namespaces;
              }
            }
            function load() {
              return process.env.DEBUG;
            }
            function createWritableStdioStream(fd) {
              var stream;
              var tty_wrap = process.binding('tty_wrap');
              switch (tty_wrap.guessHandleType(fd)) {
                case 'TTY':
                  stream = new tty.WriteStream(fd);
                  stream._type = 'tty';
                  if (stream._handle && stream._handle.unref) {
                    stream._handle.unref();
                  }
                  break;
                case 'FILE':
                  var fs = _dereq_(3);
                  stream = new fs.SyncWriteStream(fd, {autoClose: false});
                  stream._type = 'fs';
                  break;
                case 'PIPE':
                case 'TCP':
                  var net = _dereq_(3);
                  stream = new net.Socket({
                    fd: fd,
                    readable: false,
                    writable: true
                  });
                  stream.readable = false;
                  stream.read = null;
                  stream._type = 'pipe';
                  if (stream._handle && stream._handle.unref) {
                    stream._handle.unref();
                  }
                  break;
                default:
                  throw new Error('Implement me. Unknown stream file type!');
              }
              stream.fd = fd;
              stream._isStdio = true;
              return stream;
            }
            exports.enable(load());
          }).call(this, _dereq_(10));
        }, {
          "10": 10,
          "11": 11,
          "13": 13,
          "3": 3,
          "416": 416
        }],
        418: [function(_dereq_, module, exports) {
          "use strict";
          var assert = _dereq_(1);
          var is = _dereq_(589);
          var fmt = _dereq_(588);
          var stringmap = _dereq_(603);
          var stringset = _dereq_(604);
          var alter = _dereq_(183);
          var traverse = _dereq_(186);
          var breakable = _dereq_(221);
          var Scope = _dereq_(422);
          var error = _dereq_(419);
          var getline = error.getline;
          var options = _dereq_(421);
          var Stats = _dereq_(423);
          var jshint_vars = _dereq_(420);
          function isConstLet(kind) {
            return is.someof(kind, ["const", "let"]);
          }
          function isVarConstLet(kind) {
            return is.someof(kind, ["var", "const", "let"]);
          }
          function isNonFunctionBlock(node) {
            return node.type === "BlockStatement" && is.noneof(node.$parent.type, ["FunctionDeclaration", "FunctionExpression"]);
          }
          function isForWithConstLet(node) {
            return node.type === "ForStatement" && node.init && node.init.type === "VariableDeclaration" && isConstLet(node.init.kind);
          }
          function isForInOfWithConstLet(node) {
            return isForInOf(node) && node.left.type === "VariableDeclaration" && isConstLet(node.left.kind);
          }
          function isForInOf(node) {
            return is.someof(node.type, ["ForInStatement", "ForOfStatement"]);
          }
          function isFunction(node) {
            return is.someof(node.type, ["FunctionDeclaration", "FunctionExpression"]);
          }
          function isLoop(node) {
            return is.someof(node.type, ["ForStatement", "ForInStatement", "ForOfStatement", "WhileStatement", "DoWhileStatement"]);
          }
          function isReference(node) {
            var parent = node.$parent;
            return node.$refToScope || node.type === "Identifier" && !(parent.type === "VariableDeclarator" && parent.id === node) && !(parent.type === "MemberExpression" && parent.computed === false && parent.property === node) && !(parent.type === "Property" && parent.key === node) && !(parent.type === "LabeledStatement" && parent.label === node) && !(parent.type === "CatchClause" && parent.param === node) && !(isFunction(parent) && parent.id === node) && !(isFunction(parent) && is.someof(node, parent.params)) && true;
          }
          function isLvalue(node) {
            return isReference(node) && ((node.$parent.type === "AssignmentExpression" && node.$parent.left === node) || (node.$parent.type === "UpdateExpression" && node.$parent.argument === node));
          }
          function createScopes(node, parent) {
            assert(!node.$scope);
            node.$parent = parent;
            node.$scope = node.$parent ? node.$parent.$scope : null;
            if (node.type === "Program") {
              node.$scope = new Scope({
                kind: "hoist",
                node: node,
                parent: null
              });
            } else if (isFunction(node)) {
              node.$scope = new Scope({
                kind: "hoist",
                node: node,
                parent: node.$parent.$scope
              });
              if (node.id) {
                assert(node.id.type === "Identifier");
                if (node.type === "FunctionDeclaration") {
                  node.$parent.$scope.add(node.id.name, "fun", node.id, null);
                } else if (node.type === "FunctionExpression") {
                  node.$scope.add(node.id.name, "fun", node.id, null);
                } else {
                  assert(false);
                }
              }
              node.params.forEach(function(param) {
                node.$scope.add(param.name, "param", param, null);
              });
            } else if (node.type === "VariableDeclaration") {
              assert(isVarConstLet(node.kind));
              node.declarations.forEach(function(declarator) {
                assert(declarator.type === "VariableDeclarator");
                var name = declarator.id.name;
                if (options.disallowVars && node.kind === "var") {
                  error(getline(declarator), "var {0} is not allowed (use let or const)", name);
                }
                node.$scope.add(name, node.kind, declarator.id, declarator.range[1]);
              });
            } else if (isForWithConstLet(node) || isForInOfWithConstLet(node)) {
              node.$scope = new Scope({
                kind: "block",
                node: node,
                parent: node.$parent.$scope
              });
            } else if (isNonFunctionBlock(node)) {
              node.$scope = new Scope({
                kind: "block",
                node: node,
                parent: node.$parent.$scope
              });
            } else if (node.type === "CatchClause") {
              var identifier = node.param;
              node.$scope = new Scope({
                kind: "catch-block",
                node: node,
                parent: node.$parent.$scope
              });
              node.$scope.add(identifier.name, "caught", identifier, null);
              node.$scope.closestHoistScope().markPropagates(identifier.name);
            }
          }
          function createTopScope(programScope, environments, globals) {
            function inject(obj) {
              for (var name in obj) {
                var writeable = obj[name];
                var kind = (writeable ? "var" : "const");
                if (topScope.hasOwn(name)) {
                  topScope.remove(name);
                }
                topScope.add(name, kind, {loc: {start: {line: -1}}}, -1);
              }
            }
            var topScope = new Scope({
              kind: "hoist",
              node: {},
              parent: null
            });
            var complementary = {
              undefined: false,
              Infinity: false,
              console: false
            };
            inject(complementary);
            inject(jshint_vars.reservedVars);
            inject(jshint_vars.ecmaIdentifiers);
            if (environments) {
              environments.forEach(function(env) {
                if (!jshint_vars[env]) {
                  error(-1, 'environment "{0}" not found', env);
                } else {
                  inject(jshint_vars[env]);
                }
              });
            }
            if (globals) {
              inject(globals);
            }
            programScope.parent = topScope;
            topScope.children.push(programScope);
            return topScope;
          }
          function setupReferences(ast, allIdentifiers, opts) {
            var analyze = (is.own(opts, "analyze") ? opts.analyze : true);
            function visit(node) {
              if (!isReference(node)) {
                return;
              }
              allIdentifiers.add(node.name);
              var scope = node.$scope.lookup(node.name);
              if (analyze && !scope && options.disallowUnknownReferences) {
                error(getline(node), "reference to unknown global variable {0}", node.name);
              }
              if (analyze && scope && is.someof(scope.getKind(node.name), ["const", "let"])) {
                var allowedFromPos = scope.getFromPos(node.name);
                var referencedAtPos = node.range[0];
                assert(is.finitenumber(allowedFromPos));
                assert(is.finitenumber(referencedAtPos));
                if (referencedAtPos < allowedFromPos) {
                  if (!node.$scope.hasFunctionScopeBetween(scope)) {
                    error(getline(node), "{0} is referenced before its declaration", node.name);
                  }
                }
              }
              node.$refToScope = scope;
            }
            traverse(ast, {pre: visit});
          }
          function varify(ast, stats, allIdentifiers, changes) {
            function unique(name) {
              assert(allIdentifiers.has(name));
              for (var cnt = 0; ; cnt++) {
                var genName = name + "$" + String(cnt);
                if (!allIdentifiers.has(genName)) {
                  return genName;
                }
              }
            }
            function renameDeclarations(node) {
              if (node.type === "VariableDeclaration" && isConstLet(node.kind)) {
                var hoistScope = node.$scope.closestHoistScope();
                var origScope = node.$scope;
                changes.push({
                  start: node.range[0],
                  end: node.range[0] + node.kind.length,
                  str: "var"
                });
                node.declarations.forEach(function(declarator) {
                  assert(declarator.type === "VariableDeclarator");
                  var name = declarator.id.name;
                  stats.declarator(node.kind);
                  var rename = (origScope !== hoistScope && (hoistScope.hasOwn(name) || hoistScope.doesPropagate(name)));
                  var newName = (rename ? unique(name) : name);
                  origScope.remove(name);
                  hoistScope.add(newName, "var", declarator.id, declarator.range[1]);
                  origScope.moves = origScope.moves || stringmap();
                  origScope.moves.set(name, {
                    name: newName,
                    scope: hoistScope
                  });
                  allIdentifiers.add(newName);
                  if (newName !== name) {
                    stats.rename(name, newName, getline(declarator));
                    declarator.id.originalName = name;
                    declarator.id.name = newName;
                    changes.push({
                      start: declarator.id.range[0],
                      end: declarator.id.range[1],
                      str: newName
                    });
                  }
                });
                node.kind = "var";
              }
            }
            function renameReferences(node) {
              if (!node.$refToScope) {
                return;
              }
              var move = node.$refToScope.moves && node.$refToScope.moves.get(node.name);
              if (!move) {
                return;
              }
              node.$refToScope = move.scope;
              if (node.name !== move.name) {
                node.originalName = node.name;
                node.name = move.name;
                if (node.alterop) {
                  var existingOp = null;
                  for (var i = 0; i < changes.length; i++) {
                    var op = changes[i];
                    if (op.node === node) {
                      existingOp = op;
                      break;
                    }
                  }
                  assert(existingOp);
                  existingOp.str = move.name;
                } else {
                  changes.push({
                    start: node.range[0],
                    end: node.range[1],
                    str: move.name
                  });
                }
              }
            }
            traverse(ast, {pre: renameDeclarations});
            traverse(ast, {pre: renameReferences});
            ast.$scope.traverse({pre: function(scope) {
                delete scope.moves;
              }});
          }
          function detectLoopClosures(ast) {
            traverse(ast, {pre: visit});
            function detectIifyBodyBlockers(body, node) {
              return breakable(function(brk) {
                traverse(body, {pre: function(n) {
                    if (isFunction(n)) {
                      return false;
                    }
                    var err = true;
                    var msg = "loop-variable {0} is captured by a loop-closure that can't be transformed due to use of {1} at line {2}";
                    if (n.type === "BreakStatement") {
                      error(getline(node), msg, node.name, "break", getline(n));
                    } else if (n.type === "ContinueStatement") {
                      error(getline(node), msg, node.name, "continue", getline(n));
                    } else if (n.type === "ReturnStatement") {
                      error(getline(node), msg, node.name, "return", getline(n));
                    } else if (n.type === "YieldExpression") {
                      error(getline(node), msg, node.name, "yield", getline(n));
                    } else if (n.type === "Identifier" && n.name === "arguments") {
                      error(getline(node), msg, node.name, "arguments", getline(n));
                    } else if (n.type === "VariableDeclaration" && n.kind === "var") {
                      error(getline(node), msg, node.name, "var", getline(n));
                    } else {
                      err = false;
                    }
                    if (err) {
                      brk(true);
                    }
                  }});
                return false;
              });
            }
            function visit(node) {
              var loopNode = null;
              if (isReference(node) && node.$refToScope && isConstLet(node.$refToScope.getKind(node.name))) {
                for (var n = node.$refToScope.node; ; ) {
                  if (isFunction(n)) {
                    return;
                  } else if (isLoop(n)) {
                    loopNode = n;
                    break;
                  }
                  n = n.$parent;
                  if (!n) {
                    return;
                  }
                }
                assert(isLoop(loopNode));
                var defScope = node.$refToScope;
                var generateIIFE = (options.loopClosures === "iife");
                for (var s = node.$scope; s; s = s.parent) {
                  if (s === defScope) {
                    return;
                  } else if (isFunction(s.node)) {
                    if (!generateIIFE) {
                      var msg = "loop-variable {0} is captured by a loop-closure. Tried \"loopClosures\": \"iife\" in defs-config.json?";
                      return error(getline(node), msg, node.name);
                    }
                    if (loopNode.type === "ForStatement" && defScope.node === loopNode) {
                      var declarationNode = defScope.getNode(node.name);
                      return error(getline(declarationNode), "Not yet specced ES6 feature. {0} is declared in for-loop header and then captured in loop closure", declarationNode.name);
                    }
                    if (detectIifyBodyBlockers(loopNode.body, node)) {
                      return;
                    }
                    loopNode.$iify = true;
                  }
                }
              }
            }
          }
          function transformLoopClosures(root, ops, options) {
            function insertOp(pos, str, node) {
              var op = {
                start: pos,
                end: pos,
                str: str
              };
              if (node) {
                op.node = node;
              }
              ops.push(op);
            }
            traverse(root, {pre: function(node) {
                if (!node.$iify) {
                  return;
                }
                var hasBlock = (node.body.type === "BlockStatement");
                var insertHead = (hasBlock ? node.body.range[0] + 1 : node.body.range[0]);
                var insertFoot = (hasBlock ? node.body.range[1] - 1 : node.body.range[1]);
                var forInName = (isForInOf(node) && node.left.declarations[0].id.name);
                ;
                var iifeHead = fmt("(function({0}){", forInName ? forInName : "");
                var iifeTail = fmt("}).call(this{0});", forInName ? ", " + forInName : "");
                var iifeFragment = options.parse(iifeHead + iifeTail);
                var iifeExpressionStatement = iifeFragment.body[0];
                var iifeBlockStatement = iifeExpressionStatement.expression.callee.object.body;
                if (hasBlock) {
                  var forBlockStatement = node.body;
                  var tmp = forBlockStatement.body;
                  forBlockStatement.body = [iifeExpressionStatement];
                  iifeBlockStatement.body = tmp;
                } else {
                  var tmp$0 = node.body;
                  node.body = iifeExpressionStatement;
                  iifeBlockStatement.body[0] = tmp$0;
                }
                insertOp(insertHead, iifeHead);
                if (forInName) {
                  insertOp(insertFoot, "}).call(this, ");
                  var args = iifeExpressionStatement.expression.arguments;
                  var iifeArgumentIdentifier = args[1];
                  iifeArgumentIdentifier.alterop = true;
                  insertOp(insertFoot, forInName, iifeArgumentIdentifier);
                  insertOp(insertFoot, ");");
                } else {
                  insertOp(insertFoot, iifeTail);
                }
              }});
          }
          function detectConstAssignment(ast) {
            traverse(ast, {pre: function(node) {
                if (isLvalue(node)) {
                  var scope = node.$scope.lookup(node.name);
                  if (scope && scope.getKind(node.name) === "const") {
                    error(getline(node), "can't assign to const variable {0}", node.name);
                  }
                }
              }});
          }
          function detectConstantLets(ast) {
            traverse(ast, {pre: function(node) {
                if (isLvalue(node)) {
                  var scope = node.$scope.lookup(node.name);
                  if (scope) {
                    scope.markWrite(node.name);
                  }
                }
              }});
            ast.$scope.detectUnmodifiedLets();
          }
          function setupScopeAndReferences(root, opts) {
            traverse(root, {pre: createScopes});
            var topScope = createTopScope(root.$scope, options.environments, options.globals);
            var allIdentifiers = stringset();
            topScope.traverse({pre: function(scope) {
                allIdentifiers.addMany(scope.decls.keys());
              }});
            setupReferences(root, allIdentifiers, opts);
            return allIdentifiers;
          }
          function cleanupTree(root) {
            traverse(root, {pre: function(node) {
                for (var prop in node) {
                  if (prop[0] === "$") {
                    delete node[prop];
                  }
                }
              }});
          }
          function run(src, config) {
            for (var key in config) {
              options[key] = config[key];
            }
            var parsed;
            if (is.object(src)) {
              if (!options.ast) {
                return {errors: ["Can't produce string output when input is an AST. " + "Did you forget to set options.ast = true?"]};
              }
              parsed = src;
            } else if (is.string(src)) {
              try {
                parsed = options.parse(src, {
                  loc: true,
                  range: true
                });
              } catch (e) {
                return {errors: [fmt("line {0} column {1}: Error during input file parsing\n{2}\n{3}", e.lineNumber, e.column, src.split("\n")[e.lineNumber - 1], fmt.repeat(" ", e.column - 1) + "^")]};
              }
            } else {
              return {errors: ["Input was neither an AST object nor a string."]};
            }
            var ast = parsed;
            error.reset();
            var allIdentifiers = setupScopeAndReferences(ast, {});
            detectLoopClosures(ast);
            detectConstAssignment(ast);
            var changes = [];
            transformLoopClosures(ast, changes, options);
            if (error.errors.length >= 1) {
              return {errors: error.errors};
            }
            if (changes.length > 0) {
              cleanupTree(ast);
              allIdentifiers = setupScopeAndReferences(ast, {analyze: false});
            }
            assert(error.errors.length === 0);
            var stats = new Stats();
            varify(ast, stats, allIdentifiers, changes);
            if (options.ast) {
              cleanupTree(ast);
              return {
                stats: stats,
                ast: ast
              };
            } else {
              var transformedSrc = alter(src, changes);
              return {
                stats: stats,
                src: transformedSrc
              };
            }
          }
          module.exports = run;
        }, {
          "1": 1,
          "183": 183,
          "186": 186,
          "221": 221,
          "419": 419,
          "420": 420,
          "421": 421,
          "422": 422,
          "423": 423,
          "588": 588,
          "589": 589,
          "603": 603,
          "604": 604
        }],
        419: [function(_dereq_, module, exports) {
          "use strict";
          var fmt = _dereq_(588);
          var assert = _dereq_(1);
          function error(line, var_args) {
            assert(arguments.length >= 2);
            var msg = (arguments.length === 2 ? String(var_args) : fmt.apply(fmt, Array.prototype.slice.call(arguments, 1)));
            error.errors.push(line === -1 ? msg : fmt("line {0}: {1}", line, msg));
          }
          error.reset = function() {
            error.errors = [];
          };
          error.getline = function(node) {
            if (node && node.loc && node.loc.start) {
              return node.loc.start.line;
            }
            return -1;
          };
          error.reset();
          module.exports = error;
        }, {
          "1": 1,
          "588": 588
        }],
        420: [function(_dereq_, module, exports) {
          "use strict";
          exports.reservedVars = {
            arguments: false,
            NaN: false
          };
          exports.ecmaIdentifiers = {
            Array: false,
            Boolean: false,
            Date: false,
            decodeURI: false,
            decodeURIComponent: false,
            encodeURI: false,
            encodeURIComponent: false,
            Error: false,
            "eval": false,
            EvalError: false,
            Function: false,
            hasOwnProperty: false,
            isFinite: false,
            isNaN: false,
            JSON: false,
            Math: false,
            Map: false,
            Number: false,
            Object: false,
            parseInt: false,
            parseFloat: false,
            RangeError: false,
            ReferenceError: false,
            RegExp: false,
            Set: false,
            String: false,
            SyntaxError: false,
            TypeError: false,
            URIError: false,
            WeakMap: false
          };
          exports.browser = {
            ArrayBuffer: false,
            ArrayBufferView: false,
            Audio: false,
            Blob: false,
            addEventListener: false,
            applicationCache: false,
            atob: false,
            blur: false,
            btoa: false,
            clearInterval: false,
            clearTimeout: false,
            close: false,
            closed: false,
            DataView: false,
            DOMParser: false,
            defaultStatus: false,
            document: false,
            Element: false,
            event: false,
            FileReader: false,
            Float32Array: false,
            Float64Array: false,
            FormData: false,
            focus: false,
            frames: false,
            getComputedStyle: false,
            HTMLElement: false,
            HTMLAnchorElement: false,
            HTMLBaseElement: false,
            HTMLBlockquoteElement: false,
            HTMLBodyElement: false,
            HTMLBRElement: false,
            HTMLButtonElement: false,
            HTMLCanvasElement: false,
            HTMLDirectoryElement: false,
            HTMLDivElement: false,
            HTMLDListElement: false,
            HTMLFieldSetElement: false,
            HTMLFontElement: false,
            HTMLFormElement: false,
            HTMLFrameElement: false,
            HTMLFrameSetElement: false,
            HTMLHeadElement: false,
            HTMLHeadingElement: false,
            HTMLHRElement: false,
            HTMLHtmlElement: false,
            HTMLIFrameElement: false,
            HTMLImageElement: false,
            HTMLInputElement: false,
            HTMLIsIndexElement: false,
            HTMLLabelElement: false,
            HTMLLayerElement: false,
            HTMLLegendElement: false,
            HTMLLIElement: false,
            HTMLLinkElement: false,
            HTMLMapElement: false,
            HTMLMenuElement: false,
            HTMLMetaElement: false,
            HTMLModElement: false,
            HTMLObjectElement: false,
            HTMLOListElement: false,
            HTMLOptGroupElement: false,
            HTMLOptionElement: false,
            HTMLParagraphElement: false,
            HTMLParamElement: false,
            HTMLPreElement: false,
            HTMLQuoteElement: false,
            HTMLScriptElement: false,
            HTMLSelectElement: false,
            HTMLStyleElement: false,
            HTMLTableCaptionElement: false,
            HTMLTableCellElement: false,
            HTMLTableColElement: false,
            HTMLTableElement: false,
            HTMLTableRowElement: false,
            HTMLTableSectionElement: false,
            HTMLTextAreaElement: false,
            HTMLTitleElement: false,
            HTMLUListElement: false,
            HTMLVideoElement: false,
            history: false,
            Int16Array: false,
            Int32Array: false,
            Int8Array: false,
            Image: false,
            length: false,
            localStorage: false,
            location: false,
            MessageChannel: false,
            MessageEvent: false,
            MessagePort: false,
            moveBy: false,
            moveTo: false,
            MutationObserver: false,
            name: false,
            Node: false,
            NodeFilter: false,
            navigator: false,
            onbeforeunload: true,
            onblur: true,
            onerror: true,
            onfocus: true,
            onload: true,
            onresize: true,
            onunload: true,
            open: false,
            openDatabase: false,
            opener: false,
            Option: false,
            parent: false,
            print: false,
            removeEventListener: false,
            resizeBy: false,
            resizeTo: false,
            screen: false,
            scroll: false,
            scrollBy: false,
            scrollTo: false,
            sessionStorage: false,
            setInterval: false,
            setTimeout: false,
            SharedWorker: false,
            status: false,
            top: false,
            Uint16Array: false,
            Uint32Array: false,
            Uint8Array: false,
            Uint8ClampedArray: false,
            WebSocket: false,
            window: false,
            Worker: false,
            XMLHttpRequest: false,
            XMLSerializer: false,
            XPathEvaluator: false,
            XPathException: false,
            XPathExpression: false,
            XPathNamespace: false,
            XPathNSResolver: false,
            XPathResult: false
          };
          exports.devel = {
            alert: false,
            confirm: false,
            console: false,
            Debug: false,
            opera: false,
            prompt: false
          };
          exports.worker = {
            importScripts: true,
            postMessage: true,
            self: true
          };
          exports.nonstandard = {
            escape: false,
            unescape: false
          };
          exports.couch = {
            "require": false,
            respond: false,
            getRow: false,
            emit: false,
            send: false,
            start: false,
            sum: false,
            log: false,
            exports: false,
            module: false,
            provides: false
          };
          exports.node = {
            __filename: false,
            __dirname: false,
            Buffer: false,
            DataView: false,
            console: false,
            exports: true,
            GLOBAL: false,
            global: false,
            module: false,
            process: false,
            require: false,
            setTimeout: false,
            clearTimeout: false,
            setInterval: false,
            clearInterval: false
          };
          exports.phantom = {
            phantom: true,
            require: true,
            WebPage: true
          };
          exports.rhino = {
            defineClass: false,
            deserialize: false,
            gc: false,
            help: false,
            importPackage: false,
            "java": false,
            load: false,
            loadClass: false,
            print: false,
            quit: false,
            readFile: false,
            readUrl: false,
            runCommand: false,
            seal: false,
            serialize: false,
            spawn: false,
            sync: false,
            toint32: false,
            version: false
          };
          exports.wsh = {
            ActiveXObject: true,
            Enumerator: true,
            GetObject: true,
            ScriptEngine: true,
            ScriptEngineBuildVersion: true,
            ScriptEngineMajorVersion: true,
            ScriptEngineMinorVersion: true,
            VBArray: true,
            WSH: true,
            WScript: true,
            XDomainRequest: true
          };
          exports.dojo = {
            dojo: false,
            dijit: false,
            dojox: false,
            define: false,
            "require": false
          };
          exports.jquery = {
            "$": false,
            jQuery: false
          };
          exports.mootools = {
            "$": false,
            "$$": false,
            Asset: false,
            Browser: false,
            Chain: false,
            Class: false,
            Color: false,
            Cookie: false,
            Core: false,
            Document: false,
            DomReady: false,
            DOMEvent: false,
            DOMReady: false,
            Drag: false,
            Element: false,
            Elements: false,
            Event: false,
            Events: false,
            Fx: false,
            Group: false,
            Hash: false,
            HtmlTable: false,
            Iframe: false,
            IframeShim: false,
            InputValidator: false,
            instanceOf: false,
            Keyboard: false,
            Locale: false,
            Mask: false,
            MooTools: false,
            Native: false,
            Options: false,
            OverText: false,
            Request: false,
            Scroller: false,
            Slick: false,
            Slider: false,
            Sortables: false,
            Spinner: false,
            Swiff: false,
            Tips: false,
            Type: false,
            typeOf: false,
            URI: false,
            Window: false
          };
          exports.prototypejs = {
            "$": false,
            "$$": false,
            "$A": false,
            "$F": false,
            "$H": false,
            "$R": false,
            "$break": false,
            "$continue": false,
            "$w": false,
            Abstract: false,
            Ajax: false,
            Class: false,
            Enumerable: false,
            Element: false,
            Event: false,
            Field: false,
            Form: false,
            Hash: false,
            Insertion: false,
            ObjectRange: false,
            PeriodicalExecuter: false,
            Position: false,
            Prototype: false,
            Selector: false,
            Template: false,
            Toggle: false,
            Try: false,
            Autocompleter: false,
            Builder: false,
            Control: false,
            Draggable: false,
            Draggables: false,
            Droppables: false,
            Effect: false,
            Sortable: false,
            SortableObserver: false,
            Sound: false,
            Scriptaculous: false
          };
          exports.yui = {
            YUI: false,
            Y: false,
            YUI_config: false
          };
        }, {}],
        421: [function(_dereq_, module, exports) {
          module.exports = {
            disallowVars: false,
            disallowDuplicated: true,
            disallowUnknownReferences: true,
            parse: _dereq_(3).parse
          };
        }, {"3": 3}],
        422: [function(_dereq_, module, exports) {
          "use strict";
          var assert = _dereq_(1);
          var stringmap = _dereq_(603);
          var stringset = _dereq_(604);
          var is = _dereq_(589);
          var fmt = _dereq_(588);
          var error = _dereq_(419);
          var getline = error.getline;
          var options = _dereq_(421);
          function Scope(args) {
            assert(is.someof(args.kind, ["hoist", "block", "catch-block"]));
            assert(is.object(args.node));
            assert(args.parent === null || is.object(args.parent));
            this.kind = args.kind;
            this.node = args.node;
            this.parent = args.parent;
            this.children = [];
            this.decls = stringmap();
            this.written = stringset();
            this.propagates = (this.kind === "hoist" ? stringset() : null);
            if (this.parent) {
              this.parent.children.push(this);
            }
          }
          Scope.prototype.print = function(indent) {
            indent = indent || 0;
            var scope = this;
            var names = this.decls.keys().map(function(name) {
              return fmt("{0} [{1}]", name, scope.decls.get(name).kind);
            }).join(", ");
            var propagates = this.propagates ? this.propagates.items().join(", ") : "";
            console.log(fmt("{0}{1}: {2}. propagates: {3}", fmt.repeat(" ", indent), this.node.type, names, propagates));
            this.children.forEach(function(c) {
              c.print(indent + 2);
            });
          };
          Scope.prototype.add = function(name, kind, node, referableFromPos) {
            assert(is.someof(kind, ["fun", "param", "var", "caught", "const", "let"]));
            function isConstLet(kind) {
              return is.someof(kind, ["const", "let"]);
            }
            var scope = this;
            if (is.someof(kind, ["fun", "param", "var"])) {
              while (scope.kind !== "hoist") {
                if (scope.decls.has(name) && isConstLet(scope.decls.get(name).kind)) {
                  return error(getline(node), "{0} is already declared", name);
                }
                scope = scope.parent;
              }
            }
            if (scope.decls.has(name) && (options.disallowDuplicated || isConstLet(scope.decls.get(name).kind) || isConstLet(kind))) {
              return error(getline(node), "{0} is already declared", name);
            }
            var declaration = {
              kind: kind,
              node: node
            };
            if (referableFromPos) {
              assert(is.someof(kind, ["var", "const", "let"]));
              declaration.from = referableFromPos;
            }
            scope.decls.set(name, declaration);
          };
          Scope.prototype.getKind = function(name) {
            assert(is.string(name));
            var decl = this.decls.get(name);
            return decl ? decl.kind : null;
          };
          Scope.prototype.getNode = function(name) {
            assert(is.string(name));
            var decl = this.decls.get(name);
            return decl ? decl.node : null;
          };
          Scope.prototype.getFromPos = function(name) {
            assert(is.string(name));
            var decl = this.decls.get(name);
            return decl ? decl.from : null;
          };
          Scope.prototype.hasOwn = function(name) {
            return this.decls.has(name);
          };
          Scope.prototype.remove = function(name) {
            return this.decls.remove(name);
          };
          Scope.prototype.doesPropagate = function(name) {
            return this.propagates.has(name);
          };
          Scope.prototype.markPropagates = function(name) {
            this.propagates.add(name);
          };
          Scope.prototype.closestHoistScope = function() {
            var scope = this;
            while (scope.kind !== "hoist") {
              scope = scope.parent;
            }
            return scope;
          };
          Scope.prototype.hasFunctionScopeBetween = function(outer) {
            function isFunction(node) {
              return is.someof(node.type, ["FunctionDeclaration", "FunctionExpression"]);
            }
            for (var scope = this; scope; scope = scope.parent) {
              if (scope === outer) {
                return false;
              }
              if (isFunction(scope.node)) {
                return true;
              }
            }
            throw new Error("wasn't inner scope of outer");
          };
          Scope.prototype.lookup = function(name) {
            for (var scope = this; scope; scope = scope.parent) {
              if (scope.decls.has(name)) {
                return scope;
              } else if (scope.kind === "hoist") {
                scope.propagates.add(name);
              }
            }
            return null;
          };
          Scope.prototype.markWrite = function(name) {
            assert(is.string(name));
            this.written.add(name);
          };
          Scope.prototype.detectUnmodifiedLets = function() {
            var outmost = this;
            function detect(scope) {
              if (scope !== outmost) {
                scope.decls.keys().forEach(function(name) {
                  if (scope.getKind(name) === "let" && !scope.written.has(name)) {
                    return error(getline(scope.getNode(name)), "{0} is declared as let but never modified so could be const", name);
                  }
                });
              }
              scope.children.forEach(function(childScope) {
                detect(childScope);
              });
            }
            detect(this);
          };
          Scope.prototype.traverse = function(options) {
            options = options || {};
            var pre = options.pre;
            var post = options.post;
            function visit(scope) {
              if (pre) {
                pre(scope);
              }
              scope.children.forEach(function(childScope) {
                visit(childScope);
              });
              if (post) {
                post(scope);
              }
            }
            visit(this);
          };
          module.exports = Scope;
        }, {
          "1": 1,
          "419": 419,
          "421": 421,
          "588": 588,
          "589": 589,
          "603": 603,
          "604": 604
        }],
        423: [function(_dereq_, module, exports) {
          var fmt = _dereq_(588);
          var is = _dereq_(589);
          var assert = _dereq_(1);
          function Stats() {
            this.lets = 0;
            this.consts = 0;
            this.renames = [];
          }
          Stats.prototype.declarator = function(kind) {
            assert(is.someof(kind, ["const", "let"]));
            if (kind === "const") {
              this.consts++;
            } else {
              this.lets++;
            }
          };
          Stats.prototype.rename = function(oldName, newName, line) {
            this.renames.push({
              oldName: oldName,
              newName: newName,
              line: line
            });
          };
          Stats.prototype.toString = function() {
            var renames = this.renames.map(function(r) {
              return r;
            }).sort(function(a, b) {
              return a.line - b.line;
            });
            var renameStr = renames.map(function(rename) {
              return fmt("\nline {0}: {1} => {2}", rename.line, rename.oldName, rename.newName);
            }).join("");
            var sum = this.consts + this.lets;
            var constlets = (sum === 0 ? "can't calculate const coverage (0 consts, 0 lets)" : fmt("{0}% const coverage ({1} consts, {2} lets)", Math.floor(100 * this.consts / sum), this.consts, this.lets));
            return constlets + renameStr + "\n";
          };
          module.exports = Stats;
        }, {
          "1": 1,
          "588": 588,
          "589": 589
        }],
        424: [function(_dereq_, module, exports) {
          'use strict';
          var repeating = _dereq_(586);
          var INDENT_RE = /^(?:( )+|\t+)/;
          function getMostUsed(indents) {
            var result = 0;
            var maxUsed = 0;
            var maxWeight = 0;
            for (var n in indents) {
              var indent = indents[n];
              var u = indent[0];
              var w = indent[1];
              if (u > maxUsed || u === maxUsed && w > maxWeight) {
                maxUsed = u;
                maxWeight = w;
                result = +n;
              }
            }
            return result;
          }
          module.exports = function(str) {
            if (typeof str !== 'string') {
              throw new TypeError('Expected a string');
            }
            var tabs = 0;
            var spaces = 0;
            var prev = 0;
            var indents = {};
            var current;
            var isIndent;
            str.split(/\n/g).forEach(function(line) {
              if (!line) {
                return;
              }
              var indent;
              var matches = line.match(INDENT_RE);
              if (!matches) {
                indent = 0;
              } else {
                indent = matches[0].length;
                if (matches[1]) {
                  spaces++;
                } else {
                  tabs++;
                }
              }
              var diff = indent - prev;
              prev = indent;
              if (diff) {
                isIndent = diff > 0;
                current = indents[isIndent ? diff : -diff];
                if (current) {
                  current[0]++;
                } else {
                  current = indents[diff] = [1, 0];
                }
              } else if (current) {
                current[1] += +isIndent;
              }
            });
            var amount = getMostUsed(indents);
            var type;
            var actual;
            if (!amount) {
              type = null;
              actual = '';
            } else if (spaces >= tabs) {
              type = 'space';
              actual = repeating(' ', amount);
            } else {
              type = 'tab';
              actual = repeating('\t', amount);
            }
            return {
              amount: amount,
              type: type,
              indent: actual
            };
          };
        }, {"586": 586}],
        425: [function(_dereq_, module, exports) {
          'use strict';
          var matchOperatorsRe = /[|\\{}()[\]^$+*?.]/g;
          module.exports = function(str) {
            if (typeof str !== 'string') {
              throw new TypeError('Expected a string');
            }
            return str.replace(matchOperatorsRe, '\\$&');
          };
        }, {}],
        426: [function(_dereq_, module, exports) {
          (function() {
            'use strict';
            function isExpression(node) {
              if (node == null) {
                return false;
              }
              switch (node.type) {
                case 'ArrayExpression':
                case 'AssignmentExpression':
                case 'BinaryExpression':
                case 'CallExpression':
                case 'ConditionalExpression':
                case 'FunctionExpression':
                case 'Identifier':
                case 'Literal':
                case 'LogicalExpression':
                case 'MemberExpression':
                case 'NewExpression':
                case 'ObjectExpression':
                case 'SequenceExpression':
                case 'ThisExpression':
                case 'UnaryExpression':
                case 'UpdateExpression':
                  return true;
              }
              return false;
            }
            function isIterationStatement(node) {
              if (node == null) {
                return false;
              }
              switch (node.type) {
                case 'DoWhileStatement':
                case 'ForInStatement':
                case 'ForStatement':
                case 'WhileStatement':
                  return true;
              }
              return false;
            }
            function isStatement(node) {
              if (node == null) {
                return false;
              }
              switch (node.type) {
                case 'BlockStatement':
                case 'BreakStatement':
                case 'ContinueStatement':
                case 'DebuggerStatement':
                case 'DoWhileStatement':
                case 'EmptyStatement':
                case 'ExpressionStatement':
                case 'ForInStatement':
                case 'ForStatement':
                case 'IfStatement':
                case 'LabeledStatement':
                case 'ReturnStatement':
                case 'SwitchStatement':
                case 'ThrowStatement':
                case 'TryStatement':
                case 'VariableDeclaration':
                case 'WhileStatement':
                case 'WithStatement':
                  return true;
              }
              return false;
            }
            function isSourceElement(node) {
              return isStatement(node) || node != null && node.type === 'FunctionDeclaration';
            }
            function trailingStatement(node) {
              switch (node.type) {
                case 'IfStatement':
                  if (node.alternate != null) {
                    return node.alternate;
                  }
                  return node.consequent;
                case 'LabeledStatement':
                case 'ForStatement':
                case 'ForInStatement':
                case 'WhileStatement':
                case 'WithStatement':
                  return node.body;
              }
              return null;
            }
            function isProblematicIfStatement(node) {
              var current;
              if (node.type !== 'IfStatement') {
                return false;
              }
              if (node.alternate == null) {
                return false;
              }
              current = node.consequent;
              do {
                if (current.type === 'IfStatement') {
                  if (current.alternate == null) {
                    return true;
                  }
                }
                current = trailingStatement(current);
              } while (current);
              return false;
            }
            module.exports = {
              isExpression: isExpression,
              isStatement: isStatement,
              isIterationStatement: isIterationStatement,
              isSourceElement: isSourceElement,
              isProblematicIfStatement: isProblematicIfStatement,
              trailingStatement: trailingStatement
            };
          }());
        }, {}],
        427: [function(_dereq_, module, exports) {
          (function() {
            'use strict';
            var ES6Regex,
                ES5Regex,
                NON_ASCII_WHITESPACES,
                IDENTIFIER_START,
                IDENTIFIER_PART,
                ch;
            ES5Regex = {
              NonAsciiIdentifierStart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B2\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58\u0C59\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D60\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA7AD\uA7B0\uA7B1\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB5F\uAB64\uAB65\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/,
              NonAsciiIdentifierPart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B2\u08E4-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58\u0C59\u0C60-\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D60-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19D9\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099\u309A\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA69D\uA69F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA7AD\uA7B0\uA7B1\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB5F\uAB64\uAB65\uABC0-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2D\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/
            };
            ES6Regex = {
              NonAsciiIdentifierStart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B2\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58\u0C59\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D60\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA7AD\uA7B0\uA7B1\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB5F\uAB64\uAB65\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDE00-\uDE11\uDE13-\uDE2B\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF5D-\uDF61]|\uD805[\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDE00-\uDE2F\uDE44\uDE80-\uDEAA]|\uD806[\uDCA0-\uDCDF\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF98]|\uD809[\uDC00-\uDC6E]|[\uD80C\uD840-\uD868\uD86A-\uD86C][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D]|\uD87E[\uDC00-\uDE1D]/,
              NonAsciiIdentifierPart: /[\xAA\xB5\xB7\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B2\u08E4-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58\u0C59\u0C60-\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D60-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1369-\u1371\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA69D\uA69F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA7AD\uA7B0\uA7B1\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB5F\uAB64\uAB65\uABC0-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2D\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDD0-\uDDDA\uDE00-\uDE11\uDE13-\uDE37\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF01-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9]|\uD806[\uDCA0-\uDCE9\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF98]|\uD809[\uDC00-\uDC6E]|[\uD80C\uD840-\uD868\uD86A-\uD86C][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/
            };
            function isDecimalDigit(ch) {
              return 0x30 <= ch && ch <= 0x39;
            }
            function isHexDigit(ch) {
              return 0x30 <= ch && ch <= 0x39 || 0x61 <= ch && ch <= 0x66 || 0x41 <= ch && ch <= 0x46;
            }
            function isOctalDigit(ch) {
              return ch >= 0x30 && ch <= 0x37;
            }
            NON_ASCII_WHITESPACES = [0x1680, 0x180E, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A, 0x202F, 0x205F, 0x3000, 0xFEFF];
            function isWhiteSpace(ch) {
              return ch === 0x20 || ch === 0x09 || ch === 0x0B || ch === 0x0C || ch === 0xA0 || ch >= 0x1680 && NON_ASCII_WHITESPACES.indexOf(ch) >= 0;
            }
            function isLineTerminator(ch) {
              return ch === 0x0A || ch === 0x0D || ch === 0x2028 || ch === 0x2029;
            }
            function fromCodePoint(cp) {
              if (cp <= 0xFFFF) {
                return String.fromCharCode(cp);
              }
              var cu1 = String.fromCharCode(Math.floor((cp - 0x10000) / 0x400) + 0xD800);
              var cu2 = String.fromCharCode(((cp - 0x10000) % 0x400) + 0xDC00);
              return cu1 + cu2;
            }
            IDENTIFIER_START = new Array(0x80);
            for (ch = 0; ch < 0x80; ++ch) {
              IDENTIFIER_START[ch] = ch >= 0x61 && ch <= 0x7A || ch >= 0x41 && ch <= 0x5A || ch === 0x24 || ch === 0x5F;
            }
            IDENTIFIER_PART = new Array(0x80);
            for (ch = 0; ch < 0x80; ++ch) {
              IDENTIFIER_PART[ch] = ch >= 0x61 && ch <= 0x7A || ch >= 0x41 && ch <= 0x5A || ch >= 0x30 && ch <= 0x39 || ch === 0x24 || ch === 0x5F;
            }
            function isIdentifierStartES5(ch) {
              return ch < 0x80 ? IDENTIFIER_START[ch] : ES5Regex.NonAsciiIdentifierStart.test(fromCodePoint(ch));
            }
            function isIdentifierPartES5(ch) {
              return ch < 0x80 ? IDENTIFIER_PART[ch] : ES5Regex.NonAsciiIdentifierPart.test(fromCodePoint(ch));
            }
            function isIdentifierStartES6(ch) {
              return ch < 0x80 ? IDENTIFIER_START[ch] : ES6Regex.NonAsciiIdentifierStart.test(fromCodePoint(ch));
            }
            function isIdentifierPartES6(ch) {
              return ch < 0x80 ? IDENTIFIER_PART[ch] : ES6Regex.NonAsciiIdentifierPart.test(fromCodePoint(ch));
            }
            module.exports = {
              isDecimalDigit: isDecimalDigit,
              isHexDigit: isHexDigit,
              isOctalDigit: isOctalDigit,
              isWhiteSpace: isWhiteSpace,
              isLineTerminator: isLineTerminator,
              isIdentifierStartES5: isIdentifierStartES5,
              isIdentifierPartES5: isIdentifierPartES5,
              isIdentifierStartES6: isIdentifierStartES6,
              isIdentifierPartES6: isIdentifierPartES6
            };
          }());
        }, {}],
        428: [function(_dereq_, module, exports) {
          (function() {
            'use strict';
            var code = _dereq_(427);
            function isStrictModeReservedWordES6(id) {
              switch (id) {
                case 'implements':
                case 'interface':
                case 'package':
                case 'private':
                case 'protected':
                case 'public':
                case 'static':
                case 'let':
                  return true;
                default:
                  return false;
              }
            }
            function isKeywordES5(id, strict) {
              if (!strict && id === 'yield') {
                return false;
              }
              return isKeywordES6(id, strict);
            }
            function isKeywordES6(id, strict) {
              if (strict && isStrictModeReservedWordES6(id)) {
                return true;
              }
              switch (id.length) {
                case 2:
                  return (id === 'if') || (id === 'in') || (id === 'do');
                case 3:
                  return (id === 'var') || (id === 'for') || (id === 'new') || (id === 'try');
                case 4:
                  return (id === 'this') || (id === 'else') || (id === 'case') || (id === 'void') || (id === 'with') || (id === 'enum');
                case 5:
                  return (id === 'while') || (id === 'break') || (id === 'catch') || (id === 'throw') || (id === 'const') || (id === 'yield') || (id === 'class') || (id === 'super');
                case 6:
                  return (id === 'return') || (id === 'typeof') || (id === 'delete') || (id === 'switch') || (id === 'export') || (id === 'import');
                case 7:
                  return (id === 'default') || (id === 'finally') || (id === 'extends');
                case 8:
                  return (id === 'function') || (id === 'continue') || (id === 'debugger');
                case 10:
                  return (id === 'instanceof');
                default:
                  return false;
              }
            }
            function isReservedWordES5(id, strict) {
              return id === 'null' || id === 'true' || id === 'false' || isKeywordES5(id, strict);
            }
            function isReservedWordES6(id, strict) {
              return id === 'null' || id === 'true' || id === 'false' || isKeywordES6(id, strict);
            }
            function isRestrictedWord(id) {
              return id === 'eval' || id === 'arguments';
            }
            function isIdentifierNameES5(id) {
              var i,
                  iz,
                  ch;
              if (id.length === 0) {
                return false;
              }
              ch = id.charCodeAt(0);
              if (!code.isIdentifierStartES5(ch)) {
                return false;
              }
              for (i = 1, iz = id.length; i < iz; ++i) {
                ch = id.charCodeAt(i);
                if (!code.isIdentifierPartES5(ch)) {
                  return false;
                }
              }
              return true;
            }
            function decodeUtf16(lead, trail) {
              return (lead - 0xD800) * 0x400 + (trail - 0xDC00) + 0x10000;
            }
            function isIdentifierNameES6(id) {
              var i,
                  iz,
                  ch,
                  lowCh,
                  check;
              if (id.length === 0) {
                return false;
              }
              check = code.isIdentifierStartES6;
              for (i = 0, iz = id.length; i < iz; ++i) {
                ch = id.charCodeAt(i);
                if (0xD800 <= ch && ch <= 0xDBFF) {
                  ++i;
                  if (i >= iz) {
                    return false;
                  }
                  lowCh = id.charCodeAt(i);
                  if (!(0xDC00 <= lowCh && lowCh <= 0xDFFF)) {
                    return false;
                  }
                  ch = decodeUtf16(ch, lowCh);
                }
                if (!check(ch)) {
                  return false;
                }
                check = code.isIdentifierPartES6;
              }
              return true;
            }
            function isIdentifierES5(id, strict) {
              return isIdentifierNameES5(id) && !isReservedWordES5(id, strict);
            }
            function isIdentifierES6(id, strict) {
              return isIdentifierNameES6(id) && !isReservedWordES6(id, strict);
            }
            module.exports = {
              isKeywordES5: isKeywordES5,
              isKeywordES6: isKeywordES6,
              isReservedWordES5: isReservedWordES5,
              isReservedWordES6: isReservedWordES6,
              isRestrictedWord: isRestrictedWord,
              isIdentifierNameES5: isIdentifierNameES5,
              isIdentifierNameES6: isIdentifierNameES6,
              isIdentifierES5: isIdentifierES5,
              isIdentifierES6: isIdentifierES6
            };
          }());
        }, {"427": 427}],
        429: [function(_dereq_, module, exports) {
          (function() {
            'use strict';
            exports.ast = _dereq_(426);
            exports.code = _dereq_(427);
            exports.keyword = _dereq_(428);
          }());
        }, {
          "426": 426,
          "427": 427,
          "428": 428
        }],
        430: [function(_dereq_, module, exports) {
          module.exports = {
            "builtin": {
              "Array": false,
              "ArrayBuffer": false,
              "Boolean": false,
              "constructor": false,
              "Date": false,
              "decodeURI": false,
              "decodeURIComponent": false,
              "encodeURI": false,
              "encodeURIComponent": false,
              "Error": false,
              "eval": false,
              "EvalError": false,
              "Float32Array": false,
              "Float64Array": false,
              "Function": false,
              "hasOwnProperty": false,
              "Infinity": false,
              "Int16Array": false,
              "Int32Array": false,
              "Int8Array": false,
              "isFinite": false,
              "isNaN": false,
              "isPrototypeOf": false,
              "JSON": false,
              "Map": false,
              "Math": false,
              "NaN": false,
              "Number": false,
              "Object": false,
              "parseFloat": false,
              "parseInt": false,
              "Promise": false,
              "propertyIsEnumerable": false,
              "Proxy": false,
              "RangeError": false,
              "ReferenceError": false,
              "Reflect": false,
              "RegExp": false,
              "Set": false,
              "String": false,
              "Symbol": false,
              "SyntaxError": false,
              "System": false,
              "toLocaleString": false,
              "toString": false,
              "TypeError": false,
              "Uint16Array": false,
              "Uint32Array": false,
              "Uint8Array": false,
              "Uint8ClampedArray": false,
              "undefined": false,
              "URIError": false,
              "valueOf": false,
              "WeakMap": false,
              "WeakSet": false
            },
            "nonstandard": {
              "escape": false,
              "unescape": false
            },
            "browser": {
              "addEventListener": false,
              "alert": false,
              "applicationCache": false,
              "atob": false,
              "Audio": false,
              "AudioProcessingEvent": false,
              "BeforeUnloadEvent": false,
              "Blob": false,
              "blur": false,
              "btoa": false,
              "cancelAnimationFrame": false,
              "CanvasGradient": false,
              "CanvasPattern": false,
              "CanvasRenderingContext2D": false,
              "clearInterval": false,
              "clearTimeout": false,
              "close": false,
              "closed": false,
              "CloseEvent": false,
              "Comment": false,
              "CompositionEvent": false,
              "confirm": false,
              "console": false,
              "crypto": false,
              "CSS": false,
              "CustomEvent": false,
              "DataView": false,
              "Debug": false,
              "defaultStatus": false,
              "devicePixelRatio": false,
              "dispatchEvent": false,
              "document": false,
              "Document": false,
              "DocumentFragment": false,
              "DOMParser": false,
              "DragEvent": false,
              "Element": false,
              "ElementTimeControl": false,
              "ErrorEvent": false,
              "event": false,
              "Event": false,
              "FileReader": false,
              "fetch": false,
              "find": false,
              "focus": false,
              "FocusEvent": false,
              "FormData": false,
              "frameElement": false,
              "frames": false,
              "GamepadEvent": false,
              "getComputedStyle": false,
              "getSelection": false,
              "HashChangeEvent": false,
              "Headers": false,
              "history": false,
              "HTMLAnchorElement": false,
              "HTMLBaseElement": false,
              "HTMLBlockquoteElement": false,
              "HTMLBodyElement": false,
              "HTMLBRElement": false,
              "HTMLButtonElement": false,
              "HTMLCanvasElement": false,
              "HTMLDirectoryElement": false,
              "HTMLDivElement": false,
              "HTMLDListElement": false,
              "HTMLElement": false,
              "HTMLFieldSetElement": false,
              "HTMLFontElement": false,
              "HTMLFormElement": false,
              "HTMLFrameElement": false,
              "HTMLFrameSetElement": false,
              "HTMLHeadElement": false,
              "HTMLHeadingElement": false,
              "HTMLHRElement": false,
              "HTMLHtmlElement": false,
              "HTMLIFrameElement": false,
              "HTMLImageElement": false,
              "HTMLInputElement": false,
              "HTMLIsIndexElement": false,
              "HTMLLabelElement": false,
              "HTMLLayerElement": false,
              "HTMLLegendElement": false,
              "HTMLLIElement": false,
              "HTMLLinkElement": false,
              "HTMLMapElement": false,
              "HTMLMenuElement": false,
              "HTMLMetaElement": false,
              "HTMLModElement": false,
              "HTMLObjectElement": false,
              "HTMLOListElement": false,
              "HTMLOptGroupElement": false,
              "HTMLOptionElement": false,
              "HTMLParagraphElement": false,
              "HTMLParamElement": false,
              "HTMLPreElement": false,
              "HTMLQuoteElement": false,
              "HTMLScriptElement": false,
              "HTMLSelectElement": false,
              "HTMLStyleElement": false,
              "HTMLTableCaptionElement": false,
              "HTMLTableCellElement": false,
              "HTMLTableColElement": false,
              "HTMLTableElement": false,
              "HTMLTableRowElement": false,
              "HTMLTableSectionElement": false,
              "HTMLTextAreaElement": false,
              "HTMLTitleElement": false,
              "HTMLUListElement": false,
              "HTMLVideoElement": false,
              "IDBCursor": false,
              "IDBCursorWithValue": false,
              "IDBDatabase": false,
              "IDBEnvironment": false,
              "IDBFactory": false,
              "IDBIndex": false,
              "IDBKeyRange": false,
              "IDBObjectStore": false,
              "IDBOpenDBRequest": false,
              "IDBRequest": false,
              "IDBTransaction": false,
              "IDBVersionChangeEvent": false,
              "Image": false,
              "indexedDB": false,
              "innerHeight": false,
              "innerWidth": false,
              "InputEvent": false,
              "Intl": false,
              "KeyboardEvent": false,
              "length": false,
              "localStorage": false,
              "location": false,
              "matchMedia": false,
              "MessageChannel": false,
              "MessageEvent": false,
              "MessagePort": false,
              "MouseEvent": false,
              "moveBy": false,
              "moveTo": false,
              "MutationObserver": false,
              "name": false,
              "navigator": false,
              "Node": false,
              "NodeFilter": false,
              "NodeList": false,
              "Notification": false,
              "OfflineAudioCompletionEvent": false,
              "onbeforeunload": true,
              "onblur": true,
              "onerror": true,
              "onfocus": true,
              "onload": true,
              "onresize": true,
              "onunload": true,
              "open": false,
              "openDatabase": false,
              "opener": false,
              "opera": false,
              "Option": false,
              "outerHeight": false,
              "outerWidth": false,
              "PageTransitionEvent": false,
              "pageXOffset": false,
              "pageYOffset": false,
              "parent": false,
              "PopStateEvent": false,
              "postMessage": false,
              "print": false,
              "ProgressEvent": false,
              "prompt": false,
              "Range": false,
              "Request": false,
              "Response": false,
              "removeEventListener": false,
              "requestAnimationFrame": false,
              "resizeBy": false,
              "resizeTo": false,
              "screen": false,
              "screenX": false,
              "screenY": false,
              "scroll": false,
              "scrollbars": false,
              "scrollBy": false,
              "scrollTo": false,
              "scrollX": false,
              "scrollY": false,
              "self": false,
              "sessionStorage": false,
              "setInterval": false,
              "setTimeout": false,
              "SharedWorker": false,
              "showModalDialog": false,
              "status": false,
              "stop": false,
              "StorageEvent": false,
              "SVGAElement": false,
              "SVGAltGlyphDefElement": false,
              "SVGAltGlyphElement": false,
              "SVGAltGlyphItemElement": false,
              "SVGAngle": false,
              "SVGAnimateColorElement": false,
              "SVGAnimatedAngle": false,
              "SVGAnimatedBoolean": false,
              "SVGAnimatedEnumeration": false,
              "SVGAnimatedInteger": false,
              "SVGAnimatedLength": false,
              "SVGAnimatedLengthList": false,
              "SVGAnimatedNumber": false,
              "SVGAnimatedNumberList": false,
              "SVGAnimatedPathData": false,
              "SVGAnimatedPoints": false,
              "SVGAnimatedPreserveAspectRatio": false,
              "SVGAnimatedRect": false,
              "SVGAnimatedString": false,
              "SVGAnimatedTransformList": false,
              "SVGAnimateElement": false,
              "SVGAnimateMotionElement": false,
              "SVGAnimateTransformElement": false,
              "SVGAnimationElement": false,
              "SVGCircleElement": false,
              "SVGClipPathElement": false,
              "SVGColor": false,
              "SVGColorProfileElement": false,
              "SVGColorProfileRule": false,
              "SVGComponentTransferFunctionElement": false,
              "SVGCSSRule": false,
              "SVGCursorElement": false,
              "SVGDefsElement": false,
              "SVGDescElement": false,
              "SVGDocument": false,
              "SVGElement": false,
              "SVGElementInstance": false,
              "SVGElementInstanceList": false,
              "SVGEllipseElement": false,
              "SVGEvent": false,
              "SVGExternalResourcesRequired": false,
              "SVGFEBlendElement": false,
              "SVGFEColorMatrixElement": false,
              "SVGFEComponentTransferElement": false,
              "SVGFECompositeElement": false,
              "SVGFEConvolveMatrixElement": false,
              "SVGFEDiffuseLightingElement": false,
              "SVGFEDisplacementMapElement": false,
              "SVGFEDistantLightElement": false,
              "SVGFEFloodElement": false,
              "SVGFEFuncAElement": false,
              "SVGFEFuncBElement": false,
              "SVGFEFuncGElement": false,
              "SVGFEFuncRElement": false,
              "SVGFEGaussianBlurElement": false,
              "SVGFEImageElement": false,
              "SVGFEMergeElement": false,
              "SVGFEMergeNodeElement": false,
              "SVGFEMorphologyElement": false,
              "SVGFEOffsetElement": false,
              "SVGFEPointLightElement": false,
              "SVGFESpecularLightingElement": false,
              "SVGFESpotLightElement": false,
              "SVGFETileElement": false,
              "SVGFETurbulenceElement": false,
              "SVGFilterElement": false,
              "SVGFilterPrimitiveStandardAttributes": false,
              "SVGFitToViewBox": false,
              "SVGFontElement": false,
              "SVGFontFaceElement": false,
              "SVGFontFaceFormatElement": false,
              "SVGFontFaceNameElement": false,
              "SVGFontFaceSrcElement": false,
              "SVGFontFaceUriElement": false,
              "SVGForeignObjectElement": false,
              "SVGGElement": false,
              "SVGGlyphElement": false,
              "SVGGlyphRefElement": false,
              "SVGGradientElement": false,
              "SVGHKernElement": false,
              "SVGICCColor": false,
              "SVGImageElement": false,
              "SVGLangSpace": false,
              "SVGLength": false,
              "SVGLengthList": false,
              "SVGLinearGradientElement": false,
              "SVGLineElement": false,
              "SVGLocatable": false,
              "SVGMarkerElement": false,
              "SVGMaskElement": false,
              "SVGMatrix": false,
              "SVGMetadataElement": false,
              "SVGMissingGlyphElement": false,
              "SVGMPathElement": false,
              "SVGNumber": false,
              "SVGNumberList": false,
              "SVGPaint": false,
              "SVGPathElement": false,
              "SVGPathSeg": false,
              "SVGPathSegArcAbs": false,
              "SVGPathSegArcRel": false,
              "SVGPathSegClosePath": false,
              "SVGPathSegCurvetoCubicAbs": false,
              "SVGPathSegCurvetoCubicRel": false,
              "SVGPathSegCurvetoCubicSmoothAbs": false,
              "SVGPathSegCurvetoCubicSmoothRel": false,
              "SVGPathSegCurvetoQuadraticAbs": false,
              "SVGPathSegCurvetoQuadraticRel": false,
              "SVGPathSegCurvetoQuadraticSmoothAbs": false,
              "SVGPathSegCurvetoQuadraticSmoothRel": false,
              "SVGPathSegLinetoAbs": false,
              "SVGPathSegLinetoHorizontalAbs": false,
              "SVGPathSegLinetoHorizontalRel": false,
              "SVGPathSegLinetoRel": false,
              "SVGPathSegLinetoVerticalAbs": false,
              "SVGPathSegLinetoVerticalRel": false,
              "SVGPathSegList": false,
              "SVGPathSegMovetoAbs": false,
              "SVGPathSegMovetoRel": false,
              "SVGPatternElement": false,
              "SVGPoint": false,
              "SVGPointList": false,
              "SVGPolygonElement": false,
              "SVGPolylineElement": false,
              "SVGPreserveAspectRatio": false,
              "SVGRadialGradientElement": false,
              "SVGRect": false,
              "SVGRectElement": false,
              "SVGRenderingIntent": false,
              "SVGScriptElement": false,
              "SVGSetElement": false,
              "SVGStopElement": false,
              "SVGStringList": false,
              "SVGStylable": false,
              "SVGStyleElement": false,
              "SVGSVGElement": false,
              "SVGSwitchElement": false,
              "SVGSymbolElement": false,
              "SVGTests": false,
              "SVGTextContentElement": false,
              "SVGTextElement": false,
              "SVGTextPathElement": false,
              "SVGTextPositioningElement": false,
              "SVGTitleElement": false,
              "SVGTransform": false,
              "SVGTransformable": false,
              "SVGTransformList": false,
              "SVGTRefElement": false,
              "SVGTSpanElement": false,
              "SVGUnitTypes": false,
              "SVGURIReference": false,
              "SVGUseElement": false,
              "SVGViewElement": false,
              "SVGViewSpec": false,
              "SVGVKernElement": false,
              "SVGZoomAndPan": false,
              "Text": false,
              "TextDecoder": false,
              "TextEncoder": false,
              "TimeEvent": false,
              "top": false,
              "TouchEvent": false,
              "UIEvent": false,
              "URL": false,
              "WebGLActiveInfo": false,
              "WebGLBuffer": false,
              "WebGLContextEvent": false,
              "WebGLFramebuffer": false,
              "WebGLProgram": false,
              "WebGLRenderbuffer": false,
              "WebGLRenderingContext": false,
              "WebGLShader": false,
              "WebGLShaderPrecisionFormat": false,
              "WebGLTexture": false,
              "WebGLUniformLocation": false,
              "WebSocket": false,
              "WheelEvent": false,
              "window": false,
              "Window": false,
              "Worker": false,
              "XDomainRequest": false,
              "XMLHttpRequest": false,
              "XMLSerializer": false,
              "XPathEvaluator": false,
              "XPathException": false,
              "XPathExpression": false,
              "XPathNamespace": false,
              "XPathNSResolver": false,
              "XPathResult": false
            },
            "worker": {
              "importScripts": true,
              "postMessage": true,
              "self": true
            },
            "node": {
              "__dirname": false,
              "__filename": false,
              "arguments": false,
              "Buffer": false,
              "clearImmediate": false,
              "clearInterval": false,
              "clearTimeout": false,
              "console": false,
              "DataView": false,
              "exports": true,
              "GLOBAL": false,
              "global": false,
              "module": false,
              "process": false,
              "require": false,
              "setImmediate": false,
              "setInterval": false,
              "setTimeout": false
            },
            "amd": {
              "define": false,
              "require": false
            },
            "mocha": {
              "after": false,
              "afterEach": false,
              "before": false,
              "beforeEach": false,
              "context": false,
              "describe": false,
              "it": false,
              "setup": false,
              "specify": false,
              "suite": false,
              "suiteSetup": false,
              "suiteTeardown": false,
              "teardown": false,
              "test": false,
              "xcontext": false,
              "xdescribe": false,
              "xit": false,
              "xspecify": false
            },
            "jasmine": {
              "afterAll": false,
              "afterEach": false,
              "beforeAll": false,
              "beforeEach": false,
              "describe": false,
              "expect": false,
              "fail": false,
              "fdescribe": false,
              "fit": false,
              "it": false,
              "jasmine": false,
              "pending": false,
              "runs": false,
              "spyOn": false,
              "waits": false,
              "waitsFor": false,
              "xdescribe": false,
              "xit": false
            },
            "qunit": {
              "asyncTest": false,
              "deepEqual": false,
              "equal": false,
              "expect": false,
              "module": false,
              "notDeepEqual": false,
              "notEqual": false,
              "notPropEqual": false,
              "notStrictEqual": false,
              "ok": false,
              "propEqual": false,
              "QUnit": false,
              "raises": false,
              "start": false,
              "stop": false,
              "strictEqual": false,
              "test": false,
              "throws": false
            },
            "phantomjs": {
              "console": true,
              "exports": true,
              "phantom": true,
              "require": true,
              "WebPage": true
            },
            "couch": {
              "emit": false,
              "exports": false,
              "getRow": false,
              "log": false,
              "module": false,
              "provides": false,
              "require": false,
              "respond": false,
              "send": false,
              "start": false,
              "sum": false
            },
            "rhino": {
              "defineClass": false,
              "deserialize": false,
              "gc": false,
              "help": false,
              "importClass": false,
              "importPackage": false,
              "java": false,
              "load": false,
              "loadClass": false,
              "Packages": false,
              "print": false,
              "quit": false,
              "readFile": false,
              "readUrl": false,
              "runCommand": false,
              "seal": false,
              "serialize": false,
              "spawn": false,
              "sync": false,
              "toint32": false,
              "version": false
            },
            "wsh": {
              "ActiveXObject": true,
              "Enumerator": true,
              "GetObject": true,
              "ScriptEngine": true,
              "ScriptEngineBuildVersion": true,
              "ScriptEngineMajorVersion": true,
              "ScriptEngineMinorVersion": true,
              "VBArray": true,
              "WScript": true,
              "WSH": true,
              "XDomainRequest": true
            },
            "jquery": {
              "$": false,
              "jQuery": false
            },
            "yui": {
              "Y": false,
              "YUI": false,
              "YUI_config": false
            },
            "shelljs": {
              "cat": false,
              "cd": false,
              "chmod": false,
              "config": false,
              "cp": false,
              "dirs": false,
              "echo": false,
              "env": false,
              "error": false,
              "exec": false,
              "exit": false,
              "find": false,
              "grep": false,
              "ls": false,
              "mkdir": false,
              "mv": false,
              "popd": false,
              "pushd": false,
              "pwd": false,
              "rm": false,
              "sed": false,
              "target": false,
              "tempdir": false,
              "test": false,
              "which": false
            },
            "prototypejs": {
              "$": false,
              "$$": false,
              "$A": false,
              "$break": false,
              "$continue": false,
              "$F": false,
              "$H": false,
              "$R": false,
              "$w": false,
              "Abstract": false,
              "Ajax": false,
              "Autocompleter": false,
              "Builder": false,
              "Class": false,
              "Control": false,
              "Draggable": false,
              "Draggables": false,
              "Droppables": false,
              "Effect": false,
              "Element": false,
              "Enumerable": false,
              "Event": false,
              "Field": false,
              "Form": false,
              "Hash": false,
              "Insertion": false,
              "ObjectRange": false,
              "PeriodicalExecuter": false,
              "Position": false,
              "Prototype": false,
              "Scriptaculous": false,
              "Selector": false,
              "Sortable": false,
              "SortableObserver": false,
              "Sound": false,
              "Template": false,
              "Toggle": false,
              "Try": false
            },
            "meteor": {
              "$": false,
              "_": false,
              "Accounts": false,
              "App": false,
              "Assets": false,
              "Blaze": false,
              "check": false,
              "Cordova": false,
              "DDP": false,
              "DDPServer": false,
              "Deps": false,
              "EJSON": false,
              "Email": false,
              "HTTP": false,
              "Log": false,
              "Match": false,
              "Meteor": false,
              "Mongo": false,
              "MongoInternals": false,
              "Npm": false,
              "Package": false,
              "Plugin": false,
              "process": false,
              "Random": false,
              "ReactiveDict": false,
              "ReactiveVar": false,
              "Router": false,
              "Session": false,
              "share": false,
              "Spacebars": false,
              "Template": false,
              "Tinytest": false,
              "Tracker": false,
              "UI": false,
              "Utils": false,
              "WebApp": false,
              "WebAppInternals": false
            },
            "mongo": {
              "_isWindows": false,
              "_rand": false,
              "BulkWriteResult": false,
              "cat": false,
              "cd": false,
              "connect": false,
              "db": false,
              "getHostName": false,
              "getMemInfo": false,
              "hostname": false,
              "listFiles": false,
              "load": false,
              "ls": false,
              "md5sumFile": false,
              "mkdir": false,
              "Mongo": false,
              "ObjectId": false,
              "PlanCache": false,
              "pwd": false,
              "quit": false,
              "removeFile": false,
              "rs": false,
              "sh": false,
              "UUID": false,
              "version": false,
              "WriteResult": false
            },
            "applescript": {
              "$": false,
              "Application": false,
              "Automation": false,
              "console": false,
              "delay": false,
              "Library": false,
              "ObjC": false,
              "ObjectSpecifier": false,
              "Path": false,
              "Progress": false,
              "Ref": false
            }
          };
        }, {}],
        431: [function(_dereq_, module, exports) {
          module.exports = _dereq_(430);
        }, {"430": 430}],
        432: [function(_dereq_, module, exports) {
          'use strict';
          var ansiRegex = _dereq_(184);
          var re = new RegExp(ansiRegex().source);
          module.exports = re.test.bind(re);
        }, {"184": 184}],
        433: [function(_dereq_, module, exports) {
          'use strict';
          var numberIsNan = _dereq_(557);
          module.exports = Number.isFinite || function(val) {
            return !(typeof val !== 'number' || numberIsNan(val) || val === Infinity || val === -Infinity);
          };
        }, {"557": 557}],
        434: [function(_dereq_, module, exports) {
          var isFinite = _dereq_(433);
          module.exports = Number.isInteger || function(val) {
            return typeof val === "number" && isFinite(val) && Math.floor(val) === val;
          };
        }, {"433": 433}],
        435: [function(_dereq_, module, exports) {
          module.exports = /((['"])(?:(?!\2|\\).|\\(?:\r\n|[\s\S]))*(\2)?|`(?:[^`\\$]|\\[\s\S]|\$(?!\{)|\$\{(?:[^{}]|\{[^}]*\}?)*\}?)*(`)?)|(\/\/.*)|(\/\*(?:[^*]|\*(?!\/))*(\*\/)?)|(\/(?!\*)(?:\[(?:(?![\]\\]).|\\.)*\]|(?![\/\]\\]).|\\.)+\/(?:(?!\s*(?:\b|[\u0080-\uFFFF$\\'"~({]|[+\-!](?!=)|\.?\d))|[gmiyu]{1,5}\b(?![\u0080-\uFFFF$\\]|\s*(?:[+\-*%&|^<>!=?({]|\/(?![\/*])))))|((?:0[xX][\da-fA-F]+|0[oO][0-7]+|0[bB][01]+|(?:\d*\.\d+|\d+\.?)(?:[eE][+-]?\d+)?))|((?!\d)(?:(?!\s)[$\w\u0080-\uFFFF]|\\u[\da-fA-F]{4}|\\u\{[\da-fA-F]{1,6}\})+)|(--|\+\+|&&|\|\||=>|\.{3}|(?:[+\-*\/%&|^]|<{1,2}|>{1,3}|!=?|={1,2})=?|[?:~]|[;,.[\](){}])|(\s+)|(^$|[\s\S])/g;
          module.exports.matchToToken = function(match) {
            var token = {
              type: "invalid",
              value: match[0]
            };
            if (match[1])
              token.type = "string", token.closed = !!(match[3] || match[4]);
            else if (match[5])
              token.type = "comment";
            else if (match[6])
              token.type = "comment", token.closed = !!match[7];
            else if (match[8])
              token.type = "regex";
            else if (match[9])
              token.type = "number";
            else if (match[10])
              token.type = "name";
            else if (match[11])
              token.type = "punctuator";
            else if (match[12])
              token.type = "whitespace";
            return token;
          };
        }, {}],
        436: [function(_dereq_, module, exports) {
          var JSON5 = (typeof exports === 'object' ? exports : {});
          JSON5.parse = (function() {
            "use strict";
            var at,
                ch,
                escapee = {
                  "'": "'",
                  '"': '"',
                  '\\': '\\',
                  '/': '/',
                  '\n': '',
                  b: '\b',
                  f: '\f',
                  n: '\n',
                  r: '\r',
                  t: '\t'
                },
                ws = [' ', '\t', '\r', '\n', '\v', '\f', '\xA0', '\uFEFF'],
                text,
                error = function(m) {
                  var error = new SyntaxError();
                  error.message = m;
                  error.at = at;
                  error.text = text;
                  throw error;
                },
                next = function(c) {
                  if (c && c !== ch) {
                    error("Expected '" + c + "' instead of '" + ch + "'");
                  }
                  ch = text.charAt(at);
                  at += 1;
                  return ch;
                },
                peek = function() {
                  return text.charAt(at);
                },
                identifier = function() {
                  var key = ch;
                  if ((ch !== '_' && ch !== '$') && (ch < 'a' || ch > 'z') && (ch < 'A' || ch > 'Z')) {
                    error("Bad identifier");
                  }
                  while (next() && (ch === '_' || ch === '$' || (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z') || (ch >= '0' && ch <= '9'))) {
                    key += ch;
                  }
                  return key;
                },
                number = function() {
                  var number,
                      sign = '',
                      string = '',
                      base = 10;
                  if (ch === '-' || ch === '+') {
                    sign = ch;
                    next(ch);
                  }
                  if (ch === 'I') {
                    number = word();
                    if (typeof number !== 'number' || isNaN(number)) {
                      error('Unexpected word for number');
                    }
                    return (sign === '-') ? -number : number;
                  }
                  if (ch === 'N') {
                    number = word();
                    if (!isNaN(number)) {
                      error('expected word to be NaN');
                    }
                    return number;
                  }
                  if (ch === '0') {
                    string += ch;
                    next();
                    if (ch === 'x' || ch === 'X') {
                      string += ch;
                      next();
                      base = 16;
                    } else if (ch >= '0' && ch <= '9') {
                      error('Octal literal');
                    }
                  }
                  switch (base) {
                    case 10:
                      while (ch >= '0' && ch <= '9') {
                        string += ch;
                        next();
                      }
                      if (ch === '.') {
                        string += '.';
                        while (next() && ch >= '0' && ch <= '9') {
                          string += ch;
                        }
                      }
                      if (ch === 'e' || ch === 'E') {
                        string += ch;
                        next();
                        if (ch === '-' || ch === '+') {
                          string += ch;
                          next();
                        }
                        while (ch >= '0' && ch <= '9') {
                          string += ch;
                          next();
                        }
                      }
                      break;
                    case 16:
                      while (ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'F' || ch >= 'a' && ch <= 'f') {
                        string += ch;
                        next();
                      }
                      break;
                  }
                  if (sign === '-') {
                    number = -string;
                  } else {
                    number = +string;
                  }
                  if (!isFinite(number)) {
                    error("Bad number");
                  } else {
                    return number;
                  }
                },
                string = function() {
                  var hex,
                      i,
                      string = '',
                      delim,
                      uffff;
                  if (ch === '"' || ch === "'") {
                    delim = ch;
                    while (next()) {
                      if (ch === delim) {
                        next();
                        return string;
                      } else if (ch === '\\') {
                        next();
                        if (ch === 'u') {
                          uffff = 0;
                          for (i = 0; i < 4; i += 1) {
                            hex = parseInt(next(), 16);
                            if (!isFinite(hex)) {
                              break;
                            }
                            uffff = uffff * 16 + hex;
                          }
                          string += String.fromCharCode(uffff);
                        } else if (ch === '\r') {
                          if (peek() === '\n') {
                            next();
                          }
                        } else if (typeof escapee[ch] === 'string') {
                          string += escapee[ch];
                        } else {
                          break;
                        }
                      } else if (ch === '\n') {
                        break;
                      } else {
                        string += ch;
                      }
                    }
                  }
                  error("Bad string");
                },
                inlineComment = function() {
                  if (ch !== '/') {
                    error("Not an inline comment");
                  }
                  do {
                    next();
                    if (ch === '\n' || ch === '\r') {
                      next();
                      return;
                    }
                  } while (ch);
                },
                blockComment = function() {
                  if (ch !== '*') {
                    error("Not a block comment");
                  }
                  do {
                    next();
                    while (ch === '*') {
                      next('*');
                      if (ch === '/') {
                        next('/');
                        return;
                      }
                    }
                  } while (ch);
                  error("Unterminated block comment");
                },
                comment = function() {
                  if (ch !== '/') {
                    error("Not a comment");
                  }
                  next('/');
                  if (ch === '/') {
                    inlineComment();
                  } else if (ch === '*') {
                    blockComment();
                  } else {
                    error("Unrecognized comment");
                  }
                },
                white = function() {
                  while (ch) {
                    if (ch === '/') {
                      comment();
                    } else if (ws.indexOf(ch) >= 0) {
                      next();
                    } else {
                      return;
                    }
                  }
                },
                word = function() {
                  switch (ch) {
                    case 't':
                      next('t');
                      next('r');
                      next('u');
                      next('e');
                      return true;
                    case 'f':
                      next('f');
                      next('a');
                      next('l');
                      next('s');
                      next('e');
                      return false;
                    case 'n':
                      next('n');
                      next('u');
                      next('l');
                      next('l');
                      return null;
                    case 'I':
                      next('I');
                      next('n');
                      next('f');
                      next('i');
                      next('n');
                      next('i');
                      next('t');
                      next('y');
                      return Infinity;
                    case 'N':
                      next('N');
                      next('a');
                      next('N');
                      return NaN;
                  }
                  error("Unexpected '" + ch + "'");
                },
                value,
                array = function() {
                  var array = [];
                  if (ch === '[') {
                    next('[');
                    white();
                    while (ch) {
                      if (ch === ']') {
                        next(']');
                        return array;
                      }
                      if (ch === ',') {
                        error("Missing array element");
                      } else {
                        array.push(value());
                      }
                      white();
                      if (ch !== ',') {
                        next(']');
                        return array;
                      }
                      next(',');
                      white();
                    }
                  }
                  error("Bad array");
                },
                object = function() {
                  var key,
                      object = {};
                  if (ch === '{') {
                    next('{');
                    white();
                    while (ch) {
                      if (ch === '}') {
                        next('}');
                        return object;
                      }
                      if (ch === '"' || ch === "'") {
                        key = string();
                      } else {
                        key = identifier();
                      }
                      white();
                      next(':');
                      object[key] = value();
                      white();
                      if (ch !== ',') {
                        next('}');
                        return object;
                      }
                      next(',');
                      white();
                    }
                  }
                  error("Bad object");
                };
            value = function() {
              white();
              switch (ch) {
                case '{':
                  return object();
                case '[':
                  return array();
                case '"':
                case "'":
                  return string();
                case '-':
                case '+':
                case '.':
                  return number();
                default:
                  return ch >= '0' && ch <= '9' ? number() : word();
              }
            };
            return function(source, reviver) {
              var result;
              text = String(source);
              at = 0;
              ch = ' ';
              result = value();
              white();
              if (ch) {
                error("Syntax error");
              }
              return typeof reviver === 'function' ? (function walk(holder, key) {
                var k,
                    v,
                    value = holder[key];
                if (value && typeof value === 'object') {
                  for (k in value) {
                    if (Object.prototype.hasOwnProperty.call(value, k)) {
                      v = walk(value, k);
                      if (v !== undefined) {
                        value[k] = v;
                      } else {
                        delete value[k];
                      }
                    }
                  }
                }
                return reviver.call(holder, key, value);
              }({'': result}, '')) : result;
            };
          }());
          JSON5.stringify = function(obj, replacer, space) {
            if (replacer && (typeof(replacer) !== "function" && !isArray(replacer))) {
              throw new Error('Replacer must be a function or an array');
            }
            var getReplacedValueOrUndefined = function(holder, key, isTopLevel) {
              var value = holder[key];
              if (value && value.toJSON && typeof value.toJSON === "function") {
                value = value.toJSON();
              }
              if (typeof(replacer) === "function") {
                return replacer.call(holder, key, value);
              } else if (replacer) {
                if (isTopLevel || isArray(holder) || replacer.indexOf(key) >= 0) {
                  return value;
                } else {
                  return undefined;
                }
              } else {
                return value;
              }
            };
            function isWordChar(char) {
              return (char >= 'a' && char <= 'z') || (char >= 'A' && char <= 'Z') || (char >= '0' && char <= '9') || char === '_' || char === '$';
            }
            function isWordStart(char) {
              return (char >= 'a' && char <= 'z') || (char >= 'A' && char <= 'Z') || char === '_' || char === '$';
            }
            function isWord(key) {
              if (typeof key !== 'string') {
                return false;
              }
              if (!isWordStart(key[0])) {
                return false;
              }
              var i = 1,
                  length = key.length;
              while (i < length) {
                if (!isWordChar(key[i])) {
                  return false;
                }
                i++;
              }
              return true;
            }
            JSON5.isWord = isWord;
            function isArray(obj) {
              if (Array.isArray) {
                return Array.isArray(obj);
              } else {
                return Object.prototype.toString.call(obj) === '[object Array]';
              }
            }
            function isDate(obj) {
              return Object.prototype.toString.call(obj) === '[object Date]';
            }
            isNaN = isNaN || function(val) {
              return typeof val === 'number' && val !== val;
            };
            var objStack = [];
            function checkForCircular(obj) {
              for (var i = 0; i < objStack.length; i++) {
                if (objStack[i] === obj) {
                  throw new TypeError("Converting circular structure to JSON");
                }
              }
            }
            function makeIndent(str, num, noNewLine) {
              if (!str) {
                return "";
              }
              if (str.length > 10) {
                str = str.substring(0, 10);
              }
              var indent = noNewLine ? "" : "\n";
              for (var i = 0; i < num; i++) {
                indent += str;
              }
              return indent;
            }
            var indentStr;
            if (space) {
              if (typeof space === "string") {
                indentStr = space;
              } else if (typeof space === "number" && space >= 0) {
                indentStr = makeIndent(" ", space, true);
              } else {}
            }
            var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
                escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
                meta = {
                  '\b': '\\b',
                  '\t': '\\t',
                  '\n': '\\n',
                  '\f': '\\f',
                  '\r': '\\r',
                  '"': '\\"',
                  '\\': '\\\\'
                };
            function escapeString(string) {
              escapable.lastIndex = 0;
              return escapable.test(string) ? '"' + string.replace(escapable, function(a) {
                var c = meta[a];
                return typeof c === 'string' ? c : '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
              }) + '"' : '"' + string + '"';
            }
            function internalStringify(holder, key, isTopLevel) {
              var buffer,
                  res;
              var obj_part = getReplacedValueOrUndefined(holder, key, isTopLevel);
              if (obj_part && !isDate(obj_part)) {
                obj_part = obj_part.valueOf();
              }
              switch (typeof obj_part) {
                case "boolean":
                  return obj_part.toString();
                case "number":
                  if (isNaN(obj_part) || !isFinite(obj_part)) {
                    return "null";
                  }
                  return obj_part.toString();
                case "string":
                  return escapeString(obj_part.toString());
                case "object":
                  if (obj_part === null) {
                    return "null";
                  } else if (isArray(obj_part)) {
                    checkForCircular(obj_part);
                    buffer = "[";
                    objStack.push(obj_part);
                    for (var i = 0; i < obj_part.length; i++) {
                      res = internalStringify(obj_part, i, false);
                      buffer += makeIndent(indentStr, objStack.length);
                      if (res === null || typeof res === "undefined") {
                        buffer += "null";
                      } else {
                        buffer += res;
                      }
                      if (i < obj_part.length - 1) {
                        buffer += ",";
                      } else if (indentStr) {
                        buffer += "\n";
                      }
                    }
                    objStack.pop();
                    buffer += makeIndent(indentStr, objStack.length, true) + "]";
                  } else {
                    checkForCircular(obj_part);
                    buffer = "{";
                    var nonEmpty = false;
                    objStack.push(obj_part);
                    for (var prop in obj_part) {
                      if (obj_part.hasOwnProperty(prop)) {
                        var value = internalStringify(obj_part, prop, false);
                        isTopLevel = false;
                        if (typeof value !== "undefined" && value !== null) {
                          buffer += makeIndent(indentStr, objStack.length);
                          nonEmpty = true;
                          var key = isWord(prop) ? prop : escapeString(prop);
                          buffer += key + ":" + (indentStr ? ' ' : '') + value + ",";
                        }
                      }
                    }
                    objStack.pop();
                    if (nonEmpty) {
                      buffer = buffer.substring(0, buffer.length - 1) + makeIndent(indentStr, objStack.length) + "}";
                    } else {
                      buffer = '{}';
                    }
                  }
                  return buffer;
                default:
                  return undefined;
              }
            }
            var topLevelHolder = {"": obj};
            if (obj === undefined) {
              return getReplacedValueOrUndefined(topLevelHolder, '', true);
            }
            return internalStringify(topLevelHolder, '', true);
          };
        }, {}],
        437: [function(_dereq_, module, exports) {
          'use strict';
          var arr = [];
          var charCodeCache = [];
          module.exports = function(a, b) {
            if (a === b) {
              return 0;
            }
            var aLen = a.length;
            var bLen = b.length;
            if (aLen === 0) {
              return bLen;
            }
            if (bLen === 0) {
              return aLen;
            }
            var bCharCode;
            var ret;
            var tmp;
            var tmp2;
            var i = 0;
            var j = 0;
            while (i < aLen) {
              charCodeCache[i] = a.charCodeAt(i);
              arr[i] = ++i;
            }
            while (j < bLen) {
              bCharCode = b.charCodeAt(j);
              tmp = j++;
              ret = j;
              for (i = 0; i < aLen; i++) {
                tmp2 = bCharCode === charCodeCache[i] ? tmp : tmp + 1;
                tmp = arr[i];
                ret = arr[i] = tmp > ret ? tmp2 > ret ? ret + 1 : tmp2 : tmp2 > tmp ? tmp + 1 : tmp2;
              }
            }
            return ret;
          };
        }, {}],
        438: [function(_dereq_, module, exports) {
          function compact(array) {
            var index = -1,
                length = array ? array.length : 0,
                resIndex = -1,
                result = [];
            while (++index < length) {
              var value = array[index];
              if (value) {
                result[++resIndex] = value;
              }
            }
            return result;
          }
          module.exports = compact;
        }, {}],
        439: [function(_dereq_, module, exports) {
          var baseFlatten = _dereq_(468),
              isIterateeCall = _dereq_(518);
          function flatten(array, isDeep, guard) {
            var length = array ? array.length : 0;
            if (guard && isIterateeCall(array, isDeep, guard)) {
              isDeep = false;
            }
            return length ? baseFlatten(array, isDeep) : [];
          }
          module.exports = flatten;
        }, {
          "468": 468,
          "518": 518
        }],
        440: [function(_dereq_, module, exports) {
          function last(array) {
            var length = array ? array.length : 0;
            return length ? array[length - 1] : undefined;
          }
          module.exports = last;
        }, {}],
        441: [function(_dereq_, module, exports) {
          var baseIndexOf = _dereq_(475);
          var arrayProto = Array.prototype;
          var splice = arrayProto.splice;
          function pull() {
            var args = arguments,
                array = args[0];
            if (!(array && array.length)) {
              return array;
            }
            var index = 0,
                indexOf = baseIndexOf,
                length = args.length;
            while (++index < length) {
              var fromIndex = 0,
                  value = args[index];
              while ((fromIndex = indexOf(array, value, fromIndex)) > -1) {
                splice.call(array, fromIndex, 1);
              }
            }
            return array;
          }
          module.exports = pull;
        }, {"475": 475}],
        442: [function(_dereq_, module, exports) {
          var baseCallback = _dereq_(462),
              baseUniq = _dereq_(491),
              isIterateeCall = _dereq_(518),
              sortedUniq = _dereq_(524);
          function uniq(array, isSorted, iteratee, thisArg) {
            var length = array ? array.length : 0;
            if (!length) {
              return [];
            }
            if (isSorted != null && typeof isSorted != 'boolean') {
              thisArg = iteratee;
              iteratee = isIterateeCall(array, isSorted, thisArg) ? undefined : isSorted;
              isSorted = false;
            }
            iteratee = iteratee == null ? iteratee : baseCallback(iteratee, thisArg, 3);
            return (isSorted) ? sortedUniq(array, iteratee) : baseUniq(array, iteratee);
          }
          module.exports = uniq;
        }, {
          "462": 462,
          "491": 491,
          "518": 518,
          "524": 524
        }],
        443: [function(_dereq_, module, exports) {
          module.exports = _dereq_(446);
        }, {"446": 446}],
        444: [function(_dereq_, module, exports) {
          module.exports = _dereq_(445);
        }, {"445": 445}],
        445: [function(_dereq_, module, exports) {
          var arrayEach = _dereq_(454),
              baseEach = _dereq_(466),
              createForEach = _dereq_(503);
          var forEach = createForEach(arrayEach, baseEach);
          module.exports = forEach;
        }, {
          "454": 454,
          "466": 466,
          "503": 503
        }],
        446: [function(_dereq_, module, exports) {
          var baseIndexOf = _dereq_(475),
              getLength = _dereq_(509),
              isArray = _dereq_(530),
              isIterateeCall = _dereq_(518),
              isLength = _dereq_(520),
              isString = _dereq_(539),
              values = _dereq_(550);
          var nativeMax = Math.max;
          function includes(collection, target, fromIndex, guard) {
            var length = collection ? getLength(collection) : 0;
            if (!isLength(length)) {
              collection = values(collection);
              length = collection.length;
            }
            if (typeof fromIndex != 'number' || (guard && isIterateeCall(target, fromIndex, guard))) {
              fromIndex = 0;
            } else {
              fromIndex = fromIndex < 0 ? nativeMax(length + fromIndex, 0) : (fromIndex || 0);
            }
            return (typeof collection == 'string' || !isArray(collection) && isString(collection)) ? (fromIndex <= length && collection.indexOf(target, fromIndex) > -1) : (!!length && baseIndexOf(collection, target, fromIndex) > -1);
          }
          module.exports = includes;
        }, {
          "475": 475,
          "509": 509,
          "518": 518,
          "520": 520,
          "530": 530,
          "539": 539,
          "550": 550
        }],
        447: [function(_dereq_, module, exports) {
          var arrayMap = _dereq_(455),
              baseCallback = _dereq_(462),
              baseMap = _dereq_(479),
              isArray = _dereq_(530);
          function map(collection, iteratee, thisArg) {
            var func = isArray(collection) ? arrayMap : baseMap;
            iteratee = baseCallback(iteratee, thisArg, 3);
            return func(collection, iteratee);
          }
          module.exports = map;
        }, {
          "455": 455,
          "462": 462,
          "479": 479,
          "530": 530
        }],
        448: [function(_dereq_, module, exports) {
          var arrayReduceRight = _dereq_(457),
              baseEachRight = _dereq_(467),
              createReduce = _dereq_(504);
          var reduceRight = createReduce(arrayReduceRight, baseEachRight);
          module.exports = reduceRight;
        }, {
          "457": 457,
          "467": 467,
          "504": 504
        }],
        449: [function(_dereq_, module, exports) {
          var arraySome = _dereq_(458),
              baseCallback = _dereq_(462),
              baseSome = _dereq_(488),
              isArray = _dereq_(530),
              isIterateeCall = _dereq_(518);
          function some(collection, predicate, thisArg) {
            var func = isArray(collection) ? arraySome : baseSome;
            if (thisArg && isIterateeCall(collection, predicate, thisArg)) {
              predicate = undefined;
            }
            if (typeof predicate != 'function' || thisArg !== undefined) {
              predicate = baseCallback(predicate, thisArg, 3);
            }
            return func(collection, predicate);
          }
          module.exports = some;
        }, {
          "458": 458,
          "462": 462,
          "488": 488,
          "518": 518,
          "530": 530
        }],
        450: [function(_dereq_, module, exports) {
          var baseCallback = _dereq_(462),
              baseMap = _dereq_(479),
              baseSortBy = _dereq_(489),
              compareAscending = _dereq_(497),
              isIterateeCall = _dereq_(518);
          function sortBy(collection, iteratee, thisArg) {
            if (collection == null) {
              return [];
            }
            if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
              iteratee = undefined;
            }
            var index = -1;
            iteratee = baseCallback(iteratee, thisArg, 3);
            var result = baseMap(collection, function(value, key, collection) {
              return {
                'criteria': iteratee(value, key, collection),
                'index': ++index,
                'value': value
              };
            });
            return baseSortBy(result, compareAscending);
          }
          module.exports = sortBy;
        }, {
          "462": 462,
          "479": 479,
          "489": 489,
          "497": 497,
          "518": 518
        }],
        451: [function(_dereq_, module, exports) {
          var FUNC_ERROR_TEXT = 'Expected a function';
          var nativeMax = Math.max;
          function restParam(func, start) {
            if (typeof func != 'function') {
              throw new TypeError(FUNC_ERROR_TEXT);
            }
            start = nativeMax(start === undefined ? (func.length - 1) : (+start || 0), 0);
            return function() {
              var args = arguments,
                  index = -1,
                  length = nativeMax(args.length - start, 0),
                  rest = Array(length);
              while (++index < length) {
                rest[index] = args[start + index];
              }
              switch (start) {
                case 0:
                  return func.call(this, rest);
                case 1:
                  return func.call(this, args[0], rest);
                case 2:
                  return func.call(this, args[0], args[1], rest);
              }
              var otherArgs = Array(start + 1);
              index = -1;
              while (++index < start) {
                otherArgs[index] = args[index];
              }
              otherArgs[start] = rest;
              return func.apply(this, otherArgs);
            };
          }
          module.exports = restParam;
        }, {}],
        452: [function(_dereq_, module, exports) {
          (function(global) {
            var cachePush = _dereq_(496),
                getNative = _dereq_(511);
            var Set = getNative(global, 'Set');
            var nativeCreate = getNative(Object, 'create');
            function SetCache(values) {
              var length = values ? values.length : 0;
              this.data = {
                'hash': nativeCreate(null),
                'set': new Set
              };
              while (length--) {
                this.push(values[length]);
              }
            }
            SetCache.prototype.push = cachePush;
            module.exports = SetCache;
          }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
        }, {
          "496": 496,
          "511": 511
        }],
        453: [function(_dereq_, module, exports) {
          function arrayCopy(source, array) {
            var index = -1,
                length = source.length;
            array || (array = Array(length));
            while (++index < length) {
              array[index] = source[index];
            }
            return array;
          }
          module.exports = arrayCopy;
        }, {}],
        454: [function(_dereq_, module, exports) {
          function arrayEach(array, iteratee) {
            var index = -1,
                length = array.length;
            while (++index < length) {
              if (iteratee(array[index], index, array) === false) {
                break;
              }
            }
            return array;
          }
          module.exports = arrayEach;
        }, {}],
        455: [function(_dereq_, module, exports) {
          function arrayMap(array, iteratee) {
            var index = -1,
                length = array.length,
                result = Array(length);
            while (++index < length) {
              result[index] = iteratee(array[index], index, array);
            }
            return result;
          }
          module.exports = arrayMap;
        }, {}],
        456: [function(_dereq_, module, exports) {
          function arrayPush(array, values) {
            var index = -1,
                length = values.length,
                offset = array.length;
            while (++index < length) {
              array[offset + index] = values[index];
            }
            return array;
          }
          module.exports = arrayPush;
        }, {}],
        457: [function(_dereq_, module, exports) {
          function arrayReduceRight(array, iteratee, accumulator, initFromArray) {
            var length = array.length;
            if (initFromArray && length) {
              accumulator = array[--length];
            }
            while (length--) {
              accumulator = iteratee(accumulator, array[length], length, array);
            }
            return accumulator;
          }
          module.exports = arrayReduceRight;
        }, {}],
        458: [function(_dereq_, module, exports) {
          function arraySome(array, predicate) {
            var index = -1,
                length = array.length;
            while (++index < length) {
              if (predicate(array[index], index, array)) {
                return true;
              }
            }
            return false;
          }
          module.exports = arraySome;
        }, {}],
        459: [function(_dereq_, module, exports) {
          function assignDefaults(objectValue, sourceValue) {
            return objectValue === undefined ? sourceValue : objectValue;
          }
          module.exports = assignDefaults;
        }, {}],
        460: [function(_dereq_, module, exports) {
          var keys = _dereq_(546);
          function assignWith(object, source, customizer) {
            var index = -1,
                props = keys(source),
                length = props.length;
            while (++index < length) {
              var key = props[index],
                  value = object[key],
                  result = customizer(value, source[key], key, object, source);
              if ((result === result ? (result !== value) : (value === value)) || (value === undefined && !(key in object))) {
                object[key] = result;
              }
            }
            return object;
          }
          module.exports = assignWith;
        }, {"546": 546}],
        461: [function(_dereq_, module, exports) {
          var baseCopy = _dereq_(465),
              keys = _dereq_(546);
          function baseAssign(object, source) {
            return source == null ? object : baseCopy(source, keys(source), object);
          }
          module.exports = baseAssign;
        }, {
          "465": 465,
          "546": 546
        }],
        462: [function(_dereq_, module, exports) {
          var baseMatches = _dereq_(480),
              baseMatchesProperty = _dereq_(481),
              bindCallback = _dereq_(493),
              identity = _dereq_(553),
              property = _dereq_(554);
          function baseCallback(func, thisArg, argCount) {
            var type = typeof func;
            if (type == 'function') {
              return thisArg === undefined ? func : bindCallback(func, thisArg, argCount);
            }
            if (func == null) {
              return identity;
            }
            if (type == 'object') {
              return baseMatches(func);
            }
            return thisArg === undefined ? property(func) : baseMatchesProperty(func, thisArg);
          }
          module.exports = baseCallback;
        }, {
          "480": 480,
          "481": 481,
          "493": 493,
          "553": 553,
          "554": 554
        }],
        463: [function(_dereq_, module, exports) {
          var arrayCopy = _dereq_(453),
              arrayEach = _dereq_(454),
              baseAssign = _dereq_(461),
              baseForOwn = _dereq_(471),
              initCloneArray = _dereq_(513),
              initCloneByTag = _dereq_(514),
              initCloneObject = _dereq_(515),
              isArray = _dereq_(530),
              isObject = _dereq_(536);
          var argsTag = '[object Arguments]',
              arrayTag = '[object Array]',
              boolTag = '[object Boolean]',
              dateTag = '[object Date]',
              errorTag = '[object Error]',
              funcTag = '[object Function]',
              mapTag = '[object Map]',
              numberTag = '[object Number]',
              objectTag = '[object Object]',
              regexpTag = '[object RegExp]',
              setTag = '[object Set]',
              stringTag = '[object String]',
              weakMapTag = '[object WeakMap]';
          var arrayBufferTag = '[object ArrayBuffer]',
              float32Tag = '[object Float32Array]',
              float64Tag = '[object Float64Array]',
              int8Tag = '[object Int8Array]',
              int16Tag = '[object Int16Array]',
              int32Tag = '[object Int32Array]',
              uint8Tag = '[object Uint8Array]',
              uint8ClampedTag = '[object Uint8ClampedArray]',
              uint16Tag = '[object Uint16Array]',
              uint32Tag = '[object Uint32Array]';
          var cloneableTags = {};
          cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[stringTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
          cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[mapTag] = cloneableTags[setTag] = cloneableTags[weakMapTag] = false;
          var objectProto = Object.prototype;
          var objToString = objectProto.toString;
          function baseClone(value, isDeep, customizer, key, object, stackA, stackB) {
            var result;
            if (customizer) {
              result = object ? customizer(value, key, object) : customizer(value);
            }
            if (result !== undefined) {
              return result;
            }
            if (!isObject(value)) {
              return value;
            }
            var isArr = isArray(value);
            if (isArr) {
              result = initCloneArray(value);
              if (!isDeep) {
                return arrayCopy(value, result);
              }
            } else {
              var tag = objToString.call(value),
                  isFunc = tag == funcTag;
              if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
                result = initCloneObject(isFunc ? {} : value);
                if (!isDeep) {
                  return baseAssign(result, value);
                }
              } else {
                return cloneableTags[tag] ? initCloneByTag(value, tag, isDeep) : (object ? value : {});
              }
            }
            stackA || (stackA = []);
            stackB || (stackB = []);
            var length = stackA.length;
            while (length--) {
              if (stackA[length] == value) {
                return stackB[length];
              }
            }
            stackA.push(value);
            stackB.push(result);
            (isArr ? arrayEach : baseForOwn)(value, function(subValue, key) {
              result[key] = baseClone(subValue, isDeep, customizer, key, value, stackA, stackB);
            });
            return result;
          }
          module.exports = baseClone;
        }, {
          "453": 453,
          "454": 454,
          "461": 461,
          "471": 471,
          "513": 513,
          "514": 514,
          "515": 515,
          "530": 530,
          "536": 536
        }],
        464: [function(_dereq_, module, exports) {
          function baseCompareAscending(value, other) {
            if (value !== other) {
              var valIsNull = value === null,
                  valIsUndef = value === undefined,
                  valIsReflexive = value === value;
              var othIsNull = other === null,
                  othIsUndef = other === undefined,
                  othIsReflexive = other === other;
              if ((value > other && !othIsNull) || !valIsReflexive || (valIsNull && !othIsUndef && othIsReflexive) || (valIsUndef && othIsReflexive)) {
                return 1;
              }
              if ((value < other && !valIsNull) || !othIsReflexive || (othIsNull && !valIsUndef && valIsReflexive) || (othIsUndef && valIsReflexive)) {
                return -1;
              }
            }
            return 0;
          }
          module.exports = baseCompareAscending;
        }, {}],
        465: [function(_dereq_, module, exports) {
          function baseCopy(source, props, object) {
            object || (object = {});
            var index = -1,
                length = props.length;
            while (++index < length) {
              var key = props[index];
              object[key] = source[key];
            }
            return object;
          }
          module.exports = baseCopy;
        }, {}],
        466: [function(_dereq_, module, exports) {
          var baseForOwn = _dereq_(471),
              createBaseEach = _dereq_(499);
          var baseEach = createBaseEach(baseForOwn);
          module.exports = baseEach;
        }, {
          "471": 471,
          "499": 499
        }],
        467: [function(_dereq_, module, exports) {
          var baseForOwnRight = _dereq_(472),
              createBaseEach = _dereq_(499);
          var baseEachRight = createBaseEach(baseForOwnRight, true);
          module.exports = baseEachRight;
        }, {
          "472": 472,
          "499": 499
        }],
        468: [function(_dereq_, module, exports) {
          var arrayPush = _dereq_(456),
              isArguments = _dereq_(529),
              isArray = _dereq_(530),
              isArrayLike = _dereq_(516),
              isObjectLike = _dereq_(521);
          function baseFlatten(array, isDeep, isStrict, result) {
            result || (result = []);
            var index = -1,
                length = array.length;
            while (++index < length) {
              var value = array[index];
              if (isObjectLike(value) && isArrayLike(value) && (isStrict || isArray(value) || isArguments(value))) {
                if (isDeep) {
                  baseFlatten(value, isDeep, isStrict, result);
                } else {
                  arrayPush(result, value);
                }
              } else if (!isStrict) {
                result[result.length] = value;
              }
            }
            return result;
          }
          module.exports = baseFlatten;
        }, {
          "456": 456,
          "516": 516,
          "521": 521,
          "529": 529,
          "530": 530
        }],
        469: [function(_dereq_, module, exports) {
          var createBaseFor = _dereq_(500);
          var baseFor = createBaseFor();
          module.exports = baseFor;
        }, {"500": 500}],
        470: [function(_dereq_, module, exports) {
          var baseFor = _dereq_(469),
              keysIn = _dereq_(547);
          function baseForIn(object, iteratee) {
            return baseFor(object, iteratee, keysIn);
          }
          module.exports = baseForIn;
        }, {
          "469": 469,
          "547": 547
        }],
        471: [function(_dereq_, module, exports) {
          var baseFor = _dereq_(469),
              keys = _dereq_(546);
          function baseForOwn(object, iteratee) {
            return baseFor(object, iteratee, keys);
          }
          module.exports = baseForOwn;
        }, {
          "469": 469,
          "546": 546
        }],
        472: [function(_dereq_, module, exports) {
          var baseForRight = _dereq_(473),
              keys = _dereq_(546);
          function baseForOwnRight(object, iteratee) {
            return baseForRight(object, iteratee, keys);
          }
          module.exports = baseForOwnRight;
        }, {
          "473": 473,
          "546": 546
        }],
        473: [function(_dereq_, module, exports) {
          var createBaseFor = _dereq_(500);
          var baseForRight = createBaseFor(true);
          module.exports = baseForRight;
        }, {"500": 500}],
        474: [function(_dereq_, module, exports) {
          var toObject = _dereq_(525);
          function baseGet(object, path, pathKey) {
            if (object == null) {
              return;
            }
            if (pathKey !== undefined && pathKey in toObject(object)) {
              path = [pathKey];
            }
            var index = 0,
                length = path.length;
            while (object != null && index < length) {
              object = object[path[index++]];
            }
            return (index && index == length) ? object : undefined;
          }
          module.exports = baseGet;
        }, {"525": 525}],
        475: [function(_dereq_, module, exports) {
          var indexOfNaN = _dereq_(512);
          function baseIndexOf(array, value, fromIndex) {
            if (value !== value) {
              return indexOfNaN(array, fromIndex);
            }
            var index = fromIndex - 1,
                length = array.length;
            while (++index < length) {
              if (array[index] === value) {
                return index;
              }
            }
            return -1;
          }
          module.exports = baseIndexOf;
        }, {"512": 512}],
        476: [function(_dereq_, module, exports) {
          var baseIsEqualDeep = _dereq_(477),
              isObject = _dereq_(536),
              isObjectLike = _dereq_(521);
          function baseIsEqual(value, other, customizer, isLoose, stackA, stackB) {
            if (value === other) {
              return true;
            }
            if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {
              return value !== value && other !== other;
            }
            return baseIsEqualDeep(value, other, baseIsEqual, customizer, isLoose, stackA, stackB);
          }
          module.exports = baseIsEqual;
        }, {
          "477": 477,
          "521": 521,
          "536": 536
        }],
        477: [function(_dereq_, module, exports) {
          var equalArrays = _dereq_(505),
              equalByTag = _dereq_(506),
              equalObjects = _dereq_(507),
              isArray = _dereq_(530),
              isTypedArray = _dereq_(540);
          var argsTag = '[object Arguments]',
              arrayTag = '[object Array]',
              objectTag = '[object Object]';
          var objectProto = Object.prototype;
          var hasOwnProperty = objectProto.hasOwnProperty;
          var objToString = objectProto.toString;
          function baseIsEqualDeep(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
            var objIsArr = isArray(object),
                othIsArr = isArray(other),
                objTag = arrayTag,
                othTag = arrayTag;
            if (!objIsArr) {
              objTag = objToString.call(object);
              if (objTag == argsTag) {
                objTag = objectTag;
              } else if (objTag != objectTag) {
                objIsArr = isTypedArray(object);
              }
            }
            if (!othIsArr) {
              othTag = objToString.call(other);
              if (othTag == argsTag) {
                othTag = objectTag;
              } else if (othTag != objectTag) {
                othIsArr = isTypedArray(other);
              }
            }
            var objIsObj = objTag == objectTag,
                othIsObj = othTag == objectTag,
                isSameTag = objTag == othTag;
            if (isSameTag && !(objIsArr || objIsObj)) {
              return equalByTag(object, other, objTag);
            }
            if (!isLoose) {
              var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
                  othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');
              if (objIsWrapped || othIsWrapped) {
                return equalFunc(objIsWrapped ? object.value() : object, othIsWrapped ? other.value() : other, customizer, isLoose, stackA, stackB);
              }
            }
            if (!isSameTag) {
              return false;
            }
            stackA || (stackA = []);
            stackB || (stackB = []);
            var length = stackA.length;
            while (length--) {
              if (stackA[length] == object) {
                return stackB[length] == other;
              }
            }
            stackA.push(object);
            stackB.push(other);
            var result = (objIsArr ? equalArrays : equalObjects)(object, other, equalFunc, customizer, isLoose, stackA, stackB);
            stackA.pop();
            stackB.pop();
            return result;
          }
          module.exports = baseIsEqualDeep;
        }, {
          "505": 505,
          "506": 506,
          "507": 507,
          "530": 530,
          "540": 540
        }],
        478: [function(_dereq_, module, exports) {
          var baseIsEqual = _dereq_(476),
              toObject = _dereq_(525);
          function baseIsMatch(object, matchData, customizer) {
            var index = matchData.length,
                length = index,
                noCustomizer = !customizer;
            if (object == null) {
              return !length;
            }
            object = toObject(object);
            while (index--) {
              var data = matchData[index];
              if ((noCustomizer && data[2]) ? data[1] !== object[data[0]] : !(data[0] in object)) {
                return false;
              }
            }
            while (++index < length) {
              data = matchData[index];
              var key = data[0],
                  objValue = object[key],
                  srcValue = data[1];
              if (noCustomizer && data[2]) {
                if (objValue === undefined && !(key in object)) {
                  return false;
                }
              } else {
                var result = customizer ? customizer(objValue, srcValue, key) : undefined;
                if (!(result === undefined ? baseIsEqual(srcValue, objValue, customizer, true) : result)) {
                  return false;
                }
              }
            }
            return true;
          }
          module.exports = baseIsMatch;
        }, {
          "476": 476,
          "525": 525
        }],
        479: [function(_dereq_, module, exports) {
          var baseEach = _dereq_(466),
              isArrayLike = _dereq_(516);
          function baseMap(collection, iteratee) {
            var index = -1,
                result = isArrayLike(collection) ? Array(collection.length) : [];
            baseEach(collection, function(value, key, collection) {
              result[++index] = iteratee(value, key, collection);
            });
            return result;
          }
          module.exports = baseMap;
        }, {
          "466": 466,
          "516": 516
        }],
        480: [function(_dereq_, module, exports) {
          var baseIsMatch = _dereq_(478),
              getMatchData = _dereq_(510),
              toObject = _dereq_(525);
          function baseMatches(source) {
            var matchData = getMatchData(source);
            if (matchData.length == 1 && matchData[0][2]) {
              var key = matchData[0][0],
                  value = matchData[0][1];
              return function(object) {
                if (object == null) {
                  return false;
                }
                return object[key] === value && (value !== undefined || (key in toObject(object)));
              };
            }
            return function(object) {
              return baseIsMatch(object, matchData);
            };
          }
          module.exports = baseMatches;
        }, {
          "478": 478,
          "510": 510,
          "525": 525
        }],
        481: [function(_dereq_, module, exports) {
          var baseGet = _dereq_(474),
              baseIsEqual = _dereq_(476),
              baseSlice = _dereq_(487),
              isArray = _dereq_(530),
              isKey = _dereq_(519),
              isStrictComparable = _dereq_(522),
              last = _dereq_(440),
              toObject = _dereq_(525),
              toPath = _dereq_(526);
          function baseMatchesProperty(path, srcValue) {
            var isArr = isArray(path),
                isCommon = isKey(path) && isStrictComparable(srcValue),
                pathKey = (path + '');
            path = toPath(path);
            return function(object) {
              if (object == null) {
                return false;
              }
              var key = pathKey;
              object = toObject(object);
              if ((isArr || !isCommon) && !(key in object)) {
                object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
                if (object == null) {
                  return false;
                }
                key = last(path);
                object = toObject(object);
              }
              return object[key] === srcValue ? (srcValue !== undefined || (key in object)) : baseIsEqual(srcValue, object[key], undefined, true);
            };
          }
          module.exports = baseMatchesProperty;
        }, {
          "440": 440,
          "474": 474,
          "476": 476,
          "487": 487,
          "519": 519,
          "522": 522,
          "525": 525,
          "526": 526,
          "530": 530
        }],
        482: [function(_dereq_, module, exports) {
          var arrayEach = _dereq_(454),
              baseMergeDeep = _dereq_(483),
              isArray = _dereq_(530),
              isArrayLike = _dereq_(516),
              isObject = _dereq_(536),
              isObjectLike = _dereq_(521),
              isTypedArray = _dereq_(540),
              keys = _dereq_(546);
          function baseMerge(object, source, customizer, stackA, stackB) {
            if (!isObject(object)) {
              return object;
            }
            var isSrcArr = isArrayLike(source) && (isArray(source) || isTypedArray(source)),
                props = isSrcArr ? undefined : keys(source);
            arrayEach(props || source, function(srcValue, key) {
              if (props) {
                key = srcValue;
                srcValue = source[key];
              }
              if (isObjectLike(srcValue)) {
                stackA || (stackA = []);
                stackB || (stackB = []);
                baseMergeDeep(object, source, key, baseMerge, customizer, stackA, stackB);
              } else {
                var value = object[key],
                    result = customizer ? customizer(value, srcValue, key, object, source) : undefined,
                    isCommon = result === undefined;
                if (isCommon) {
                  result = srcValue;
                }
                if ((result !== undefined || (isSrcArr && !(key in object))) && (isCommon || (result === result ? (result !== value) : (value === value)))) {
                  object[key] = result;
                }
              }
            });
            return object;
          }
          module.exports = baseMerge;
        }, {
          "454": 454,
          "483": 483,
          "516": 516,
          "521": 521,
          "530": 530,
          "536": 536,
          "540": 540,
          "546": 546
        }],
        483: [function(_dereq_, module, exports) {
          var arrayCopy = _dereq_(453),
              isArguments = _dereq_(529),
              isArray = _dereq_(530),
              isArrayLike = _dereq_(516),
              isPlainObject = _dereq_(537),
              isTypedArray = _dereq_(540),
              toPlainObject = _dereq_(541);
          function baseMergeDeep(object, source, key, mergeFunc, customizer, stackA, stackB) {
            var length = stackA.length,
                srcValue = source[key];
            while (length--) {
              if (stackA[length] == srcValue) {
                object[key] = stackB[length];
                return;
              }
            }
            var value = object[key],
                result = customizer ? customizer(value, srcValue, key, object, source) : undefined,
                isCommon = result === undefined;
            if (isCommon) {
              result = srcValue;
              if (isArrayLike(srcValue) && (isArray(srcValue) || isTypedArray(srcValue))) {
                result = isArray(value) ? value : (isArrayLike(value) ? arrayCopy(value) : []);
              } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
                result = isArguments(value) ? toPlainObject(value) : (isPlainObject(value) ? value : {});
              } else {
                isCommon = false;
              }
            }
            stackA.push(srcValue);
            stackB.push(result);
            if (isCommon) {
              object[key] = mergeFunc(result, srcValue, customizer, stackA, stackB);
            } else if (result === result ? (result !== value) : (value === value)) {
              object[key] = result;
            }
          }
          module.exports = baseMergeDeep;
        }, {
          "453": 453,
          "516": 516,
          "529": 529,
          "530": 530,
          "537": 537,
          "540": 540,
          "541": 541
        }],
        484: [function(_dereq_, module, exports) {
          function baseProperty(key) {
            return function(object) {
              return object == null ? undefined : object[key];
            };
          }
          module.exports = baseProperty;
        }, {}],
        485: [function(_dereq_, module, exports) {
          var baseGet = _dereq_(474),
              toPath = _dereq_(526);
          function basePropertyDeep(path) {
            var pathKey = (path + '');
            path = toPath(path);
            return function(object) {
              return baseGet(object, path, pathKey);
            };
          }
          module.exports = basePropertyDeep;
        }, {
          "474": 474,
          "526": 526
        }],
        486: [function(_dereq_, module, exports) {
          function baseReduce(collection, iteratee, accumulator, initFromCollection, eachFunc) {
            eachFunc(collection, function(value, index, collection) {
              accumulator = initFromCollection ? (initFromCollection = false, value) : iteratee(accumulator, value, index, collection);
            });
            return accumulator;
          }
          module.exports = baseReduce;
        }, {}],
        487: [function(_dereq_, module, exports) {
          function baseSlice(array, start, end) {
            var index = -1,
                length = array.length;
            start = start == null ? 0 : (+start || 0);
            if (start < 0) {
              start = -start > length ? 0 : (length + start);
            }
            end = (end === undefined || end > length) ? length : (+end || 0);
            if (end < 0) {
              end += length;
            }
            length = start > end ? 0 : ((end - start) >>> 0);
            start >>>= 0;
            var result = Array(length);
            while (++index < length) {
              result[index] = array[index + start];
            }
            return result;
          }
          module.exports = baseSlice;
        }, {}],
        488: [function(_dereq_, module, exports) {
          var baseEach = _dereq_(466);
          function baseSome(collection, predicate) {
            var result;
            baseEach(collection, function(value, index, collection) {
              result = predicate(value, index, collection);
              return !result;
            });
            return !!result;
          }
          module.exports = baseSome;
        }, {"466": 466}],
        489: [function(_dereq_, module, exports) {
          function baseSortBy(array, comparer) {
            var length = array.length;
            array.sort(comparer);
            while (length--) {
              array[length] = array[length].value;
            }
            return array;
          }
          module.exports = baseSortBy;
        }, {}],
        490: [function(_dereq_, module, exports) {
          function baseToString(value) {
            return value == null ? '' : (value + '');
          }
          module.exports = baseToString;
        }, {}],
        491: [function(_dereq_, module, exports) {
          var baseIndexOf = _dereq_(475),
              cacheIndexOf = _dereq_(495),
              createCache = _dereq_(501);
          var LARGE_ARRAY_SIZE = 200;
          function baseUniq(array, iteratee) {
            var index = -1,
                indexOf = baseIndexOf,
                length = array.length,
                isCommon = true,
                isLarge = isCommon && length >= LARGE_ARRAY_SIZE,
                seen = isLarge ? createCache() : null,
                result = [];
            if (seen) {
              indexOf = cacheIndexOf;
              isCommon = false;
            } else {
              isLarge = false;
              seen = iteratee ? [] : result;
            }
            outer: while (++index < length) {
              var value = array[index],
                  computed = iteratee ? iteratee(value, index, array) : value;
              if (isCommon && value === value) {
                var seenIndex = seen.length;
                while (seenIndex--) {
                  if (seen[seenIndex] === computed) {
                    continue outer;
                  }
                }
                if (iteratee) {
                  seen.push(computed);
                }
                result.push(value);
              } else if (indexOf(seen, computed, 0) < 0) {
                if (iteratee || isLarge) {
                  seen.push(computed);
                }
                result.push(value);
              }
            }
            return result;
          }
          module.exports = baseUniq;
        }, {
          "475": 475,
          "495": 495,
          "501": 501
        }],
        492: [function(_dereq_, module, exports) {
          function baseValues(object, props) {
            var index = -1,
                length = props.length,
                result = Array(length);
            while (++index < length) {
              result[index] = object[props[index]];
            }
            return result;
          }
          module.exports = baseValues;
        }, {}],
        493: [function(_dereq_, module, exports) {
          var identity = _dereq_(553);
          function bindCallback(func, thisArg, argCount) {
            if (typeof func != 'function') {
              return identity;
            }
            if (thisArg === undefined) {
              return func;
            }
            switch (argCount) {
              case 1:
                return function(value) {
                  return func.call(thisArg, value);
                };
              case 3:
                return function(value, index, collection) {
                  return func.call(thisArg, value, index, collection);
                };
              case 4:
                return function(accumulator, value, index, collection) {
                  return func.call(thisArg, accumulator, value, index, collection);
                };
              case 5:
                return function(value, other, key, object, source) {
                  return func.call(thisArg, value, other, key, object, source);
                };
            }
            return function() {
              return func.apply(thisArg, arguments);
            };
          }
          module.exports = bindCallback;
        }, {"553": 553}],
        494: [function(_dereq_, module, exports) {
          (function(global) {
            var ArrayBuffer = global.ArrayBuffer,
                Uint8Array = global.Uint8Array;
            function bufferClone(buffer) {
              var result = new ArrayBuffer(buffer.byteLength),
                  view = new Uint8Array(result);
              view.set(new Uint8Array(buffer));
              return result;
            }
            module.exports = bufferClone;
          }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
        }, {}],
        495: [function(_dereq_, module, exports) {
          var isObject = _dereq_(536);
          function cacheIndexOf(cache, value) {
            var data = cache.data,
                result = (typeof value == 'string' || isObject(value)) ? data.set.has(value) : data.hash[value];
            return result ? 0 : -1;
          }
          module.exports = cacheIndexOf;
        }, {"536": 536}],
        496: [function(_dereq_, module, exports) {
          var isObject = _dereq_(536);
          function cachePush(value) {
            var data = this.data;
            if (typeof value == 'string' || isObject(value)) {
              data.set.add(value);
            } else {
              data.hash[value] = true;
            }
          }
          module.exports = cachePush;
        }, {"536": 536}],
        497: [function(_dereq_, module, exports) {
          var baseCompareAscending = _dereq_(464);
          function compareAscending(object, other) {
            return baseCompareAscending(object.criteria, other.criteria) || (object.index - other.index);
          }
          module.exports = compareAscending;
        }, {"464": 464}],
        498: [function(_dereq_, module, exports) {
          var bindCallback = _dereq_(493),
              isIterateeCall = _dereq_(518),
              restParam = _dereq_(451);
          function createAssigner(assigner) {
            return restParam(function(object, sources) {
              var index = -1,
                  length = object == null ? 0 : sources.length,
                  customizer = length > 2 ? sources[length - 2] : undefined,
                  guard = length > 2 ? sources[2] : undefined,
                  thisArg = length > 1 ? sources[length - 1] : undefined;
              if (typeof customizer == 'function') {
                customizer = bindCallback(customizer, thisArg, 5);
                length -= 2;
              } else {
                customizer = typeof thisArg == 'function' ? thisArg : undefined;
                length -= (customizer ? 1 : 0);
              }
              if (guard && isIterateeCall(sources[0], sources[1], guard)) {
                customizer = length < 3 ? undefined : customizer;
                length = 1;
              }
              while (++index < length) {
                var source = sources[index];
                if (source) {
                  assigner(object, source, customizer);
                }
              }
              return object;
            });
          }
          module.exports = createAssigner;
        }, {
          "451": 451,
          "493": 493,
          "518": 518
        }],
        499: [function(_dereq_, module, exports) {
          var getLength = _dereq_(509),
              isLength = _dereq_(520),
              toObject = _dereq_(525);
          function createBaseEach(eachFunc, fromRight) {
            return function(collection, iteratee) {
              var length = collection ? getLength(collection) : 0;
              if (!isLength(length)) {
                return eachFunc(collection, iteratee);
              }
              var index = fromRight ? length : -1,
                  iterable = toObject(collection);
              while ((fromRight ? index-- : ++index < length)) {
                if (iteratee(iterable[index], index, iterable) === false) {
                  break;
                }
              }
              return collection;
            };
          }
          module.exports = createBaseEach;
        }, {
          "509": 509,
          "520": 520,
          "525": 525
        }],
        500: [function(_dereq_, module, exports) {
          var toObject = _dereq_(525);
          function createBaseFor(fromRight) {
            return function(object, iteratee, keysFunc) {
              var iterable = toObject(object),
                  props = keysFunc(object),
                  length = props.length,
                  index = fromRight ? length : -1;
              while ((fromRight ? index-- : ++index < length)) {
                var key = props[index];
                if (iteratee(iterable[key], key, iterable) === false) {
                  break;
                }
              }
              return object;
            };
          }
          module.exports = createBaseFor;
        }, {"525": 525}],
        501: [function(_dereq_, module, exports) {
          (function(global) {
            var SetCache = _dereq_(452),
                getNative = _dereq_(511);
            var Set = getNative(global, 'Set');
            var nativeCreate = getNative(Object, 'create');
            function createCache(values) {
              return (nativeCreate && Set) ? new SetCache(values) : null;
            }
            module.exports = createCache;
          }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
        }, {
          "452": 452,
          "511": 511
        }],
        502: [function(_dereq_, module, exports) {
          var restParam = _dereq_(451);
          function createDefaults(assigner, customizer) {
            return restParam(function(args) {
              var object = args[0];
              if (object == null) {
                return object;
              }
              args.push(customizer);
              return assigner.apply(undefined, args);
            });
          }
          module.exports = createDefaults;
        }, {"451": 451}],
        503: [function(_dereq_, module, exports) {
          var bindCallback = _dereq_(493),
              isArray = _dereq_(530);
          function createForEach(arrayFunc, eachFunc) {
            return function(collection, iteratee, thisArg) {
              return (typeof iteratee == 'function' && thisArg === undefined && isArray(collection)) ? arrayFunc(collection, iteratee) : eachFunc(collection, bindCallback(iteratee, thisArg, 3));
            };
          }
          module.exports = createForEach;
        }, {
          "493": 493,
          "530": 530
        }],
        504: [function(_dereq_, module, exports) {
          var baseCallback = _dereq_(462),
              baseReduce = _dereq_(486),
              isArray = _dereq_(530);
          function createReduce(arrayFunc, eachFunc) {
            return function(collection, iteratee, accumulator, thisArg) {
              var initFromArray = arguments.length < 3;
              return (typeof iteratee == 'function' && thisArg === undefined && isArray(collection)) ? arrayFunc(collection, iteratee, accumulator, initFromArray) : baseReduce(collection, baseCallback(iteratee, thisArg, 4), accumulator, initFromArray, eachFunc);
            };
          }
          module.exports = createReduce;
        }, {
          "462": 462,
          "486": 486,
          "530": 530
        }],
        505: [function(_dereq_, module, exports) {
          var arraySome = _dereq_(458);
          function equalArrays(array, other, equalFunc, customizer, isLoose, stackA, stackB) {
            var index = -1,
                arrLength = array.length,
                othLength = other.length;
            if (arrLength != othLength && !(isLoose && othLength > arrLength)) {
              return false;
            }
            while (++index < arrLength) {
              var arrValue = array[index],
                  othValue = other[index],
                  result = customizer ? customizer(isLoose ? othValue : arrValue, isLoose ? arrValue : othValue, index) : undefined;
              if (result !== undefined) {
                if (result) {
                  continue;
                }
                return false;
              }
              if (isLoose) {
                if (!arraySome(other, function(othValue) {
                  return arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB);
                })) {
                  return false;
                }
              } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB))) {
                return false;
              }
            }
            return true;
          }
          module.exports = equalArrays;
        }, {"458": 458}],
        506: [function(_dereq_, module, exports) {
          var boolTag = '[object Boolean]',
              dateTag = '[object Date]',
              errorTag = '[object Error]',
              numberTag = '[object Number]',
              regexpTag = '[object RegExp]',
              stringTag = '[object String]';
          function equalByTag(object, other, tag) {
            switch (tag) {
              case boolTag:
              case dateTag:
                return +object == +other;
              case errorTag:
                return object.name == other.name && object.message == other.message;
              case numberTag:
                return (object != +object) ? other != +other : object == +other;
              case regexpTag:
              case stringTag:
                return object == (other + '');
            }
            return false;
          }
          module.exports = equalByTag;
        }, {}],
        507: [function(_dereq_, module, exports) {
          var keys = _dereq_(546);
          var objectProto = Object.prototype;
          var hasOwnProperty = objectProto.hasOwnProperty;
          function equalObjects(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
            var objProps = keys(object),
                objLength = objProps.length,
                othProps = keys(other),
                othLength = othProps.length;
            if (objLength != othLength && !isLoose) {
              return false;
            }
            var index = objLength;
            while (index--) {
              var key = objProps[index];
              if (!(isLoose ? key in other : hasOwnProperty.call(other, key))) {
                return false;
              }
            }
            var skipCtor = isLoose;
            while (++index < objLength) {
              key = objProps[index];
              var objValue = object[key],
                  othValue = other[key],
                  result = customizer ? customizer(isLoose ? othValue : objValue, isLoose ? objValue : othValue, key) : undefined;
              if (!(result === undefined ? equalFunc(objValue, othValue, customizer, isLoose, stackA, stackB) : result)) {
                return false;
              }
              skipCtor || (skipCtor = key == 'constructor');
            }
            if (!skipCtor) {
              var objCtor = object.constructor,
                  othCtor = other.constructor;
              if (objCtor != othCtor && ('constructor' in object && 'constructor' in other) && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {
                return false;
              }
            }
            return true;
          }
          module.exports = equalObjects;
        }, {"546": 546}],
        508: [function(_dereq_, module, exports) {
          var regexpEscapes = {
            '0': 'x30',
            '1': 'x31',
            '2': 'x32',
            '3': 'x33',
            '4': 'x34',
            '5': 'x35',
            '6': 'x36',
            '7': 'x37',
            '8': 'x38',
            '9': 'x39',
            'A': 'x41',
            'B': 'x42',
            'C': 'x43',
            'D': 'x44',
            'E': 'x45',
            'F': 'x46',
            'a': 'x61',
            'b': 'x62',
            'c': 'x63',
            'd': 'x64',
            'e': 'x65',
            'f': 'x66',
            'n': 'x6e',
            'r': 'x72',
            't': 'x74',
            'u': 'x75',
            'v': 'x76',
            'x': 'x78'
          };
          var stringEscapes = {
            '\\': '\\',
            "'": "'",
            '\n': 'n',
            '\r': 'r',
            '\u2028': 'u2028',
            '\u2029': 'u2029'
          };
          function escapeRegExpChar(chr, leadingChar, whitespaceChar) {
            if (leadingChar) {
              chr = regexpEscapes[chr];
            } else if (whitespaceChar) {
              chr = stringEscapes[chr];
            }
            return '\\' + chr;
          }
          module.exports = escapeRegExpChar;
        }, {}],
        509: [function(_dereq_, module, exports) {
          var baseProperty = _dereq_(484);
          var getLength = baseProperty('length');
          module.exports = getLength;
        }, {"484": 484}],
        510: [function(_dereq_, module, exports) {
          var isStrictComparable = _dereq_(522),
              pairs = _dereq_(549);
          function getMatchData(object) {
            var result = pairs(object),
                length = result.length;
            while (length--) {
              result[length][2] = isStrictComparable(result[length][1]);
            }
            return result;
          }
          module.exports = getMatchData;
        }, {
          "522": 522,
          "549": 549
        }],
        511: [function(_dereq_, module, exports) {
          var isNative = _dereq_(534);
          function getNative(object, key) {
            var value = object == null ? undefined : object[key];
            return isNative(value) ? value : undefined;
          }
          module.exports = getNative;
        }, {"534": 534}],
        512: [function(_dereq_, module, exports) {
          function indexOfNaN(array, fromIndex, fromRight) {
            var length = array.length,
                index = fromIndex + (fromRight ? 0 : -1);
            while ((fromRight ? index-- : ++index < length)) {
              var other = array[index];
              if (other !== other) {
                return index;
              }
            }
            return -1;
          }
          module.exports = indexOfNaN;
        }, {}],
        513: [function(_dereq_, module, exports) {
          var objectProto = Object.prototype;
          var hasOwnProperty = objectProto.hasOwnProperty;
          function initCloneArray(array) {
            var length = array.length,
                result = new array.constructor(length);
            if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
              result.index = array.index;
              result.input = array.input;
            }
            return result;
          }
          module.exports = initCloneArray;
        }, {}],
        514: [function(_dereq_, module, exports) {
          var bufferClone = _dereq_(494);
          var boolTag = '[object Boolean]',
              dateTag = '[object Date]',
              numberTag = '[object Number]',
              regexpTag = '[object RegExp]',
              stringTag = '[object String]';
          var arrayBufferTag = '[object ArrayBuffer]',
              float32Tag = '[object Float32Array]',
              float64Tag = '[object Float64Array]',
              int8Tag = '[object Int8Array]',
              int16Tag = '[object Int16Array]',
              int32Tag = '[object Int32Array]',
              uint8Tag = '[object Uint8Array]',
              uint8ClampedTag = '[object Uint8ClampedArray]',
              uint16Tag = '[object Uint16Array]',
              uint32Tag = '[object Uint32Array]';
          var reFlags = /\w*$/;
          function initCloneByTag(object, tag, isDeep) {
            var Ctor = object.constructor;
            switch (tag) {
              case arrayBufferTag:
                return bufferClone(object);
              case boolTag:
              case dateTag:
                return new Ctor(+object);
              case float32Tag:
              case float64Tag:
              case int8Tag:
              case int16Tag:
              case int32Tag:
              case uint8Tag:
              case uint8ClampedTag:
              case uint16Tag:
              case uint32Tag:
                var buffer = object.buffer;
                return new Ctor(isDeep ? bufferClone(buffer) : buffer, object.byteOffset, object.length);
              case numberTag:
              case stringTag:
                return new Ctor(object);
              case regexpTag:
                var result = new Ctor(object.source, reFlags.exec(object));
                result.lastIndex = object.lastIndex;
            }
            return result;
          }
          module.exports = initCloneByTag;
        }, {"494": 494}],
        515: [function(_dereq_, module, exports) {
          function initCloneObject(object) {
            var Ctor = object.constructor;
            if (!(typeof Ctor == 'function' && Ctor instanceof Ctor)) {
              Ctor = Object;
            }
            return new Ctor;
          }
          module.exports = initCloneObject;
        }, {}],
        516: [function(_dereq_, module, exports) {
          var getLength = _dereq_(509),
              isLength = _dereq_(520);
          function isArrayLike(value) {
            return value != null && isLength(getLength(value));
          }
          module.exports = isArrayLike;
        }, {
          "509": 509,
          "520": 520
        }],
        517: [function(_dereq_, module, exports) {
          var reIsUint = /^\d+$/;
          var MAX_SAFE_INTEGER = 9007199254740991;
          function isIndex(value, length) {
            value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;
            length = length == null ? MAX_SAFE_INTEGER : length;
            return value > -1 && value % 1 == 0 && value < length;
          }
          module.exports = isIndex;
        }, {}],
        518: [function(_dereq_, module, exports) {
          var isArrayLike = _dereq_(516),
              isIndex = _dereq_(517),
              isObject = _dereq_(536);
          function isIterateeCall(value, index, object) {
            if (!isObject(object)) {
              return false;
            }
            var type = typeof index;
            if (type == 'number' ? (isArrayLike(object) && isIndex(index, object.length)) : (type == 'string' && index in object)) {
              var other = object[index];
              return value === value ? (value === other) : (other !== other);
            }
            return false;
          }
          module.exports = isIterateeCall;
        }, {
          "516": 516,
          "517": 517,
          "536": 536
        }],
        519: [function(_dereq_, module, exports) {
          var isArray = _dereq_(530),
              toObject = _dereq_(525);
          var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\n\\]|\\.)*?\1)\]/,
              reIsPlainProp = /^\w*$/;
          function isKey(value, object) {
            var type = typeof value;
            if ((type == 'string' && reIsPlainProp.test(value)) || type == 'number') {
              return true;
            }
            if (isArray(value)) {
              return false;
            }
            var result = !reIsDeepProp.test(value);
            return result || (object != null && value in toObject(object));
          }
          module.exports = isKey;
        }, {
          "525": 525,
          "530": 530
        }],
        520: [function(_dereq_, module, exports) {
          var MAX_SAFE_INTEGER = 9007199254740991;
          function isLength(value) {
            return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
          }
          module.exports = isLength;
        }, {}],
        521: [function(_dereq_, module, exports) {
          function isObjectLike(value) {
            return !!value && typeof value == 'object';
          }
          module.exports = isObjectLike;
        }, {}],
        522: [function(_dereq_, module, exports) {
          var isObject = _dereq_(536);
          function isStrictComparable(value) {
            return value === value && !isObject(value);
          }
          module.exports = isStrictComparable;
        }, {"536": 536}],
        523: [function(_dereq_, module, exports) {
          var isArguments = _dereq_(529),
              isArray = _dereq_(530),
              isIndex = _dereq_(517),
              isLength = _dereq_(520),
              keysIn = _dereq_(547);
          var objectProto = Object.prototype;
          var hasOwnProperty = objectProto.hasOwnProperty;
          function shimKeys(object) {
            var props = keysIn(object),
                propsLength = props.length,
                length = propsLength && object.length;
            var allowIndexes = !!length && isLength(length) && (isArray(object) || isArguments(object));
            var index = -1,
                result = [];
            while (++index < propsLength) {
              var key = props[index];
              if ((allowIndexes && isIndex(key, length)) || hasOwnProperty.call(object, key)) {
                result.push(key);
              }
            }
            return result;
          }
          module.exports = shimKeys;
        }, {
          "517": 517,
          "520": 520,
          "529": 529,
          "530": 530,
          "547": 547
        }],
        524: [function(_dereq_, module, exports) {
          function sortedUniq(array, iteratee) {
            var seen,
                index = -1,
                length = array.length,
                resIndex = -1,
                result = [];
            while (++index < length) {
              var value = array[index],
                  computed = iteratee ? iteratee(value, index, array) : value;
              if (!index || seen !== computed) {
                seen = computed;
                result[++resIndex] = value;
              }
            }
            return result;
          }
          module.exports = sortedUniq;
        }, {}],
        525: [function(_dereq_, module, exports) {
          var isObject = _dereq_(536);
          function toObject(value) {
            return isObject(value) ? value : Object(value);
          }
          module.exports = toObject;
        }, {"536": 536}],
        526: [function(_dereq_, module, exports) {
          var baseToString = _dereq_(490),
              isArray = _dereq_(530);
          var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\n\\]|\\.)*?)\2)\]/g;
          var reEscapeChar = /\\(\\)?/g;
          function toPath(value) {
            if (isArray(value)) {
              return value;
            }
            var result = [];
            baseToString(value).replace(rePropName, function(match, number, quote, string) {
              result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
            });
            return result;
          }
          module.exports = toPath;
        }, {
          "490": 490,
          "530": 530
        }],
        527: [function(_dereq_, module, exports) {
          var baseClone = _dereq_(463),
              bindCallback = _dereq_(493),
              isIterateeCall = _dereq_(518);
          function clone(value, isDeep, customizer, thisArg) {
            if (isDeep && typeof isDeep != 'boolean' && isIterateeCall(value, isDeep, customizer)) {
              isDeep = false;
            } else if (typeof isDeep == 'function') {
              thisArg = customizer;
              customizer = isDeep;
              isDeep = false;
            }
            return typeof customizer == 'function' ? baseClone(value, isDeep, bindCallback(customizer, thisArg, 3)) : baseClone(value, isDeep);
          }
          module.exports = clone;
        }, {
          "463": 463,
          "493": 493,
          "518": 518
        }],
        528: [function(_dereq_, module, exports) {
          var baseClone = _dereq_(463),
              bindCallback = _dereq_(493);
          function cloneDeep(value, customizer, thisArg) {
            return typeof customizer == 'function' ? baseClone(value, true, bindCallback(customizer, thisArg, 3)) : baseClone(value, true);
          }
          module.exports = cloneDeep;
        }, {
          "463": 463,
          "493": 493
        }],
        529: [function(_dereq_, module, exports) {
          var isArrayLike = _dereq_(516),
              isObjectLike = _dereq_(521);
          var objectProto = Object.prototype;
          var hasOwnProperty = objectProto.hasOwnProperty;
          var propertyIsEnumerable = objectProto.propertyIsEnumerable;
          function isArguments(value) {
            return isObjectLike(value) && isArrayLike(value) && hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
          }
          module.exports = isArguments;
        }, {
          "516": 516,
          "521": 521
        }],
        530: [function(_dereq_, module, exports) {
          var getNative = _dereq_(511),
              isLength = _dereq_(520),
              isObjectLike = _dereq_(521);
          var arrayTag = '[object Array]';
          var objectProto = Object.prototype;
          var objToString = objectProto.toString;
          var nativeIsArray = getNative(Array, 'isArray');
          var isArray = nativeIsArray || function(value) {
            return isObjectLike(value) && isLength(value.length) && objToString.call(value) == arrayTag;
          };
          module.exports = isArray;
        }, {
          "511": 511,
          "520": 520,
          "521": 521
        }],
        531: [function(_dereq_, module, exports) {
          var isObjectLike = _dereq_(521);
          var boolTag = '[object Boolean]';
          var objectProto = Object.prototype;
          var objToString = objectProto.toString;
          function isBoolean(value) {
            return value === true || value === false || (isObjectLike(value) && objToString.call(value) == boolTag);
          }
          module.exports = isBoolean;
        }, {"521": 521}],
        532: [function(_dereq_, module, exports) {
          var isArguments = _dereq_(529),
              isArray = _dereq_(530),
              isArrayLike = _dereq_(516),
              isFunction = _dereq_(533),
              isObjectLike = _dereq_(521),
              isString = _dereq_(539),
              keys = _dereq_(546);
          function isEmpty(value) {
            if (value == null) {
              return true;
            }
            if (isArrayLike(value) && (isArray(value) || isString(value) || isArguments(value) || (isObjectLike(value) && isFunction(value.splice)))) {
              return !value.length;
            }
            return !keys(value).length;
          }
          module.exports = isEmpty;
        }, {
          "516": 516,
          "521": 521,
          "529": 529,
          "530": 530,
          "533": 533,
          "539": 539,
          "546": 546
        }],
        533: [function(_dereq_, module, exports) {
          var isObject = _dereq_(536);
          var funcTag = '[object Function]';
          var objectProto = Object.prototype;
          var objToString = objectProto.toString;
          function isFunction(value) {
            return isObject(value) && objToString.call(value) == funcTag;
          }
          module.exports = isFunction;
        }, {"536": 536}],
        534: [function(_dereq_, module, exports) {
          var isFunction = _dereq_(533),
              isObjectLike = _dereq_(521);
          var reIsHostCtor = /^\[object .+?Constructor\]$/;
          var objectProto = Object.prototype;
          var fnToString = Function.prototype.toString;
          var hasOwnProperty = objectProto.hasOwnProperty;
          var reIsNative = RegExp('^' + fnToString.call(hasOwnProperty).replace(/[\\^$.*+?()[\]{}|]/g, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
          function isNative(value) {
            if (value == null) {
              return false;
            }
            if (isFunction(value)) {
              return reIsNative.test(fnToString.call(value));
            }
            return isObjectLike(value) && reIsHostCtor.test(value);
          }
          module.exports = isNative;
        }, {
          "521": 521,
          "533": 533
        }],
        535: [function(_dereq_, module, exports) {
          var isObjectLike = _dereq_(521);
          var numberTag = '[object Number]';
          var objectProto = Object.prototype;
          var objToString = objectProto.toString;
          function isNumber(value) {
            return typeof value == 'number' || (isObjectLike(value) && objToString.call(value) == numberTag);
          }
          module.exports = isNumber;
        }, {"521": 521}],
        536: [function(_dereq_, module, exports) {
          function isObject(value) {
            var type = typeof value;
            return !!value && (type == 'object' || type == 'function');
          }
          module.exports = isObject;
        }, {}],
        537: [function(_dereq_, module, exports) {
          var baseForIn = _dereq_(470),
              isArguments = _dereq_(529),
              isObjectLike = _dereq_(521);
          var objectTag = '[object Object]';
          var objectProto = Object.prototype;
          var hasOwnProperty = objectProto.hasOwnProperty;
          var objToString = objectProto.toString;
          function isPlainObject(value) {
            var Ctor;
            if (!(isObjectLike(value) && objToString.call(value) == objectTag && !isArguments(value)) || (!hasOwnProperty.call(value, 'constructor') && (Ctor = value.constructor, typeof Ctor == 'function' && !(Ctor instanceof Ctor)))) {
              return false;
            }
            var result;
            baseForIn(value, function(subValue, key) {
              result = key;
            });
            return result === undefined || hasOwnProperty.call(value, result);
          }
          module.exports = isPlainObject;
        }, {
          "470": 470,
          "521": 521,
          "529": 529
        }],
        538: [function(_dereq_, module, exports) {
          var isObject = _dereq_(536);
          var regexpTag = '[object RegExp]';
          var objectProto = Object.prototype;
          var objToString = objectProto.toString;
          function isRegExp(value) {
            return isObject(value) && objToString.call(value) == regexpTag;
          }
          module.exports = isRegExp;
        }, {"536": 536}],
        539: [function(_dereq_, module, exports) {
          var isObjectLike = _dereq_(521);
          var stringTag = '[object String]';
          var objectProto = Object.prototype;
          var objToString = objectProto.toString;
          function isString(value) {
            return typeof value == 'string' || (isObjectLike(value) && objToString.call(value) == stringTag);
          }
          module.exports = isString;
        }, {"521": 521}],
        540: [function(_dereq_, module, exports) {
          var isLength = _dereq_(520),
              isObjectLike = _dereq_(521);
          var argsTag = '[object Arguments]',
              arrayTag = '[object Array]',
              boolTag = '[object Boolean]',
              dateTag = '[object Date]',
              errorTag = '[object Error]',
              funcTag = '[object Function]',
              mapTag = '[object Map]',
              numberTag = '[object Number]',
              objectTag = '[object Object]',
              regexpTag = '[object RegExp]',
              setTag = '[object Set]',
              stringTag = '[object String]',
              weakMapTag = '[object WeakMap]';
          var arrayBufferTag = '[object ArrayBuffer]',
              float32Tag = '[object Float32Array]',
              float64Tag = '[object Float64Array]',
              int8Tag = '[object Int8Array]',
              int16Tag = '[object Int16Array]',
              int32Tag = '[object Int32Array]',
              uint8Tag = '[object Uint8Array]',
              uint8ClampedTag = '[object Uint8ClampedArray]',
              uint16Tag = '[object Uint16Array]',
              uint32Tag = '[object Uint32Array]';
          var typedArrayTags = {};
          typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
          typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
          var objectProto = Object.prototype;
          var objToString = objectProto.toString;
          function isTypedArray(value) {
            return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objToString.call(value)];
          }
          module.exports = isTypedArray;
        }, {
          "520": 520,
          "521": 521
        }],
        541: [function(_dereq_, module, exports) {
          var baseCopy = _dereq_(465),
              keysIn = _dereq_(547);
          function toPlainObject(value) {
            return baseCopy(value, keysIn(value));
          }
          module.exports = toPlainObject;
        }, {
          "465": 465,
          "547": 547
        }],
        542: [function(_dereq_, module, exports) {
          var assignWith = _dereq_(460),
              baseAssign = _dereq_(461),
              createAssigner = _dereq_(498);
          var assign = createAssigner(function(object, source, customizer) {
            return customizer ? assignWith(object, source, customizer) : baseAssign(object, source);
          });
          module.exports = assign;
        }, {
          "460": 460,
          "461": 461,
          "498": 498
        }],
        543: [function(_dereq_, module, exports) {
          var assign = _dereq_(542),
              assignDefaults = _dereq_(459),
              createDefaults = _dereq_(502);
          var defaults = createDefaults(assign, assignDefaults);
          module.exports = defaults;
        }, {
          "459": 459,
          "502": 502,
          "542": 542
        }],
        544: [function(_dereq_, module, exports) {
          module.exports = _dereq_(542);
        }, {"542": 542}],
        545: [function(_dereq_, module, exports) {
          var baseGet = _dereq_(474),
              baseSlice = _dereq_(487),
              isArguments = _dereq_(529),
              isArray = _dereq_(530),
              isIndex = _dereq_(517),
              isKey = _dereq_(519),
              isLength = _dereq_(520),
              last = _dereq_(440),
              toPath = _dereq_(526);
          var objectProto = Object.prototype;
          var hasOwnProperty = objectProto.hasOwnProperty;
          function has(object, path) {
            if (object == null) {
              return false;
            }
            var result = hasOwnProperty.call(object, path);
            if (!result && !isKey(path)) {
              path = toPath(path);
              object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
              if (object == null) {
                return false;
              }
              path = last(path);
              result = hasOwnProperty.call(object, path);
            }
            return result || (isLength(object.length) && isIndex(path, object.length) && (isArray(object) || isArguments(object)));
          }
          module.exports = has;
        }, {
          "440": 440,
          "474": 474,
          "487": 487,
          "517": 517,
          "519": 519,
          "520": 520,
          "526": 526,
          "529": 529,
          "530": 530
        }],
        546: [function(_dereq_, module, exports) {
          var getNative = _dereq_(511),
              isArrayLike = _dereq_(516),
              isObject = _dereq_(536),
              shimKeys = _dereq_(523);
          var nativeKeys = getNative(Object, 'keys');
          var keys = !nativeKeys ? shimKeys : function(object) {
            var Ctor = object == null ? undefined : object.constructor;
            if ((typeof Ctor == 'function' && Ctor.prototype === object) || (typeof object != 'function' && isArrayLike(object))) {
              return shimKeys(object);
            }
            return isObject(object) ? nativeKeys(object) : [];
          };
          module.exports = keys;
        }, {
          "511": 511,
          "516": 516,
          "523": 523,
          "536": 536
        }],
        547: [function(_dereq_, module, exports) {
          var isArguments = _dereq_(529),
              isArray = _dereq_(530),
              isIndex = _dereq_(517),
              isLength = _dereq_(520),
              isObject = _dereq_(536);
          var objectProto = Object.prototype;
          var hasOwnProperty = objectProto.hasOwnProperty;
          function keysIn(object) {
            if (object == null) {
              return [];
            }
            if (!isObject(object)) {
              object = Object(object);
            }
            var length = object.length;
            length = (length && isLength(length) && (isArray(object) || isArguments(object)) && length) || 0;
            var Ctor = object.constructor,
                index = -1,
                isProto = typeof Ctor == 'function' && Ctor.prototype === object,
                result = Array(length),
                skipIndexes = length > 0;
            while (++index < length) {
              result[index] = (index + '');
            }
            for (var key in object) {
              if (!(skipIndexes && isIndex(key, length)) && !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
                result.push(key);
              }
            }
            return result;
          }
          module.exports = keysIn;
        }, {
          "517": 517,
          "520": 520,
          "529": 529,
          "530": 530,
          "536": 536
        }],
        548: [function(_dereq_, module, exports) {
          var baseMerge = _dereq_(482),
              createAssigner = _dereq_(498);
          var merge = createAssigner(baseMerge);
          module.exports = merge;
        }, {
          "482": 482,
          "498": 498
        }],
        549: [function(_dereq_, module, exports) {
          var keys = _dereq_(546),
              toObject = _dereq_(525);
          function pairs(object) {
            object = toObject(object);
            var index = -1,
                props = keys(object),
                length = props.length,
                result = Array(length);
            while (++index < length) {
              var key = props[index];
              result[index] = [key, object[key]];
            }
            return result;
          }
          module.exports = pairs;
        }, {
          "525": 525,
          "546": 546
        }],
        550: [function(_dereq_, module, exports) {
          var baseValues = _dereq_(492),
              keys = _dereq_(546);
          function values(object) {
            return baseValues(object, keys(object));
          }
          module.exports = values;
        }, {
          "492": 492,
          "546": 546
        }],
        551: [function(_dereq_, module, exports) {
          var baseToString = _dereq_(490),
              escapeRegExpChar = _dereq_(508);
          var reRegExpChars = /^[:!,]|[\\^$.*+?()[\]{}|\/]|(^[0-9a-fA-Fnrtuvx])|([\n\r\u2028\u2029])/g,
              reHasRegExpChars = RegExp(reRegExpChars.source);
          function escapeRegExp(string) {
            string = baseToString(string);
            return (string && reHasRegExpChars.test(string)) ? string.replace(reRegExpChars, escapeRegExpChar) : (string || '(?:)');
          }
          module.exports = escapeRegExp;
        }, {
          "490": 490,
          "508": 508
        }],
        552: [function(_dereq_, module, exports) {
          var baseToString = _dereq_(490);
          var nativeMin = Math.min;
          function startsWith(string, target, position) {
            string = baseToString(string);
            position = position == null ? 0 : nativeMin(position < 0 ? 0 : (+position || 0), string.length);
            return string.lastIndexOf(target, position) == position;
          }
          module.exports = startsWith;
        }, {"490": 490}],
        553: [function(_dereq_, module, exports) {
          function identity(value) {
            return value;
          }
          module.exports = identity;
        }, {}],
        554: [function(_dereq_, module, exports) {
          var baseProperty = _dereq_(484),
              basePropertyDeep = _dereq_(485),
              isKey = _dereq_(519);
          function property(path) {
            return isKey(path) ? baseProperty(path) : basePropertyDeep(path);
          }
          module.exports = property;
        }, {
          "484": 484,
          "485": 485,
          "519": 519
        }],
        555: [function(_dereq_, module, exports) {
          module.exports = minimatch;
          minimatch.Minimatch = Minimatch;
          var path = {sep: '/'};
          try {
            path = _dereq_(9);
          } catch (er) {}
          var GLOBSTAR = minimatch.GLOBSTAR = Minimatch.GLOBSTAR = {};
          var expand = _dereq_(220);
          var qmark = '[^/]';
          var star = qmark + '*?';
          var twoStarDot = '(?:(?!(?:\\\/|^)(?:\\.{1,2})($|\\\/)).)*?';
          var twoStarNoDot = '(?:(?!(?:\\\/|^)\\.).)*?';
          var reSpecials = charSet('().*{}+?[]^$\\!');
          function charSet(s) {
            return s.split('').reduce(function(set, c) {
              set[c] = true;
              return set;
            }, {});
          }
          var slashSplit = /\/+/;
          minimatch.filter = filter;
          function filter(pattern, options) {
            options = options || {};
            return function(p, i, list) {
              return minimatch(p, pattern, options);
            };
          }
          function ext(a, b) {
            a = a || {};
            b = b || {};
            var t = {};
            Object.keys(b).forEach(function(k) {
              t[k] = b[k];
            });
            Object.keys(a).forEach(function(k) {
              t[k] = a[k];
            });
            return t;
          }
          minimatch.defaults = function(def) {
            if (!def || !Object.keys(def).length)
              return minimatch;
            var orig = minimatch;
            var m = function minimatch(p, pattern, options) {
              return orig.minimatch(p, pattern, ext(def, options));
            };
            m.Minimatch = function Minimatch(pattern, options) {
              return new orig.Minimatch(pattern, ext(def, options));
            };
            return m;
          };
          Minimatch.defaults = function(def) {
            if (!def || !Object.keys(def).length)
              return Minimatch;
            return minimatch.defaults(def).Minimatch;
          };
          function minimatch(p, pattern, options) {
            if (typeof pattern !== 'string') {
              throw new TypeError('glob pattern string required');
            }
            if (!options)
              options = {};
            if (!options.nocomment && pattern.charAt(0) === '#') {
              return false;
            }
            if (pattern.trim() === '')
              return p === '';
            return new Minimatch(pattern, options).match(p);
          }
          function Minimatch(pattern, options) {
            if (!(this instanceof Minimatch)) {
              return new Minimatch(pattern, options);
            }
            if (typeof pattern !== 'string') {
              throw new TypeError('glob pattern string required');
            }
            if (!options)
              options = {};
            pattern = pattern.trim();
            if (path.sep !== '/') {
              pattern = pattern.split(path.sep).join('/');
            }
            this.options = options;
            this.set = [];
            this.pattern = pattern;
            this.regexp = null;
            this.negate = false;
            this.comment = false;
            this.empty = false;
            this.make();
          }
          Minimatch.prototype.debug = function() {};
          Minimatch.prototype.make = make;
          function make() {
            if (this._made)
              return;
            var pattern = this.pattern;
            var options = this.options;
            if (!options.nocomment && pattern.charAt(0) === '#') {
              this.comment = true;
              return;
            }
            if (!pattern) {
              this.empty = true;
              return;
            }
            this.parseNegate();
            var set = this.globSet = this.braceExpand();
            if (options.debug)
              this.debug = console.error;
            this.debug(this.pattern, set);
            set = this.globParts = set.map(function(s) {
              return s.split(slashSplit);
            });
            this.debug(this.pattern, set);
            set = set.map(function(s, si, set) {
              return s.map(this.parse, this);
            }, this);
            this.debug(this.pattern, set);
            set = set.filter(function(s) {
              return s.indexOf(false) === -1;
            });
            this.debug(this.pattern, set);
            this.set = set;
          }
          Minimatch.prototype.parseNegate = parseNegate;
          function parseNegate() {
            var pattern = this.pattern;
            var negate = false;
            var options = this.options;
            var negateOffset = 0;
            if (options.nonegate)
              return;
            for (var i = 0,
                l = pattern.length; i < l && pattern.charAt(i) === '!'; i++) {
              negate = !negate;
              negateOffset++;
            }
            if (negateOffset)
              this.pattern = pattern.substr(negateOffset);
            this.negate = negate;
          }
          minimatch.braceExpand = function(pattern, options) {
            return braceExpand(pattern, options);
          };
          Minimatch.prototype.braceExpand = braceExpand;
          function braceExpand(pattern, options) {
            if (!options) {
              if (this instanceof Minimatch) {
                options = this.options;
              } else {
                options = {};
              }
            }
            pattern = typeof pattern === 'undefined' ? this.pattern : pattern;
            if (typeof pattern === 'undefined') {
              throw new Error('undefined pattern');
            }
            if (options.nobrace || !pattern.match(/\{.*\}/)) {
              return [pattern];
            }
            return expand(pattern);
          }
          Minimatch.prototype.parse = parse;
          var SUBPARSE = {};
          function parse(pattern, isSub) {
            var options = this.options;
            if (!options.noglobstar && pattern === '**')
              return GLOBSTAR;
            if (pattern === '')
              return '';
            var re = '';
            var hasMagic = !!options.nocase;
            var escaping = false;
            var patternListStack = [];
            var negativeLists = [];
            var plType;
            var stateChar;
            var inClass = false;
            var reClassStart = -1;
            var classStart = -1;
            var patternStart = pattern.charAt(0) === '.' ? '' : options.dot ? '(?!(?:^|\\\/)\\.{1,2}(?:$|\\\/))' : '(?!\\.)';
            var self = this;
            function clearStateChar() {
              if (stateChar) {
                switch (stateChar) {
                  case '*':
                    re += star;
                    hasMagic = true;
                    break;
                  case '?':
                    re += qmark;
                    hasMagic = true;
                    break;
                  default:
                    re += '\\' + stateChar;
                    break;
                }
                self.debug('clearStateChar %j %j', stateChar, re);
                stateChar = false;
              }
            }
            for (var i = 0,
                len = pattern.length,
                c; (i < len) && (c = pattern.charAt(i)); i++) {
              this.debug('%s\t%s %s %j', pattern, i, re, c);
              if (escaping && reSpecials[c]) {
                re += '\\' + c;
                escaping = false;
                continue;
              }
              switch (c) {
                case '/':
                  return false;
                case '\\':
                  clearStateChar();
                  escaping = true;
                  continue;
                case '?':
                case '*':
                case '+':
                case '@':
                case '!':
                  this.debug('%s\t%s %s %j <-- stateChar', pattern, i, re, c);
                  if (inClass) {
                    this.debug('  in class');
                    if (c === '!' && i === classStart + 1)
                      c = '^';
                    re += c;
                    continue;
                  }
                  self.debug('call clearStateChar %j', stateChar);
                  clearStateChar();
                  stateChar = c;
                  if (options.noext)
                    clearStateChar();
                  continue;
                case '(':
                  if (inClass) {
                    re += '(';
                    continue;
                  }
                  if (!stateChar) {
                    re += '\\(';
                    continue;
                  }
                  plType = stateChar;
                  patternListStack.push({
                    type: plType,
                    start: i - 1,
                    reStart: re.length
                  });
                  re += stateChar === '!' ? '(?:(?!(?:' : '(?:';
                  this.debug('plType %j %j', stateChar, re);
                  stateChar = false;
                  continue;
                case ')':
                  if (inClass || !patternListStack.length) {
                    re += '\\)';
                    continue;
                  }
                  clearStateChar();
                  hasMagic = true;
                  re += ')';
                  var pl = patternListStack.pop();
                  plType = pl.type;
                  switch (plType) {
                    case '!':
                      negativeLists.push(pl);
                      re += ')[^/]*?)';
                      pl.reEnd = re.length;
                      break;
                    case '?':
                    case '+':
                    case '*':
                      re += plType;
                      break;
                    case '@':
                      break;
                  }
                  continue;
                case '|':
                  if (inClass || !patternListStack.length || escaping) {
                    re += '\\|';
                    escaping = false;
                    continue;
                  }
                  clearStateChar();
                  re += '|';
                  continue;
                case '[':
                  clearStateChar();
                  if (inClass) {
                    re += '\\' + c;
                    continue;
                  }
                  inClass = true;
                  classStart = i;
                  reClassStart = re.length;
                  re += c;
                  continue;
                case ']':
                  if (i === classStart + 1 || !inClass) {
                    re += '\\' + c;
                    escaping = false;
                    continue;
                  }
                  if (inClass) {
                    var cs = pattern.substring(classStart + 1, i);
                    try {
                      RegExp('[' + cs + ']');
                    } catch (er) {
                      var sp = this.parse(cs, SUBPARSE);
                      re = re.substr(0, reClassStart) + '\\[' + sp[0] + '\\]';
                      hasMagic = hasMagic || sp[1];
                      inClass = false;
                      continue;
                    }
                  }
                  hasMagic = true;
                  inClass = false;
                  re += c;
                  continue;
                default:
                  clearStateChar();
                  if (escaping) {
                    escaping = false;
                  } else if (reSpecials[c] && !(c === '^' && inClass)) {
                    re += '\\';
                  }
                  re += c;
              }
            }
            if (inClass) {
              cs = pattern.substr(classStart + 1);
              sp = this.parse(cs, SUBPARSE);
              re = re.substr(0, reClassStart) + '\\[' + sp[0];
              hasMagic = hasMagic || sp[1];
            }
            for (pl = patternListStack.pop(); pl; pl = patternListStack.pop()) {
              var tail = re.slice(pl.reStart + 3);
              tail = tail.replace(/((?:\\{2})*)(\\?)\|/g, function(_, $1, $2) {
                if (!$2) {
                  $2 = '\\';
                }
                return $1 + $1 + $2 + '|';
              });
              this.debug('tail=%j\n   %s', tail, tail);
              var t = pl.type === '*' ? star : pl.type === '?' ? qmark : '\\' + pl.type;
              hasMagic = true;
              re = re.slice(0, pl.reStart) + t + '\\(' + tail;
            }
            clearStateChar();
            if (escaping) {
              re += '\\\\';
            }
            var addPatternStart = false;
            switch (re.charAt(0)) {
              case '.':
              case '[':
              case '(':
                addPatternStart = true;
            }
            for (var n = negativeLists.length - 1; n > -1; n--) {
              var nl = negativeLists[n];
              var nlBefore = re.slice(0, nl.reStart);
              var nlFirst = re.slice(nl.reStart, nl.reEnd - 8);
              var nlLast = re.slice(nl.reEnd - 8, nl.reEnd);
              var nlAfter = re.slice(nl.reEnd);
              nlLast += nlAfter;
              var openParensBefore = nlBefore.split('(').length - 1;
              var cleanAfter = nlAfter;
              for (i = 0; i < openParensBefore; i++) {
                cleanAfter = cleanAfter.replace(/\)[+*?]?/, '');
              }
              nlAfter = cleanAfter;
              var dollar = '';
              if (nlAfter === '' && isSub !== SUBPARSE) {
                dollar = '$';
              }
              var newRe = nlBefore + nlFirst + nlAfter + dollar + nlLast;
              re = newRe;
            }
            if (re !== '' && hasMagic) {
              re = '(?=.)' + re;
            }
            if (addPatternStart) {
              re = patternStart + re;
            }
            if (isSub === SUBPARSE) {
              return [re, hasMagic];
            }
            if (!hasMagic) {
              return globUnescape(pattern);
            }
            var flags = options.nocase ? 'i' : '';
            var regExp = new RegExp('^' + re + '$', flags);
            regExp._glob = pattern;
            regExp._src = re;
            return regExp;
          }
          minimatch.makeRe = function(pattern, options) {
            return new Minimatch(pattern, options || {}).makeRe();
          };
          Minimatch.prototype.makeRe = makeRe;
          function makeRe() {
            if (this.regexp || this.regexp === false)
              return this.regexp;
            var set = this.set;
            if (!set.length) {
              this.regexp = false;
              return this.regexp;
            }
            var options = this.options;
            var twoStar = options.noglobstar ? star : options.dot ? twoStarDot : twoStarNoDot;
            var flags = options.nocase ? 'i' : '';
            var re = set.map(function(pattern) {
              return pattern.map(function(p) {
                return (p === GLOBSTAR) ? twoStar : (typeof p === 'string') ? regExpEscape(p) : p._src;
              }).join('\\\/');
            }).join('|');
            re = '^(?:' + re + ')$';
            if (this.negate)
              re = '^(?!' + re + ').*$';
            try {
              this.regexp = new RegExp(re, flags);
            } catch (ex) {
              this.regexp = false;
            }
            return this.regexp;
          }
          minimatch.match = function(list, pattern, options) {
            options = options || {};
            var mm = new Minimatch(pattern, options);
            list = list.filter(function(f) {
              return mm.match(f);
            });
            if (mm.options.nonull && !list.length) {
              list.push(pattern);
            }
            return list;
          };
          Minimatch.prototype.match = match;
          function match(f, partial) {
            this.debug('match', f, this.pattern);
            if (this.comment)
              return false;
            if (this.empty)
              return f === '';
            if (f === '/' && partial)
              return true;
            var options = this.options;
            if (path.sep !== '/') {
              f = f.split(path.sep).join('/');
            }
            f = f.split(slashSplit);
            this.debug(this.pattern, 'split', f);
            var set = this.set;
            this.debug(this.pattern, 'set', set);
            var filename;
            var i;
            for (i = f.length - 1; i >= 0; i--) {
              filename = f[i];
              if (filename)
                break;
            }
            for (i = 0; i < set.length; i++) {
              var pattern = set[i];
              var file = f;
              if (options.matchBase && pattern.length === 1) {
                file = [filename];
              }
              var hit = this.matchOne(file, pattern, partial);
              if (hit) {
                if (options.flipNegate)
                  return true;
                return !this.negate;
              }
            }
            if (options.flipNegate)
              return false;
            return this.negate;
          }
          Minimatch.prototype.matchOne = function(file, pattern, partial) {
            var options = this.options;
            this.debug('matchOne', {
              'this': this,
              file: file,
              pattern: pattern
            });
            this.debug('matchOne', file.length, pattern.length);
            for (var fi = 0,
                pi = 0,
                fl = file.length,
                pl = pattern.length; (fi < fl) && (pi < pl); fi++, pi++) {
              this.debug('matchOne loop');
              var p = pattern[pi];
              var f = file[fi];
              this.debug(pattern, p, f);
              if (p === false)
                return false;
              if (p === GLOBSTAR) {
                this.debug('GLOBSTAR', [pattern, p, f]);
                var fr = fi;
                var pr = pi + 1;
                if (pr === pl) {
                  this.debug('** at the end');
                  for (; fi < fl; fi++) {
                    if (file[fi] === '.' || file[fi] === '..' || (!options.dot && file[fi].charAt(0) === '.'))
                      return false;
                  }
                  return true;
                }
                while (fr < fl) {
                  var swallowee = file[fr];
                  this.debug('\nglobstar while', file, fr, pattern, pr, swallowee);
                  if (this.matchOne(file.slice(fr), pattern.slice(pr), partial)) {
                    this.debug('globstar found match!', fr, fl, swallowee);
                    return true;
                  } else {
                    if (swallowee === '.' || swallowee === '..' || (!options.dot && swallowee.charAt(0) === '.')) {
                      this.debug('dot detected!', file, fr, pattern, pr);
                      break;
                    }
                    this.debug('globstar swallow a segment, and continue');
                    fr++;
                  }
                }
                if (partial) {
                  this.debug('\n>>> no match, partial?', file, fr, pattern, pr);
                  if (fr === fl)
                    return true;
                }
                return false;
              }
              var hit;
              if (typeof p === 'string') {
                if (options.nocase) {
                  hit = f.toLowerCase() === p.toLowerCase();
                } else {
                  hit = f === p;
                }
                this.debug('string match', p, f, hit);
              } else {
                hit = f.match(p);
                this.debug('pattern match', p, f, hit);
              }
              if (!hit)
                return false;
            }
            if (fi === fl && pi === pl) {
              return true;
            } else if (fi === fl) {
              return partial;
            } else if (pi === pl) {
              var emptyFileEnd = (fi === fl - 1) && (file[fi] === '');
              return emptyFileEnd;
            }
            throw new Error('wtf?');
          };
          function globUnescape(s) {
            return s.replace(/\\(.)/g, '$1');
          }
          function regExpEscape(s) {
            return s.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&');
          }
        }, {
          "220": 220,
          "9": 9
        }],
        556: [function(_dereq_, module, exports) {
          var s = 1000;
          var m = s * 60;
          var h = m * 60;
          var d = h * 24;
          var y = d * 365.25;
          module.exports = function(val, options) {
            options = options || {};
            if ('string' == typeof val)
              return parse(val);
            return options.long ? long(val) : short(val);
          };
          function parse(str) {
            str = '' + str;
            if (str.length > 10000)
              return;
            var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);
            if (!match)
              return;
            var n = parseFloat(match[1]);
            var type = (match[2] || 'ms').toLowerCase();
            switch (type) {
              case 'years':
              case 'year':
              case 'yrs':
              case 'yr':
              case 'y':
                return n * y;
              case 'days':
              case 'day':
              case 'd':
                return n * d;
              case 'hours':
              case 'hour':
              case 'hrs':
              case 'hr':
              case 'h':
                return n * h;
              case 'minutes':
              case 'minute':
              case 'mins':
              case 'min':
              case 'm':
                return n * m;
              case 'seconds':
              case 'second':
              case 'secs':
              case 'sec':
              case 's':
                return n * s;
              case 'milliseconds':
              case 'millisecond':
              case 'msecs':
              case 'msec':
              case 'ms':
                return n;
            }
          }
          function short(ms) {
            if (ms >= d)
              return Math.round(ms / d) + 'd';
            if (ms >= h)
              return Math.round(ms / h) + 'h';
            if (ms >= m)
              return Math.round(ms / m) + 'm';
            if (ms >= s)
              return Math.round(ms / s) + 's';
            return ms + 'ms';
          }
          function long(ms) {
            return plural(ms, d, 'day') || plural(ms, h, 'hour') || plural(ms, m, 'minute') || plural(ms, s, 'second') || ms + ' ms';
          }
          function plural(ms, n, name) {
            if (ms < n)
              return;
            if (ms < n * 1.5)
              return Math.floor(ms / n) + ' ' + name;
            return Math.ceil(ms / n) + ' ' + name + 's';
          }
        }, {}],
        557: [function(_dereq_, module, exports) {
          'use strict';
          module.exports = Number.isNaN || function(x) {
            return x !== x;
          };
        }, {}],
        558: [function(_dereq_, module, exports) {
          'use strict';
          var fs = _dereq_(3);
          module.exports = function(pth, cb) {
            var fn = typeof fs.access === 'function' ? fs.access : fs.stat;
            fn(pth, function(err) {
              cb(null, !err);
            });
          };
          module.exports.sync = function(pth) {
            var fn = typeof fs.accessSync === 'function' ? fs.accessSync : fs.statSync;
            try {
              fn(pth);
              return true;
            } catch (err) {
              return false;
            }
          };
        }, {"3": 3}],
        559: [function(_dereq_, module, exports) {
          (function(process) {
            'use strict';
            function posix(path) {
              return path.charAt(0) === '/';
            }
            ;
            function win32(path) {
              var splitDeviceRe = /^([a-zA-Z]:|[\\\/]{2}[^\\\/]+[\\\/]+[^\\\/]+)?([\\\/])?([\s\S]*?)$/;
              var result = splitDeviceRe.exec(path);
              var device = result[1] || '';
              var isUnc = !!device && device.charAt(1) !== ':';
              return !!result[2] || isUnc;
            }
            ;
            module.exports = process.platform === 'win32' ? win32 : posix;
            module.exports.posix = posix;
            module.exports.win32 = win32;
          }).call(this, _dereq_(10));
        }, {"10": 10}],
        560: [function(_dereq_, module, exports) {
          "use strict";
          var originalObject = Object;
          var originalDefProp = Object.defineProperty;
          var originalCreate = Object.create;
          function defProp(obj, name, value) {
            if (originalDefProp)
              try {
                originalDefProp.call(originalObject, obj, name, {value: value});
              } catch (definePropertyIsBrokenInIE8) {
                obj[name] = value;
              }
            else {
              obj[name] = value;
            }
          }
          function makeSafeToCall(fun) {
            if (fun) {
              defProp(fun, "call", fun.call);
              defProp(fun, "apply", fun.apply);
            }
            return fun;
          }
          makeSafeToCall(originalDefProp);
          makeSafeToCall(originalCreate);
          var hasOwn = makeSafeToCall(Object.prototype.hasOwnProperty);
          var numToStr = makeSafeToCall(Number.prototype.toString);
          var strSlice = makeSafeToCall(String.prototype.slice);
          var cloner = function() {};
          function create(prototype) {
            if (originalCreate) {
              return originalCreate.call(originalObject, prototype);
            }
            cloner.prototype = prototype || null;
            return new cloner;
          }
          var rand = Math.random;
          var uniqueKeys = create(null);
          function makeUniqueKey() {
            do
              var uniqueKey = internString(strSlice.call(numToStr.call(rand(), 36), 2));
 while (hasOwn.call(uniqueKeys, uniqueKey));
            return uniqueKeys[uniqueKey] = uniqueKey;
          }
          function internString(str) {
            var obj = {};
            obj[str] = true;
            return Object.keys(obj)[0];
          }
          defProp(exports, "makeUniqueKey", makeUniqueKey);
          var originalGetOPNs = Object.getOwnPropertyNames;
          Object.getOwnPropertyNames = function getOwnPropertyNames(object) {
            for (var names = originalGetOPNs(object),
                src = 0,
                dst = 0,
                len = names.length; src < len; ++src) {
              if (!hasOwn.call(uniqueKeys, names[src])) {
                if (src > dst) {
                  names[dst] = names[src];
                }
                ++dst;
              }
            }
            names.length = dst;
            return names;
          };
          function defaultCreatorFn(object) {
            return create(null);
          }
          function makeAccessor(secretCreatorFn) {
            var brand = makeUniqueKey();
            var passkey = create(null);
            secretCreatorFn = secretCreatorFn || defaultCreatorFn;
            function register(object) {
              var secret;
              function vault(key, forget) {
                if (key === passkey) {
                  return forget ? secret = null : secret || (secret = secretCreatorFn(object));
                }
              }
              defProp(object, brand, vault);
            }
            function accessor(object) {
              if (!hasOwn.call(object, brand))
                register(object);
              return object[brand](passkey);
            }
            accessor.forget = function(object) {
              if (hasOwn.call(object, brand))
                object[brand](passkey, true);
            };
            return accessor;
          }
          defProp(exports, "makeAccessor", makeAccessor);
        }, {}],
        561: [function(_dereq_, module, exports) {
          var assert = _dereq_(1);
          var types = _dereq_(569);
          var n = types.namedTypes;
          var isArray = types.builtInTypes.array;
          var isObject = types.builtInTypes.object;
          var linesModule = _dereq_(563);
          var fromString = linesModule.fromString;
          var Lines = linesModule.Lines;
          var concat = linesModule.concat;
          var util = _dereq_(570);
          var comparePos = util.comparePos;
          var childNodesCacheKey = _dereq_(560).makeUniqueKey();
          function getSortedChildNodes(node, resultArray) {
            if (!node) {
              return;
            }
            util.fixFaultyLocations(node);
            if (resultArray) {
              if (n.Node.check(node) && n.SourceLocation.check(node.loc)) {
                for (var i = resultArray.length - 1; i >= 0; --i) {
                  if (comparePos(resultArray[i].loc.end, node.loc.start) <= 0) {
                    break;
                  }
                }
                resultArray.splice(i + 1, 0, node);
                return;
              }
            } else if (node[childNodesCacheKey]) {
              return node[childNodesCacheKey];
            }
            var names;
            if (isArray.check(node)) {
              names = Object.keys(node);
            } else if (isObject.check(node)) {
              names = types.getFieldNames(node);
            } else {
              return;
            }
            if (!resultArray) {
              Object.defineProperty(node, childNodesCacheKey, {
                value: resultArray = [],
                enumerable: false
              });
            }
            for (var i = 0,
                nameCount = names.length; i < nameCount; ++i) {
              getSortedChildNodes(node[names[i]], resultArray);
            }
            return resultArray;
          }
          function decorateComment(node, comment) {
            var childNodes = getSortedChildNodes(node);
            var left = 0,
                right = childNodes.length;
            while (left < right) {
              var middle = (left + right) >> 1;
              var child = childNodes[middle];
              if (comparePos(child.loc.start, comment.loc.start) <= 0 && comparePos(comment.loc.end, child.loc.end) <= 0) {
                decorateComment(comment.enclosingNode = child, comment);
                return;
              }
              if (comparePos(child.loc.end, comment.loc.start) <= 0) {
                var precedingNode = child;
                left = middle + 1;
                continue;
              }
              if (comparePos(comment.loc.end, child.loc.start) <= 0) {
                var followingNode = child;
                right = middle;
                continue;
              }
              throw new Error("Comment location overlaps with node location");
            }
            if (precedingNode) {
              comment.precedingNode = precedingNode;
            }
            if (followingNode) {
              comment.followingNode = followingNode;
            }
          }
          exports.attach = function(comments, ast, lines) {
            if (!isArray.check(comments)) {
              return;
            }
            var tiesToBreak = [];
            comments.forEach(function(comment) {
              comment.loc.lines = lines;
              decorateComment(ast, comment);
              var pn = comment.precedingNode;
              var en = comment.enclosingNode;
              var fn = comment.followingNode;
              if (pn && fn) {
                var tieCount = tiesToBreak.length;
                if (tieCount > 0) {
                  var lastTie = tiesToBreak[tieCount - 1];
                  assert.strictEqual(lastTie.precedingNode === comment.precedingNode, lastTie.followingNode === comment.followingNode);
                  if (lastTie.followingNode !== comment.followingNode) {
                    breakTies(tiesToBreak, lines);
                  }
                }
                tiesToBreak.push(comment);
              } else if (pn) {
                breakTies(tiesToBreak, lines);
                addTrailingComment(pn, comment);
              } else if (fn) {
                breakTies(tiesToBreak, lines);
                addLeadingComment(fn, comment);
              } else if (en) {
                breakTies(tiesToBreak, lines);
                addDanglingComment(en, comment);
              } else {
                throw new Error("AST contains no nodes at all?");
              }
            });
            breakTies(tiesToBreak, lines);
            comments.forEach(function(comment) {
              delete comment.precedingNode;
              delete comment.enclosingNode;
              delete comment.followingNode;
            });
          };
          function breakTies(tiesToBreak, lines) {
            var tieCount = tiesToBreak.length;
            if (tieCount === 0) {
              return;
            }
            var pn = tiesToBreak[0].precedingNode;
            var fn = tiesToBreak[0].followingNode;
            var gapEndPos = fn.loc.start;
            for (var indexOfFirstLeadingComment = tieCount; indexOfFirstLeadingComment > 0; --indexOfFirstLeadingComment) {
              var comment = tiesToBreak[indexOfFirstLeadingComment - 1];
              assert.strictEqual(comment.precedingNode, pn);
              assert.strictEqual(comment.followingNode, fn);
              var gap = lines.sliceString(comment.loc.end, gapEndPos);
              if (/\S/.test(gap)) {
                break;
              }
              gapEndPos = comment.loc.start;
            }
            while (indexOfFirstLeadingComment <= tieCount && (comment = tiesToBreak[indexOfFirstLeadingComment]) && comment.type === "Line" && comment.loc.start.column > fn.loc.start.column) {
              ++indexOfFirstLeadingComment;
            }
            tiesToBreak.forEach(function(comment, i) {
              if (i < indexOfFirstLeadingComment) {
                addTrailingComment(pn, comment);
              } else {
                addLeadingComment(fn, comment);
              }
            });
            tiesToBreak.length = 0;
          }
          function addCommentHelper(node, comment) {
            var comments = node.comments || (node.comments = []);
            comments.push(comment);
          }
          function addLeadingComment(node, comment) {
            comment.leading = true;
            comment.trailing = false;
            addCommentHelper(node, comment);
          }
          function addDanglingComment(node, comment) {
            comment.leading = false;
            comment.trailing = false;
            addCommentHelper(node, comment);
          }
          function addTrailingComment(node, comment) {
            comment.leading = false;
            comment.trailing = true;
            addCommentHelper(node, comment);
          }
          function printLeadingComment(commentPath, print) {
            var comment = commentPath.getValue();
            n.Comment.assert(comment);
            var loc = comment.loc;
            var lines = loc && loc.lines;
            var parts = [print(commentPath)];
            if (comment.trailing) {
              parts.push("\n");
            } else if (lines instanceof Lines) {
              var trailingSpace = lines.slice(loc.end, lines.skipSpaces(loc.end));
              if (trailingSpace.length === 1) {
                parts.push(trailingSpace);
              } else {
                parts.push(new Array(trailingSpace.length).join("\n"));
              }
            } else {
              parts.push("\n");
            }
            return concat(parts);
          }
          function printTrailingComment(commentPath, print) {
            var comment = commentPath.getValue(commentPath);
            n.Comment.assert(comment);
            var loc = comment.loc;
            var lines = loc && loc.lines;
            var parts = [];
            if (lines instanceof Lines) {
              var fromPos = lines.skipSpaces(loc.start, true) || lines.firstPos();
              var leadingSpace = lines.slice(fromPos, loc.start);
              if (leadingSpace.length === 1) {
                parts.push(leadingSpace);
              } else {
                parts.push(new Array(leadingSpace.length).join("\n"));
              }
            }
            parts.push(print(commentPath));
            return concat(parts);
          }
          exports.printComments = function(path, print) {
            var value = path.getValue();
            var innerLines = print(path);
            var comments = n.Node.check(value) && types.getFieldValue(value, "comments");
            if (!comments || comments.length === 0) {
              return innerLines;
            }
            var leadingParts = [];
            var trailingParts = [innerLines];
            path.each(function(commentPath) {
              var comment = commentPath.getValue();
              var leading = types.getFieldValue(comment, "leading");
              var trailing = types.getFieldValue(comment, "trailing");
              if (leading || (trailing && comment.type !== "Block")) {
                leadingParts.push(printLeadingComment(commentPath, print));
              } else if (trailing) {
                assert.strictEqual(comment.type, "Block");
                trailingParts.push(printTrailingComment(commentPath, print));
              }
            }, "comments");
            leadingParts.push.apply(leadingParts, trailingParts);
            return concat(leadingParts);
          };
        }, {
          "1": 1,
          "560": 560,
          "563": 563,
          "569": 569,
          "570": 570
        }],
        562: [function(_dereq_, module, exports) {
          var assert = _dereq_(1);
          var types = _dereq_(569);
          var n = types.namedTypes;
          var Node = n.Node;
          var isArray = types.builtInTypes.array;
          var isNumber = types.builtInTypes.number;
          function FastPath(value) {
            assert.ok(this instanceof FastPath);
            this.stack = [value];
          }
          var FPp = FastPath.prototype;
          module.exports = FastPath;
          FastPath.from = function(obj) {
            if (obj instanceof FastPath) {
              return obj.copy();
            }
            if (obj instanceof types.NodePath) {
              var copy = Object.create(FastPath.prototype);
              var stack = [obj.value];
              for (var pp; (pp = obj.parentPath); obj = pp)
                stack.push(obj.name, pp.value);
              copy.stack = stack.reverse();
              return copy;
            }
            return new FastPath(obj);
          };
          FPp.copy = function copy() {
            var copy = Object.create(FastPath.prototype);
            copy.stack = this.stack.slice(0);
            return copy;
          };
          FPp.getName = function getName() {
            var s = this.stack;
            var len = s.length;
            if (len > 1) {
              return s[len - 2];
            }
            return null;
          };
          FPp.getValue = function getValue() {
            var s = this.stack;
            return s[s.length - 1];
          };
          function getNodeHelper(path, count) {
            var s = path.stack;
            for (var i = s.length - 1; i >= 0; i -= 2) {
              var value = s[i];
              if (n.Node.check(value) && --count < 0) {
                return value;
              }
            }
            return null;
          }
          FPp.getNode = function getNode(count) {
            return getNodeHelper(this, ~~count);
          };
          FPp.getParentNode = function getParentNode(count) {
            return getNodeHelper(this, ~~count + 1);
          };
          FPp.getRootValue = function getRootValue() {
            var s = this.stack;
            if (s.length % 2 === 0) {
              return s[1];
            }
            return s[0];
          };
          FPp.call = function call(callback) {
            var s = this.stack;
            var origLen = s.length;
            var value = s[origLen - 1];
            var argc = arguments.length;
            for (var i = 1; i < argc; ++i) {
              var name = arguments[i];
              value = value[name];
              s.push(name, value);
            }
            var result = callback(this);
            s.length = origLen;
            return result;
          };
          FPp.each = function each(callback) {
            var s = this.stack;
            var origLen = s.length;
            var value = s[origLen - 1];
            var argc = arguments.length;
            for (var i = 1; i < argc; ++i) {
              var name = arguments[i];
              value = value[name];
              s.push(name, value);
            }
            for (var i = 0; i < value.length; ++i) {
              if (i in value) {
                s.push(i, value[i]);
                callback(this);
                s.length -= 2;
              }
            }
            s.length = origLen;
          };
          FPp.map = function map(callback) {
            var s = this.stack;
            var origLen = s.length;
            var value = s[origLen - 1];
            var argc = arguments.length;
            for (var i = 1; i < argc; ++i) {
              var name = arguments[i];
              value = value[name];
              s.push(name, value);
            }
            var result = new Array(value.length);
            for (var i = 0; i < value.length; ++i) {
              if (i in value) {
                s.push(i, value[i]);
                result[i] = callback(this, i);
                s.length -= 2;
              }
            }
            s.length = origLen;
            return result;
          };
          FPp.needsParens = function(assumeExpressionContext) {
            var parent = this.getParentNode();
            if (!parent) {
              return false;
            }
            var name = this.getName();
            var node = this.getNode();
            if (this.getValue() !== node) {
              return false;
            }
            if (!n.Expression.check(node)) {
              return false;
            }
            if (node.type === "Identifier") {
              return false;
            }
            if (parent.type === "ParenthesizedExpression") {
              return false;
            }
            switch (node.type) {
              case "UnaryExpression":
              case "SpreadElement":
              case "SpreadProperty":
                return parent.type === "MemberExpression" && name === "object" && parent.object === node;
              case "BinaryExpression":
              case "LogicalExpression":
                switch (parent.type) {
                  case "CallExpression":
                    return name === "callee" && parent.callee === node;
                  case "UnaryExpression":
                  case "SpreadElement":
                  case "SpreadProperty":
                    return true;
                  case "MemberExpression":
                    return name === "object" && parent.object === node;
                  case "BinaryExpression":
                  case "LogicalExpression":
                    var po = parent.operator;
                    var pp = PRECEDENCE[po];
                    var no = node.operator;
                    var np = PRECEDENCE[no];
                    if (pp > np) {
                      return true;
                    }
                    if (pp === np && name === "right") {
                      assert.strictEqual(parent.right, node);
                      return true;
                    }
                  default:
                    return false;
                }
              case "SequenceExpression":
                switch (parent.type) {
                  case "ForStatement":
                    return false;
                  case "ExpressionStatement":
                    return name !== "expression";
                  default:
                    return true;
                }
              case "YieldExpression":
                switch (parent.type) {
                  case "BinaryExpression":
                  case "LogicalExpression":
                  case "UnaryExpression":
                  case "SpreadElement":
                  case "SpreadProperty":
                  case "CallExpression":
                  case "MemberExpression":
                  case "NewExpression":
                  case "ConditionalExpression":
                  case "YieldExpression":
                    return true;
                  default:
                    return false;
                }
              case "Literal":
                return parent.type === "MemberExpression" && isNumber.check(node.value) && name === "object" && parent.object === node;
              case "AssignmentExpression":
              case "ConditionalExpression":
                switch (parent.type) {
                  case "UnaryExpression":
                  case "SpreadElement":
                  case "SpreadProperty":
                  case "BinaryExpression":
                  case "LogicalExpression":
                    return true;
                  case "CallExpression":
                    return name === "callee" && parent.callee === node;
                  case "ConditionalExpression":
                    return name === "test" && parent.test === node;
                  case "MemberExpression":
                    return name === "object" && parent.object === node;
                  default:
                    return false;
                }
              case "ArrowFunctionExpression":
                return isBinary(parent);
              case "ObjectExpression":
                if (parent.type === "ArrowFunctionExpression" && name === "body") {
                  return true;
                }
              default:
                if (parent.type === "NewExpression" && name === "callee" && parent.callee === node) {
                  return containsCallExpression(node);
                }
            }
            if (assumeExpressionContext !== true && !this.canBeFirstInStatement() && this.firstInStatement())
              return true;
            return false;
          };
          function isBinary(node) {
            return n.BinaryExpression.check(node) || n.LogicalExpression.check(node);
          }
          function isUnaryLike(node) {
            return n.UnaryExpression.check(node) || (n.SpreadElement && n.SpreadElement.check(node)) || (n.SpreadProperty && n.SpreadProperty.check(node));
          }
          var PRECEDENCE = {};
          [["||"], ["&&"], ["|"], ["^"], ["&"], ["==", "===", "!=", "!=="], ["<", ">", "<=", ">=", "in", "instanceof"], [">>", "<<", ">>>"], ["+", "-"], ["*", "/", "%"]].forEach(function(tier, i) {
            tier.forEach(function(op) {
              PRECEDENCE[op] = i;
            });
          });
          function containsCallExpression(node) {
            if (n.CallExpression.check(node)) {
              return true;
            }
            if (isArray.check(node)) {
              return node.some(containsCallExpression);
            }
            if (n.Node.check(node)) {
              return types.someField(node, function(name, child) {
                return containsCallExpression(child);
              });
            }
            return false;
          }
          FPp.canBeFirstInStatement = function() {
            var node = this.getNode();
            return !n.FunctionExpression.check(node) && !n.ObjectExpression.check(node);
          };
          FPp.firstInStatement = function() {
            var s = this.stack;
            var parentName,
                parent;
            var childName,
                child;
            for (var i = s.length - 1; i >= 0; i -= 2) {
              if (n.Node.check(s[i])) {
                childName = parentName;
                child = parent;
                parentName = s[i - 1];
                parent = s[i];
              }
              if (!parent || !child) {
                continue;
              }
              if (n.BlockStatement.check(parent) && parentName === "body" && childName === 0) {
                assert.strictEqual(parent.body[0], child);
                return true;
              }
              if (n.ExpressionStatement.check(parent) && childName === "expression") {
                assert.strictEqual(parent.expression, child);
                return true;
              }
              if (n.SequenceExpression.check(parent) && parentName === "expressions" && childName === 0) {
                assert.strictEqual(parent.expressions[0], child);
                continue;
              }
              if (n.CallExpression.check(parent) && childName === "callee") {
                assert.strictEqual(parent.callee, child);
                continue;
              }
              if (n.MemberExpression.check(parent) && childName === "object") {
                assert.strictEqual(parent.object, child);
                continue;
              }
              if (n.ConditionalExpression.check(parent) && childName === "test") {
                assert.strictEqual(parent.test, child);
                continue;
              }
              if (isBinary(parent) && childName === "left") {
                assert.strictEqual(parent.left, child);
                continue;
              }
              if (n.UnaryExpression.check(parent) && !parent.prefix && childName === "argument") {
                assert.strictEqual(parent.argument, child);
                continue;
              }
              return false;
            }
            return true;
          };
        }, {
          "1": 1,
          "569": 569
        }],
        563: [function(_dereq_, module, exports) {
          var assert = _dereq_(1);
          var sourceMap = _dereq_(601);
          var normalizeOptions = _dereq_(565).normalize;
          var secretKey = _dereq_(560).makeUniqueKey();
          var types = _dereq_(569);
          var isString = types.builtInTypes.string;
          var comparePos = _dereq_(570).comparePos;
          var Mapping = _dereq_(564);
          function getSecret(lines) {
            return lines[secretKey];
          }
          function Lines(infos, sourceFileName) {
            assert.ok(this instanceof Lines);
            assert.ok(infos.length > 0);
            if (sourceFileName) {
              isString.assert(sourceFileName);
            } else {
              sourceFileName = null;
            }
            Object.defineProperty(this, secretKey, {value: {
                infos: infos,
                mappings: [],
                name: sourceFileName,
                cachedSourceMap: null
              }});
            if (sourceFileName) {
              getSecret(this).mappings.push(new Mapping(this, {
                start: this.firstPos(),
                end: this.lastPos()
              }));
            }
          }
          exports.Lines = Lines;
          var Lp = Lines.prototype;
          Object.defineProperties(Lp, {
            length: {get: function() {
                return getSecret(this).infos.length;
              }},
            name: {get: function() {
                return getSecret(this).name;
              }}
          });
          function copyLineInfo(info) {
            return {
              line: info.line,
              indent: info.indent,
              sliceStart: info.sliceStart,
              sliceEnd: info.sliceEnd
            };
          }
          var fromStringCache = {};
          var hasOwn = fromStringCache.hasOwnProperty;
          var maxCacheKeyLen = 10;
          function countSpaces(spaces, tabWidth) {
            var count = 0;
            var len = spaces.length;
            for (var i = 0; i < len; ++i) {
              switch (spaces.charCodeAt(i)) {
                case 9:
                  assert.strictEqual(typeof tabWidth, "number");
                  assert.ok(tabWidth > 0);
                  var next = Math.ceil(count / tabWidth) * tabWidth;
                  if (next === count) {
                    count += tabWidth;
                  } else {
                    count = next;
                  }
                  break;
                case 11:
                case 12:
                case 13:
                case 0xfeff:
                  break;
                case 32:
                default:
                  count += 1;
                  break;
              }
            }
            return count;
          }
          exports.countSpaces = countSpaces;
          var leadingSpaceExp = /^\s*/;
          var lineTerminatorSeqExp = /\u000D\u000A|\u000D(?!\u000A)|\u000A|\u2028|\u2029/;
          function fromString(string, options) {
            if (string instanceof Lines)
              return string;
            string += "";
            var tabWidth = options && options.tabWidth;
            var tabless = string.indexOf("\t") < 0;
            var cacheable = !options && tabless && (string.length <= maxCacheKeyLen);
            assert.ok(tabWidth || tabless, "No tab width specified but encountered tabs in string\n" + string);
            if (cacheable && hasOwn.call(fromStringCache, string))
              return fromStringCache[string];
            var lines = new Lines(string.split(lineTerminatorSeqExp).map(function(line) {
              var spaces = leadingSpaceExp.exec(line)[0];
              return {
                line: line,
                indent: countSpaces(spaces, tabWidth),
                sliceStart: spaces.length,
                sliceEnd: line.length
              };
            }), normalizeOptions(options).sourceFileName);
            if (cacheable)
              fromStringCache[string] = lines;
            return lines;
          }
          exports.fromString = fromString;
          function isOnlyWhitespace(string) {
            return !/\S/.test(string);
          }
          Lp.toString = function(options) {
            return this.sliceString(this.firstPos(), this.lastPos(), options);
          };
          Lp.getSourceMap = function(sourceMapName, sourceRoot) {
            if (!sourceMapName) {
              return null;
            }
            var targetLines = this;
            function updateJSON(json) {
              json = json || {};
              isString.assert(sourceMapName);
              json.file = sourceMapName;
              if (sourceRoot) {
                isString.assert(sourceRoot);
                json.sourceRoot = sourceRoot;
              }
              return json;
            }
            var secret = getSecret(targetLines);
            if (secret.cachedSourceMap) {
              return updateJSON(secret.cachedSourceMap.toJSON());
            }
            var smg = new sourceMap.SourceMapGenerator(updateJSON());
            var sourcesToContents = {};
            secret.mappings.forEach(function(mapping) {
              var sourceCursor = mapping.sourceLines.skipSpaces(mapping.sourceLoc.start) || mapping.sourceLines.lastPos();
              var targetCursor = targetLines.skipSpaces(mapping.targetLoc.start) || targetLines.lastPos();
              while (comparePos(sourceCursor, mapping.sourceLoc.end) < 0 && comparePos(targetCursor, mapping.targetLoc.end) < 0) {
                var sourceChar = mapping.sourceLines.charAt(sourceCursor);
                var targetChar = targetLines.charAt(targetCursor);
                assert.strictEqual(sourceChar, targetChar);
                var sourceName = mapping.sourceLines.name;
                smg.addMapping({
                  source: sourceName,
                  original: {
                    line: sourceCursor.line,
                    column: sourceCursor.column
                  },
                  generated: {
                    line: targetCursor.line,
                    column: targetCursor.column
                  }
                });
                if (!hasOwn.call(sourcesToContents, sourceName)) {
                  var sourceContent = mapping.sourceLines.toString();
                  smg.setSourceContent(sourceName, sourceContent);
                  sourcesToContents[sourceName] = sourceContent;
                }
                targetLines.nextPos(targetCursor, true);
                mapping.sourceLines.nextPos(sourceCursor, true);
              }
            });
            secret.cachedSourceMap = smg;
            return smg.toJSON();
          };
          Lp.bootstrapCharAt = function(pos) {
            assert.strictEqual(typeof pos, "object");
            assert.strictEqual(typeof pos.line, "number");
            assert.strictEqual(typeof pos.column, "number");
            var line = pos.line,
                column = pos.column,
                strings = this.toString().split(lineTerminatorSeqExp),
                string = strings[line - 1];
            if (typeof string === "undefined")
              return "";
            if (column === string.length && line < strings.length)
              return "\n";
            if (column >= string.length)
              return "";
            return string.charAt(column);
          };
          Lp.charAt = function(pos) {
            assert.strictEqual(typeof pos, "object");
            assert.strictEqual(typeof pos.line, "number");
            assert.strictEqual(typeof pos.column, "number");
            var line = pos.line,
                column = pos.column,
                secret = getSecret(this),
                infos = secret.infos,
                info = infos[line - 1],
                c = column;
            if (typeof info === "undefined" || c < 0)
              return "";
            var indent = this.getIndentAt(line);
            if (c < indent)
              return " ";
            c += info.sliceStart - indent;
            if (c === info.sliceEnd && line < this.length)
              return "\n";
            if (c >= info.sliceEnd)
              return "";
            return info.line.charAt(c);
          };
          Lp.stripMargin = function(width, skipFirstLine) {
            if (width === 0)
              return this;
            assert.ok(width > 0, "negative margin: " + width);
            if (skipFirstLine && this.length === 1)
              return this;
            var secret = getSecret(this);
            var lines = new Lines(secret.infos.map(function(info, i) {
              if (info.line && (i > 0 || !skipFirstLine)) {
                info = copyLineInfo(info);
                info.indent = Math.max(0, info.indent - width);
              }
              return info;
            }));
            if (secret.mappings.length > 0) {
              var newMappings = getSecret(lines).mappings;
              assert.strictEqual(newMappings.length, 0);
              secret.mappings.forEach(function(mapping) {
                newMappings.push(mapping.indent(width, skipFirstLine, true));
              });
            }
            return lines;
          };
          Lp.indent = function(by) {
            if (by === 0)
              return this;
            var secret = getSecret(this);
            var lines = new Lines(secret.infos.map(function(info) {
              if (info.line) {
                info = copyLineInfo(info);
                info.indent += by;
              }
              return info;
            }));
            if (secret.mappings.length > 0) {
              var newMappings = getSecret(lines).mappings;
              assert.strictEqual(newMappings.length, 0);
              secret.mappings.forEach(function(mapping) {
                newMappings.push(mapping.indent(by));
              });
            }
            return lines;
          };
          Lp.indentTail = function(by) {
            if (by === 0)
              return this;
            if (this.length < 2)
              return this;
            var secret = getSecret(this);
            var lines = new Lines(secret.infos.map(function(info, i) {
              if (i > 0 && info.line) {
                info = copyLineInfo(info);
                info.indent += by;
              }
              return info;
            }));
            if (secret.mappings.length > 0) {
              var newMappings = getSecret(lines).mappings;
              assert.strictEqual(newMappings.length, 0);
              secret.mappings.forEach(function(mapping) {
                newMappings.push(mapping.indent(by, true));
              });
            }
            return lines;
          };
          Lp.getIndentAt = function(line) {
            assert.ok(line >= 1, "no line " + line + " (line numbers start from 1)");
            var secret = getSecret(this),
                info = secret.infos[line - 1];
            return Math.max(info.indent, 0);
          };
          Lp.guessTabWidth = function() {
            var secret = getSecret(this);
            if (hasOwn.call(secret, "cachedTabWidth")) {
              return secret.cachedTabWidth;
            }
            var counts = [];
            var lastIndent = 0;
            for (var line = 1,
                last = this.length; line <= last; ++line) {
              var info = secret.infos[line - 1];
              var sliced = info.line.slice(info.sliceStart, info.sliceEnd);
              if (isOnlyWhitespace(sliced)) {
                continue;
              }
              var diff = Math.abs(info.indent - lastIndent);
              counts[diff] = ~~counts[diff] + 1;
              lastIndent = info.indent;
            }
            var maxCount = -1;
            var result = 2;
            for (var tabWidth = 1; tabWidth < counts.length; tabWidth += 1) {
              if (hasOwn.call(counts, tabWidth) && counts[tabWidth] > maxCount) {
                maxCount = counts[tabWidth];
                result = tabWidth;
              }
            }
            return secret.cachedTabWidth = result;
          };
          Lp.isOnlyWhitespace = function() {
            return isOnlyWhitespace(this.toString());
          };
          Lp.isPrecededOnlyByWhitespace = function(pos) {
            var secret = getSecret(this);
            var info = secret.infos[pos.line - 1];
            var indent = Math.max(info.indent, 0);
            var diff = pos.column - indent;
            if (diff <= 0) {
              return true;
            }
            var start = info.sliceStart;
            var end = Math.min(start + diff, info.sliceEnd);
            var prefix = info.line.slice(start, end);
            return isOnlyWhitespace(prefix);
          };
          Lp.getLineLength = function(line) {
            var secret = getSecret(this),
                info = secret.infos[line - 1];
            return this.getIndentAt(line) + info.sliceEnd - info.sliceStart;
          };
          Lp.nextPos = function(pos, skipSpaces) {
            var l = Math.max(pos.line, 0),
                c = Math.max(pos.column, 0);
            if (c < this.getLineLength(l)) {
              pos.column += 1;
              return skipSpaces ? !!this.skipSpaces(pos, false, true) : true;
            }
            if (l < this.length) {
              pos.line += 1;
              pos.column = 0;
              return skipSpaces ? !!this.skipSpaces(pos, false, true) : true;
            }
            return false;
          };
          Lp.prevPos = function(pos, skipSpaces) {
            var l = pos.line,
                c = pos.column;
            if (c < 1) {
              l -= 1;
              if (l < 1)
                return false;
              c = this.getLineLength(l);
            } else {
              c = Math.min(c - 1, this.getLineLength(l));
            }
            pos.line = l;
            pos.column = c;
            return skipSpaces ? !!this.skipSpaces(pos, true, true) : true;
          };
          Lp.firstPos = function() {
            return {
              line: 1,
              column: 0
            };
          };
          Lp.lastPos = function() {
            return {
              line: this.length,
              column: this.getLineLength(this.length)
            };
          };
          Lp.skipSpaces = function(pos, backward, modifyInPlace) {
            if (pos) {
              pos = modifyInPlace ? pos : {
                line: pos.line,
                column: pos.column
              };
            } else if (backward) {
              pos = this.lastPos();
            } else {
              pos = this.firstPos();
            }
            if (backward) {
              while (this.prevPos(pos)) {
                if (!isOnlyWhitespace(this.charAt(pos)) && this.nextPos(pos)) {
                  return pos;
                }
              }
              return null;
            } else {
              while (isOnlyWhitespace(this.charAt(pos))) {
                if (!this.nextPos(pos)) {
                  return null;
                }
              }
              return pos;
            }
          };
          Lp.trimLeft = function() {
            var pos = this.skipSpaces(this.firstPos(), false, true);
            return pos ? this.slice(pos) : emptyLines;
          };
          Lp.trimRight = function() {
            var pos = this.skipSpaces(this.lastPos(), true, true);
            return pos ? this.slice(this.firstPos(), pos) : emptyLines;
          };
          Lp.trim = function() {
            var start = this.skipSpaces(this.firstPos(), false, true);
            if (start === null)
              return emptyLines;
            var end = this.skipSpaces(this.lastPos(), true, true);
            assert.notStrictEqual(end, null);
            return this.slice(start, end);
          };
          Lp.eachPos = function(callback, startPos, skipSpaces) {
            var pos = this.firstPos();
            if (startPos) {
              pos.line = startPos.line, pos.column = startPos.column;
            }
            if (skipSpaces && !this.skipSpaces(pos, false, true)) {
              return;
            }
            do
              callback.call(this, pos);
 while (this.nextPos(pos, skipSpaces));
          };
          Lp.bootstrapSlice = function(start, end) {
            var strings = this.toString().split(lineTerminatorSeqExp).slice(start.line - 1, end.line);
            strings.push(strings.pop().slice(0, end.column));
            strings[0] = strings[0].slice(start.column);
            return fromString(strings.join("\n"));
          };
          Lp.slice = function(start, end) {
            if (!end) {
              if (!start) {
                return this;
              }
              end = this.lastPos();
            }
            var secret = getSecret(this);
            var sliced = secret.infos.slice(start.line - 1, end.line);
            if (start.line === end.line) {
              sliced[0] = sliceInfo(sliced[0], start.column, end.column);
            } else {
              assert.ok(start.line < end.line);
              sliced[0] = sliceInfo(sliced[0], start.column);
              sliced.push(sliceInfo(sliced.pop(), 0, end.column));
            }
            var lines = new Lines(sliced);
            if (secret.mappings.length > 0) {
              var newMappings = getSecret(lines).mappings;
              assert.strictEqual(newMappings.length, 0);
              secret.mappings.forEach(function(mapping) {
                var sliced = mapping.slice(this, start, end);
                if (sliced) {
                  newMappings.push(sliced);
                }
              }, this);
            }
            return lines;
          };
          function sliceInfo(info, startCol, endCol) {
            var sliceStart = info.sliceStart;
            var sliceEnd = info.sliceEnd;
            var indent = Math.max(info.indent, 0);
            var lineLength = indent + sliceEnd - sliceStart;
            if (typeof endCol === "undefined") {
              endCol = lineLength;
            }
            startCol = Math.max(startCol, 0);
            endCol = Math.min(endCol, lineLength);
            endCol = Math.max(endCol, startCol);
            if (endCol < indent) {
              indent = endCol;
              sliceEnd = sliceStart;
            } else {
              sliceEnd -= lineLength - endCol;
            }
            lineLength = endCol;
            lineLength -= startCol;
            if (startCol < indent) {
              indent -= startCol;
            } else {
              startCol -= indent;
              indent = 0;
              sliceStart += startCol;
            }
            assert.ok(indent >= 0);
            assert.ok(sliceStart <= sliceEnd);
            assert.strictEqual(lineLength, indent + sliceEnd - sliceStart);
            if (info.indent === indent && info.sliceStart === sliceStart && info.sliceEnd === sliceEnd) {
              return info;
            }
            return {
              line: info.line,
              indent: indent,
              sliceStart: sliceStart,
              sliceEnd: sliceEnd
            };
          }
          Lp.bootstrapSliceString = function(start, end, options) {
            return this.slice(start, end).toString(options);
          };
          Lp.sliceString = function(start, end, options) {
            if (!end) {
              if (!start) {
                return this;
              }
              end = this.lastPos();
            }
            options = normalizeOptions(options);
            var infos = getSecret(this).infos;
            var parts = [];
            var tabWidth = options.tabWidth;
            for (var line = start.line; line <= end.line; ++line) {
              var info = infos[line - 1];
              if (line === start.line) {
                if (line === end.line) {
                  info = sliceInfo(info, start.column, end.column);
                } else {
                  info = sliceInfo(info, start.column);
                }
              } else if (line === end.line) {
                info = sliceInfo(info, 0, end.column);
              }
              var indent = Math.max(info.indent, 0);
              var before = info.line.slice(0, info.sliceStart);
              if (options.reuseWhitespace && isOnlyWhitespace(before) && countSpaces(before, options.tabWidth) === indent) {
                parts.push(info.line.slice(0, info.sliceEnd));
                continue;
              }
              var tabs = 0;
              var spaces = indent;
              if (options.useTabs) {
                tabs = Math.floor(indent / tabWidth);
                spaces -= tabs * tabWidth;
              }
              var result = "";
              if (tabs > 0) {
                result += new Array(tabs + 1).join("\t");
              }
              if (spaces > 0) {
                result += new Array(spaces + 1).join(" ");
              }
              result += info.line.slice(info.sliceStart, info.sliceEnd);
              parts.push(result);
            }
            return parts.join(options.lineTerminator);
          };
          Lp.isEmpty = function() {
            return this.length < 2 && this.getLineLength(1) < 1;
          };
          Lp.join = function(elements) {
            var separator = this;
            var separatorSecret = getSecret(separator);
            var infos = [];
            var mappings = [];
            var prevInfo;
            function appendSecret(secret) {
              if (secret === null)
                return;
              if (prevInfo) {
                var info = secret.infos[0];
                var indent = new Array(info.indent + 1).join(" ");
                var prevLine = infos.length;
                var prevColumn = Math.max(prevInfo.indent, 0) + prevInfo.sliceEnd - prevInfo.sliceStart;
                prevInfo.line = prevInfo.line.slice(0, prevInfo.sliceEnd) + indent + info.line.slice(info.sliceStart, info.sliceEnd);
                prevInfo.sliceEnd = prevInfo.line.length;
                if (secret.mappings.length > 0) {
                  secret.mappings.forEach(function(mapping) {
                    mappings.push(mapping.add(prevLine, prevColumn));
                  });
                }
              } else if (secret.mappings.length > 0) {
                mappings.push.apply(mappings, secret.mappings);
              }
              secret.infos.forEach(function(info, i) {
                if (!prevInfo || i > 0) {
                  prevInfo = copyLineInfo(info);
                  infos.push(prevInfo);
                }
              });
            }
            function appendWithSeparator(secret, i) {
              if (i > 0)
                appendSecret(separatorSecret);
              appendSecret(secret);
            }
            elements.map(function(elem) {
              var lines = fromString(elem);
              if (lines.isEmpty())
                return null;
              return getSecret(lines);
            }).forEach(separator.isEmpty() ? appendSecret : appendWithSeparator);
            if (infos.length < 1)
              return emptyLines;
            var lines = new Lines(infos);
            getSecret(lines).mappings = mappings;
            return lines;
          };
          exports.concat = function(elements) {
            return emptyLines.join(elements);
          };
          Lp.concat = function(other) {
            var args = arguments,
                list = [this];
            list.push.apply(list, args);
            assert.strictEqual(list.length, args.length + 1);
            return emptyLines.join(list);
          };
          var emptyLines = fromString("");
        }, {
          "1": 1,
          "560": 560,
          "564": 564,
          "565": 565,
          "569": 569,
          "570": 570,
          "601": 601
        }],
        564: [function(_dereq_, module, exports) {
          var assert = _dereq_(1);
          var types = _dereq_(569);
          var isString = types.builtInTypes.string;
          var isNumber = types.builtInTypes.number;
          var SourceLocation = types.namedTypes.SourceLocation;
          var Position = types.namedTypes.Position;
          var linesModule = _dereq_(563);
          var comparePos = _dereq_(570).comparePos;
          function Mapping(sourceLines, sourceLoc, targetLoc) {
            assert.ok(this instanceof Mapping);
            assert.ok(sourceLines instanceof linesModule.Lines);
            SourceLocation.assert(sourceLoc);
            if (targetLoc) {
              assert.ok(isNumber.check(targetLoc.start.line) && isNumber.check(targetLoc.start.column) && isNumber.check(targetLoc.end.line) && isNumber.check(targetLoc.end.column));
            } else {
              targetLoc = sourceLoc;
            }
            Object.defineProperties(this, {
              sourceLines: {value: sourceLines},
              sourceLoc: {value: sourceLoc},
              targetLoc: {value: targetLoc}
            });
          }
          var Mp = Mapping.prototype;
          module.exports = Mapping;
          Mp.slice = function(lines, start, end) {
            assert.ok(lines instanceof linesModule.Lines);
            Position.assert(start);
            if (end) {
              Position.assert(end);
            } else {
              end = lines.lastPos();
            }
            var sourceLines = this.sourceLines;
            var sourceLoc = this.sourceLoc;
            var targetLoc = this.targetLoc;
            function skip(name) {
              var sourceFromPos = sourceLoc[name];
              var targetFromPos = targetLoc[name];
              var targetToPos = start;
              if (name === "end") {
                targetToPos = end;
              } else {
                assert.strictEqual(name, "start");
              }
              return skipChars(sourceLines, sourceFromPos, lines, targetFromPos, targetToPos);
            }
            if (comparePos(start, targetLoc.start) <= 0) {
              if (comparePos(targetLoc.end, end) <= 0) {
                targetLoc = {
                  start: subtractPos(targetLoc.start, start.line, start.column),
                  end: subtractPos(targetLoc.end, start.line, start.column)
                };
              } else if (comparePos(end, targetLoc.start) <= 0) {
                return null;
              } else {
                sourceLoc = {
                  start: sourceLoc.start,
                  end: skip("end")
                };
                targetLoc = {
                  start: subtractPos(targetLoc.start, start.line, start.column),
                  end: subtractPos(end, start.line, start.column)
                };
              }
            } else {
              if (comparePos(targetLoc.end, start) <= 0) {
                return null;
              }
              if (comparePos(targetLoc.end, end) <= 0) {
                sourceLoc = {
                  start: skip("start"),
                  end: sourceLoc.end
                };
                targetLoc = {
                  start: {
                    line: 1,
                    column: 0
                  },
                  end: subtractPos(targetLoc.end, start.line, start.column)
                };
              } else {
                sourceLoc = {
                  start: skip("start"),
                  end: skip("end")
                };
                targetLoc = {
                  start: {
                    line: 1,
                    column: 0
                  },
                  end: subtractPos(end, start.line, start.column)
                };
              }
            }
            return new Mapping(this.sourceLines, sourceLoc, targetLoc);
          };
          Mp.add = function(line, column) {
            return new Mapping(this.sourceLines, this.sourceLoc, {
              start: addPos(this.targetLoc.start, line, column),
              end: addPos(this.targetLoc.end, line, column)
            });
          };
          function addPos(toPos, line, column) {
            return {
              line: toPos.line + line - 1,
              column: (toPos.line === 1) ? toPos.column + column : toPos.column
            };
          }
          Mp.subtract = function(line, column) {
            return new Mapping(this.sourceLines, this.sourceLoc, {
              start: subtractPos(this.targetLoc.start, line, column),
              end: subtractPos(this.targetLoc.end, line, column)
            });
          };
          function subtractPos(fromPos, line, column) {
            return {
              line: fromPos.line - line + 1,
              column: (fromPos.line === line) ? fromPos.column - column : fromPos.column
            };
          }
          Mp.indent = function(by, skipFirstLine, noNegativeColumns) {
            if (by === 0) {
              return this;
            }
            var targetLoc = this.targetLoc;
            var startLine = targetLoc.start.line;
            var endLine = targetLoc.end.line;
            if (skipFirstLine && startLine === 1 && endLine === 1) {
              return this;
            }
            targetLoc = {
              start: targetLoc.start,
              end: targetLoc.end
            };
            if (!skipFirstLine || startLine > 1) {
              var startColumn = targetLoc.start.column + by;
              targetLoc.start = {
                line: startLine,
                column: noNegativeColumns ? Math.max(0, startColumn) : startColumn
              };
            }
            if (!skipFirstLine || endLine > 1) {
              var endColumn = targetLoc.end.column + by;
              targetLoc.end = {
                line: endLine,
                column: noNegativeColumns ? Math.max(0, endColumn) : endColumn
              };
            }
            return new Mapping(this.sourceLines, this.sourceLoc, targetLoc);
          };
          function skipChars(sourceLines, sourceFromPos, targetLines, targetFromPos, targetToPos) {
            assert.ok(sourceLines instanceof linesModule.Lines);
            assert.ok(targetLines instanceof linesModule.Lines);
            Position.assert(sourceFromPos);
            Position.assert(targetFromPos);
            Position.assert(targetToPos);
            var targetComparison = comparePos(targetFromPos, targetToPos);
            if (targetComparison === 0) {
              return sourceFromPos;
            }
            if (targetComparison < 0) {
              var sourceCursor = sourceLines.skipSpaces(sourceFromPos);
              var targetCursor = targetLines.skipSpaces(targetFromPos);
              var lineDiff = targetToPos.line - targetCursor.line;
              sourceCursor.line += lineDiff;
              targetCursor.line += lineDiff;
              if (lineDiff > 0) {
                sourceCursor.column = 0;
                targetCursor.column = 0;
              } else {
                assert.strictEqual(lineDiff, 0);
              }
              while (comparePos(targetCursor, targetToPos) < 0 && targetLines.nextPos(targetCursor, true)) {
                assert.ok(sourceLines.nextPos(sourceCursor, true));
                assert.strictEqual(sourceLines.charAt(sourceCursor), targetLines.charAt(targetCursor));
              }
            } else {
              var sourceCursor = sourceLines.skipSpaces(sourceFromPos, true);
              var targetCursor = targetLines.skipSpaces(targetFromPos, true);
              var lineDiff = targetToPos.line - targetCursor.line;
              sourceCursor.line += lineDiff;
              targetCursor.line += lineDiff;
              if (lineDiff < 0) {
                sourceCursor.column = sourceLines.getLineLength(sourceCursor.line);
                targetCursor.column = targetLines.getLineLength(targetCursor.line);
              } else {
                assert.strictEqual(lineDiff, 0);
              }
              while (comparePos(targetToPos, targetCursor) < 0 && targetLines.prevPos(targetCursor, true)) {
                assert.ok(sourceLines.prevPos(sourceCursor, true));
                assert.strictEqual(sourceLines.charAt(sourceCursor), targetLines.charAt(targetCursor));
              }
            }
            return sourceCursor;
          }
        }, {
          "1": 1,
          "563": 563,
          "569": 569,
          "570": 570
        }],
        565: [function(_dereq_, module, exports) {
          var defaults = {
            esprima: _dereq_(3),
            tabWidth: 4,
            useTabs: false,
            reuseWhitespace: true,
            lineTerminator: _dereq_(8).EOL,
            wrapColumn: 74,
            sourceFileName: null,
            sourceMapName: null,
            sourceRoot: null,
            inputSourceMap: null,
            range: false,
            tolerant: true,
            quote: null,
            trailingComma: false
          },
              hasOwn = defaults.hasOwnProperty;
          exports.normalize = function(options) {
            options = options || defaults;
            function get(key) {
              return hasOwn.call(options, key) ? options[key] : defaults[key];
            }
            return {
              tabWidth: +get("tabWidth"),
              useTabs: !!get("useTabs"),
              reuseWhitespace: !!get("reuseWhitespace"),
              lineTerminator: get("lineTerminator"),
              wrapColumn: Math.max(get("wrapColumn"), 0),
              sourceFileName: get("sourceFileName"),
              sourceMapName: get("sourceMapName"),
              sourceRoot: get("sourceRoot"),
              inputSourceMap: get("inputSourceMap"),
              esprima: get("esprima"),
              range: get("range"),
              tolerant: get("tolerant"),
              quote: get("quote"),
              trailingComma: get("trailingComma")
            };
          };
        }, {
          "3": 3,
          "8": 8
        }],
        566: [function(_dereq_, module, exports) {
          var assert = _dereq_(1);
          var types = _dereq_(569);
          var n = types.namedTypes;
          var b = types.builders;
          var isObject = types.builtInTypes.object;
          var isArray = types.builtInTypes.array;
          var isFunction = types.builtInTypes.function;
          var Patcher = _dereq_(567).Patcher;
          var normalizeOptions = _dereq_(565).normalize;
          var fromString = _dereq_(563).fromString;
          var attachComments = _dereq_(561).attach;
          var util = _dereq_(570);
          exports.parse = function parse(source, options) {
            options = normalizeOptions(options);
            var lines = fromString(source, options);
            var sourceWithoutTabs = lines.toString({
              tabWidth: options.tabWidth,
              reuseWhitespace: false,
              useTabs: false
            });
            var comments = [];
            var program = options.esprima.parse(sourceWithoutTabs, {
              loc: true,
              locations: true,
              range: options.range,
              comment: true,
              onComment: comments,
              tolerant: options.tolerant,
              ecmaVersion: 6,
              sourceType: 'module'
            });
            program.loc = program.loc || {
              start: lines.firstPos(),
              end: lines.lastPos()
            };
            program.loc.lines = lines;
            program.loc.indent = 0;
            var trueProgramLoc = util.getTrueLoc(program, lines);
            program.loc.start = trueProgramLoc.start;
            program.loc.end = trueProgramLoc.end;
            if (program.comments) {
              comments = program.comments;
              delete program.comments;
            }
            var file = b.file(program);
            file.loc = {
              lines: lines,
              indent: 0,
              start: lines.firstPos(),
              end: lines.lastPos()
            };
            attachComments(comments, program.body.length ? file.program : file, lines);
            return new TreeCopier(lines).copy(file);
          };
          function TreeCopier(lines) {
            assert.ok(this instanceof TreeCopier);
            this.lines = lines;
            this.indent = 0;
          }
          var TCp = TreeCopier.prototype;
          TCp.copy = function(node) {
            if (isArray.check(node)) {
              return node.map(this.copy, this);
            }
            if (!isObject.check(node)) {
              return node;
            }
            util.fixFaultyLocations(node);
            var copy = Object.create(Object.getPrototypeOf(node), {original: {
                value: node,
                configurable: false,
                enumerable: false,
                writable: true
              }});
            var loc = node.loc;
            var oldIndent = this.indent;
            var newIndent = oldIndent;
            if (loc) {
              if (node.type === "Block" || node.type === "Line" || this.lines.isPrecededOnlyByWhitespace(loc.start)) {
                newIndent = this.indent = loc.start.column;
              }
              loc.lines = this.lines;
              loc.indent = newIndent;
            }
            var keys = Object.keys(node);
            var keyCount = keys.length;
            for (var i = 0; i < keyCount; ++i) {
              var key = keys[i];
              if (key === "loc") {
                copy[key] = node[key];
              } else {
                copy[key] = this.copy(node[key]);
              }
            }
            this.indent = oldIndent;
            return copy;
          };
        }, {
          "1": 1,
          "561": 561,
          "563": 563,
          "565": 565,
          "567": 567,
          "569": 569,
          "570": 570
        }],
        567: [function(_dereq_, module, exports) {
          var assert = _dereq_(1);
          var linesModule = _dereq_(563);
          var types = _dereq_(569);
          var getFieldValue = types.getFieldValue;
          var Printable = types.namedTypes.Printable;
          var Expression = types.namedTypes.Expression;
          var SourceLocation = types.namedTypes.SourceLocation;
          var util = _dereq_(570);
          var comparePos = util.comparePos;
          var FastPath = _dereq_(562);
          var isObject = types.builtInTypes.object;
          var isArray = types.builtInTypes.array;
          var isString = types.builtInTypes.string;
          var riskyAdjoiningCharExp = /[0-9a-z_$]/i;
          function Patcher(lines) {
            assert.ok(this instanceof Patcher);
            assert.ok(lines instanceof linesModule.Lines);
            var self = this,
                replacements = [];
            self.replace = function(loc, lines) {
              if (isString.check(lines))
                lines = linesModule.fromString(lines);
              replacements.push({
                lines: lines,
                start: loc.start,
                end: loc.end
              });
            };
            self.get = function(loc) {
              loc = loc || {
                start: {
                  line: 1,
                  column: 0
                },
                end: {
                  line: lines.length,
                  column: lines.getLineLength(lines.length)
                }
              };
              var sliceFrom = loc.start,
                  toConcat = [];
              function pushSlice(from, to) {
                assert.ok(comparePos(from, to) <= 0);
                toConcat.push(lines.slice(from, to));
              }
              replacements.sort(function(a, b) {
                return comparePos(a.start, b.start);
              }).forEach(function(rep) {
                if (comparePos(sliceFrom, rep.start) > 0) {} else {
                  pushSlice(sliceFrom, rep.start);
                  toConcat.push(rep.lines);
                  sliceFrom = rep.end;
                }
              });
              pushSlice(sliceFrom, loc.end);
              return linesModule.concat(toConcat);
            };
          }
          exports.Patcher = Patcher;
          var Pp = Patcher.prototype;
          Pp.tryToReprintComments = function(newNode, oldNode, print) {
            var patcher = this;
            if (!newNode.comments && !oldNode.comments) {
              return true;
            }
            var newPath = FastPath.from(newNode);
            var oldPath = FastPath.from(oldNode);
            newPath.stack.push("comments", getSurroundingComments(newNode));
            oldPath.stack.push("comments", getSurroundingComments(oldNode));
            var reprints = [];
            var ableToReprintComments = findArrayReprints(newPath, oldPath, reprints);
            if (ableToReprintComments && reprints.length > 0) {
              reprints.forEach(function(reprint) {
                var oldComment = reprint.oldPath.getValue();
                assert.ok(oldComment.leading || oldComment.trailing);
                patcher.replace(oldComment.loc, print(reprint.newPath).indentTail(oldComment.loc.indent));
              });
            }
            return ableToReprintComments;
          };
          function getSurroundingComments(node) {
            var result = [];
            if (node.comments && node.comments.length > 0) {
              node.comments.forEach(function(comment) {
                if (comment.leading || comment.trailing) {
                  result.push(comment);
                }
              });
            }
            return result;
          }
          Pp.deleteComments = function(node) {
            if (!node.comments) {
              return;
            }
            var patcher = this;
            node.comments.forEach(function(comment) {
              if (comment.leading) {
                patcher.replace({
                  start: comment.loc.start,
                  end: node.loc.lines.skipSpaces(comment.loc.end, false, false)
                }, "");
              } else if (comment.trailing) {
                patcher.replace({
                  start: node.loc.lines.skipSpaces(comment.loc.start, true, false),
                  end: comment.loc.end
                }, "");
              }
            });
          };
          exports.getReprinter = function(path) {
            assert.ok(path instanceof FastPath);
            var node = path.getValue();
            if (!Printable.check(node))
              return;
            var orig = node.original;
            var origLoc = orig && orig.loc;
            var lines = origLoc && origLoc.lines;
            var reprints = [];
            if (!lines || !findReprints(path, reprints))
              return;
            return function(print) {
              var patcher = new Patcher(lines);
              reprints.forEach(function(reprint) {
                var newNode = reprint.newPath.getValue();
                var oldNode = reprint.oldPath.getValue();
                SourceLocation.assert(oldNode.loc, true);
                var needToPrintNewPathWithComments = !patcher.tryToReprintComments(newNode, oldNode, print);
                if (needToPrintNewPathWithComments) {
                  patcher.deleteComments(oldNode);
                }
                var pos = util.copyPos(oldNode.loc.start);
                var needsLeadingSpace = lines.prevPos(pos) && riskyAdjoiningCharExp.test(lines.charAt(pos));
                var newLines = print(reprint.newPath, needToPrintNewPathWithComments).indentTail(oldNode.loc.indent);
                var needsTrailingSpace = riskyAdjoiningCharExp.test(lines.charAt(oldNode.loc.end));
                if (needsLeadingSpace || needsTrailingSpace) {
                  var newParts = [];
                  needsLeadingSpace && newParts.push(" ");
                  newParts.push(newLines);
                  needsTrailingSpace && newParts.push(" ");
                  newLines = linesModule.concat(newParts);
                }
                patcher.replace(oldNode.loc, newLines);
              });
              return patcher.get(origLoc).indentTail(-orig.loc.indent);
            };
          };
          function findReprints(newPath, reprints) {
            var newNode = newPath.getValue();
            Printable.assert(newNode);
            var oldNode = newNode.original;
            Printable.assert(oldNode);
            assert.deepEqual(reprints, []);
            if (newNode.type !== oldNode.type) {
              return false;
            }
            var oldPath = new FastPath(oldNode);
            var canReprint = findChildReprints(newPath, oldPath, reprints);
            if (!canReprint) {
              reprints.length = 0;
            }
            return canReprint;
          }
          function findAnyReprints(newPath, oldPath, reprints) {
            var newNode = newPath.getValue();
            var oldNode = oldPath.getValue();
            if (newNode === oldNode)
              return true;
            if (isArray.check(newNode))
              return findArrayReprints(newPath, oldPath, reprints);
            if (isObject.check(newNode))
              return findObjectReprints(newPath, oldPath, reprints);
            return false;
          }
          function findArrayReprints(newPath, oldPath, reprints) {
            var newNode = newPath.getValue();
            var oldNode = oldPath.getValue();
            isArray.assert(newNode);
            var len = newNode.length;
            if (!(isArray.check(oldNode) && oldNode.length === len))
              return false;
            for (var i = 0; i < len; ++i) {
              newPath.stack.push(i, newNode[i]);
              oldPath.stack.push(i, oldNode[i]);
              var canReprint = findAnyReprints(newPath, oldPath, reprints);
              newPath.stack.length -= 2;
              oldPath.stack.length -= 2;
              if (!canReprint) {
                return false;
              }
            }
            return true;
          }
          function findObjectReprints(newPath, oldPath, reprints) {
            var newNode = newPath.getValue();
            isObject.assert(newNode);
            if (newNode.original === null) {
              return false;
            }
            var oldNode = oldPath.getValue();
            if (!isObject.check(oldNode))
              return false;
            if (Printable.check(newNode)) {
              if (!Printable.check(oldNode)) {
                return false;
              }
              if (newNode.type === oldNode.type) {
                var childReprints = [];
                if (findChildReprints(newPath, oldPath, childReprints)) {
                  reprints.push.apply(reprints, childReprints);
                } else if (oldNode.loc) {
                  reprints.push({
                    oldPath: oldPath.copy(),
                    newPath: newPath.copy()
                  });
                } else {
                  return false;
                }
                return true;
              }
              if (Expression.check(newNode) && Expression.check(oldNode) && oldNode.loc) {
                reprints.push({
                  oldPath: oldPath.copy(),
                  newPath: newPath.copy()
                });
                return true;
              }
              return false;
            }
            return findChildReprints(newPath, oldPath, reprints);
          }
          var reusablePos = {
            line: 1,
            column: 0
          };
          var nonSpaceExp = /\S/;
          function hasOpeningParen(oldPath) {
            var oldNode = oldPath.getValue();
            var loc = oldNode.loc;
            var lines = loc && loc.lines;
            if (lines) {
              var pos = reusablePos;
              pos.line = loc.start.line;
              pos.column = loc.start.column;
              while (lines.prevPos(pos)) {
                var ch = lines.charAt(pos);
                if (ch === "(") {
                  return comparePos(oldPath.getRootValue().loc.start, pos) <= 0;
                }
                if (nonSpaceExp.test(ch)) {
                  return false;
                }
              }
            }
            return false;
          }
          function hasClosingParen(oldPath) {
            var oldNode = oldPath.getValue();
            var loc = oldNode.loc;
            var lines = loc && loc.lines;
            if (lines) {
              var pos = reusablePos;
              pos.line = loc.end.line;
              pos.column = loc.end.column;
              do {
                var ch = lines.charAt(pos);
                if (ch === ")") {
                  return comparePos(pos, oldPath.getRootValue().loc.end) <= 0;
                }
                if (nonSpaceExp.test(ch)) {
                  return false;
                }
              } while (lines.nextPos(pos));
            }
            return false;
          }
          function hasParens(oldPath) {
            return hasOpeningParen(oldPath) && hasClosingParen(oldPath);
          }
          function findChildReprints(newPath, oldPath, reprints) {
            var newNode = newPath.getValue();
            var oldNode = oldPath.getValue();
            isObject.assert(newNode);
            isObject.assert(oldNode);
            if (newNode.original === null) {
              return false;
            }
            if (!newPath.canBeFirstInStatement() && newPath.firstInStatement() && !hasOpeningParen(oldPath))
              return false;
            if (newPath.needsParens(true) && !hasParens(oldPath)) {
              return false;
            }
            for (var k in util.getUnionOfKeys(newNode, oldNode)) {
              if (k === "loc")
                continue;
              newPath.stack.push(k, types.getFieldValue(newNode, k));
              oldPath.stack.push(k, types.getFieldValue(oldNode, k));
              var canReprint = findAnyReprints(newPath, oldPath, reprints);
              newPath.stack.length -= 2;
              oldPath.stack.length -= 2;
              if (!canReprint) {
                return false;
              }
            }
            return true;
          }
        }, {
          "1": 1,
          "562": 562,
          "563": 563,
          "569": 569,
          "570": 570
        }],
        568: [function(_dereq_, module, exports) {
          var assert = _dereq_(1);
          var sourceMap = _dereq_(601);
          var printComments = _dereq_(561).printComments;
          var linesModule = _dereq_(563);
          var fromString = linesModule.fromString;
          var concat = linesModule.concat;
          var normalizeOptions = _dereq_(565).normalize;
          var getReprinter = _dereq_(567).getReprinter;
          var types = _dereq_(569);
          var namedTypes = types.namedTypes;
          var isString = types.builtInTypes.string;
          var isObject = types.builtInTypes.object;
          var FastPath = _dereq_(562);
          var util = _dereq_(570);
          function PrintResult(code, sourceMap) {
            assert.ok(this instanceof PrintResult);
            isString.assert(code);
            this.code = code;
            if (sourceMap) {
              isObject.assert(sourceMap);
              this.map = sourceMap;
            }
          }
          var PRp = PrintResult.prototype;
          var warnedAboutToString = false;
          PRp.toString = function() {
            if (!warnedAboutToString) {
              console.warn("Deprecation warning: recast.print now returns an object with " + "a .code property. You appear to be treating the object as a " + "string, which might still work but is strongly discouraged.");
              warnedAboutToString = true;
            }
            return this.code;
          };
          var emptyPrintResult = new PrintResult("");
          function Printer(originalOptions) {
            assert.ok(this instanceof Printer);
            var explicitTabWidth = originalOptions && originalOptions.tabWidth;
            var options = normalizeOptions(originalOptions);
            assert.notStrictEqual(options, originalOptions);
            options.sourceFileName = null;
            function printWithComments(path) {
              assert.ok(path instanceof FastPath);
              return printComments(path, print);
            }
            function print(path, includeComments) {
              if (includeComments)
                return printWithComments(path);
              assert.ok(path instanceof FastPath);
              if (!explicitTabWidth) {
                var oldTabWidth = options.tabWidth;
                var loc = path.getNode().loc;
                if (loc && loc.lines && loc.lines.guessTabWidth) {
                  options.tabWidth = loc.lines.guessTabWidth();
                  var lines = maybeReprint(path);
                  options.tabWidth = oldTabWidth;
                  return lines;
                }
              }
              return maybeReprint(path);
            }
            function maybeReprint(path) {
              var reprinter = getReprinter(path);
              if (reprinter)
                return maybeAddParens(path, reprinter(print));
              return printRootGenerically(path);
            }
            function printRootGenerically(path) {
              return genericPrint(path, options, printWithComments);
            }
            function printGenerically(path) {
              return genericPrint(path, options, printGenerically);
            }
            this.print = function(ast) {
              if (!ast) {
                return emptyPrintResult;
              }
              var lines = print(FastPath.from(ast), true);
              return new PrintResult(lines.toString(options), util.composeSourceMaps(options.inputSourceMap, lines.getSourceMap(options.sourceMapName, options.sourceRoot)));
            };
            this.printGenerically = function(ast) {
              if (!ast) {
                return emptyPrintResult;
              }
              var path = FastPath.from(ast);
              var oldReuseWhitespace = options.reuseWhitespace;
              options.reuseWhitespace = false;
              var pr = new PrintResult(printGenerically(path).toString(options));
              options.reuseWhitespace = oldReuseWhitespace;
              return pr;
            };
          }
          exports.Printer = Printer;
          function maybeAddParens(path, lines) {
            return path.needsParens() ? concat(["(", lines, ")"]) : lines;
          }
          function genericPrint(path, options, printPath) {
            assert.ok(path instanceof FastPath);
            return maybeAddParens(path, genericPrintNoParens(path, options, printPath));
          }
          function genericPrintNoParens(path, options, print) {
            var n = path.getValue();
            if (!n) {
              return fromString("");
            }
            if (typeof n === "string") {
              return fromString(n, options);
            }
            namedTypes.Printable.assert(n);
            switch (n.type) {
              case "File":
                return path.call(print, "program");
              case "Program":
                return path.call(function(bodyPath) {
                  return printStatementSequence(bodyPath, options, print);
                }, "body");
              case "Noop":
              case "EmptyStatement":
                return fromString("");
              case "ExpressionStatement":
                return concat([path.call(print, "expression"), ";"]);
              case "ParenthesizedExpression":
                return concat(["(", path.call(print, "expression"), ")"]);
              case "BinaryExpression":
              case "LogicalExpression":
              case "AssignmentExpression":
                return fromString(" ").join([path.call(print, "left"), n.operator, path.call(print, "right")]);
              case "AssignmentPattern":
                return concat([path.call(print, "left"), "=", path.call(print, "right")]);
              case "MemberExpression":
                var parts = [path.call(print, "object")];
                var property = path.call(print, "property");
                if (n.computed) {
                  parts.push("[", property, "]");
                } else {
                  parts.push(".", property);
                }
                return concat(parts);
              case "MetaProperty":
                return concat([path.call(print, "meta"), ".", path.call(print, "property")]);
              case "BindExpression":
                var parts = [];
                if (n.object) {
                  parts.push(path.call(print, "object"));
                }
                parts.push("::", path.call(print, "callee"));
                return concat(parts);
              case "Path":
                return fromString(".").join(n.body);
              case "Identifier":
                return concat([fromString(n.name, options), path.call(print, "typeAnnotation")]);
              case "SpreadElement":
              case "SpreadElementPattern":
              case "SpreadProperty":
              case "SpreadPropertyPattern":
              case "RestElement":
                return concat(["...", path.call(print, "argument")]);
              case "FunctionDeclaration":
              case "FunctionExpression":
                var parts = [];
                if (n.async)
                  parts.push("async ");
                parts.push("function");
                if (n.generator)
                  parts.push("*");
                if (n.id) {
                  parts.push(" ", path.call(print, "id"), path.call(print, "typeParameters"));
                }
                parts.push("(", printFunctionParams(path, options, print), ")", path.call(print, "returnType"), " ", path.call(print, "body"));
                return concat(parts);
              case "ArrowFunctionExpression":
                var parts = [];
                if (n.async)
                  parts.push("async ");
                if (n.params.length === 1 && !n.rest && n.params[0].type !== 'SpreadElementPattern' && n.params[0].type !== 'RestElement') {
                  parts.push(path.call(print, "params", 0));
                } else {
                  parts.push("(", printFunctionParams(path, options, print), ")");
                }
                parts.push(" => ", path.call(print, "body"));
                return concat(parts);
              case "MethodDefinition":
                var parts = [];
                if (n.static) {
                  parts.push("static ");
                }
                parts.push(printMethod(path, options, print));
                return concat(parts);
              case "YieldExpression":
                var parts = ["yield"];
                if (n.delegate)
                  parts.push("*");
                if (n.argument)
                  parts.push(" ", path.call(print, "argument"));
                return concat(parts);
              case "AwaitExpression":
                var parts = ["await"];
                if (n.all)
                  parts.push("*");
                if (n.argument)
                  parts.push(" ", path.call(print, "argument"));
                return concat(parts);
              case "ModuleDeclaration":
                var parts = ["module", path.call(print, "id")];
                if (n.source) {
                  assert.ok(!n.body);
                  parts.push("from", path.call(print, "source"));
                } else {
                  parts.push(path.call(print, "body"));
                }
                return fromString(" ").join(parts);
              case "ImportSpecifier":
                var parts = [];
                if (n.imported) {
                  parts.push(path.call(print, "imported"));
                  if (n.local && n.local.name !== n.imported.name) {
                    parts.push(" as ", path.call(print, "local"));
                  }
                } else if (n.id) {
                  parts.push(path.call(print, "id"));
                  if (n.name) {
                    parts.push(" as ", path.call(print, "name"));
                  }
                }
                return concat(parts);
              case "ExportSpecifier":
                var parts = [];
                if (n.local) {
                  parts.push(path.call(print, "local"));
                  if (n.exported && n.exported.name !== n.local.name) {
                    parts.push(" as ", path.call(print, "exported"));
                  }
                } else if (n.id) {
                  parts.push(path.call(print, "id"));
                  if (n.name) {
                    parts.push(" as ", path.call(print, "name"));
                  }
                }
                return concat(parts);
              case "ExportBatchSpecifier":
                return fromString("*");
              case "ImportNamespaceSpecifier":
                var parts = ["* as "];
                if (n.local) {
                  parts.push(path.call(print, "local"));
                } else if (n.id) {
                  parts.push(path.call(print, "id"));
                }
                return concat(parts);
              case "ImportDefaultSpecifier":
                if (n.local) {
                  return path.call(print, "local");
                }
                return path.call(print, "id");
              case "ExportDeclaration":
                var parts = ["export"];
                if (n["default"]) {
                  parts.push(" default");
                } else if (n.specifiers && n.specifiers.length > 0) {
                  if (n.specifiers.length === 1 && n.specifiers[0].type === "ExportBatchSpecifier") {
                    parts.push(" *");
                  } else {
                    parts.push(" { ", fromString(", ").join(path.map(print, "specifiers")), " }");
                  }
                  if (n.source)
                    parts.push(" from ", path.call(print, "source"));
                  parts.push(";");
                  return concat(parts);
                }
                if (n.declaration) {
                  var decLines = path.call(print, "declaration");
                  parts.push(" ", decLines);
                  if (lastNonSpaceCharacter(decLines) !== ";") {
                    parts.push(";");
                  }
                }
                return concat(parts);
              case "ExportDefaultDeclaration":
                return concat(["export default ", path.call(print, "declaration")]);
              case "ExportNamedDeclaration":
                var parts = ["export "];
                if (n.declaration) {
                  parts.push(path.call(print, "declaration"));
                }
                if (n.specifiers && n.specifiers.length > 0) {
                  parts.push(n.declaration ? ", {" : "{", fromString(", ").join(path.map(print, "specifiers")), "}");
                }
                if (n.source) {
                  parts.push(" from ", path.call(print, "source"));
                }
                return concat(parts);
              case "ExportAllDeclaration":
                var parts = ["export *"];
                if (n.exported) {
                  parts.push(" as ", path.call(print, "exported"));
                }
                return concat([" from ", path.call(print, "source")]);
              case "ExportNamespaceSpecifier":
                return concat(["* as ", path.call(print, "exported")]);
              case "ExportDefaultSpecifier":
                return path.call(print, "exported");
              case "ImportDeclaration":
                var parts = ["import "];
                if (n.importKind && n.importKind !== "value") {
                  parts.push(n.importKind + " ");
                }
                if (n.specifiers && n.specifiers.length > 0) {
                  var foundImportSpecifier = false;
                  path.each(function(specifierPath) {
                    var i = specifierPath.getName();
                    if (i > 0) {
                      parts.push(", ");
                    }
                    var value = specifierPath.getValue();
                    if (namedTypes.ImportDefaultSpecifier.check(value) || namedTypes.ImportNamespaceSpecifier.check(value)) {
                      assert.strictEqual(foundImportSpecifier, false);
                    } else {
                      namedTypes.ImportSpecifier.assert(value);
                      if (!foundImportSpecifier) {
                        foundImportSpecifier = true;
                        parts.push("{");
                      }
                    }
                    parts.push(print(specifierPath));
                  }, "specifiers");
                  if (foundImportSpecifier) {
                    parts.push("}");
                  }
                  parts.push(" from ");
                }
                parts.push(path.call(print, "source"), ";");
                return concat(parts);
              case "BlockStatement":
                var naked = path.call(function(bodyPath) {
                  return printStatementSequence(bodyPath, options, print);
                }, "body");
                if (naked.isEmpty()) {
                  return fromString("{}");
                }
                return concat(["{\n", naked.indent(options.tabWidth), "\n}"]);
              case "ReturnStatement":
                var parts = ["return"];
                if (n.argument) {
                  var argLines = path.call(print, "argument");
                  if (argLines.length > 1 && (namedTypes.XJSElement && namedTypes.XJSElement.check(n.argument) || namedTypes.JSXElement && namedTypes.JSXElement.check(n.argument))) {
                    parts.push(" (\n", argLines.indent(options.tabWidth), "\n)");
                  } else {
                    parts.push(" ", argLines);
                  }
                }
                parts.push(";");
                return concat(parts);
              case "CallExpression":
                return concat([path.call(print, "callee"), printArgumentsList(path, options, print)]);
              case "ObjectExpression":
              case "ObjectPattern":
              case "ObjectTypeAnnotation":
                var allowBreak = false;
                var isTypeAnnotation = n.type === "ObjectTypeAnnotation";
                var separator = isTypeAnnotation ? ';' : ',';
                var fields = [];
                if (isTypeAnnotation) {
                  fields.push("indexers", "callProperties");
                }
                fields.push("properties");
                var len = 0;
                fields.forEach(function(field) {
                  len += n[field].length;
                });
                var oneLine = (isTypeAnnotation && len === 1) || len === 0;
                var parts = [oneLine ? "{" : "{\n"];
                var i = 0;
                fields.forEach(function(field) {
                  path.each(function(childPath) {
                    var lines = print(childPath);
                    if (!oneLine) {
                      lines = lines.indent(options.tabWidth);
                    }
                    var multiLine = !isTypeAnnotation && lines.length > 1;
                    if (multiLine && allowBreak) {
                      parts.push("\n");
                    }
                    parts.push(lines);
                    if (i < len - 1) {
                      parts.push(separator + (multiLine ? "\n\n" : "\n"));
                      allowBreak = !multiLine;
                    } else if (len !== 1 && isTypeAnnotation) {
                      parts.push(separator);
                    } else if (options.trailingComma) {
                      parts.push(separator);
                    }
                    i++;
                  }, field);
                });
                parts.push(oneLine ? "}" : "\n}");
                return concat(parts);
              case "PropertyPattern":
                return concat([path.call(print, "key"), ": ", path.call(print, "pattern")]);
              case "Property":
                if (n.method || n.kind === "get" || n.kind === "set") {
                  return printMethod(path, options, print);
                }
                var parts = [];
                if (n.decorators) {
                  path.each(function(decoratorPath) {
                    parts.push(print(decoratorPath), "\n");
                  }, "decorators");
                }
                var key = path.call(print, "key");
                if (n.computed) {
                  parts.push("[", key, "]");
                } else {
                  parts.push(key);
                }
                if (!n.shorthand) {
                  parts.push(": ", path.call(print, "value"));
                }
                return concat(parts);
              case "Decorator":
                return concat(["@", path.call(print, "expression")]);
              case "ArrayExpression":
              case "ArrayPattern":
                var elems = n.elements,
                    len = elems.length;
                var printed = path.map(print, "elements");
                var joined = fromString(", ").join(printed);
                var oneLine = joined.getLineLength(1) <= options.wrapColumn;
                var parts = [oneLine ? "[" : "[\n"];
                path.each(function(elemPath) {
                  var i = elemPath.getName();
                  var elem = elemPath.getValue();
                  if (!elem) {
                    parts.push(",");
                  } else {
                    var lines = printed[i];
                    if (oneLine) {
                      if (i > 0)
                        parts.push(" ");
                    } else {
                      lines = lines.indent(options.tabWidth);
                    }
                    parts.push(lines);
                    if (i < len - 1 || (!oneLine && options.trailingComma))
                      parts.push(",");
                    if (!oneLine)
                      parts.push("\n");
                  }
                }, "elements");
                parts.push("]");
                return concat(parts);
              case "SequenceExpression":
                return fromString(", ").join(path.map(print, "expressions"));
              case "ThisExpression":
                return fromString("this");
              case "Super":
                return fromString("super");
              case "Literal":
                if (typeof n.value !== "string")
                  return fromString(n.value, options);
                return fromString(nodeStr(n.value, options), options);
              case "ModuleSpecifier":
                if (n.local) {
                  throw new Error("The ESTree ModuleSpecifier type should be abstract");
                }
                return fromString(nodeStr(n.value, options), options);
              case "UnaryExpression":
                var parts = [n.operator];
                if (/[a-z]$/.test(n.operator))
                  parts.push(" ");
                parts.push(path.call(print, "argument"));
                return concat(parts);
              case "UpdateExpression":
                var parts = [path.call(print, "argument"), n.operator];
                if (n.prefix)
                  parts.reverse();
                return concat(parts);
              case "ConditionalExpression":
                return concat(["(", path.call(print, "test"), " ? ", path.call(print, "consequent"), " : ", path.call(print, "alternate"), ")"]);
              case "NewExpression":
                var parts = ["new ", path.call(print, "callee")];
                var args = n.arguments;
                if (args) {
                  parts.push(printArgumentsList(path, options, print));
                }
                return concat(parts);
              case "VariableDeclaration":
                var parts = [n.kind, " "];
                var maxLen = 0;
                var printed = path.map(function(childPath) {
                  var lines = print(childPath);
                  maxLen = Math.max(lines.length, maxLen);
                  return lines;
                }, "declarations");
                if (maxLen === 1) {
                  parts.push(fromString(", ").join(printed));
                } else if (printed.length > 1) {
                  parts.push(fromString(",\n").join(printed).indentTail(n.kind.length + 1));
                } else {
                  parts.push(printed[0]);
                }
                var parentNode = path.getParentNode();
                if (!namedTypes.ForStatement.check(parentNode) && !namedTypes.ForInStatement.check(parentNode) && !(namedTypes.ForOfStatement && namedTypes.ForOfStatement.check(parentNode))) {
                  parts.push(";");
                }
                return concat(parts);
              case "VariableDeclarator":
                return n.init ? fromString(" = ").join([path.call(print, "id"), path.call(print, "init")]) : path.call(print, "id");
              case "WithStatement":
                return concat(["with (", path.call(print, "object"), ") ", path.call(print, "body")]);
              case "IfStatement":
                var con = adjustClause(path.call(print, "consequent"), options),
                    parts = ["if (", path.call(print, "test"), ")", con];
                if (n.alternate)
                  parts.push(endsWithBrace(con) ? " else" : "\nelse", adjustClause(path.call(print, "alternate"), options));
                return concat(parts);
              case "ForStatement":
                var init = path.call(print, "init"),
                    sep = init.length > 1 ? ";\n" : "; ",
                    forParen = "for (",
                    indented = fromString(sep).join([init, path.call(print, "test"), path.call(print, "update")]).indentTail(forParen.length),
                    head = concat([forParen, indented, ")"]),
                    clause = adjustClause(path.call(print, "body"), options),
                    parts = [head];
                if (head.length > 1) {
                  parts.push("\n");
                  clause = clause.trimLeft();
                }
                parts.push(clause);
                return concat(parts);
              case "WhileStatement":
                return concat(["while (", path.call(print, "test"), ")", adjustClause(path.call(print, "body"), options)]);
              case "ForInStatement":
                return concat([n.each ? "for each (" : "for (", path.call(print, "left"), " in ", path.call(print, "right"), ")", adjustClause(path.call(print, "body"), options)]);
              case "ForOfStatement":
                return concat(["for (", path.call(print, "left"), " of ", path.call(print, "right"), ")", adjustClause(path.call(print, "body"), options)]);
              case "DoWhileStatement":
                var doBody = concat(["do", adjustClause(path.call(print, "body"), options)]),
                    parts = [doBody];
                if (endsWithBrace(doBody))
                  parts.push(" while");
                else
                  parts.push("\nwhile");
                parts.push(" (", path.call(print, "test"), ");");
                return concat(parts);
              case "DoExpression":
                var statements = path.call(function(bodyPath) {
                  return printStatementSequence(bodyPath, options, print);
                }, "body");
                return concat(["do {\n", statements.indent(options.tabWidth), "\n}"]);
              case "BreakStatement":
                var parts = ["break"];
                if (n.label)
                  parts.push(" ", path.call(print, "label"));
                parts.push(";");
                return concat(parts);
              case "ContinueStatement":
                var parts = ["continue"];
                if (n.label)
                  parts.push(" ", path.call(print, "label"));
                parts.push(";");
                return concat(parts);
              case "LabeledStatement":
                return concat([path.call(print, "label"), ":\n", path.call(print, "body")]);
              case "TryStatement":
                var parts = ["try ", path.call(print, "block")];
                if (n.handler) {
                  parts.push(" ", path.call(print, "handler"));
                } else if (n.handlers) {
                  path.each(function(handlerPath) {
                    parts.push(" ", print(handlerPath));
                  }, "handlers");
                }
                if (n.finalizer) {
                  parts.push(" finally ", path.call(print, "finalizer"));
                }
                return concat(parts);
              case "CatchClause":
                var parts = ["catch (", path.call(print, "param")];
                if (n.guard)
                  parts.push(" if ", path.call(print, "guard"));
                parts.push(") ", path.call(print, "body"));
                return concat(parts);
              case "ThrowStatement":
                return concat(["throw ", path.call(print, "argument"), ";"]);
              case "SwitchStatement":
                return concat(["switch (", path.call(print, "discriminant"), ") {\n", fromString("\n").join(path.map(print, "cases")), "\n}"]);
              case "SwitchCase":
                var parts = [];
                if (n.test)
                  parts.push("case ", path.call(print, "test"), ":");
                else
                  parts.push("default:");
                if (n.consequent.length > 0) {
                  parts.push("\n", path.call(function(consequentPath) {
                    return printStatementSequence(consequentPath, options, print);
                  }, "consequent").indent(options.tabWidth));
                }
                return concat(parts);
              case "DebuggerStatement":
                return fromString("debugger;");
              case "XJSAttribute":
              case "JSXAttribute":
                var parts = [path.call(print, "name")];
                if (n.value)
                  parts.push("=", path.call(print, "value"));
                return concat(parts);
              case "XJSIdentifier":
              case "JSXIdentifier":
                return fromString(n.name, options);
              case "XJSNamespacedName":
              case "JSXNamespacedName":
                return fromString(":").join([path.call(print, "namespace"), path.call(print, "name")]);
              case "XJSMemberExpression":
              case "JSXMemberExpression":
                return fromString(".").join([path.call(print, "object"), path.call(print, "property")]);
              case "XJSSpreadAttribute":
              case "JSXSpreadAttribute":
                return concat(["{...", path.call(print, "argument"), "}"]);
              case "XJSExpressionContainer":
              case "JSXExpressionContainer":
                return concat(["{", path.call(print, "expression"), "}"]);
              case "XJSElement":
              case "JSXElement":
                var openingLines = path.call(print, "openingElement");
                if (n.openingElement.selfClosing) {
                  assert.ok(!n.closingElement);
                  return openingLines;
                }
                var childLines = concat(path.map(function(childPath) {
                  var child = childPath.getValue();
                  if (namedTypes.Literal.check(child) && typeof child.value === "string") {
                    if (/\S/.test(child.value)) {
                      return child.value.replace(/^\s+|\s+$/g, "");
                    } else if (/\n/.test(child.value)) {
                      return "\n";
                    }
                  }
                  return print(childPath);
                }, "children")).indentTail(options.tabWidth);
                var closingLines = path.call(print, "closingElement");
                return concat([openingLines, childLines, closingLines]);
              case "XJSOpeningElement":
              case "JSXOpeningElement":
                var parts = ["<", path.call(print, "name")];
                var attrParts = [];
                path.each(function(attrPath) {
                  attrParts.push(" ", print(attrPath));
                }, "attributes");
                var attrLines = concat(attrParts);
                var needLineWrap = (attrLines.length > 1 || attrLines.getLineLength(1) > options.wrapColumn);
                if (needLineWrap) {
                  attrParts.forEach(function(part, i) {
                    if (part === " ") {
                      assert.strictEqual(i % 2, 0);
                      attrParts[i] = "\n";
                    }
                  });
                  attrLines = concat(attrParts).indentTail(options.tabWidth);
                }
                parts.push(attrLines, n.selfClosing ? " />" : ">");
                return concat(parts);
              case "XJSClosingElement":
              case "JSXClosingElement":
                return concat(["</", path.call(print, "name"), ">"]);
              case "XJSText":
              case "JSXText":
                return fromString(n.value, options);
              case "XJSEmptyExpression":
              case "JSXEmptyExpression":
                return fromString("");
              case "TypeAnnotatedIdentifier":
                return concat([path.call(print, "annotation"), " ", path.call(print, "identifier")]);
              case "ClassBody":
                if (n.body.length === 0) {
                  return fromString("{}");
                }
                return concat(["{\n", path.call(function(bodyPath) {
                  return printStatementSequence(bodyPath, options, print);
                }, "body").indent(options.tabWidth), "\n}"]);
              case "ClassPropertyDefinition":
                var parts = ["static ", path.call(print, "definition")];
                if (!namedTypes.MethodDefinition.check(n.definition))
                  parts.push(";");
                return concat(parts);
              case "ClassProperty":
                var parts = [];
                if (n.static)
                  parts.push("static ");
                parts.push(path.call(print, "key"));
                if (n.typeAnnotation)
                  parts.push(path.call(print, "typeAnnotation"));
                if (n.value)
                  parts.push(" = ", path.call(print, "value"));
                parts.push(";");
                return concat(parts);
              case "ClassDeclaration":
              case "ClassExpression":
                var parts = ["class"];
                if (n.id) {
                  parts.push(" ", path.call(print, "id"), path.call(print, "typeParameters"));
                }
                if (n.superClass) {
                  parts.push(" extends ", path.call(print, "superClass"), path.call(print, "superTypeParameters"));
                }
                if (n["implements"]) {
                  parts.push(" implements ", fromString(", ").join(path.map(print, "implements")));
                }
                parts.push(" ", path.call(print, "body"));
                return concat(parts);
              case "TemplateElement":
                return fromString(n.value.raw, options);
              case "TemplateLiteral":
                var expressions = path.map(print, "expressions");
                var parts = ["`"];
                path.each(function(childPath) {
                  var i = childPath.getName();
                  parts.push(print(childPath));
                  if (i < expressions.length) {
                    parts.push("${", expressions[i], "}");
                  }
                }, "quasis");
                parts.push("`");
                return concat(parts);
              case "TaggedTemplateExpression":
                return concat([path.call(print, "tag"), path.call(print, "quasi")]);
              case "Node":
              case "Printable":
              case "SourceLocation":
              case "Position":
              case "Statement":
              case "Function":
              case "Pattern":
              case "Expression":
              case "Declaration":
              case "Specifier":
              case "NamedSpecifier":
              case "Comment":
              case "MemberTypeAnnotation":
              case "TupleTypeAnnotation":
              case "Type":
                throw new Error("unprintable type: " + JSON.stringify(n.type));
              case "CommentBlock":
              case "Block":
                return concat(["/*", fromString(n.value, options), "*/"]);
              case "CommentLine":
              case "Line":
                return concat(["//", fromString(n.value, options)]);
              case "TypeAnnotation":
                var parts = [];
                if (n.typeAnnotation) {
                  if (n.typeAnnotation.type !== "FunctionTypeAnnotation") {
                    parts.push(": ");
                  }
                  parts.push(path.call(print, "typeAnnotation"));
                  return concat(parts);
                }
                return fromString("");
              case "AnyTypeAnnotation":
                return fromString("any", options);
              case "MixedTypeAnnotation":
                return fromString("mixed", options);
              case "ArrayTypeAnnotation":
                return concat([path.call(print, "elementType"), "[]"]);
              case "BooleanTypeAnnotation":
                return fromString("boolean", options);
              case "BooleanLiteralTypeAnnotation":
                assert.strictEqual(typeof n.value, "boolean");
                return fromString("" + n.value, options);
              case "DeclareClass":
                return concat([fromString("declare class ", options), path.call(print, "id"), " ", path.call(print, "body")]);
              case "DeclareFunction":
                return concat([fromString("declare function ", options), path.call(print, "id"), ";"]);
              case "DeclareModule":
                return concat([fromString("declare module ", options), path.call(print, "id"), " ", path.call(print, "body")]);
              case "DeclareVariable":
                return concat([fromString("declare var ", options), path.call(print, "id"), ";"]);
              case "FunctionTypeAnnotation":
                var parts = [];
                var parent = path.getParentNode(0);
                var isArrowFunctionTypeAnnotation = !(namedTypes.ObjectTypeCallProperty.check(parent) || namedTypes.DeclareFunction.check(path.getParentNode(2)));
                var needsColon = isArrowFunctionTypeAnnotation && !namedTypes.FunctionTypeParam.check(parent);
                if (needsColon) {
                  parts.push(": ");
                }
                parts.push("(", fromString(", ").join(path.map(print, "params")), ")");
                if (n.returnType) {
                  parts.push(isArrowFunctionTypeAnnotation ? " => " : ": ", path.call(print, "returnType"));
                }
                return concat(parts);
              case "FunctionTypeParam":
                return concat([path.call(print, "name"), ": ", path.call(print, "typeAnnotation")]);
              case "GenericTypeAnnotation":
                return concat([path.call(print, "id"), path.call(print, "typeParameters")]);
              case "InterfaceDeclaration":
                var parts = [fromString("interface ", options), path.call(print, "id"), path.call(print, "typeParameters"), " "];
                if (n["extends"]) {
                  parts.push("extends ", fromString(", ").join(path.map(print, "extends")));
                }
                parts.push(" ", path.call(print, "body"));
                return concat(parts);
              case "ClassImplements":
              case "InterfaceExtends":
                return concat([path.call(print, "id"), path.call(print, "typeParameters")]);
              case "IntersectionTypeAnnotation":
                return fromString(" & ").join(path.map(print, "types"));
              case "NullableTypeAnnotation":
                return concat(["?", path.call(print, "typeAnnotation")]);
              case "NumberTypeAnnotation":
                return fromString("number", options);
              case "ObjectTypeCallProperty":
                return path.call(print, "value");
              case "ObjectTypeIndexer":
                return concat(["[", path.call(print, "id"), ": ", path.call(print, "key"), "]: ", path.call(print, "value")]);
              case "ObjectTypeProperty":
                return concat([path.call(print, "key"), ": ", path.call(print, "value")]);
              case "QualifiedTypeIdentifier":
                return concat([path.call(print, "qualification"), ".", path.call(print, "id")]);
              case "StringLiteralTypeAnnotation":
                return fromString(nodeStr(n.value, options), options);
              case "NumberLiteralTypeAnnotation":
                assert.strictEqual(typeof n.value, "number");
                return fromString("" + n.value, options);
              case "StringTypeAnnotation":
                return fromString("string", options);
              case "TypeAlias":
                return concat(["type ", path.call(print, "id"), " = ", path.call(print, "right"), ";"]);
              case "TypeCastExpression":
                return concat(["(", path.call(print, "expression"), path.call(print, "typeAnnotation"), ")"]);
              case "TypeParameterDeclaration":
              case "TypeParameterInstantiation":
                return concat(["<", fromString(", ").join(path.map(print, "params")), ">"]);
              case "TypeofTypeAnnotation":
                return concat([fromString("typeof ", options), path.call(print, "argument")]);
              case "UnionTypeAnnotation":
                return fromString(" | ").join(path.map(print, "types"));
              case "VoidTypeAnnotation":
                return fromString("void", options);
              case "ClassHeritage":
              case "ComprehensionBlock":
              case "ComprehensionExpression":
              case "Glob":
              case "GeneratorExpression":
              case "LetStatement":
              case "LetExpression":
              case "GraphExpression":
              case "GraphIndexExpression":
              case "XMLDefaultDeclaration":
              case "XMLAnyName":
              case "XMLQualifiedIdentifier":
              case "XMLFunctionQualifiedIdentifier":
              case "XMLAttributeSelector":
              case "XMLFilterExpression":
              case "XML":
              case "XMLElement":
              case "XMLList":
              case "XMLEscape":
              case "XMLText":
              case "XMLStartTag":
              case "XMLEndTag":
              case "XMLPointTag":
              case "XMLName":
              case "XMLAttribute":
              case "XMLCdata":
              case "XMLComment":
              case "XMLProcessingInstruction":
              default:
                debugger;
                throw new Error("unknown type: " + JSON.stringify(n.type));
            }
            return p;
          }
          function printStatementSequence(path, options, print) {
            var inClassBody = namedTypes.ClassBody && namedTypes.ClassBody.check(path.getParentNode());
            var filtered = [];
            var sawComment = false;
            var sawStatement = false;
            path.each(function(stmtPath) {
              var i = stmtPath.getName();
              var stmt = stmtPath.getValue();
              if (!stmt) {
                return;
              }
              if (stmt.type === "EmptyStatement") {
                return;
              }
              if (namedTypes.Comment.check(stmt)) {
                sawComment = true;
              } else if (!inClassBody) {
                namedTypes.Statement.assert(stmt);
                sawStatement = true;
              }
              filtered.push({
                node: stmt,
                printed: print(stmtPath)
              });
            });
            if (sawComment) {
              assert.strictEqual(sawStatement, false, "Comments may appear as statements in otherwise empty statement " + "lists, but may not coexist with non-Comment nodes.");
            }
            var prevTrailingSpace = null;
            var len = filtered.length;
            var parts = [];
            filtered.forEach(function(info, i) {
              var printed = info.printed;
              var stmt = info.node;
              var multiLine = printed.length > 1;
              var notFirst = i > 0;
              var notLast = i < len - 1;
              var leadingSpace;
              var trailingSpace;
              var lines = stmt && stmt.loc && stmt.loc.lines;
              var trueLoc = lines && options.reuseWhitespace && util.getTrueLoc(stmt, lines);
              if (notFirst) {
                if (trueLoc) {
                  var beforeStart = lines.skipSpaces(trueLoc.start, true);
                  var beforeStartLine = beforeStart ? beforeStart.line : 1;
                  var leadingGap = trueLoc.start.line - beforeStartLine;
                  leadingSpace = Array(leadingGap + 1).join("\n");
                } else {
                  leadingSpace = multiLine ? "\n\n" : "\n";
                }
              } else {
                leadingSpace = "";
              }
              if (notLast) {
                if (trueLoc) {
                  var afterEnd = lines.skipSpaces(trueLoc.end);
                  var afterEndLine = afterEnd ? afterEnd.line : lines.length;
                  var trailingGap = afterEndLine - trueLoc.end.line;
                  trailingSpace = Array(trailingGap + 1).join("\n");
                } else {
                  trailingSpace = multiLine ? "\n\n" : "\n";
                }
              } else {
                trailingSpace = "";
              }
              parts.push(maxSpace(prevTrailingSpace, leadingSpace), printed);
              if (notLast) {
                prevTrailingSpace = trailingSpace;
              } else if (trailingSpace) {
                parts.push(trailingSpace);
              }
            });
            return concat(parts);
          }
          function maxSpace(s1, s2) {
            if (!s1 && !s2) {
              return fromString("");
            }
            if (!s1) {
              return fromString(s2);
            }
            if (!s2) {
              return fromString(s1);
            }
            var spaceLines1 = fromString(s1);
            var spaceLines2 = fromString(s2);
            if (spaceLines2.length > spaceLines1.length) {
              return spaceLines2;
            }
            return spaceLines1;
          }
          function printMethod(path, options, print) {
            var node = path.getNode();
            var kind = node.kind;
            var parts = [];
            namedTypes.FunctionExpression.assert(node.value);
            if (node.decorators) {
              path.each(function(decoratorPath) {
                parts.push(print(decoratorPath), "\n");
              }, "decorators");
            }
            if (node.value.async) {
              parts.push("async ");
            }
            if (!kind || kind === "init" || kind === "method" || kind === "constructor") {
              if (node.value.generator) {
                parts.push("*");
              }
            } else {
              assert.ok(kind === "get" || kind === "set");
              parts.push(kind, " ");
            }
            var key = path.call(print, "key");
            if (node.computed) {
              key = concat(["[", key, "]"]);
            }
            parts.push(key, path.call(print, "value", "typeParameters"), "(", path.call(function(valuePath) {
              return printFunctionParams(valuePath, options, print);
            }, "value"), ")", path.call(print, "value", "returnType"), " ", path.call(print, "value", "body"));
            return concat(parts);
          }
          function printArgumentsList(path, options, print) {
            var printed = path.map(print, "arguments");
            var joined = fromString(", ").join(printed);
            if (joined.getLineLength(1) > options.wrapColumn) {
              joined = fromString(",\n").join(printed);
              return concat(["(\n", joined.indent(options.tabWidth), options.trailingComma ? ",\n)" : "\n)"]);
            }
            return concat(["(", joined, ")"]);
          }
          function printFunctionParams(path, options, print) {
            var fun = path.getValue();
            namedTypes.Function.assert(fun);
            var printed = path.map(print, "params");
            if (fun.defaults) {
              path.each(function(defExprPath) {
                var i = defExprPath.getName();
                var p = printed[i];
                if (p && defExprPath.getValue()) {
                  printed[i] = concat([p, "=", print(defExprPath)]);
                }
              }, "defaults");
            }
            if (fun.rest) {
              printed.push(concat(["...", path.call(print, "rest")]));
            }
            var joined = fromString(", ").join(printed);
            if (joined.length > 1 || joined.getLineLength(1) > options.wrapColumn) {
              joined = fromString(",\n").join(printed);
              if (options.trailingComma && !fun.rest) {
                joined = concat([joined, ",\n"]);
              }
              return concat(["\n", joined.indent(options.tabWidth)]);
            }
            return joined;
          }
          function adjustClause(clause, options) {
            if (clause.length > 1)
              return concat([" ", clause]);
            return concat(["\n", maybeAddSemicolon(clause).indent(options.tabWidth)]);
          }
          function lastNonSpaceCharacter(lines) {
            var pos = lines.lastPos();
            do {
              var ch = lines.charAt(pos);
              if (/\S/.test(ch))
                return ch;
            } while (lines.prevPos(pos));
          }
          function endsWithBrace(lines) {
            return lastNonSpaceCharacter(lines) === "}";
          }
          function swapQuotes(str) {
            return str.replace(/['"]/g, function(m) {
              return m === '"' ? '\'' : '"';
            });
          }
          function nodeStr(str, options) {
            isString.assert(str);
            switch (options.quote) {
              case "auto":
                var double = JSON.stringify(str);
                var single = swapQuotes(JSON.stringify(swapQuotes(str)));
                return double.length > single.length ? single : double;
              case "single":
                return swapQuotes(JSON.stringify(swapQuotes(str)));
              case "double":
              default:
                return JSON.stringify(str);
            }
          }
          function maybeAddSemicolon(lines) {
            var eoc = lastNonSpaceCharacter(lines);
            if (!eoc || "\n};".indexOf(eoc) < 0)
              return concat([lines, ";"]);
            return lines;
          }
        }, {
          "1": 1,
          "561": 561,
          "562": 562,
          "563": 563,
          "565": 565,
          "567": 567,
          "569": 569,
          "570": 570,
          "601": 601
        }],
        569: [function(_dereq_, module, exports) {
          module.exports = _dereq_(202);
        }, {"202": 202}],
        570: [function(_dereq_, module, exports) {
          var assert = _dereq_(1);
          var types = _dereq_(569);
          var getFieldValue = types.getFieldValue;
          var n = types.namedTypes;
          var sourceMap = _dereq_(601);
          var SourceMapConsumer = sourceMap.SourceMapConsumer;
          var SourceMapGenerator = sourceMap.SourceMapGenerator;
          var hasOwn = Object.prototype.hasOwnProperty;
          function getUnionOfKeys() {
            var result = {};
            var argc = arguments.length;
            for (var i = 0; i < argc; ++i) {
              var keys = Object.keys(arguments[i]);
              var keyCount = keys.length;
              for (var j = 0; j < keyCount; ++j) {
                result[keys[j]] = true;
              }
            }
            return result;
          }
          exports.getUnionOfKeys = getUnionOfKeys;
          function comparePos(pos1, pos2) {
            return (pos1.line - pos2.line) || (pos1.column - pos2.column);
          }
          exports.comparePos = comparePos;
          function copyPos(pos) {
            return {
              line: pos.line,
              column: pos.column
            };
          }
          exports.copyPos = copyPos;
          exports.composeSourceMaps = function(formerMap, latterMap) {
            if (formerMap) {
              if (!latterMap) {
                return formerMap;
              }
            } else {
              return latterMap || null;
            }
            var smcFormer = new SourceMapConsumer(formerMap);
            var smcLatter = new SourceMapConsumer(latterMap);
            var smg = new SourceMapGenerator({
              file: latterMap.file,
              sourceRoot: latterMap.sourceRoot
            });
            var sourcesToContents = {};
            smcLatter.eachMapping(function(mapping) {
              var origPos = smcFormer.originalPositionFor({
                line: mapping.originalLine,
                column: mapping.originalColumn
              });
              var sourceName = origPos.source;
              if (sourceName === null) {
                return;
              }
              smg.addMapping({
                source: sourceName,
                original: copyPos(origPos),
                generated: {
                  line: mapping.generatedLine,
                  column: mapping.generatedColumn
                },
                name: mapping.name
              });
              var sourceContent = smcFormer.sourceContentFor(sourceName);
              if (sourceContent && !hasOwn.call(sourcesToContents, sourceName)) {
                sourcesToContents[sourceName] = sourceContent;
                smg.setSourceContent(sourceName, sourceContent);
              }
            });
            return smg.toJSON();
          };
          exports.getTrueLoc = function(node, lines) {
            if (!node.loc) {
              return null;
            }
            var start = node.loc.start;
            var end = node.loc.end;
            if (node.comments) {
              node.comments.forEach(function(comment) {
                if (comment.loc) {
                  if (comparePos(comment.loc.start, start) < 0) {
                    start = comment.loc.start;
                  }
                  if (comparePos(end, comment.loc.end) < 0) {
                    end = comment.loc.end;
                  }
                }
              });
            }
            return {
              start: lines.skipSpaces(start, false, false),
              end: lines.skipSpaces(end, true, false)
            };
          };
          exports.fixFaultyLocations = function(node) {
            if ((n.MethodDefinition && n.MethodDefinition.check(node)) || (n.Property.check(node) && (node.method || node.shorthand))) {
              node.value.loc = null;
              if (n.FunctionExpression.check(node.value)) {
                node.value.id = null;
              }
            }
            var loc = node.loc;
            if (loc) {
              if (loc.start.line < 1) {
                loc.start.line = 1;
              }
              if (loc.end.line < 1) {
                loc.end.line = 1;
              }
            }
          };
        }, {
          "1": 1,
          "569": 569,
          "601": 601
        }],
        571: [function(_dereq_, module, exports) {
          (function(process) {
            var types = _dereq_(569);
            var parse = _dereq_(566).parse;
            var Printer = _dereq_(568).Printer;
            function print(node, options) {
              return new Printer(options).print(node);
            }
            function prettyPrint(node, options) {
              return new Printer(options).printGenerically(node);
            }
            function run(transformer, options) {
              return runFile(process.argv[2], transformer, options);
            }
            function runFile(path, transformer, options) {
              _dereq_(3).readFile(path, "utf-8", function(err, code) {
                if (err) {
                  console.error(err);
                  return;
                }
                runString(code, transformer, options);
              });
            }
            function defaultWriteback(output) {
              process.stdout.write(output);
            }
            function runString(code, transformer, options) {
              var writeback = options && options.writeback || defaultWriteback;
              transformer(parse(code, options), function(node) {
                writeback(print(node, options).code);
              });
            }
            Object.defineProperties(exports, {
              parse: {
                enumerable: true,
                value: parse
              },
              visit: {
                enumerable: true,
                value: types.visit
              },
              print: {
                enumerable: true,
                value: print
              },
              prettyPrint: {
                enumerable: false,
                value: prettyPrint
              },
              types: {
                enumerable: false,
                value: types
              },
              run: {
                enumerable: false,
                value: run
              }
            });
          }).call(this, _dereq_(10));
        }, {
          "10": 10,
          "3": 3,
          "566": 566,
          "568": 568,
          "569": 569
        }],
        572: [function(_dereq_, module, exports) {
          (function(global) {
            ;
            (function(root) {
              var freeExports = typeof exports == 'object' && exports;
              var freeModule = typeof module == 'object' && module && module.exports == freeExports && module;
              var freeGlobal = typeof global == 'object' && global;
              if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {
                root = freeGlobal;
              }
              var ERRORS = {
                'rangeOrder': 'A range\u2019s `stop` value must be greater than or equal ' + 'to the `start` value.',
                'codePointRange': 'Invalid code point value. Code points range from ' + 'U+000000 to U+10FFFF.'
              };
              var HIGH_SURROGATE_MIN = 0xD800;
              var HIGH_SURROGATE_MAX = 0xDBFF;
              var LOW_SURROGATE_MIN = 0xDC00;
              var LOW_SURROGATE_MAX = 0xDFFF;
              var regexNull = /\\x00([^0123456789]|$)/g;
              var object = {};
              var hasOwnProperty = object.hasOwnProperty;
              var extend = function(destination, source) {
                var key;
                for (key in source) {
                  if (hasOwnProperty.call(source, key)) {
                    destination[key] = source[key];
                  }
                }
                return destination;
              };
              var forEach = function(array, callback) {
                var index = -1;
                var length = array.length;
                while (++index < length) {
                  callback(array[index], index);
                }
              };
              var toString = object.toString;
              var isArray = function(value) {
                return toString.call(value) == '[object Array]';
              };
              var isNumber = function(value) {
                return typeof value == 'number' || toString.call(value) == '[object Number]';
              };
              var zeroes = '0000';
              var pad = function(number, totalCharacters) {
                var string = String(number);
                return string.length < totalCharacters ? (zeroes + string).slice(-totalCharacters) : string;
              };
              var hex = function(number) {
                return Number(number).toString(16).toUpperCase();
              };
              var slice = [].slice;
              var dataFromCodePoints = function(codePoints) {
                var index = -1;
                var length = codePoints.length;
                var max = length - 1;
                var result = [];
                var isStart = true;
                var tmp;
                var previous = 0;
                while (++index < length) {
                  tmp = codePoints[index];
                  if (isStart) {
                    result.push(tmp);
                    previous = tmp;
                    isStart = false;
                  } else {
                    if (tmp == previous + 1) {
                      if (index != max) {
                        previous = tmp;
                        continue;
                      } else {
                        isStart = true;
                        result.push(tmp + 1);
                      }
                    } else {
                      result.push(previous + 1, tmp);
                      previous = tmp;
                    }
                  }
                }
                if (!isStart) {
                  result.push(tmp + 1);
                }
                return result;
              };
              var dataRemove = function(data, codePoint) {
                var index = 0;
                var start;
                var end;
                var length = data.length;
                while (index < length) {
                  start = data[index];
                  end = data[index + 1];
                  if (codePoint >= start && codePoint < end) {
                    if (codePoint == start) {
                      if (end == start + 1) {
                        data.splice(index, 2);
                        return data;
                      } else {
                        data[index] = codePoint + 1;
                        return data;
                      }
                    } else if (codePoint == end - 1) {
                      data[index + 1] = codePoint;
                      return data;
                    } else {
                      data.splice(index, 2, start, codePoint, codePoint + 1, end);
                      return data;
                    }
                  }
                  index += 2;
                }
                return data;
              };
              var dataRemoveRange = function(data, rangeStart, rangeEnd) {
                if (rangeEnd < rangeStart) {
                  throw Error(ERRORS.rangeOrder);
                }
                var index = 0;
                var start;
                var end;
                while (index < data.length) {
                  start = data[index];
                  end = data[index + 1] - 1;
                  if (start > rangeEnd) {
                    return data;
                  }
                  if (rangeStart <= start && rangeEnd >= end) {
                    data.splice(index, 2);
                    continue;
                  }
                  if (rangeStart >= start && rangeEnd < end) {
                    if (rangeStart == start) {
                      data[index] = rangeEnd + 1;
                      data[index + 1] = end + 1;
                      return data;
                    }
                    data.splice(index, 2, start, rangeStart, rangeEnd + 1, end + 1);
                    return data;
                  }
                  if (rangeStart >= start && rangeStart <= end) {
                    data[index + 1] = rangeStart;
                  } else if (rangeEnd >= start && rangeEnd <= end) {
                    data[index] = rangeEnd + 1;
                    return data;
                  }
                  index += 2;
                }
                return data;
              };
              var dataAdd = function(data, codePoint) {
                var index = 0;
                var start;
                var end;
                var lastIndex = null;
                var length = data.length;
                if (codePoint < 0x0 || codePoint > 0x10FFFF) {
                  throw RangeError(ERRORS.codePointRange);
                }
                while (index < length) {
                  start = data[index];
                  end = data[index + 1];
                  if (codePoint >= start && codePoint < end) {
                    return data;
                  }
                  if (codePoint == start - 1) {
                    data[index] = codePoint;
                    return data;
                  }
                  if (start > codePoint) {
                    data.splice(lastIndex != null ? lastIndex + 2 : 0, 0, codePoint, codePoint + 1);
                    return data;
                  }
                  if (codePoint == end) {
                    if (codePoint + 1 == data[index + 2]) {
                      data.splice(index, 4, start, data[index + 3]);
                      return data;
                    }
                    data[index + 1] = codePoint + 1;
                    return data;
                  }
                  lastIndex = index;
                  index += 2;
                }
                data.push(codePoint, codePoint + 1);
                return data;
              };
              var dataAddData = function(dataA, dataB) {
                var index = 0;
                var start;
                var end;
                var data = dataA.slice();
                var length = dataB.length;
                while (index < length) {
                  start = dataB[index];
                  end = dataB[index + 1] - 1;
                  if (start == end) {
                    data = dataAdd(data, start);
                  } else {
                    data = dataAddRange(data, start, end);
                  }
                  index += 2;
                }
                return data;
              };
              var dataRemoveData = function(dataA, dataB) {
                var index = 0;
                var start;
                var end;
                var data = dataA.slice();
                var length = dataB.length;
                while (index < length) {
                  start = dataB[index];
                  end = dataB[index + 1] - 1;
                  if (start == end) {
                    data = dataRemove(data, start);
                  } else {
                    data = dataRemoveRange(data, start, end);
                  }
                  index += 2;
                }
                return data;
              };
              var dataAddRange = function(data, rangeStart, rangeEnd) {
                if (rangeEnd < rangeStart) {
                  throw Error(ERRORS.rangeOrder);
                }
                if (rangeStart < 0x0 || rangeStart > 0x10FFFF || rangeEnd < 0x0 || rangeEnd > 0x10FFFF) {
                  throw RangeError(ERRORS.codePointRange);
                }
                var index = 0;
                var start;
                var end;
                var added = false;
                var length = data.length;
                while (index < length) {
                  start = data[index];
                  end = data[index + 1];
                  if (added) {
                    if (start == rangeEnd + 1) {
                      data.splice(index - 1, 2);
                      return data;
                    }
                    if (start > rangeEnd) {
                      return data;
                    }
                    if (start >= rangeStart && start <= rangeEnd) {
                      if (end > rangeStart && end - 1 <= rangeEnd) {
                        data.splice(index, 2);
                        index -= 2;
                      } else {
                        data.splice(index - 1, 2);
                        index -= 2;
                      }
                    }
                  } else if (start == rangeEnd + 1) {
                    data[index] = rangeStart;
                    return data;
                  } else if (start > rangeEnd) {
                    data.splice(index, 0, rangeStart, rangeEnd + 1);
                    return data;
                  } else if (rangeStart >= start && rangeStart < end && rangeEnd + 1 <= end) {
                    return data;
                  } else if ((rangeStart >= start && rangeStart < end) || end == rangeStart) {
                    data[index + 1] = rangeEnd + 1;
                    added = true;
                  } else if (rangeStart <= start && rangeEnd + 1 >= end) {
                    data[index] = rangeStart;
                    data[index + 1] = rangeEnd + 1;
                    added = true;
                  }
                  index += 2;
                }
                if (!added) {
                  data.push(rangeStart, rangeEnd + 1);
                }
                return data;
              };
              var dataContains = function(data, codePoint) {
                var index = 0;
                var length = data.length;
                var start = data[index];
                var end = data[length - 1];
                if (length >= 2) {
                  if (codePoint < start || codePoint > end) {
                    return false;
                  }
                }
                while (index < length) {
                  start = data[index];
                  end = data[index + 1];
                  if (codePoint >= start && codePoint < end) {
                    return true;
                  }
                  index += 2;
                }
                return false;
              };
              var dataIntersection = function(data, codePoints) {
                var index = 0;
                var length = codePoints.length;
                var codePoint;
                var result = [];
                while (index < length) {
                  codePoint = codePoints[index];
                  if (dataContains(data, codePoint)) {
                    result.push(codePoint);
                  }
                  ++index;
                }
                return dataFromCodePoints(result);
              };
              var dataIsEmpty = function(data) {
                return !data.length;
              };
              var dataIsSingleton = function(data) {
                return data.length == 2 && data[0] + 1 == data[1];
              };
              var dataToArray = function(data) {
                var index = 0;
                var start;
                var end;
                var result = [];
                var length = data.length;
                while (index < length) {
                  start = data[index];
                  end = data[index + 1];
                  while (start < end) {
                    result.push(start);
                    ++start;
                  }
                  index += 2;
                }
                return result;
              };
              var floor = Math.floor;
              var highSurrogate = function(codePoint) {
                return parseInt(floor((codePoint - 0x10000) / 0x400) + HIGH_SURROGATE_MIN, 10);
              };
              var lowSurrogate = function(codePoint) {
                return parseInt((codePoint - 0x10000) % 0x400 + LOW_SURROGATE_MIN, 10);
              };
              var stringFromCharCode = String.fromCharCode;
              var codePointToString = function(codePoint) {
                var string;
                if (codePoint == 0x09) {
                  string = '\\t';
                } else if (codePoint == 0x0A) {
                  string = '\\n';
                } else if (codePoint == 0x0C) {
                  string = '\\f';
                } else if (codePoint == 0x0D) {
                  string = '\\r';
                } else if (codePoint == 0x5C) {
                  string = '\\\\';
                } else if (codePoint == 0x24 || (codePoint >= 0x28 && codePoint <= 0x2B) || codePoint == 0x2D || codePoint == 0x2E || codePoint == 0x3F || (codePoint >= 0x5B && codePoint <= 0x5E) || (codePoint >= 0x7B && codePoint <= 0x7D)) {
                  string = '\\' + stringFromCharCode(codePoint);
                } else if (codePoint >= 0x20 && codePoint <= 0x7E) {
                  string = stringFromCharCode(codePoint);
                } else if (codePoint <= 0xFF) {
                  string = '\\x' + pad(hex(codePoint), 2);
                } else {
                  string = '\\u' + pad(hex(codePoint), 4);
                }
                return string;
              };
              var symbolToCodePoint = function(symbol) {
                var length = symbol.length;
                var first = symbol.charCodeAt(0);
                var second;
                if (first >= HIGH_SURROGATE_MIN && first <= HIGH_SURROGATE_MAX && length > 1) {
                  second = symbol.charCodeAt(1);
                  return (first - HIGH_SURROGATE_MIN) * 0x400 + second - LOW_SURROGATE_MIN + 0x10000;
                }
                return first;
              };
              var createBMPCharacterClasses = function(data) {
                var result = '';
                var index = 0;
                var start;
                var end;
                var length = data.length;
                if (dataIsSingleton(data)) {
                  return codePointToString(data[0]);
                }
                while (index < length) {
                  start = data[index];
                  end = data[index + 1] - 1;
                  if (start == end) {
                    result += codePointToString(start);
                  } else if (start + 1 == end) {
                    result += codePointToString(start) + codePointToString(end);
                  } else {
                    result += codePointToString(start) + '-' + codePointToString(end);
                  }
                  index += 2;
                }
                return '[' + result + ']';
              };
              var splitAtBMP = function(data) {
                var loneHighSurrogates = [];
                var loneLowSurrogates = [];
                var bmp = [];
                var astral = [];
                var index = 0;
                var start;
                var end;
                var length = data.length;
                while (index < length) {
                  start = data[index];
                  end = data[index + 1] - 1;
                  if (start < HIGH_SURROGATE_MIN) {
                    if (end < HIGH_SURROGATE_MIN) {
                      bmp.push(start, end + 1);
                    }
                    if (end >= HIGH_SURROGATE_MIN && end <= HIGH_SURROGATE_MAX) {
                      bmp.push(start, HIGH_SURROGATE_MIN);
                      loneHighSurrogates.push(HIGH_SURROGATE_MIN, end + 1);
                    }
                    if (end >= LOW_SURROGATE_MIN && end <= LOW_SURROGATE_MAX) {
                      bmp.push(start, HIGH_SURROGATE_MIN);
                      loneHighSurrogates.push(HIGH_SURROGATE_MIN, HIGH_SURROGATE_MAX + 1);
                      loneLowSurrogates.push(LOW_SURROGATE_MIN, end + 1);
                    }
                    if (end > LOW_SURROGATE_MAX) {
                      bmp.push(start, HIGH_SURROGATE_MIN);
                      loneHighSurrogates.push(HIGH_SURROGATE_MIN, HIGH_SURROGATE_MAX + 1);
                      loneLowSurrogates.push(LOW_SURROGATE_MIN, LOW_SURROGATE_MAX + 1);
                      if (end <= 0xFFFF) {
                        bmp.push(LOW_SURROGATE_MAX + 1, end + 1);
                      } else {
                        bmp.push(LOW_SURROGATE_MAX + 1, 0xFFFF + 1);
                        astral.push(0xFFFF + 1, end + 1);
                      }
                    }
                  } else if (start >= HIGH_SURROGATE_MIN && start <= HIGH_SURROGATE_MAX) {
                    if (end >= HIGH_SURROGATE_MIN && end <= HIGH_SURROGATE_MAX) {
                      loneHighSurrogates.push(start, end + 1);
                    }
                    if (end >= LOW_SURROGATE_MIN && end <= LOW_SURROGATE_MAX) {
                      loneHighSurrogates.push(start, HIGH_SURROGATE_MAX + 1);
                      loneLowSurrogates.push(LOW_SURROGATE_MIN, end + 1);
                    }
                    if (end > LOW_SURROGATE_MAX) {
                      loneHighSurrogates.push(start, HIGH_SURROGATE_MAX + 1);
                      loneLowSurrogates.push(LOW_SURROGATE_MIN, LOW_SURROGATE_MAX + 1);
                      if (end <= 0xFFFF) {
                        bmp.push(LOW_SURROGATE_MAX + 1, end + 1);
                      } else {
                        bmp.push(LOW_SURROGATE_MAX + 1, 0xFFFF + 1);
                        astral.push(0xFFFF + 1, end + 1);
                      }
                    }
                  } else if (start >= LOW_SURROGATE_MIN && start <= LOW_SURROGATE_MAX) {
                    if (end >= LOW_SURROGATE_MIN && end <= LOW_SURROGATE_MAX) {
                      loneLowSurrogates.push(start, end + 1);
                    }
                    if (end > LOW_SURROGATE_MAX) {
                      loneLowSurrogates.push(start, LOW_SURROGATE_MAX + 1);
                      if (end <= 0xFFFF) {
                        bmp.push(LOW_SURROGATE_MAX + 1, end + 1);
                      } else {
                        bmp.push(LOW_SURROGATE_MAX + 1, 0xFFFF + 1);
                        astral.push(0xFFFF + 1, end + 1);
                      }
                    }
                  } else if (start > LOW_SURROGATE_MAX && start <= 0xFFFF) {
                    if (end <= 0xFFFF) {
                      bmp.push(start, end + 1);
                    } else {
                      bmp.push(start, 0xFFFF + 1);
                      astral.push(0xFFFF + 1, end + 1);
                    }
                  } else {
                    astral.push(start, end + 1);
                  }
                  index += 2;
                }
                return {
                  'loneHighSurrogates': loneHighSurrogates,
                  'loneLowSurrogates': loneLowSurrogates,
                  'bmp': bmp,
                  'astral': astral
                };
              };
              var optimizeSurrogateMappings = function(surrogateMappings) {
                var result = [];
                var tmpLow = [];
                var addLow = false;
                var mapping;
                var nextMapping;
                var highSurrogates;
                var lowSurrogates;
                var nextHighSurrogates;
                var nextLowSurrogates;
                var index = -1;
                var length = surrogateMappings.length;
                while (++index < length) {
                  mapping = surrogateMappings[index];
                  nextMapping = surrogateMappings[index + 1];
                  if (!nextMapping) {
                    result.push(mapping);
                    continue;
                  }
                  highSurrogates = mapping[0];
                  lowSurrogates = mapping[1];
                  nextHighSurrogates = nextMapping[0];
                  nextLowSurrogates = nextMapping[1];
                  tmpLow = lowSurrogates;
                  while (nextHighSurrogates && highSurrogates[0] == nextHighSurrogates[0] && highSurrogates[1] == nextHighSurrogates[1]) {
                    if (dataIsSingleton(nextLowSurrogates)) {
                      tmpLow = dataAdd(tmpLow, nextLowSurrogates[0]);
                    } else {
                      tmpLow = dataAddRange(tmpLow, nextLowSurrogates[0], nextLowSurrogates[1] - 1);
                    }
                    ++index;
                    mapping = surrogateMappings[index];
                    highSurrogates = mapping[0];
                    lowSurrogates = mapping[1];
                    nextMapping = surrogateMappings[index + 1];
                    nextHighSurrogates = nextMapping && nextMapping[0];
                    nextLowSurrogates = nextMapping && nextMapping[1];
                    addLow = true;
                  }
                  result.push([highSurrogates, addLow ? tmpLow : lowSurrogates]);
                  addLow = false;
                }
                return optimizeByLowSurrogates(result);
              };
              var optimizeByLowSurrogates = function(surrogateMappings) {
                if (surrogateMappings.length == 1) {
                  return surrogateMappings;
                }
                var index = -1;
                var innerIndex = -1;
                while (++index < surrogateMappings.length) {
                  var mapping = surrogateMappings[index];
                  var lowSurrogates = mapping[1];
                  var lowSurrogateStart = lowSurrogates[0];
                  var lowSurrogateEnd = lowSurrogates[1];
                  innerIndex = index;
                  while (++innerIndex < surrogateMappings.length) {
                    var otherMapping = surrogateMappings[innerIndex];
                    var otherLowSurrogates = otherMapping[1];
                    var otherLowSurrogateStart = otherLowSurrogates[0];
                    var otherLowSurrogateEnd = otherLowSurrogates[1];
                    if (lowSurrogateStart == otherLowSurrogateStart && lowSurrogateEnd == otherLowSurrogateEnd) {
                      if (dataIsSingleton(otherMapping[0])) {
                        mapping[0] = dataAdd(mapping[0], otherMapping[0][0]);
                      } else {
                        mapping[0] = dataAddRange(mapping[0], otherMapping[0][0], otherMapping[0][1] - 1);
                      }
                      surrogateMappings.splice(innerIndex, 1);
                      --innerIndex;
                    }
                  }
                }
                return surrogateMappings;
              };
              var surrogateSet = function(data) {
                if (!data.length) {
                  return [];
                }
                var index = 0;
                var start;
                var end;
                var startHigh;
                var startLow;
                var prevStartHigh = 0;
                var prevEndHigh = 0;
                var tmpLow = [];
                var endHigh;
                var endLow;
                var surrogateMappings = [];
                var length = data.length;
                var dataHigh = [];
                while (index < length) {
                  start = data[index];
                  end = data[index + 1] - 1;
                  startHigh = highSurrogate(start);
                  startLow = lowSurrogate(start);
                  endHigh = highSurrogate(end);
                  endLow = lowSurrogate(end);
                  var startsWithLowestLowSurrogate = startLow == LOW_SURROGATE_MIN;
                  var endsWithHighestLowSurrogate = endLow == LOW_SURROGATE_MAX;
                  var complete = false;
                  if (startHigh == endHigh || startsWithLowestLowSurrogate && endsWithHighestLowSurrogate) {
                    surrogateMappings.push([[startHigh, endHigh + 1], [startLow, endLow + 1]]);
                    complete = true;
                  } else {
                    surrogateMappings.push([[startHigh, startHigh + 1], [startLow, LOW_SURROGATE_MAX + 1]]);
                  }
                  if (!complete && startHigh + 1 < endHigh) {
                    if (endsWithHighestLowSurrogate) {
                      surrogateMappings.push([[startHigh + 1, endHigh + 1], [LOW_SURROGATE_MIN, endLow + 1]]);
                      complete = true;
                    } else {
                      surrogateMappings.push([[startHigh + 1, endHigh], [LOW_SURROGATE_MIN, LOW_SURROGATE_MAX + 1]]);
                    }
                  }
                  if (!complete) {
                    surrogateMappings.push([[endHigh, endHigh + 1], [LOW_SURROGATE_MIN, endLow + 1]]);
                  }
                  prevStartHigh = startHigh;
                  prevEndHigh = endHigh;
                  index += 2;
                }
                return optimizeSurrogateMappings(surrogateMappings);
              };
              var createSurrogateCharacterClasses = function(surrogateMappings) {
                var result = [];
                forEach(surrogateMappings, function(surrogateMapping) {
                  var highSurrogates = surrogateMapping[0];
                  var lowSurrogates = surrogateMapping[1];
                  result.push(createBMPCharacterClasses(highSurrogates) + createBMPCharacterClasses(lowSurrogates));
                });
                return result.join('|');
              };
              var createCharacterClassesFromData = function(data, bmpOnly) {
                var result = [];
                var parts = splitAtBMP(data);
                var loneHighSurrogates = parts.loneHighSurrogates;
                var loneLowSurrogates = parts.loneLowSurrogates;
                var bmp = parts.bmp;
                var astral = parts.astral;
                var hasAstral = !dataIsEmpty(parts.astral);
                var hasLoneHighSurrogates = !dataIsEmpty(loneHighSurrogates);
                var hasLoneLowSurrogates = !dataIsEmpty(loneLowSurrogates);
                var surrogateMappings = surrogateSet(astral);
                if (bmpOnly) {
                  bmp = dataAddData(bmp, loneHighSurrogates);
                  hasLoneHighSurrogates = false;
                  bmp = dataAddData(bmp, loneLowSurrogates);
                  hasLoneLowSurrogates = false;
                }
                if (!dataIsEmpty(bmp)) {
                  result.push(createBMPCharacterClasses(bmp));
                }
                if (surrogateMappings.length) {
                  result.push(createSurrogateCharacterClasses(surrogateMappings));
                }
                if (hasLoneHighSurrogates) {
                  result.push(createBMPCharacterClasses(loneHighSurrogates) + '(?![\\uDC00-\\uDFFF])');
                }
                if (hasLoneLowSurrogates) {
                  result.push('(?:[^\\uD800-\\uDBFF]|^)' + createBMPCharacterClasses(loneLowSurrogates));
                }
                return result.join('|');
              };
              var regenerate = function(value) {
                if (arguments.length > 1) {
                  value = slice.call(arguments);
                }
                if (this instanceof regenerate) {
                  this.data = [];
                  return value ? this.add(value) : this;
                }
                return (new regenerate).add(value);
              };
              regenerate.version = '1.2.0';
              var proto = regenerate.prototype;
              extend(proto, {
                'add': function(value) {
                  var $this = this;
                  if (value == null) {
                    return $this;
                  }
                  if (value instanceof regenerate) {
                    $this.data = dataAddData($this.data, value.data);
                    return $this;
                  }
                  if (arguments.length > 1) {
                    value = slice.call(arguments);
                  }
                  if (isArray(value)) {
                    forEach(value, function(item) {
                      $this.add(item);
                    });
                    return $this;
                  }
                  $this.data = dataAdd($this.data, isNumber(value) ? value : symbolToCodePoint(value));
                  return $this;
                },
                'remove': function(value) {
                  var $this = this;
                  if (value == null) {
                    return $this;
                  }
                  if (value instanceof regenerate) {
                    $this.data = dataRemoveData($this.data, value.data);
                    return $this;
                  }
                  if (arguments.length > 1) {
                    value = slice.call(arguments);
                  }
                  if (isArray(value)) {
                    forEach(value, function(item) {
                      $this.remove(item);
                    });
                    return $this;
                  }
                  $this.data = dataRemove($this.data, isNumber(value) ? value : symbolToCodePoint(value));
                  return $this;
                },
                'addRange': function(start, end) {
                  var $this = this;
                  $this.data = dataAddRange($this.data, isNumber(start) ? start : symbolToCodePoint(start), isNumber(end) ? end : symbolToCodePoint(end));
                  return $this;
                },
                'removeRange': function(start, end) {
                  var $this = this;
                  var startCodePoint = isNumber(start) ? start : symbolToCodePoint(start);
                  var endCodePoint = isNumber(end) ? end : symbolToCodePoint(end);
                  $this.data = dataRemoveRange($this.data, startCodePoint, endCodePoint);
                  return $this;
                },
                'intersection': function(argument) {
                  var $this = this;
                  var array = argument instanceof regenerate ? dataToArray(argument.data) : argument;
                  $this.data = dataIntersection($this.data, array);
                  return $this;
                },
                'contains': function(codePoint) {
                  return dataContains(this.data, isNumber(codePoint) ? codePoint : symbolToCodePoint(codePoint));
                },
                'clone': function() {
                  var set = new regenerate;
                  set.data = this.data.slice(0);
                  return set;
                },
                'toString': function(options) {
                  var result = createCharacterClassesFromData(this.data, options ? options.bmpOnly : false);
                  return result.replace(regexNull, '\\0$1');
                },
                'toRegExp': function(flags) {
                  return RegExp(this.toString(), flags || '');
                },
                'valueOf': function() {
                  return dataToArray(this.data);
                }
              });
              proto.toArray = proto.valueOf;
              if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
                define(function() {
                  return regenerate;
                });
              } else if (freeExports && !freeExports.nodeType) {
                if (freeModule) {
                  freeModule.exports = regenerate;
                } else {
                  freeExports.regenerate = regenerate;
                }
              } else {
                root.regenerate = regenerate;
              }
            }(this));
          }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
        }, {}],
        573: [function(_dereq_, module, exports) {
          var assert = _dereq_(1);
          var types = _dereq_(571).types;
          var isArray = types.builtInTypes.array;
          var b = types.builders;
          var n = types.namedTypes;
          var leap = _dereq_(575);
          var meta = _dereq_(576);
          var util = _dereq_(577);
          var runtimeProperty = util.runtimeProperty;
          var hasOwn = Object.prototype.hasOwnProperty;
          function Emitter(contextId) {
            assert.ok(this instanceof Emitter);
            n.Identifier.assert(contextId);
            this.nextTempId = 0;
            Object.defineProperties(this, {
              contextId: {value: contextId},
              listing: {value: []},
              marked: {value: [true]},
              finalLoc: {value: loc()},
              tryEntries: {value: []}
            });
            Object.defineProperties(this, {leapManager: {value: new leap.LeapManager(this)}});
          }
          var Ep = Emitter.prototype;
          exports.Emitter = Emitter;
          function loc() {
            return b.literal(-1);
          }
          Ep.mark = function(loc) {
            n.Literal.assert(loc);
            var index = this.listing.length;
            if (loc.value === -1) {
              loc.value = index;
            } else {
              assert.strictEqual(loc.value, index);
            }
            this.marked[index] = true;
            return loc;
          };
          Ep.emit = function(node) {
            if (n.Expression.check(node))
              node = b.expressionStatement(node);
            n.Statement.assert(node);
            this.listing.push(node);
          };
          Ep.emitAssign = function(lhs, rhs) {
            this.emit(this.assign(lhs, rhs));
            return lhs;
          };
          Ep.assign = function(lhs, rhs) {
            return b.expressionStatement(b.assignmentExpression("=", lhs, rhs));
          };
          Ep.contextProperty = function(name, computed) {
            return b.memberExpression(this.contextId, computed ? b.literal(name) : b.identifier(name), !!computed);
          };
          Ep.stop = function(rval) {
            if (rval) {
              this.setReturnValue(rval);
            }
            this.jump(this.finalLoc);
          };
          Ep.setReturnValue = function(valuePath) {
            n.Expression.assert(valuePath.value);
            this.emitAssign(this.contextProperty("rval"), this.explodeExpression(valuePath));
          };
          Ep.clearPendingException = function(tryLoc, assignee) {
            n.Literal.assert(tryLoc);
            var catchCall = b.callExpression(this.contextProperty("catch", true), [tryLoc]);
            if (assignee) {
              this.emitAssign(assignee, catchCall);
            } else {
              this.emit(catchCall);
            }
          };
          Ep.jump = function(toLoc) {
            this.emitAssign(this.contextProperty("next"), toLoc);
            this.emit(b.breakStatement());
          };
          Ep.jumpIf = function(test, toLoc) {
            n.Expression.assert(test);
            n.Literal.assert(toLoc);
            this.emit(b.ifStatement(test, b.blockStatement([this.assign(this.contextProperty("next"), toLoc), b.breakStatement()])));
          };
          Ep.jumpIfNot = function(test, toLoc) {
            n.Expression.assert(test);
            n.Literal.assert(toLoc);
            var negatedTest;
            if (n.UnaryExpression.check(test) && test.operator === "!") {
              negatedTest = test.argument;
            } else {
              negatedTest = b.unaryExpression("!", test);
            }
            this.emit(b.ifStatement(negatedTest, b.blockStatement([this.assign(this.contextProperty("next"), toLoc), b.breakStatement()])));
          };
          Ep.makeTempVar = function() {
            return this.contextProperty("t" + this.nextTempId++);
          };
          Ep.getContextFunction = function(id) {
            return b.functionExpression(id || null, [this.contextId], b.blockStatement([this.getDispatchLoop()]), false, false);
          };
          Ep.getDispatchLoop = function() {
            var self = this;
            var cases = [];
            var current;
            var alreadyEnded = false;
            self.listing.forEach(function(stmt, i) {
              if (self.marked.hasOwnProperty(i)) {
                cases.push(b.switchCase(b.literal(i), current = []));
                alreadyEnded = false;
              }
              if (!alreadyEnded) {
                current.push(stmt);
                if (isSwitchCaseEnder(stmt))
                  alreadyEnded = true;
              }
            });
            this.finalLoc.value = this.listing.length;
            cases.push(b.switchCase(this.finalLoc, []), b.switchCase(b.literal("end"), [b.returnStatement(b.callExpression(this.contextProperty("stop"), []))]));
            return b.whileStatement(b.literal(1), b.switchStatement(b.assignmentExpression("=", this.contextProperty("prev"), this.contextProperty("next")), cases));
          };
          function isSwitchCaseEnder(stmt) {
            return n.BreakStatement.check(stmt) || n.ContinueStatement.check(stmt) || n.ReturnStatement.check(stmt) || n.ThrowStatement.check(stmt);
          }
          Ep.getTryLocsList = function() {
            if (this.tryEntries.length === 0) {
              return null;
            }
            var lastLocValue = 0;
            return b.arrayExpression(this.tryEntries.map(function(tryEntry) {
              var thisLocValue = tryEntry.firstLoc.value;
              assert.ok(thisLocValue >= lastLocValue, "try entries out of order");
              lastLocValue = thisLocValue;
              var ce = tryEntry.catchEntry;
              var fe = tryEntry.finallyEntry;
              var locs = [tryEntry.firstLoc, ce ? ce.firstLoc : null];
              if (fe) {
                locs[2] = fe.firstLoc;
                locs[3] = fe.afterLoc;
              }
              return b.arrayExpression(locs);
            }));
          };
          Ep.explode = function(path, ignoreResult) {
            assert.ok(path instanceof types.NodePath);
            var node = path.value;
            var self = this;
            n.Node.assert(node);
            if (n.Statement.check(node))
              return self.explodeStatement(path);
            if (n.Expression.check(node))
              return self.explodeExpression(path, ignoreResult);
            if (n.Declaration.check(node))
              throw getDeclError(node);
            switch (node.type) {
              case "Program":
                return path.get("body").map(self.explodeStatement, self);
              case "VariableDeclarator":
                throw getDeclError(node);
              case "Property":
              case "SwitchCase":
              case "CatchClause":
                throw new Error(node.type + " nodes should be handled by their parents");
              default:
                throw new Error("unknown Node of type " + JSON.stringify(node.type));
            }
          };
          function getDeclError(node) {
            return new Error("all declarations should have been transformed into " + "assignments before the Exploder began its work: " + JSON.stringify(node));
          }
          Ep.explodeStatement = function(path, labelId) {
            assert.ok(path instanceof types.NodePath);
            var stmt = path.value;
            var self = this;
            n.Statement.assert(stmt);
            if (labelId) {
              n.Identifier.assert(labelId);
            } else {
              labelId = null;
            }
            if (n.BlockStatement.check(stmt)) {
              return path.get("body").each(self.explodeStatement, self);
            }
            if (!meta.containsLeap(stmt)) {
              self.emit(stmt);
              return;
            }
            switch (stmt.type) {
              case "ExpressionStatement":
                self.explodeExpression(path.get("expression"), true);
                break;
              case "LabeledStatement":
                var after = loc();
                self.leapManager.withEntry(new leap.LabeledEntry(after, stmt.label), function() {
                  self.explodeStatement(path.get("body"), stmt.label);
                });
                self.mark(after);
                break;
              case "WhileStatement":
                var before = loc();
                var after = loc();
                self.mark(before);
                self.jumpIfNot(self.explodeExpression(path.get("test")), after);
                self.leapManager.withEntry(new leap.LoopEntry(after, before, labelId), function() {
                  self.explodeStatement(path.get("body"));
                });
                self.jump(before);
                self.mark(after);
                break;
              case "DoWhileStatement":
                var first = loc();
                var test = loc();
                var after = loc();
                self.mark(first);
                self.leapManager.withEntry(new leap.LoopEntry(after, test, labelId), function() {
                  self.explode(path.get("body"));
                });
                self.mark(test);
                self.jumpIf(self.explodeExpression(path.get("test")), first);
                self.mark(after);
                break;
              case "ForStatement":
                var head = loc();
                var update = loc();
                var after = loc();
                if (stmt.init) {
                  self.explode(path.get("init"), true);
                }
                self.mark(head);
                if (stmt.test) {
                  self.jumpIfNot(self.explodeExpression(path.get("test")), after);
                } else {}
                self.leapManager.withEntry(new leap.LoopEntry(after, update, labelId), function() {
                  self.explodeStatement(path.get("body"));
                });
                self.mark(update);
                if (stmt.update) {
                  self.explode(path.get("update"), true);
                }
                self.jump(head);
                self.mark(after);
                break;
              case "ForInStatement":
                var head = loc();
                var after = loc();
                var keyIterNextFn = self.makeTempVar();
                self.emitAssign(keyIterNextFn, b.callExpression(runtimeProperty("keys"), [self.explodeExpression(path.get("right"))]));
                self.mark(head);
                var keyInfoTmpVar = self.makeTempVar();
                self.jumpIf(b.memberExpression(b.assignmentExpression("=", keyInfoTmpVar, b.callExpression(keyIterNextFn, [])), b.identifier("done"), false), after);
                self.emitAssign(stmt.left, b.memberExpression(keyInfoTmpVar, b.identifier("value"), false));
                self.leapManager.withEntry(new leap.LoopEntry(after, head, labelId), function() {
                  self.explodeStatement(path.get("body"));
                });
                self.jump(head);
                self.mark(after);
                break;
              case "BreakStatement":
                self.emitAbruptCompletion({
                  type: "break",
                  target: self.leapManager.getBreakLoc(stmt.label)
                });
                break;
              case "ContinueStatement":
                self.emitAbruptCompletion({
                  type: "continue",
                  target: self.leapManager.getContinueLoc(stmt.label)
                });
                break;
              case "SwitchStatement":
                var disc = self.emitAssign(self.makeTempVar(), self.explodeExpression(path.get("discriminant")));
                var after = loc();
                var defaultLoc = loc();
                var condition = defaultLoc;
                var caseLocs = [];
                var cases = stmt.cases || [];
                for (var i = cases.length - 1; i >= 0; --i) {
                  var c = cases[i];
                  n.SwitchCase.assert(c);
                  if (c.test) {
                    condition = b.conditionalExpression(b.binaryExpression("===", disc, c.test), caseLocs[i] = loc(), condition);
                  } else {
                    caseLocs[i] = defaultLoc;
                  }
                }
                self.jump(self.explodeExpression(new types.NodePath(condition, path, "discriminant")));
                self.leapManager.withEntry(new leap.SwitchEntry(after), function() {
                  path.get("cases").each(function(casePath) {
                    var c = casePath.value;
                    var i = casePath.name;
                    self.mark(caseLocs[i]);
                    casePath.get("consequent").each(self.explodeStatement, self);
                  });
                });
                self.mark(after);
                if (defaultLoc.value === -1) {
                  self.mark(defaultLoc);
                  assert.strictEqual(after.value, defaultLoc.value);
                }
                break;
              case "IfStatement":
                var elseLoc = stmt.alternate && loc();
                var after = loc();
                self.jumpIfNot(self.explodeExpression(path.get("test")), elseLoc || after);
                self.explodeStatement(path.get("consequent"));
                if (elseLoc) {
                  self.jump(after);
                  self.mark(elseLoc);
                  self.explodeStatement(path.get("alternate"));
                }
                self.mark(after);
                break;
              case "ReturnStatement":
                self.emitAbruptCompletion({
                  type: "return",
                  value: self.explodeExpression(path.get("argument"))
                });
                break;
              case "WithStatement":
                throw new Error(node.type + " not supported in generator functions.");
              case "TryStatement":
                var after = loc();
                var handler = stmt.handler;
                if (!handler && stmt.handlers) {
                  handler = stmt.handlers[0] || null;
                }
                var catchLoc = handler && loc();
                var catchEntry = catchLoc && new leap.CatchEntry(catchLoc, handler.param);
                var finallyLoc = stmt.finalizer && loc();
                var finallyEntry = finallyLoc && new leap.FinallyEntry(finallyLoc, after);
                var tryEntry = new leap.TryEntry(self.getUnmarkedCurrentLoc(), catchEntry, finallyEntry);
                self.tryEntries.push(tryEntry);
                self.updateContextPrevLoc(tryEntry.firstLoc);
                self.leapManager.withEntry(tryEntry, function() {
                  self.explodeStatement(path.get("block"));
                  if (catchLoc) {
                    if (finallyLoc) {
                      self.jump(finallyLoc);
                    } else {
                      self.jump(after);
                    }
                    self.updateContextPrevLoc(self.mark(catchLoc));
                    var bodyPath = path.get("handler", "body");
                    var safeParam = self.makeTempVar();
                    self.clearPendingException(tryEntry.firstLoc, safeParam);
                    var catchScope = bodyPath.scope;
                    var catchParamName = handler.param.name;
                    n.CatchClause.assert(catchScope.node);
                    assert.strictEqual(catchScope.lookup(catchParamName), catchScope);
                    types.visit(bodyPath, {
                      visitIdentifier: function(path) {
                        if (util.isReference(path, catchParamName) && path.scope.lookup(catchParamName) === catchScope) {
                          return safeParam;
                        }
                        this.traverse(path);
                      },
                      visitFunction: function(path) {
                        if (path.scope.declares(catchParamName)) {
                          return false;
                        }
                        this.traverse(path);
                      }
                    });
                    self.leapManager.withEntry(catchEntry, function() {
                      self.explodeStatement(bodyPath);
                    });
                  }
                  if (finallyLoc) {
                    self.updateContextPrevLoc(self.mark(finallyLoc));
                    self.leapManager.withEntry(finallyEntry, function() {
                      self.explodeStatement(path.get("finalizer"));
                    });
                    self.emit(b.returnStatement(b.callExpression(self.contextProperty("finish"), [finallyEntry.firstLoc])));
                  }
                });
                self.mark(after);
                break;
              case "ThrowStatement":
                self.emit(b.throwStatement(self.explodeExpression(path.get("argument"))));
                break;
              default:
                throw new Error("unknown Statement of type " + JSON.stringify(stmt.type));
            }
          };
          Ep.emitAbruptCompletion = function(record) {
            if (!isValidCompletion(record)) {
              assert.ok(false, "invalid completion record: " + JSON.stringify(record));
            }
            assert.notStrictEqual(record.type, "normal", "normal completions are not abrupt");
            var abruptArgs = [b.literal(record.type)];
            if (record.type === "break" || record.type === "continue") {
              n.Literal.assert(record.target);
              abruptArgs[1] = record.target;
            } else if (record.type === "return" || record.type === "throw") {
              if (record.value) {
                n.Expression.assert(record.value);
                abruptArgs[1] = record.value;
              }
            }
            this.emit(b.returnStatement(b.callExpression(this.contextProperty("abrupt"), abruptArgs)));
          };
          function isValidCompletion(record) {
            var type = record.type;
            if (type === "normal") {
              return !hasOwn.call(record, "target");
            }
            if (type === "break" || type === "continue") {
              return !hasOwn.call(record, "value") && n.Literal.check(record.target);
            }
            if (type === "return" || type === "throw") {
              return hasOwn.call(record, "value") && !hasOwn.call(record, "target");
            }
            return false;
          }
          Ep.getUnmarkedCurrentLoc = function() {
            return b.literal(this.listing.length);
          };
          Ep.updateContextPrevLoc = function(loc) {
            if (loc) {
              n.Literal.assert(loc);
              if (loc.value === -1) {
                loc.value = this.listing.length;
              } else {
                assert.strictEqual(loc.value, this.listing.length);
              }
            } else {
              loc = this.getUnmarkedCurrentLoc();
            }
            this.emitAssign(this.contextProperty("prev"), loc);
          };
          Ep.explodeExpression = function(path, ignoreResult) {
            assert.ok(path instanceof types.NodePath);
            var expr = path.value;
            if (expr) {
              n.Expression.assert(expr);
            } else {
              return expr;
            }
            var self = this;
            var result;
            function finish(expr) {
              n.Expression.assert(expr);
              if (ignoreResult) {
                self.emit(expr);
              } else {
                return expr;
              }
            }
            if (!meta.containsLeap(expr)) {
              return finish(expr);
            }
            var hasLeapingChildren = meta.containsLeap.onlyChildren(expr);
            function explodeViaTempVar(tempVar, childPath, ignoreChildResult) {
              assert.ok(childPath instanceof types.NodePath);
              assert.ok(!ignoreChildResult || !tempVar, "Ignoring the result of a child expression but forcing it to " + "be assigned to a temporary variable?");
              var result = self.explodeExpression(childPath, ignoreChildResult);
              if (ignoreChildResult) {} else if (tempVar || (hasLeapingChildren && !n.Literal.check(result))) {
                result = self.emitAssign(tempVar || self.makeTempVar(), result);
              }
              return result;
            }
            switch (expr.type) {
              case "MemberExpression":
                return finish(b.memberExpression(self.explodeExpression(path.get("object")), expr.computed ? explodeViaTempVar(null, path.get("property")) : expr.property, expr.computed));
              case "CallExpression":
                var calleePath = path.get("callee");
                var argsPath = path.get("arguments");
                var newCallee;
                var newArgs = [];
                var hasLeapingArgs = false;
                argsPath.each(function(argPath) {
                  hasLeapingArgs = hasLeapingArgs || meta.containsLeap(argPath.value);
                });
                if (n.MemberExpression.check(calleePath.value)) {
                  if (hasLeapingArgs) {
                    var newObject = explodeViaTempVar(self.makeTempVar(), calleePath.get("object"));
                    var newProperty = calleePath.value.computed ? explodeViaTempVar(null, calleePath.get("property")) : calleePath.value.property;
                    newArgs.unshift(newObject);
                    newCallee = b.memberExpression(b.memberExpression(newObject, newProperty, calleePath.value.computed), b.identifier("call"), false);
                  } else {
                    newCallee = self.explodeExpression(calleePath);
                  }
                } else {
                  newCallee = self.explodeExpression(calleePath);
                  if (n.MemberExpression.check(newCallee)) {
                    newCallee = b.sequenceExpression([b.literal(0), newCallee]);
                  }
                }
                argsPath.each(function(argPath) {
                  newArgs.push(explodeViaTempVar(null, argPath));
                });
                return finish(b.callExpression(newCallee, newArgs));
              case "NewExpression":
                return finish(b.newExpression(explodeViaTempVar(null, path.get("callee")), path.get("arguments").map(function(argPath) {
                  return explodeViaTempVar(null, argPath);
                })));
              case "ObjectExpression":
                return finish(b.objectExpression(path.get("properties").map(function(propPath) {
                  return b.property(propPath.value.kind, propPath.value.key, explodeViaTempVar(null, propPath.get("value")));
                })));
              case "ArrayExpression":
                return finish(b.arrayExpression(path.get("elements").map(function(elemPath) {
                  return explodeViaTempVar(null, elemPath);
                })));
              case "SequenceExpression":
                var lastIndex = expr.expressions.length - 1;
                path.get("expressions").each(function(exprPath) {
                  if (exprPath.name === lastIndex) {
                    result = self.explodeExpression(exprPath, ignoreResult);
                  } else {
                    self.explodeExpression(exprPath, true);
                  }
                });
                return result;
              case "LogicalExpression":
                var after = loc();
                if (!ignoreResult) {
                  result = self.makeTempVar();
                }
                var left = explodeViaTempVar(result, path.get("left"));
                if (expr.operator === "&&") {
                  self.jumpIfNot(left, after);
                } else {
                  assert.strictEqual(expr.operator, "||");
                  self.jumpIf(left, after);
                }
                explodeViaTempVar(result, path.get("right"), ignoreResult);
                self.mark(after);
                return result;
              case "ConditionalExpression":
                var elseLoc = loc();
                var after = loc();
                var test = self.explodeExpression(path.get("test"));
                self.jumpIfNot(test, elseLoc);
                if (!ignoreResult) {
                  result = self.makeTempVar();
                }
                explodeViaTempVar(result, path.get("consequent"), ignoreResult);
                self.jump(after);
                self.mark(elseLoc);
                explodeViaTempVar(result, path.get("alternate"), ignoreResult);
                self.mark(after);
                return result;
              case "UnaryExpression":
                return finish(b.unaryExpression(expr.operator, self.explodeExpression(path.get("argument")), !!expr.prefix));
              case "BinaryExpression":
                return finish(b.binaryExpression(expr.operator, explodeViaTempVar(null, path.get("left")), explodeViaTempVar(null, path.get("right"))));
              case "AssignmentExpression":
                return finish(b.assignmentExpression(expr.operator, self.explodeExpression(path.get("left")), self.explodeExpression(path.get("right"))));
              case "UpdateExpression":
                return finish(b.updateExpression(expr.operator, self.explodeExpression(path.get("argument")), expr.prefix));
              case "YieldExpression":
                var after = loc();
                var arg = expr.argument && self.explodeExpression(path.get("argument"));
                if (arg && expr.delegate) {
                  var result = self.makeTempVar();
                  self.emit(b.returnStatement(b.callExpression(self.contextProperty("delegateYield"), [arg, b.literal(result.property.name), after])));
                  self.mark(after);
                  return result;
                }
                self.emitAssign(self.contextProperty("next"), after);
                self.emit(b.returnStatement(arg || null));
                self.mark(after);
                return self.contextProperty("sent");
              default:
                throw new Error("unknown Expression of type " + JSON.stringify(expr.type));
            }
          };
        }, {
          "1": 1,
          "571": 571,
          "575": 575,
          "576": 576,
          "577": 577
        }],
        574: [function(_dereq_, module, exports) {
          var assert = _dereq_(1);
          var types = _dereq_(571).types;
          var n = types.namedTypes;
          var b = types.builders;
          var hasOwn = Object.prototype.hasOwnProperty;
          exports.hoist = function(funPath) {
            assert.ok(funPath instanceof types.NodePath);
            n.Function.assert(funPath.value);
            var vars = {};
            function varDeclToExpr(vdec, includeIdentifiers) {
              n.VariableDeclaration.assert(vdec);
              var exprs = [];
              vdec.declarations.forEach(function(dec) {
                vars[dec.id.name] = dec.id;
                if (dec.init) {
                  exprs.push(b.assignmentExpression("=", dec.id, dec.init));
                } else if (includeIdentifiers) {
                  exprs.push(dec.id);
                }
              });
              if (exprs.length === 0)
                return null;
              if (exprs.length === 1)
                return exprs[0];
              return b.sequenceExpression(exprs);
            }
            types.visit(funPath.get("body"), {
              visitVariableDeclaration: function(path) {
                var expr = varDeclToExpr(path.value, false);
                if (expr === null) {
                  path.replace();
                } else {
                  return b.expressionStatement(expr);
                }
                return false;
              },
              visitForStatement: function(path) {
                var init = path.value.init;
                if (n.VariableDeclaration.check(init)) {
                  path.get("init").replace(varDeclToExpr(init, false));
                }
                this.traverse(path);
              },
              visitForInStatement: function(path) {
                var left = path.value.left;
                if (n.VariableDeclaration.check(left)) {
                  path.get("left").replace(varDeclToExpr(left, true));
                }
                this.traverse(path);
              },
              visitFunctionDeclaration: function(path) {
                var node = path.value;
                vars[node.id.name] = node.id;
                var parentNode = path.parent.node;
                var assignment = b.expressionStatement(b.assignmentExpression("=", node.id, b.functionExpression(node.id, node.params, node.body, node.generator, node.expression)));
                if (n.BlockStatement.check(path.parent.node)) {
                  path.parent.get("body").unshift(assignment);
                  path.replace();
                } else {
                  path.replace(assignment);
                }
                return false;
              },
              visitFunctionExpression: function(path) {
                return false;
              }
            });
            var paramNames = {};
            funPath.get("params").each(function(paramPath) {
              var param = paramPath.value;
              if (n.Identifier.check(param)) {
                paramNames[param.name] = param;
              } else {}
            });
            var declarations = [];
            Object.keys(vars).forEach(function(name) {
              if (!hasOwn.call(paramNames, name)) {
                declarations.push(b.variableDeclarator(vars[name], null));
              }
            });
            if (declarations.length === 0) {
              return null;
            }
            return b.variableDeclaration("var", declarations);
          };
        }, {
          "1": 1,
          "571": 571
        }],
        575: [function(_dereq_, module, exports) {
          var assert = _dereq_(1);
          var types = _dereq_(571).types;
          var n = types.namedTypes;
          var b = types.builders;
          var inherits = _dereq_(13).inherits;
          var hasOwn = Object.prototype.hasOwnProperty;
          function Entry() {
            assert.ok(this instanceof Entry);
          }
          function FunctionEntry(returnLoc) {
            Entry.call(this);
            n.Literal.assert(returnLoc);
            this.returnLoc = returnLoc;
          }
          inherits(FunctionEntry, Entry);
          exports.FunctionEntry = FunctionEntry;
          function LoopEntry(breakLoc, continueLoc, label) {
            Entry.call(this);
            n.Literal.assert(breakLoc);
            n.Literal.assert(continueLoc);
            if (label) {
              n.Identifier.assert(label);
            } else {
              label = null;
            }
            this.breakLoc = breakLoc;
            this.continueLoc = continueLoc;
            this.label = label;
          }
          inherits(LoopEntry, Entry);
          exports.LoopEntry = LoopEntry;
          function SwitchEntry(breakLoc) {
            Entry.call(this);
            n.Literal.assert(breakLoc);
            this.breakLoc = breakLoc;
          }
          inherits(SwitchEntry, Entry);
          exports.SwitchEntry = SwitchEntry;
          function TryEntry(firstLoc, catchEntry, finallyEntry) {
            Entry.call(this);
            n.Literal.assert(firstLoc);
            if (catchEntry) {
              assert.ok(catchEntry instanceof CatchEntry);
            } else {
              catchEntry = null;
            }
            if (finallyEntry) {
              assert.ok(finallyEntry instanceof FinallyEntry);
            } else {
              finallyEntry = null;
            }
            assert.ok(catchEntry || finallyEntry);
            this.firstLoc = firstLoc;
            this.catchEntry = catchEntry;
            this.finallyEntry = finallyEntry;
          }
          inherits(TryEntry, Entry);
          exports.TryEntry = TryEntry;
          function CatchEntry(firstLoc, paramId) {
            Entry.call(this);
            n.Literal.assert(firstLoc);
            n.Identifier.assert(paramId);
            this.firstLoc = firstLoc;
            this.paramId = paramId;
          }
          inherits(CatchEntry, Entry);
          exports.CatchEntry = CatchEntry;
          function FinallyEntry(firstLoc, afterLoc) {
            Entry.call(this);
            n.Literal.assert(firstLoc);
            n.Literal.assert(afterLoc);
            this.firstLoc = firstLoc;
            this.afterLoc = afterLoc;
          }
          inherits(FinallyEntry, Entry);
          exports.FinallyEntry = FinallyEntry;
          function LabeledEntry(breakLoc, label) {
            Entry.call(this);
            n.Literal.assert(breakLoc);
            n.Identifier.assert(label);
            this.breakLoc = breakLoc;
            this.label = label;
          }
          inherits(LabeledEntry, Entry);
          exports.LabeledEntry = LabeledEntry;
          function LeapManager(emitter) {
            assert.ok(this instanceof LeapManager);
            var Emitter = _dereq_(573).Emitter;
            assert.ok(emitter instanceof Emitter);
            this.emitter = emitter;
            this.entryStack = [new FunctionEntry(emitter.finalLoc)];
          }
          var LMp = LeapManager.prototype;
          exports.LeapManager = LeapManager;
          LMp.withEntry = function(entry, callback) {
            assert.ok(entry instanceof Entry);
            this.entryStack.push(entry);
            try {
              callback.call(this.emitter);
            } finally {
              var popped = this.entryStack.pop();
              assert.strictEqual(popped, entry);
            }
          };
          LMp._findLeapLocation = function(property, label) {
            for (var i = this.entryStack.length - 1; i >= 0; --i) {
              var entry = this.entryStack[i];
              var loc = entry[property];
              if (loc) {
                if (label) {
                  if (entry.label && entry.label.name === label.name) {
                    return loc;
                  }
                } else if (entry instanceof LabeledEntry) {} else {
                  return loc;
                }
              }
            }
            return null;
          };
          LMp.getBreakLoc = function(label) {
            return this._findLeapLocation("breakLoc", label);
          };
          LMp.getContinueLoc = function(label) {
            return this._findLeapLocation("continueLoc", label);
          };
        }, {
          "1": 1,
          "13": 13,
          "571": 571,
          "573": 573
        }],
        576: [function(_dereq_, module, exports) {
          var assert = _dereq_(1);
          var m = _dereq_(560).makeAccessor();
          var types = _dereq_(571).types;
          var isArray = types.builtInTypes.array;
          var n = types.namedTypes;
          var hasOwn = Object.prototype.hasOwnProperty;
          function makePredicate(propertyName, knownTypes) {
            function onlyChildren(node) {
              n.Node.assert(node);
              var result = false;
              function check(child) {
                if (result) {} else if (isArray.check(child)) {
                  child.some(check);
                } else if (n.Node.check(child)) {
                  assert.strictEqual(result, false);
                  result = predicate(child);
                }
                return result;
              }
              types.eachField(node, function(name, child) {
                check(child);
              });
              return result;
            }
            function predicate(node) {
              n.Node.assert(node);
              var meta = m(node);
              if (hasOwn.call(meta, propertyName))
                return meta[propertyName];
              if (hasOwn.call(opaqueTypes, node.type))
                return meta[propertyName] = false;
              if (hasOwn.call(knownTypes, node.type))
                return meta[propertyName] = true;
              return meta[propertyName] = onlyChildren(node);
            }
            predicate.onlyChildren = onlyChildren;
            return predicate;
          }
          var opaqueTypes = {FunctionExpression: true};
          var sideEffectTypes = {
            CallExpression: true,
            ForInStatement: true,
            UnaryExpression: true,
            BinaryExpression: true,
            AssignmentExpression: true,
            UpdateExpression: true,
            NewExpression: true
          };
          var leapTypes = {
            YieldExpression: true,
            BreakStatement: true,
            ContinueStatement: true,
            ReturnStatement: true,
            ThrowStatement: true
          };
          for (var type in leapTypes) {
            if (hasOwn.call(leapTypes, type)) {
              sideEffectTypes[type] = leapTypes[type];
            }
          }
          exports.hasSideEffects = makePredicate("hasSideEffects", sideEffectTypes);
          exports.containsLeap = makePredicate("containsLeap", leapTypes);
        }, {
          "1": 1,
          "560": 560,
          "571": 571
        }],
        577: [function(_dereq_, module, exports) {
          var assert = _dereq_(1);
          var types = _dereq_(571).types;
          var n = types.namedTypes;
          var b = types.builders;
          var hasOwn = Object.prototype.hasOwnProperty;
          exports.defaults = function(obj) {
            var len = arguments.length;
            var extension;
            for (var i = 1; i < len; ++i) {
              if ((extension = arguments[i])) {
                for (var key in extension) {
                  if (hasOwn.call(extension, key) && !hasOwn.call(obj, key)) {
                    obj[key] = extension[key];
                  }
                }
              }
            }
            return obj;
          };
          exports.runtimeProperty = function(name) {
            return b.memberExpression(b.identifier("regeneratorRuntime"), b.identifier(name), false);
          };
          exports.isReference = function(path, name) {
            var node = path.value;
            if (!n.Identifier.check(node)) {
              return false;
            }
            if (name && node.name !== name) {
              return false;
            }
            var parent = path.parent.value;
            switch (parent.type) {
              case "VariableDeclarator":
                return path.name === "init";
              case "MemberExpression":
                return path.name === "object" || (parent.computed && path.name === "property");
              case "FunctionExpression":
              case "FunctionDeclaration":
              case "ArrowFunctionExpression":
                if (path.name === "id") {
                  return false;
                }
                if (path.parentPath.name === "params" && parent.params === path.parentPath.value && parent.params[path.name] === node) {
                  return false;
                }
                return true;
              case "ClassDeclaration":
              case "ClassExpression":
                return path.name !== "id";
              case "CatchClause":
                return path.name !== "param";
              case "Property":
              case "MethodDefinition":
                return path.name !== "key";
              case "ImportSpecifier":
              case "ImportDefaultSpecifier":
              case "ImportNamespaceSpecifier":
              case "LabeledStatement":
                return false;
              default:
                return true;
            }
          };
        }, {
          "1": 1,
          "571": 571
        }],
        578: [function(_dereq_, module, exports) {
          var assert = _dereq_(1);
          var fs = _dereq_(3);
          var recast = _dereq_(571);
          var types = recast.types;
          var n = types.namedTypes;
          var b = types.builders;
          var isArray = types.builtInTypes.array;
          var isObject = types.builtInTypes.object;
          var NodePath = types.NodePath;
          var hoist = _dereq_(574).hoist;
          var Emitter = _dereq_(573).Emitter;
          var util = _dereq_(577);
          var runtimeProperty = util.runtimeProperty;
          var getMarkInfo = _dereq_(560).makeAccessor();
          exports.transform = function transform(node, options) {
            options = options || {};
            var path = node instanceof NodePath ? node : new NodePath(node);
            visitor.visit(path, options);
            node = path.value;
            if (options.includeRuntime === true || (options.includeRuntime === 'if used' && visitor.wasChangeReported())) {
              injectRuntime(n.File.check(node) ? node.program : node);
            }
            options.madeChanges = visitor.wasChangeReported();
            return node;
          };
          function injectRuntime(program) {
            n.Program.assert(program);
            var runtimePath = _dereq_(579).runtime.path;
            var runtime = fs.readFileSync(runtimePath, "utf8");
            var runtimeBody = recast.parse(runtime, {sourceFileName: runtimePath}).program.body;
            var body = program.body;
            body.unshift.apply(body, runtimeBody);
          }
          var visitor = types.PathVisitor.fromMethodsObject({
            reset: function(node, options) {
              this.options = options;
            },
            visitFunction: function(path) {
              this.traverse(path);
              var node = path.value;
              var shouldTransformAsync = node.async && !this.options.disableAsync;
              if (!node.generator && !shouldTransformAsync) {
                return;
              }
              this.reportChanged();
              if (node.expression) {
                node.expression = false;
                node.body = b.blockStatement([b.returnStatement(node.body)]);
              }
              if (shouldTransformAsync) {
                awaitVisitor.visit(path.get("body"));
              }
              var outerBody = [];
              var innerBody = [];
              var bodyPath = path.get("body", "body");
              bodyPath.each(function(childPath) {
                var node = childPath.value;
                if (node && node._blockHoist != null) {
                  outerBody.push(node);
                } else {
                  innerBody.push(node);
                }
              });
              if (outerBody.length > 0) {
                bodyPath.replace(innerBody);
              }
              var outerFnExpr = getOuterFnExpr(path);
              n.Identifier.assert(node.id);
              var innerFnId = b.identifier(node.id.name + "$");
              var contextId = path.scope.declareTemporary("context$");
              var argsId = path.scope.declareTemporary("args$");
              var vars = hoist(path);
              var didRenameArguments = renameArguments(path, argsId);
              if (didRenameArguments) {
                vars = vars || b.variableDeclaration("var", []);
                vars.declarations.push(b.variableDeclarator(argsId, b.identifier("arguments")));
              }
              var emitter = new Emitter(contextId);
              emitter.explode(path.get("body"));
              if (vars && vars.declarations.length > 0) {
                outerBody.push(vars);
              }
              var wrapArgs = [emitter.getContextFunction(innerFnId), node.generator ? outerFnExpr : b.literal(null), b.thisExpression()];
              var tryLocsList = emitter.getTryLocsList();
              if (tryLocsList) {
                wrapArgs.push(tryLocsList);
              }
              var wrapCall = b.callExpression(runtimeProperty(shouldTransformAsync ? "async" : "wrap"), wrapArgs);
              outerBody.push(b.returnStatement(wrapCall));
              node.body = b.blockStatement(outerBody);
              var wasGeneratorFunction = node.generator;
              if (wasGeneratorFunction) {
                node.generator = false;
              }
              if (shouldTransformAsync) {
                node.async = false;
              }
              if (wasGeneratorFunction && n.Expression.check(node)) {
                return b.callExpression(runtimeProperty("mark"), [node]);
              }
            },
            visitForOfStatement: function(path) {
              this.traverse(path);
              var node = path.value;
              var tempIterId = path.scope.declareTemporary("t$");
              var tempIterDecl = b.variableDeclarator(tempIterId, b.callExpression(runtimeProperty("values"), [node.right]));
              var tempInfoId = path.scope.declareTemporary("t$");
              var tempInfoDecl = b.variableDeclarator(tempInfoId, null);
              var init = node.left;
              var loopId;
              if (n.VariableDeclaration.check(init)) {
                loopId = init.declarations[0].id;
                init.declarations.push(tempIterDecl, tempInfoDecl);
              } else {
                loopId = init;
                init = b.variableDeclaration("var", [tempIterDecl, tempInfoDecl]);
              }
              n.Identifier.assert(loopId);
              var loopIdAssignExprStmt = b.expressionStatement(b.assignmentExpression("=", loopId, b.memberExpression(tempInfoId, b.identifier("value"), false)));
              if (n.BlockStatement.check(node.body)) {
                node.body.body.unshift(loopIdAssignExprStmt);
              } else {
                node.body = b.blockStatement([loopIdAssignExprStmt, node.body]);
              }
              return b.forStatement(init, b.unaryExpression("!", b.memberExpression(b.assignmentExpression("=", tempInfoId, b.callExpression(b.memberExpression(tempIterId, b.identifier("next"), false), [])), b.identifier("done"), false)), null, node.body);
            }
          });
          function getOuterFnExpr(funPath) {
            var node = funPath.value;
            n.Function.assert(node);
            if (node.generator && n.FunctionDeclaration.check(node)) {
              var pp = funPath.parent;
              while (pp && !(n.BlockStatement.check(pp.value) || n.Program.check(pp.value))) {
                pp = pp.parent;
              }
              if (!pp) {
                return node.id;
              }
              var markDecl = getRuntimeMarkDecl(pp);
              var markedArray = markDecl.declarations[0].id;
              var funDeclIdArray = markDecl.declarations[0].init.callee.object;
              n.ArrayExpression.assert(funDeclIdArray);
              var index = funDeclIdArray.elements.length;
              funDeclIdArray.elements.push(node.id);
              return b.memberExpression(markedArray, b.literal(index), true);
            }
            return node.id || (node.id = funPath.scope.parent.declareTemporary("callee$"));
          }
          function getRuntimeMarkDecl(blockPath) {
            assert.ok(blockPath instanceof NodePath);
            var block = blockPath.node;
            isArray.assert(block.body);
            var info = getMarkInfo(block);
            if (info.decl) {
              return info.decl;
            }
            info.decl = b.variableDeclaration("var", [b.variableDeclarator(blockPath.scope.declareTemporary("marked"), b.callExpression(b.memberExpression(b.arrayExpression([]), b.identifier("map"), false), [runtimeProperty("mark")]))]);
            for (var i = 0; i < block.body.length; ++i) {
              if (!shouldNotHoistAbove(blockPath.get("body", i))) {
                break;
              }
            }
            blockPath.get("body").insertAt(i, info.decl);
            return info.decl;
          }
          function shouldNotHoistAbove(stmtPath) {
            var value = stmtPath.value;
            n.Statement.assert(value);
            return n.ExpressionStatement.check(value) && n.Literal.check(value.expression) && value.expression.value === "use strict";
          }
          function renameArguments(funcPath, argsId) {
            assert.ok(funcPath instanceof types.NodePath);
            var func = funcPath.value;
            var didRenameArguments = false;
            recast.visit(funcPath, {
              visitFunction: function(path) {
                if (path.value === func) {
                  this.traverse(path);
                } else {
                  return false;
                }
              },
              visitIdentifier: function(path) {
                if (path.value.name === "arguments" && util.isReference(path)) {
                  path.replace(argsId);
                  didRenameArguments = true;
                  return false;
                }
                this.traverse(path);
              }
            });
            return didRenameArguments;
          }
          var awaitVisitor = types.PathVisitor.fromMethodsObject({
            visitFunction: function(path) {
              return false;
            },
            visitAwaitExpression: function(path) {
              var argument = path.value.argument;
              if (path.value.all) {
                argument = b.callExpression(b.memberExpression(b.identifier("Promise"), b.identifier("all"), false), [argument]);
              }
              return b.yieldExpression(b.callExpression(runtimeProperty("awrap"), [argument]), false);
            }
          });
        }, {
          "1": 1,
          "3": 3,
          "560": 560,
          "571": 571,
          "573": 573,
          "574": 574,
          "577": 577,
          "579": 579
        }],
        579: [function(_dereq_, module, exports) {
          (function(__dirname) {
            var assert = _dereq_(1);
            var path = _dereq_(9);
            var fs = _dereq_(3);
            var through = _dereq_(3);
            var transform = _dereq_(578).transform;
            var utils = _dereq_(577);
            var recast = _dereq_(571);
            var types = recast.types;
            var genOrAsyncFunExp = /\bfunction\s*\*|\basync\b/;
            var blockBindingExp = /\b(let|const)\s+/;
            function exports(file, options) {
              var data = [];
              return through(write, end);
              function write(buf) {
                data.push(buf);
              }
              function end() {
                this.queue(compile(data.join(""), options).code);
                this.queue(null);
              }
            }
            module.exports = exports;
            function runtime() {
              _dereq_(580);
            }
            exports.runtime = runtime;
            runtime.path = path.join(__dirname, "runtime.js");
            function compile(source, options) {
              options = normalizeOptions(options);
              if (!genOrAsyncFunExp.test(source)) {
                return {code: (options.includeRuntime === true ? fs.readFileSync(path.join(__dirname, "runtime.js"), "utf-8") + "\n" : "") + source};
              }
              var recastOptions = getRecastOptions(options);
              var ast = recast.parse(source, recastOptions);
              var nodePath = new types.NodePath(ast);
              var programPath = nodePath.get("program");
              if (shouldVarify(source, options)) {
                varifyAst(programPath.node);
              }
              transform(programPath, options);
              return recast.print(nodePath, recastOptions);
            }
            function normalizeOptions(options) {
              options = utils.defaults(options || {}, {
                includeRuntime: false,
                supportBlockBinding: true
              });
              if (!options.esprima) {
                options.esprima = _dereq_(3);
              }
              assert.ok(/harmony/.test(options.esprima.version), "Bad esprima version: " + options.esprima.version);
              return options;
            }
            function getRecastOptions(options) {
              var recastOptions = {range: true};
              function copy(name) {
                if (name in options) {
                  recastOptions[name] = options[name];
                }
              }
              copy("esprima");
              copy("sourceFileName");
              copy("sourceMapName");
              copy("inputSourceMap");
              copy("sourceRoot");
              return recastOptions;
            }
            function shouldVarify(source, options) {
              var supportBlockBinding = !!options.supportBlockBinding;
              if (supportBlockBinding) {
                if (!blockBindingExp.test(source)) {
                  supportBlockBinding = false;
                }
              }
              return supportBlockBinding;
            }
            function varify(source, options) {
              var recastOptions = getRecastOptions(normalizeOptions(options));
              var ast = recast.parse(source, recastOptions);
              varifyAst(ast.program);
              return recast.print(ast, recastOptions).code;
            }
            function varifyAst(ast) {
              types.namedTypes.Program.assert(ast);
              var defsResult = _dereq_(418)(ast, {
                ast: true,
                disallowUnknownReferences: false,
                disallowDuplicated: false,
                disallowVars: false,
                loopClosures: "iife"
              });
              if (defsResult.errors) {
                throw new Error(defsResult.errors.join("\n"));
              }
              return ast;
            }
            exports.varify = varify;
            exports.types = types;
            exports.compile = compile;
            exports.transform = transform;
          }).call(this, "/node_modules/regenerator");
        }, {
          "1": 1,
          "3": 3,
          "418": 418,
          "571": 571,
          "577": 577,
          "578": 578,
          "580": 580,
          "9": 9
        }],
        580: [function(_dereq_, module, exports) {
          (function(process, global) {
            !(function(global) {
              "use strict";
              var hasOwn = Object.prototype.hasOwnProperty;
              var undefined;
              var iteratorSymbol = typeof Symbol === "function" && Symbol.iterator || "@@iterator";
              var inModule = typeof module === "object";
              var runtime = global.regeneratorRuntime;
              if (runtime) {
                if (inModule) {
                  module.exports = runtime;
                }
                return;
              }
              runtime = global.regeneratorRuntime = inModule ? module.exports : {};
              function wrap(innerFn, outerFn, self, tryLocsList) {
                var generator = Object.create((outerFn || Generator).prototype);
                var context = new Context(tryLocsList || []);
                generator._invoke = makeInvokeMethod(innerFn, self, context);
                return generator;
              }
              runtime.wrap = wrap;
              function tryCatch(fn, obj, arg) {
                try {
                  return {
                    type: "normal",
                    arg: fn.call(obj, arg)
                  };
                } catch (err) {
                  return {
                    type: "throw",
                    arg: err
                  };
                }
              }
              var GenStateSuspendedStart = "suspendedStart";
              var GenStateSuspendedYield = "suspendedYield";
              var GenStateExecuting = "executing";
              var GenStateCompleted = "completed";
              var ContinueSentinel = {};
              function Generator() {}
              function GeneratorFunction() {}
              function GeneratorFunctionPrototype() {}
              var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype;
              GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
              GeneratorFunctionPrototype.constructor = GeneratorFunction;
              GeneratorFunction.displayName = "GeneratorFunction";
              function defineIteratorMethods(prototype) {
                ["next", "throw", "return"].forEach(function(method) {
                  prototype[method] = function(arg) {
                    return this._invoke(method, arg);
                  };
                });
              }
              runtime.isGeneratorFunction = function(genFun) {
                var ctor = typeof genFun === "function" && genFun.constructor;
                return ctor ? ctor === GeneratorFunction || (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
              };
              runtime.mark = function(genFun) {
                if (Object.setPrototypeOf) {
                  Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
                } else {
                  genFun.__proto__ = GeneratorFunctionPrototype;
                }
                genFun.prototype = Object.create(Gp);
                return genFun;
              };
              runtime.awrap = function(arg) {
                return new AwaitArgument(arg);
              };
              function AwaitArgument(arg) {
                this.arg = arg;
              }
              function AsyncIterator(generator) {
                function invoke(method, arg) {
                  var result = generator[method](arg);
                  var value = result.value;
                  return value instanceof AwaitArgument ? Promise.resolve(value.arg).then(invokeNext, invokeThrow) : Promise.resolve(value).then(function(unwrapped) {
                    result.value = unwrapped;
                    return result;
                  });
                }
                if (typeof process === "object" && process.domain) {
                  invoke = process.domain.bind(invoke);
                }
                var invokeNext = invoke.bind(generator, "next");
                var invokeThrow = invoke.bind(generator, "throw");
                var invokeReturn = invoke.bind(generator, "return");
                var previousPromise;
                function enqueue(method, arg) {
                  function callInvokeWithMethodAndArg() {
                    return invoke(method, arg);
                  }
                  return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : new Promise(function(resolve) {
                    resolve(callInvokeWithMethodAndArg());
                  });
                }
                this._invoke = enqueue;
              }
              defineIteratorMethods(AsyncIterator.prototype);
              runtime.async = function(innerFn, outerFn, self, tryLocsList) {
                var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList));
                return runtime.isGeneratorFunction(outerFn) ? iter : iter.next().then(function(result) {
                  return result.done ? result.value : iter.next();
                });
              };
              function makeInvokeMethod(innerFn, self, context) {
                var state = GenStateSuspendedStart;
                return function invoke(method, arg) {
                  if (state === GenStateExecuting) {
                    throw new Error("Generator is already running");
                  }
                  if (state === GenStateCompleted) {
                    if (method === "throw") {
                      throw arg;
                    }
                    return doneResult();
                  }
                  while (true) {
                    var delegate = context.delegate;
                    if (delegate) {
                      if (method === "return" || (method === "throw" && delegate.iterator[method] === undefined)) {
                        context.delegate = null;
                        var returnMethod = delegate.iterator["return"];
                        if (returnMethod) {
                          var record = tryCatch(returnMethod, delegate.iterator, arg);
                          if (record.type === "throw") {
                            method = "throw";
                            arg = record.arg;
                            continue;
                          }
                        }
                        if (method === "return") {
                          continue;
                        }
                      }
                      var record = tryCatch(delegate.iterator[method], delegate.iterator, arg);
                      if (record.type === "throw") {
                        context.delegate = null;
                        method = "throw";
                        arg = record.arg;
                        continue;
                      }
                      method = "next";
                      arg = undefined;
                      var info = record.arg;
                      if (info.done) {
                        context[delegate.resultName] = info.value;
                        context.next = delegate.nextLoc;
                      } else {
                        state = GenStateSuspendedYield;
                        return info;
                      }
                      context.delegate = null;
                    }
                    if (method === "next") {
                      if (state === GenStateSuspendedYield) {
                        context.sent = arg;
                      } else {
                        context.sent = undefined;
                      }
                    } else if (method === "throw") {
                      if (state === GenStateSuspendedStart) {
                        state = GenStateCompleted;
                        throw arg;
                      }
                      if (context.dispatchException(arg)) {
                        method = "next";
                        arg = undefined;
                      }
                    } else if (method === "return") {
                      context.abrupt("return", arg);
                    }
                    state = GenStateExecuting;
                    var record = tryCatch(innerFn, self, context);
                    if (record.type === "normal") {
                      state = context.done ? GenStateCompleted : GenStateSuspendedYield;
                      var info = {
                        value: record.arg,
                        done: context.done
                      };
                      if (record.arg === ContinueSentinel) {
                        if (context.delegate && method === "next") {
                          arg = undefined;
                        }
                      } else {
                        return info;
                      }
                    } else if (record.type === "throw") {
                      state = GenStateCompleted;
                      method = "throw";
                      arg = record.arg;
                    }
                  }
                };
              }
              defineIteratorMethods(Gp);
              Gp[iteratorSymbol] = function() {
                return this;
              };
              Gp.toString = function() {
                return "[object Generator]";
              };
              function pushTryEntry(locs) {
                var entry = {tryLoc: locs[0]};
                if (1 in locs) {
                  entry.catchLoc = locs[1];
                }
                if (2 in locs) {
                  entry.finallyLoc = locs[2];
                  entry.afterLoc = locs[3];
                }
                this.tryEntries.push(entry);
              }
              function resetTryEntry(entry) {
                var record = entry.completion || {};
                record.type = "normal";
                delete record.arg;
                entry.completion = record;
              }
              function Context(tryLocsList) {
                this.tryEntries = [{tryLoc: "root"}];
                tryLocsList.forEach(pushTryEntry, this);
                this.reset(true);
              }
              runtime.keys = function(object) {
                var keys = [];
                for (var key in object) {
                  keys.push(key);
                }
                keys.reverse();
                return function next() {
                  while (keys.length) {
                    var key = keys.pop();
                    if (key in object) {
                      next.value = key;
                      next.done = false;
                      return next;
                    }
                  }
                  next.done = true;
                  return next;
                };
              };
              function values(iterable) {
                if (iterable) {
                  var iteratorMethod = iterable[iteratorSymbol];
                  if (iteratorMethod) {
                    return iteratorMethod.call(iterable);
                  }
                  if (typeof iterable.next === "function") {
                    return iterable;
                  }
                  if (!isNaN(iterable.length)) {
                    var i = -1,
                        next = function next() {
                          while (++i < iterable.length) {
                            if (hasOwn.call(iterable, i)) {
                              next.value = iterable[i];
                              next.done = false;
                              return next;
                            }
                          }
                          next.value = undefined;
                          next.done = true;
                          return next;
                        };
                    return next.next = next;
                  }
                }
                return {next: doneResult};
              }
              runtime.values = values;
              function doneResult() {
                return {
                  value: undefined,
                  done: true
                };
              }
              Context.prototype = {
                constructor: Context,
                reset: function(skipTempReset) {
                  this.prev = 0;
                  this.next = 0;
                  this.sent = undefined;
                  this.done = false;
                  this.delegate = null;
                  this.tryEntries.forEach(resetTryEntry);
                  if (!skipTempReset) {
                    for (var name in this) {
                      if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
                        this[name] = undefined;
                      }
                    }
                  }
                },
                stop: function() {
                  this.done = true;
                  var rootEntry = this.tryEntries[0];
                  var rootRecord = rootEntry.completion;
                  if (rootRecord.type === "throw") {
                    throw rootRecord.arg;
                  }
                  return this.rval;
                },
                dispatchException: function(exception) {
                  if (this.done) {
                    throw exception;
                  }
                  var context = this;
                  function handle(loc, caught) {
                    record.type = "throw";
                    record.arg = exception;
                    context.next = loc;
                    return !!caught;
                  }
                  for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                    var entry = this.tryEntries[i];
                    var record = entry.completion;
                    if (entry.tryLoc === "root") {
                      return handle("end");
                    }
                    if (entry.tryLoc <= this.prev) {
                      var hasCatch = hasOwn.call(entry, "catchLoc");
                      var hasFinally = hasOwn.call(entry, "finallyLoc");
                      if (hasCatch && hasFinally) {
                        if (this.prev < entry.catchLoc) {
                          return handle(entry.catchLoc, true);
                        } else if (this.prev < entry.finallyLoc) {
                          return handle(entry.finallyLoc);
                        }
                      } else if (hasCatch) {
                        if (this.prev < entry.catchLoc) {
                          return handle(entry.catchLoc, true);
                        }
                      } else if (hasFinally) {
                        if (this.prev < entry.finallyLoc) {
                          return handle(entry.finallyLoc);
                        }
                      } else {
                        throw new Error("try statement without catch or finally");
                      }
                    }
                  }
                },
                abrupt: function(type, arg) {
                  for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                    var entry = this.tryEntries[i];
                    if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
                      var finallyEntry = entry;
                      break;
                    }
                  }
                  if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
                    finallyEntry = null;
                  }
                  var record = finallyEntry ? finallyEntry.completion : {};
                  record.type = type;
                  record.arg = arg;
                  if (finallyEntry) {
                    this.next = finallyEntry.finallyLoc;
                  } else {
                    this.complete(record);
                  }
                  return ContinueSentinel;
                },
                complete: function(record, afterLoc) {
                  if (record.type === "throw") {
                    throw record.arg;
                  }
                  if (record.type === "break" || record.type === "continue") {
                    this.next = record.arg;
                  } else if (record.type === "return") {
                    this.rval = record.arg;
                    this.next = "end";
                  } else if (record.type === "normal" && afterLoc) {
                    this.next = afterLoc;
                  }
                },
                finish: function(finallyLoc) {
                  for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                    var entry = this.tryEntries[i];
                    if (entry.finallyLoc === finallyLoc) {
                      this.complete(entry.completion, entry.afterLoc);
                      resetTryEntry(entry);
                      return ContinueSentinel;
                    }
                  }
                },
                "catch": function(tryLoc) {
                  for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                    var entry = this.tryEntries[i];
                    if (entry.tryLoc === tryLoc) {
                      var record = entry.completion;
                      if (record.type === "throw") {
                        var thrown = record.arg;
                        resetTryEntry(entry);
                      }
                      return thrown;
                    }
                  }
                  throw new Error("illegal catch attempt");
                },
                delegateYield: function(iterable, resultName, nextLoc) {
                  this.delegate = {
                    iterator: values(iterable),
                    resultName: resultName,
                    nextLoc: nextLoc
                  };
                  return ContinueSentinel;
                }
              };
            })(typeof global === "object" ? global : typeof window === "object" ? window : typeof self === "object" ? self : this);
          }).call(this, _dereq_(10), typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
        }, {"10": 10}],
        581: [function(_dereq_, module, exports) {
          var regenerate = _dereq_(572);
          exports.REGULAR = {
            'd': regenerate().addRange(0x30, 0x39),
            'D': regenerate().addRange(0x0, 0x2F).addRange(0x3A, 0xFFFF),
            's': regenerate(0x20, 0xA0, 0x1680, 0x180E, 0x202F, 0x205F, 0x3000, 0xFEFF).addRange(0x9, 0xD).addRange(0x2000, 0x200A).addRange(0x2028, 0x2029),
            'S': regenerate().addRange(0x0, 0x8).addRange(0xE, 0x1F).addRange(0x21, 0x9F).addRange(0xA1, 0x167F).addRange(0x1681, 0x180D).addRange(0x180F, 0x1FFF).addRange(0x200B, 0x2027).addRange(0x202A, 0x202E).addRange(0x2030, 0x205E).addRange(0x2060, 0x2FFF).addRange(0x3001, 0xFEFE).addRange(0xFF00, 0xFFFF),
            'w': regenerate(0x5F).addRange(0x30, 0x39).addRange(0x41, 0x5A).addRange(0x61, 0x7A),
            'W': regenerate(0x60).addRange(0x0, 0x2F).addRange(0x3A, 0x40).addRange(0x5B, 0x5E).addRange(0x7B, 0xFFFF)
          };
          exports.UNICODE = {
            'd': regenerate().addRange(0x30, 0x39),
            'D': regenerate().addRange(0x0, 0x2F).addRange(0x3A, 0x10FFFF),
            's': regenerate(0x20, 0xA0, 0x1680, 0x180E, 0x202F, 0x205F, 0x3000, 0xFEFF).addRange(0x9, 0xD).addRange(0x2000, 0x200A).addRange(0x2028, 0x2029),
            'S': regenerate().addRange(0x0, 0x8).addRange(0xE, 0x1F).addRange(0x21, 0x9F).addRange(0xA1, 0x167F).addRange(0x1681, 0x180D).addRange(0x180F, 0x1FFF).addRange(0x200B, 0x2027).addRange(0x202A, 0x202E).addRange(0x2030, 0x205E).addRange(0x2060, 0x2FFF).addRange(0x3001, 0xFEFE).addRange(0xFF00, 0x10FFFF),
            'w': regenerate(0x5F).addRange(0x30, 0x39).addRange(0x41, 0x5A).addRange(0x61, 0x7A),
            'W': regenerate(0x60).addRange(0x0, 0x2F).addRange(0x3A, 0x40).addRange(0x5B, 0x5E).addRange(0x7B, 0x10FFFF)
          };
          exports.UNICODE_IGNORE_CASE = {
            'd': regenerate().addRange(0x30, 0x39),
            'D': regenerate().addRange(0x0, 0x2F).addRange(0x3A, 0x10FFFF),
            's': regenerate(0x20, 0xA0, 0x1680, 0x180E, 0x202F, 0x205F, 0x3000, 0xFEFF).addRange(0x9, 0xD).addRange(0x2000, 0x200A).addRange(0x2028, 0x2029),
            'S': regenerate().addRange(0x0, 0x8).addRange(0xE, 0x1F).addRange(0x21, 0x9F).addRange(0xA1, 0x167F).addRange(0x1681, 0x180D).addRange(0x180F, 0x1FFF).addRange(0x200B, 0x2027).addRange(0x202A, 0x202E).addRange(0x2030, 0x205E).addRange(0x2060, 0x2FFF).addRange(0x3001, 0xFEFE).addRange(0xFF00, 0x10FFFF),
            'w': regenerate(0x5F, 0x17F, 0x212A).addRange(0x30, 0x39).addRange(0x41, 0x5A).addRange(0x61, 0x7A),
            'W': regenerate(0x4B, 0x53, 0x60).addRange(0x0, 0x2F).addRange(0x3A, 0x40).addRange(0x5B, 0x5E).addRange(0x7B, 0x10FFFF)
          };
        }, {"572": 572}],
        582: [function(_dereq_, module, exports) {
          module.exports = {
            "75": 8490,
            "83": 383,
            "107": 8490,
            "115": 383,
            "181": 924,
            "197": 8491,
            "383": 83,
            "452": 453,
            "453": 452,
            "455": 456,
            "456": 455,
            "458": 459,
            "459": 458,
            "497": 498,
            "498": 497,
            "837": 8126,
            "914": 976,
            "917": 1013,
            "920": 1012,
            "921": 8126,
            "922": 1008,
            "924": 181,
            "928": 982,
            "929": 1009,
            "931": 962,
            "934": 981,
            "937": 8486,
            "962": 931,
            "976": 914,
            "977": 1012,
            "981": 934,
            "982": 928,
            "1008": 922,
            "1009": 929,
            "1012": [920, 977],
            "1013": 917,
            "7776": 7835,
            "7835": 7776,
            "8126": [837, 921],
            "8486": 937,
            "8490": 75,
            "8491": 197,
            "66560": 66600,
            "66561": 66601,
            "66562": 66602,
            "66563": 66603,
            "66564": 66604,
            "66565": 66605,
            "66566": 66606,
            "66567": 66607,
            "66568": 66608,
            "66569": 66609,
            "66570": 66610,
            "66571": 66611,
            "66572": 66612,
            "66573": 66613,
            "66574": 66614,
            "66575": 66615,
            "66576": 66616,
            "66577": 66617,
            "66578": 66618,
            "66579": 66619,
            "66580": 66620,
            "66581": 66621,
            "66582": 66622,
            "66583": 66623,
            "66584": 66624,
            "66585": 66625,
            "66586": 66626,
            "66587": 66627,
            "66588": 66628,
            "66589": 66629,
            "66590": 66630,
            "66591": 66631,
            "66592": 66632,
            "66593": 66633,
            "66594": 66634,
            "66595": 66635,
            "66596": 66636,
            "66597": 66637,
            "66598": 66638,
            "66599": 66639,
            "66600": 66560,
            "66601": 66561,
            "66602": 66562,
            "66603": 66563,
            "66604": 66564,
            "66605": 66565,
            "66606": 66566,
            "66607": 66567,
            "66608": 66568,
            "66609": 66569,
            "66610": 66570,
            "66611": 66571,
            "66612": 66572,
            "66613": 66573,
            "66614": 66574,
            "66615": 66575,
            "66616": 66576,
            "66617": 66577,
            "66618": 66578,
            "66619": 66579,
            "66620": 66580,
            "66621": 66581,
            "66622": 66582,
            "66623": 66583,
            "66624": 66584,
            "66625": 66585,
            "66626": 66586,
            "66627": 66587,
            "66628": 66588,
            "66629": 66589,
            "66630": 66590,
            "66631": 66591,
            "66632": 66592,
            "66633": 66593,
            "66634": 66594,
            "66635": 66595,
            "66636": 66596,
            "66637": 66597,
            "66638": 66598,
            "66639": 66599,
            "68736": 68800,
            "68737": 68801,
            "68738": 68802,
            "68739": 68803,
            "68740": 68804,
            "68741": 68805,
            "68742": 68806,
            "68743": 68807,
            "68744": 68808,
            "68745": 68809,
            "68746": 68810,
            "68747": 68811,
            "68748": 68812,
            "68749": 68813,
            "68750": 68814,
            "68751": 68815,
            "68752": 68816,
            "68753": 68817,
            "68754": 68818,
            "68755": 68819,
            "68756": 68820,
            "68757": 68821,
            "68758": 68822,
            "68759": 68823,
            "68760": 68824,
            "68761": 68825,
            "68762": 68826,
            "68763": 68827,
            "68764": 68828,
            "68765": 68829,
            "68766": 68830,
            "68767": 68831,
            "68768": 68832,
            "68769": 68833,
            "68770": 68834,
            "68771": 68835,
            "68772": 68836,
            "68773": 68837,
            "68774": 68838,
            "68775": 68839,
            "68776": 68840,
            "68777": 68841,
            "68778": 68842,
            "68779": 68843,
            "68780": 68844,
            "68781": 68845,
            "68782": 68846,
            "68783": 68847,
            "68784": 68848,
            "68785": 68849,
            "68786": 68850,
            "68800": 68736,
            "68801": 68737,
            "68802": 68738,
            "68803": 68739,
            "68804": 68740,
            "68805": 68741,
            "68806": 68742,
            "68807": 68743,
            "68808": 68744,
            "68809": 68745,
            "68810": 68746,
            "68811": 68747,
            "68812": 68748,
            "68813": 68749,
            "68814": 68750,
            "68815": 68751,
            "68816": 68752,
            "68817": 68753,
            "68818": 68754,
            "68819": 68755,
            "68820": 68756,
            "68821": 68757,
            "68822": 68758,
            "68823": 68759,
            "68824": 68760,
            "68825": 68761,
            "68826": 68762,
            "68827": 68763,
            "68828": 68764,
            "68829": 68765,
            "68830": 68766,
            "68831": 68767,
            "68832": 68768,
            "68833": 68769,
            "68834": 68770,
            "68835": 68771,
            "68836": 68772,
            "68837": 68773,
            "68838": 68774,
            "68839": 68775,
            "68840": 68776,
            "68841": 68777,
            "68842": 68778,
            "68843": 68779,
            "68844": 68780,
            "68845": 68781,
            "68846": 68782,
            "68847": 68783,
            "68848": 68784,
            "68849": 68785,
            "68850": 68786,
            "71840": 71872,
            "71841": 71873,
            "71842": 71874,
            "71843": 71875,
            "71844": 71876,
            "71845": 71877,
            "71846": 71878,
            "71847": 71879,
            "71848": 71880,
            "71849": 71881,
            "71850": 71882,
            "71851": 71883,
            "71852": 71884,
            "71853": 71885,
            "71854": 71886,
            "71855": 71887,
            "71856": 71888,
            "71857": 71889,
            "71858": 71890,
            "71859": 71891,
            "71860": 71892,
            "71861": 71893,
            "71862": 71894,
            "71863": 71895,
            "71864": 71896,
            "71865": 71897,
            "71866": 71898,
            "71867": 71899,
            "71868": 71900,
            "71869": 71901,
            "71870": 71902,
            "71871": 71903,
            "71872": 71840,
            "71873": 71841,
            "71874": 71842,
            "71875": 71843,
            "71876": 71844,
            "71877": 71845,
            "71878": 71846,
            "71879": 71847,
            "71880": 71848,
            "71881": 71849,
            "71882": 71850,
            "71883": 71851,
            "71884": 71852,
            "71885": 71853,
            "71886": 71854,
            "71887": 71855,
            "71888": 71856,
            "71889": 71857,
            "71890": 71858,
            "71891": 71859,
            "71892": 71860,
            "71893": 71861,
            "71894": 71862,
            "71895": 71863,
            "71896": 71864,
            "71897": 71865,
            "71898": 71866,
            "71899": 71867,
            "71900": 71868,
            "71901": 71869,
            "71902": 71870,
            "71903": 71871
          };
        }, {}],
        583: [function(_dereq_, module, exports) {
          var generate = _dereq_(584).generate;
          var parse = _dereq_(585).parse;
          var regenerate = _dereq_(572);
          var iuMappings = _dereq_(582);
          var ESCAPE_SETS = _dereq_(581);
          function getCharacterClassEscapeSet(character) {
            if (unicode) {
              if (ignoreCase) {
                return ESCAPE_SETS.UNICODE_IGNORE_CASE[character];
              }
              return ESCAPE_SETS.UNICODE[character];
            }
            return ESCAPE_SETS.REGULAR[character];
          }
          var object = {};
          var hasOwnProperty = object.hasOwnProperty;
          function has(object, property) {
            return hasOwnProperty.call(object, property);
          }
          var UNICODE_SET = regenerate().addRange(0x0, 0x10FFFF);
          var BMP_SET = regenerate().addRange(0x0, 0xFFFF);
          var DOT_SET_UNICODE = UNICODE_SET.clone().remove(0x000A, 0x000D, 0x2028, 0x2029);
          var DOT_SET = DOT_SET_UNICODE.clone().intersection(BMP_SET);
          regenerate.prototype.iuAddRange = function(min, max) {
            var $this = this;
            do {
              var folded = caseFold(min);
              if (folded) {
                $this.add(folded);
              }
            } while (++min <= max);
            return $this;
          };
          function assign(target, source) {
            for (var key in source) {
              target[key] = source[key];
            }
          }
          function update(item, pattern) {
            if (!pattern) {
              return;
            }
            var tree = parse(pattern, '');
            switch (tree.type) {
              case 'characterClass':
              case 'group':
              case 'value':
                break;
              default:
                tree = wrap(tree, pattern);
            }
            assign(item, tree);
          }
          function wrap(tree, pattern) {
            return {
              'type': 'group',
              'behavior': 'ignore',
              'body': [tree],
              'raw': '(?:' + pattern + ')'
            };
          }
          function caseFold(codePoint) {
            return has(iuMappings, codePoint) ? iuMappings[codePoint] : false;
          }
          var ignoreCase = false;
          var unicode = false;
          function processCharacterClass(characterClassItem) {
            var set = regenerate();
            var body = characterClassItem.body.forEach(function(item) {
              switch (item.type) {
                case 'value':
                  set.add(item.codePoint);
                  if (ignoreCase && unicode) {
                    var folded = caseFold(item.codePoint);
                    if (folded) {
                      set.add(folded);
                    }
                  }
                  break;
                case 'characterClassRange':
                  var min = item.min.codePoint;
                  var max = item.max.codePoint;
                  set.addRange(min, max);
                  if (ignoreCase && unicode) {
                    set.iuAddRange(min, max);
                  }
                  break;
                case 'characterClassEscape':
                  set.add(getCharacterClassEscapeSet(item.value));
                  break;
                default:
                  throw Error('Unknown term type: ' + item.type);
              }
            });
            if (characterClassItem.negative) {
              set = (unicode ? UNICODE_SET : BMP_SET).clone().remove(set);
            }
            update(characterClassItem, set.toString());
            return characterClassItem;
          }
          function processTerm(item) {
            switch (item.type) {
              case 'dot':
                update(item, (unicode ? DOT_SET_UNICODE : DOT_SET).toString());
                break;
              case 'characterClass':
                item = processCharacterClass(item);
                break;
              case 'characterClassEscape':
                update(item, getCharacterClassEscapeSet(item.value).toString());
                break;
              case 'alternative':
              case 'disjunction':
              case 'group':
              case 'quantifier':
                item.body = item.body.map(processTerm);
                break;
              case 'value':
                var codePoint = item.codePoint;
                var set = regenerate(codePoint);
                if (ignoreCase && unicode) {
                  var folded = caseFold(codePoint);
                  if (folded) {
                    set.add(folded);
                  }
                }
                update(item, set.toString());
                break;
              case 'anchor':
              case 'empty':
              case 'group':
              case 'reference':
                break;
              default:
                throw Error('Unknown term type: ' + item.type);
            }
            return item;
          }
          ;
          module.exports = function(pattern, flags) {
            var tree = parse(pattern, flags);
            ignoreCase = flags ? flags.indexOf('i') > -1 : false;
            unicode = flags ? flags.indexOf('u') > -1 : false;
            assign(tree, processTerm(tree));
            return generate(tree);
          };
        }, {
          "572": 572,
          "581": 581,
          "582": 582,
          "584": 584,
          "585": 585
        }],
        584: [function(_dereq_, module, exports) {
          (function(global) {
            ;
            (function() {
              'use strict';
              var objectTypes = {
                'function': true,
                'object': true
              };
              var root = (objectTypes[typeof window] && window) || this;
              var oldRoot = root;
              var freeExports = objectTypes[typeof exports] && exports;
              var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;
              var freeGlobal = freeExports && freeModule && typeof global == 'object' && global;
              if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal)) {
                root = freeGlobal;
              }
              var stringFromCharCode = String.fromCharCode;
              var floor = Math.floor;
              function fromCodePoint() {
                var MAX_SIZE = 0x4000;
                var codeUnits = [];
                var highSurrogate;
                var lowSurrogate;
                var index = -1;
                var length = arguments.length;
                if (!length) {
                  return '';
                }
                var result = '';
                while (++index < length) {
                  var codePoint = Number(arguments[index]);
                  if (!isFinite(codePoint) || codePoint < 0 || codePoint > 0x10FFFF || floor(codePoint) != codePoint) {
                    throw RangeError('Invalid code point: ' + codePoint);
                  }
                  if (codePoint <= 0xFFFF) {
                    codeUnits.push(codePoint);
                  } else {
                    codePoint -= 0x10000;
                    highSurrogate = (codePoint >> 10) + 0xD800;
                    lowSurrogate = (codePoint % 0x400) + 0xDC00;
                    codeUnits.push(highSurrogate, lowSurrogate);
                  }
                  if (index + 1 == length || codeUnits.length > MAX_SIZE) {
                    result += stringFromCharCode.apply(null, codeUnits);
                    codeUnits.length = 0;
                  }
                }
                return result;
              }
              function assertType(type, expected) {
                if (expected.indexOf('|') == -1) {
                  if (type == expected) {
                    return;
                  }
                  throw Error('Invalid node type: ' + type);
                }
                expected = assertType.hasOwnProperty(expected) ? assertType[expected] : (assertType[expected] = RegExp('^(?:' + expected + ')$'));
                if (expected.test(type)) {
                  return;
                }
                throw Error('Invalid node type: ' + type);
              }
              function generate(node) {
                var type = node.type;
                if (generate.hasOwnProperty(type) && typeof generate[type] == 'function') {
                  return generate[type](node);
                }
                throw Error('Invalid node type: ' + type);
              }
              function generateAlternative(node) {
                assertType(node.type, 'alternative');
                var terms = node.body,
                    length = terms ? terms.length : 0;
                if (length == 1) {
                  return generateTerm(terms[0]);
                } else {
                  var i = -1,
                      result = '';
                  while (++i < length) {
                    result += generateTerm(terms[i]);
                  }
                  return result;
                }
              }
              function generateAnchor(node) {
                assertType(node.type, 'anchor');
                switch (node.kind) {
                  case 'start':
                    return '^';
                  case 'end':
                    return '$';
                  case 'boundary':
                    return '\\b';
                  case 'not-boundary':
                    return '\\B';
                  default:
                    throw Error('Invalid assertion');
                }
              }
              function generateAtom(node) {
                assertType(node.type, 'anchor|characterClass|characterClassEscape|dot|group|reference|value');
                return generate(node);
              }
              function generateCharacterClass(node) {
                assertType(node.type, 'characterClass');
                var classRanges = node.body,
                    length = classRanges ? classRanges.length : 0;
                var i = -1,
                    result = '[';
                if (node.negative) {
                  result += '^';
                }
                while (++i < length) {
                  result += generateClassAtom(classRanges[i]);
                }
                result += ']';
                return result;
              }
              function generateCharacterClassEscape(node) {
                assertType(node.type, 'characterClassEscape');
                return '\\' + node.value;
              }
              function generateCharacterClassRange(node) {
                assertType(node.type, 'characterClassRange');
                var min = node.min,
                    max = node.max;
                if (min.type == 'characterClassRange' || max.type == 'characterClassRange') {
                  throw Error('Invalid character class range');
                }
                return generateClassAtom(min) + '-' + generateClassAtom(max);
              }
              function generateClassAtom(node) {
                assertType(node.type, 'anchor|characterClassEscape|characterClassRange|dot|value');
                return generate(node);
              }
              function generateDisjunction(node) {
                assertType(node.type, 'disjunction');
                var body = node.body,
                    length = body ? body.length : 0;
                if (length == 0) {
                  throw Error('No body');
                } else if (length == 1) {
                  return generate(body[0]);
                } else {
                  var i = -1,
                      result = '';
                  while (++i < length) {
                    if (i != 0) {
                      result += '|';
                    }
                    result += generate(body[i]);
                  }
                  return result;
                }
              }
              function generateDot(node) {
                assertType(node.type, 'dot');
                return '.';
              }
              function generateGroup(node) {
                assertType(node.type, 'group');
                var result = '(';
                switch (node.behavior) {
                  case 'normal':
                    break;
                  case 'ignore':
                    result += '?:';
                    break;
                  case 'lookahead':
                    result += '?=';
                    break;
                  case 'negativeLookahead':
                    result += '?!';
                    break;
                  default:
                    throw Error('Invalid behaviour: ' + node.behaviour);
                }
                var body = node.body,
                    length = body ? body.length : 0;
                if (length == 1) {
                  result += generate(body[0]);
                } else {
                  var i = -1;
                  while (++i < length) {
                    result += generate(body[i]);
                  }
                }
                result += ')';
                return result;
              }
              function generateQuantifier(node) {
                assertType(node.type, 'quantifier');
                var quantifier = '',
                    min = node.min,
                    max = node.max;
                switch (max) {
                  case undefined:
                  case null:
                    switch (min) {
                      case 0:
                        quantifier = '*';
                        break;
                      case 1:
                        quantifier = '+';
                        break;
                      default:
                        quantifier = '{' + min + ',}';
                        break;
                    }
                    break;
                  default:
                    if (min == max) {
                      quantifier = '{' + min + '}';
                    } else if (min == 0 && max == 1) {
                      quantifier = '?';
                    } else {
                      quantifier = '{' + min + ',' + max + '}';
                    }
                    break;
                }
                if (!node.greedy) {
                  quantifier += '?';
                }
                return generateAtom(node.body[0]) + quantifier;
              }
              function generateReference(node) {
                assertType(node.type, 'reference');
                return '\\' + node.matchIndex;
              }
              function generateTerm(node) {
                assertType(node.type, 'anchor|characterClass|characterClassEscape|empty|group|quantifier|reference|value');
                return generate(node);
              }
              function generateValue(node) {
                assertType(node.type, 'value');
                var kind = node.kind,
                    codePoint = node.codePoint;
                switch (kind) {
                  case 'controlLetter':
                    return '\\c' + fromCodePoint(codePoint + 64);
                  case 'hexadecimalEscape':
                    return '\\x' + ('00' + codePoint.toString(16).toUpperCase()).slice(-2);
                  case 'identifier':
                    return '\\' + fromCodePoint(codePoint);
                  case 'null':
                    return '\\' + codePoint;
                  case 'octal':
                    return '\\' + codePoint.toString(8);
                  case 'singleEscape':
                    switch (codePoint) {
                      case 0x0008:
                        return '\\b';
                      case 0x009:
                        return '\\t';
                      case 0x00A:
                        return '\\n';
                      case 0x00B:
                        return '\\v';
                      case 0x00C:
                        return '\\f';
                      case 0x00D:
                        return '\\r';
                      default:
                        throw Error('Invalid codepoint: ' + codePoint);
                    }
                  case 'symbol':
                    return fromCodePoint(codePoint);
                  case 'unicodeEscape':
                    return '\\u' + ('0000' + codePoint.toString(16).toUpperCase()).slice(-4);
                  case 'unicodeCodePointEscape':
                    return '\\u{' + codePoint.toString(16).toUpperCase() + '}';
                  default:
                    throw Error('Unsupported node kind: ' + kind);
                }
              }
              generate.alternative = generateAlternative;
              generate.anchor = generateAnchor;
              generate.characterClass = generateCharacterClass;
              generate.characterClassEscape = generateCharacterClassEscape;
              generate.characterClassRange = generateCharacterClassRange;
              generate.disjunction = generateDisjunction;
              generate.dot = generateDot;
              generate.group = generateGroup;
              generate.quantifier = generateQuantifier;
              generate.reference = generateReference;
              generate.value = generateValue;
              if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
                define(function() {
                  return {'generate': generate};
                });
              } else if (freeExports && freeModule) {
                freeExports.generate = generate;
              } else {
                root.regjsgen = {'generate': generate};
              }
            }.call(this));
          }).call(this, typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {});
        }, {}],
        585: [function(_dereq_, module, exports) {
          (function() {
            function parse(str, flags) {
              function addRaw(node) {
                node.raw = str.substring(node.range[0], node.range[1]);
                return node;
              }
              function updateRawStart(node, start) {
                node.range[0] = start;
                return addRaw(node);
              }
              function createAnchor(kind, rawLength) {
                return addRaw({
                  type: 'anchor',
                  kind: kind,
                  range: [pos - rawLength, pos]
                });
              }
              function createValue(kind, codePoint, from, to) {
                return addRaw({
                  type: 'value',
                  kind: kind,
                  codePoint: codePoint,
                  range: [from, to]
                });
              }
              function createEscaped(kind, codePoint, value, fromOffset) {
                fromOffset = fromOffset || 0;
                return createValue(kind, codePoint, pos - (value.length + fromOffset), pos);
              }
              function createCharacter(matches) {
                var _char = matches[0];
                var first = _char.charCodeAt(0);
                if (hasUnicodeFlag) {
                  var second;
                  if (_char.length === 1 && first >= 0xD800 && first <= 0xDBFF) {
                    second = lookahead().charCodeAt(0);
                    if (second >= 0xDC00 && second <= 0xDFFF) {
                      pos++;
                      return createValue('symbol', (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000, pos - 2, pos);
                    }
                  }
                }
                return createValue('symbol', first, pos - 1, pos);
              }
              function createDisjunction(alternatives, from, to) {
                return addRaw({
                  type: 'disjunction',
                  body: alternatives,
                  range: [from, to]
                });
              }
              function createDot() {
                return addRaw({
                  type: 'dot',
                  range: [pos - 1, pos]
                });
              }
              function createCharacterClassEscape(value) {
                return addRaw({
                  type: 'characterClassEscape',
                  value: value,
                  range: [pos - 2, pos]
                });
              }
              function createReference(matchIndex) {
                return addRaw({
                  type: 'reference',
                  matchIndex: parseInt(matchIndex, 10),
                  range: [pos - 1 - matchIndex.length, pos]
                });
              }
              function createGroup(behavior, disjunction, from, to) {
                return addRaw({
                  type: 'group',
                  behavior: behavior,
                  body: disjunction,
                  range: [from, to]
                });
              }
              function createQuantifier(min, max, from, to) {
                if (to == null) {
                  from = pos - 1;
                  to = pos;
                }
                return addRaw({
                  type: 'quantifier',
                  min: min,
                  max: max,
                  greedy: true,
                  body: null,
                  range: [from, to]
                });
              }
              function createAlternative(terms, from, to) {
                return addRaw({
                  type: 'alternative',
                  body: terms,
                  range: [from, to]
                });
              }
              function createCharacterClass(classRanges, negative, from, to) {
                return addRaw({
                  type: 'characterClass',
                  body: classRanges,
                  negative: negative,
                  range: [from, to]
                });
              }
              function createClassRange(min, max, from, to) {
                if (min.codePoint > max.codePoint) {
                  bail('invalid range in character class', min.raw + '-' + max.raw, from, to);
                }
                return addRaw({
                  type: 'characterClassRange',
                  min: min,
                  max: max,
                  range: [from, to]
                });
              }
              function flattenBody(body) {
                if (body.type === 'alternative') {
                  return body.body;
                } else {
                  return [body];
                }
              }
              function isEmpty(obj) {
                return obj.type === 'empty';
              }
              function incr(amount) {
                amount = (amount || 1);
                var res = str.substring(pos, pos + amount);
                pos += (amount || 1);
                return res;
              }
              function skip(value) {
                if (!match(value)) {
                  bail('character', value);
                }
              }
              function match(value) {
                if (str.indexOf(value, pos) === pos) {
                  return incr(value.length);
                }
              }
              function lookahead() {
                return str[pos];
              }
              function current(value) {
                return str.indexOf(value, pos) === pos;
              }
              function next(value) {
                return str[pos + 1] === value;
              }
              function matchReg(regExp) {
                var subStr = str.substring(pos);
                var res = subStr.match(regExp);
                if (res) {
                  res.range = [];
                  res.range[0] = pos;
                  incr(res[0].length);
                  res.range[1] = pos;
                }
                return res;
              }
              function parseDisjunction() {
                var res = [],
                    from = pos;
                res.push(parseAlternative());
                while (match('|')) {
                  res.push(parseAlternative());
                }
                if (res.length === 1) {
                  return res[0];
                }
                return createDisjunction(res, from, pos);
              }
              function parseAlternative() {
                var res = [],
                    from = pos;
                var term;
                while (term = parseTerm()) {
                  res.push(term);
                }
                if (res.length === 1) {
                  return res[0];
                }
                return createAlternative(res, from, pos);
              }
              function parseTerm() {
                if (pos >= str.length || current('|') || current(')')) {
                  return null;
                }
                var anchor = parseAnchor();
                if (anchor) {
                  return anchor;
                }
                var atom = parseAtom();
                if (!atom) {
                  bail('Expected atom');
                }
                var quantifier = parseQuantifier() || false;
                if (quantifier) {
                  quantifier.body = flattenBody(atom);
                  updateRawStart(quantifier, atom.range[0]);
                  return quantifier;
                }
                return atom;
              }
              function parseGroup(matchA, typeA, matchB, typeB) {
                var type = null,
                    from = pos;
                if (match(matchA)) {
                  type = typeA;
                } else if (match(matchB)) {
                  type = typeB;
                } else {
                  return false;
                }
                var body = parseDisjunction();
                if (!body) {
                  bail('Expected disjunction');
                }
                skip(')');
                var group = createGroup(type, flattenBody(body), from, pos);
                if (type == 'normal') {
                  if (firstIteration) {
                    closedCaptureCounter++;
                  }
                }
                return group;
              }
              function parseAnchor() {
                var res,
                    from = pos;
                if (match('^')) {
                  return createAnchor('start', 1);
                } else if (match('$')) {
                  return createAnchor('end', 1);
                } else if (match('\\b')) {
                  return createAnchor('boundary', 2);
                } else if (match('\\B')) {
                  return createAnchor('not-boundary', 2);
                } else {
                  return parseGroup('(?=', 'lookahead', '(?!', 'negativeLookahead');
                }
              }
              function parseQuantifier() {
                var res,
                    from = pos;
                var quantifier;
                var min,
                    max;
                if (match('*')) {
                  quantifier = createQuantifier(0);
                } else if (match('+')) {
                  quantifier = createQuantifier(1);
                } else if (match('?')) {
                  quantifier = createQuantifier(0, 1);
                } else if (res = matchReg(/^\{([0-9]+)\}/)) {
                  min = parseInt(res[1], 10);
                  quantifier = createQuantifier(min, min, res.range[0], res.range[1]);
                } else if (res = matchReg(/^\{([0-9]+),\}/)) {
                  min = parseInt(res[1], 10);
                  quantifier = createQuantifier(min, undefined, res.range[0], res.range[1]);
                } else if (res = matchReg(/^\{([0-9]+),([0-9]+)\}/)) {
                  min = parseInt(res[1], 10);
                  max = parseInt(res[2], 10);
                  if (min > max) {
                    bail('numbers out of order in {} quantifier', '', from, pos);
                  }
                  quantifier = createQuantifier(min, max, res.range[0], res.range[1]);
                }
                if (quantifier) {
                  if (match('?')) {
                    quantifier.greedy = false;
                    quantifier.range[1] += 1;
                  }
                }
                return quantifier;
              }
              function parseAtom() {
                var res;
                if (res = matchReg(/^[^^$\\.*+?(){[|]/)) {
                  return createCharacter(res);
                } else if (match('.')) {
                  return createDot();
                } else if (match('\\')) {
                  res = parseAtomEscape();
                  if (!res) {
                    bail('atomEscape');
                  }
                  return res;
                } else if (res = parseCharacterClass()) {
                  return res;
                } else {
                  return parseGroup('(?:', 'ignore', '(', 'normal');
                }
              }
              function parseUnicodeSurrogatePairEscape(firstEscape) {
                if (hasUnicodeFlag) {
                  var first,
                      second;
                  if (firstEscape.kind == 'unicodeEscape' && (first = firstEscape.codePoint) >= 0xD800 && first <= 0xDBFF && current('\\') && next('u')) {
                    var prevPos = pos;
                    pos++;
                    var secondEscape = parseClassEscape();
                    if (secondEscape.kind == 'unicodeEscape' && (second = secondEscape.codePoint) >= 0xDC00 && second <= 0xDFFF) {
                      firstEscape.range[1] = secondEscape.range[1];
                      firstEscape.codePoint = (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;
                      firstEscape.type = 'value';
                      firstEscape.kind = 'unicodeCodePointEscape';
                      addRaw(firstEscape);
                    } else {
                      pos = prevPos;
                    }
                  }
                }
                return firstEscape;
              }
              function parseClassEscape() {
                return parseAtomEscape(true);
              }
              function parseAtomEscape(insideCharacterClass) {
                var res,
                    from = pos;
                res = parseDecimalEscape();
                if (res) {
                  return res;
                }
                if (insideCharacterClass) {
                  if (match('b')) {
                    return createEscaped('singleEscape', 0x0008, '\\b');
                  } else if (match('B')) {
                    bail('\\B not possible inside of CharacterClass', '', from);
                  }
                }
                res = parseCharacterEscape();
                return res;
              }
              function parseDecimalEscape() {
                var res,
                    match;
                if (res = matchReg(/^(?!0)\d+/)) {
                  match = res[0];
                  var refIdx = parseInt(res[0], 10);
                  if (refIdx <= closedCaptureCounter) {
                    return createReference(res[0]);
                  } else {
                    backrefDenied.push(refIdx);
                    incr(-res[0].length);
                    if (res = matchReg(/^[0-7]{1,3}/)) {
                      return createEscaped('octal', parseInt(res[0], 8), res[0], 1);
                    } else {
                      res = createCharacter(matchReg(/^[89]/));
                      return updateRawStart(res, res.range[0] - 1);
                    }
                  }
                } else if (res = matchReg(/^[0-7]{1,3}/)) {
                  match = res[0];
                  if (/^0{1,3}$/.test(match)) {
                    return createEscaped('null', 0x0000, '0', match.length + 1);
                  } else {
                    return createEscaped('octal', parseInt(match, 8), match, 1);
                  }
                } else if (res = matchReg(/^[dDsSwW]/)) {
                  return createCharacterClassEscape(res[0]);
                }
                return false;
              }
              function parseCharacterEscape() {
                var res;
                if (res = matchReg(/^[fnrtv]/)) {
                  var codePoint = 0;
                  switch (res[0]) {
                    case 't':
                      codePoint = 0x009;
                      break;
                    case 'n':
                      codePoint = 0x00A;
                      break;
                    case 'v':
                      codePoint = 0x00B;
                      break;
                    case 'f':
                      codePoint = 0x00C;
                      break;
                    case 'r':
                      codePoint = 0x00D;
                      break;
                  }
                  return createEscaped('singleEscape', codePoint, '\\' + res[0]);
                } else if (res = matchReg(/^c([a-zA-Z])/)) {
                  return createEscaped('controlLetter', res[1].charCodeAt(0) % 32, res[1], 2);
                } else if (res = matchReg(/^x([0-9a-fA-F]{2})/)) {
                  return createEscaped('hexadecimalEscape', parseInt(res[1], 16), res[1], 2);
                } else if (res = matchReg(/^u([0-9a-fA-F]{4})/)) {
                  return parseUnicodeSurrogatePairEscape(createEscaped('unicodeEscape', parseInt(res[1], 16), res[1], 2));
                } else if (hasUnicodeFlag && (res = matchReg(/^u\{([0-9a-fA-F]+)\}/))) {
                  return createEscaped('unicodeCodePointEscape', parseInt(res[1], 16), res[1], 4);
                } else {
                  return parseIdentityEscape();
                }
              }
              function isIdentifierPart(ch) {
                var NonAsciiIdentifierPart = new RegExp('[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B2\u08E4-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58\u0C59\u0C60-\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D60-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19D9\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099\u309A\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA69D\uA69F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA7AD\uA7B0\uA7B1\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB5F\uAB64\uAB65\uABC0-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2D\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]');
                return (ch === 36) || (ch === 95) || (ch >= 65 && ch <= 90) || (ch >= 97 && ch <= 122) || (ch >= 48 && ch <= 57) || (ch === 92) || ((ch >= 0x80) && NonAsciiIdentifierPart.test(String.fromCharCode(ch)));
              }
              function parseIdentityEscape() {
                var ZWJ = '\u200C';
                var ZWNJ = '\u200D';
                var tmp;
                if (!isIdentifierPart(lookahead())) {
                  tmp = incr();
                  return createEscaped('identifier', tmp.charCodeAt(0), tmp, 1);
                }
                if (match(ZWJ)) {
                  return createEscaped('identifier', 0x200C, ZWJ);
                } else if (match(ZWNJ)) {
                  return createEscaped('identifier', 0x200D, ZWNJ);
                }
                return null;
              }
              function parseCharacterClass() {
                var res,
                    from = pos;
                if (res = matchReg(/^\[\^/)) {
                  res = parseClassRanges();
                  skip(']');
                  return createCharacterClass(res, true, from, pos);
                } else if (match('[')) {
                  res = parseClassRanges();
                  skip(']');
                  return createCharacterClass(res, false, from, pos);
                }
                return null;
              }
              function parseClassRanges() {
                var res;
                if (current(']')) {
                  return [];
                } else {
                  res = parseNonemptyClassRanges();
                  if (!res) {
                    bail('nonEmptyClassRanges');
                  }
                  return res;
                }
              }
              function parseHelperClassRanges(atom) {
                var from,
                    to,
                    res;
                if (current('-') && !next(']')) {
                  skip('-');
                  res = parseClassAtom();
                  if (!res) {
                    bail('classAtom');
                  }
                  to = pos;
                  var classRanges = parseClassRanges();
                  if (!classRanges) {
                    bail('classRanges');
                  }
                  from = atom.range[0];
                  if (classRanges.type === 'empty') {
                    return [createClassRange(atom, res, from, to)];
                  }
                  return [createClassRange(atom, res, from, to)].concat(classRanges);
                }
                res = parseNonemptyClassRangesNoDash();
                if (!res) {
                  bail('nonEmptyClassRangesNoDash');
                }
                return [atom].concat(res);
              }
              function parseNonemptyClassRanges() {
                var atom = parseClassAtom();
                if (!atom) {
                  bail('classAtom');
                }
                if (current(']')) {
                  return [atom];
                }
                return parseHelperClassRanges(atom);
              }
              function parseNonemptyClassRangesNoDash() {
                var res = parseClassAtom();
                if (!res) {
                  bail('classAtom');
                }
                if (current(']')) {
                  return res;
                }
                return parseHelperClassRanges(res);
              }
              function parseClassAtom() {
                if (match('-')) {
                  return createCharacter('-');
                } else {
                  return parseClassAtomNoDash();
                }
              }
              function parseClassAtomNoDash() {
                var res;
                if (res = matchReg(/^[^\\\]-]/)) {
                  return createCharacter(res[0]);
                } else if (match('\\')) {
                  res = parseClassEscape();
                  if (!res) {
                    bail('classEscape');
                  }
                  return parseUnicodeSurrogatePairEscape(res);
                }
              }
              function bail(message, details, from, to) {
                from = from == null ? pos : from;
                to = to == null ? from : to;
                var contextStart = Math.max(0, from - 10);
                var contextEnd = Math.min(to + 10, str.length);
                var context = '    ' + str.substring(contextStart, contextEnd);
                var pointer = '    ' + new Array(from - contextStart + 1).join(' ') + '^';
                throw SyntaxError(message + ' at position ' + from + (details ? ': ' + details : '') + '\n' + context + '\n' + pointer);
              }
              var backrefDenied = [];
              var closedCaptureCounter = 0;
              var firstIteration = true;
              var hasUnicodeFlag = (flags || "").indexOf("u") !== -1;
              var pos = 0;
              str = String(str);
              if (str === '') {
                str = '(?:)';
              }
              var result = parseDisjunction();
              if (result.range[1] !== str.length) {
                bail('Could not parse entire input - got stuck', '', result.range[1]);
              }
              for (var i = 0; i < backrefDenied.length; i++) {
                if (backrefDenied[i] <= closedCaptureCounter) {
                  pos = 0;
                  firstIteration = false;
                  return parseDisjunction();
                }
              }
              return result;
            }
            var regjsparser = {parse: parse};
            if (typeof module !== 'undefined' && module.exports) {
              module.exports = regjsparser;
            } else {
              window.regjsparser = regjsparser;
            }
          }());
        }, {}],
        586: [function(_dereq_, module, exports) {
          'use strict';
          var isFinite = _dereq_(433);
          module.exports = function(str, n) {
            if (typeof str !== 'string') {
              throw new TypeError('Expected a string as the first argument');
            }
            if (n < 0 || !isFinite(n)) {
              throw new TypeError('Expected a finite positive number');
            }
            var ret = '';
            do {
              if (n & 1) {
                ret += str;
              }
              str += str;
            } while (n = n >> 1);
            return ret;
          };
        }, {"433": 433}],
        587: [function(_dereq_, module, exports) {
          'use strict';
          module.exports = /^#!.*/;
        }, {}],
        588: [function(_dereq_, module, exports) {
          var fmt = (function() {
            "use strict";
            function fmt(str, var_args) {
              var args = Array.prototype.slice.call(arguments, 1);
              return str.replace(/\{(\d+)\}/g, function(s, match) {
                return (match in args ? args[match] : s);
              });
            }
            function obj(str, obj) {
              return str.replace(/\{([_$a-zA-Z0-9][_$a-zA-Z0-9]*)\}/g, function(s, match) {
                return (match in obj ? obj[match] : s);
              });
            }
            function repeat(str, n) {
              return (new Array(n + 1)).join(str);
            }
            fmt.fmt = fmt;
            fmt.obj = obj;
            fmt.repeat = repeat;
            return fmt;
          })();
          if (typeof module !== "undefined" && typeof module.exports !== "undefined") {
            module.exports = fmt;
          }
        }, {}],
        589: [function(_dereq_, module, exports) {
          var is = (function() {
            "use strict";
            var hasOwnProperty = Object.prototype.hasOwnProperty;
            var toString = Object.prototype.toString;
            var _undefined = void 0;
            return {
              nan: function(v) {
                return v !== v;
              },
              boolean: function(v) {
                return typeof v === "boolean";
              },
              number: function(v) {
                return typeof v === "number";
              },
              string: function(v) {
                return typeof v === "string";
              },
              fn: function(v) {
                return typeof v === "function";
              },
              object: function(v) {
                return v !== null && typeof v === "object";
              },
              primitive: function(v) {
                var t = typeof v;
                return v === null || v === _undefined || t === "boolean" || t === "number" || t === "string";
              },
              array: Array.isArray || function(v) {
                return toString.call(v) === "[object Array]";
              },
              finitenumber: function(v) {
                return typeof v === "number" && isFinite(v);
              },
              someof: function(v, values) {
                return values.indexOf(v) >= 0;
              },
              noneof: function(v, values) {
                return values.indexOf(v) === -1;
              },
              own: function(obj, prop) {
                return hasOwnProperty.call(obj, prop);
              }
            };
          })();
          if (typeof module !== "undefined" && typeof module.exports !== "undefined") {
            module.exports = is;
          }
        }, {}],
        590: [function(_dereq_, module, exports) {
          'use strict';
          module.exports = function(str) {
            var isExtendedLengthPath = /^\\\\\?\\/.test(str);
            var hasNonAscii = /[^\x00-\x80]+/.test(str);
            if (isExtendedLengthPath || hasNonAscii) {
              return str;
            }
            return str.replace(/\\/g, '/');
          };
        }, {}],
        591: [function(_dereq_, module, exports) {
          {
            var util = _dereq_(600);
            function ArraySet() {
              this._array = [];
              this._set = {};
            }
            ArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {
              var set = new ArraySet();
              for (var i = 0,
                  len = aArray.length; i < len; i++) {
                set.add(aArray[i], aAllowDuplicates);
              }
              return set;
            };
            ArraySet.prototype.size = function ArraySet_size() {
              return Object.getOwnPropertyNames(this._set).length;
            };
            ArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {
              var sStr = util.toSetString(aStr);
              var isDuplicate = this._set.hasOwnProperty(sStr);
              var idx = this._array.length;
              if (!isDuplicate || aAllowDuplicates) {
                this._array.push(aStr);
              }
              if (!isDuplicate) {
                this._set[sStr] = idx;
              }
            };
            ArraySet.prototype.has = function ArraySet_has(aStr) {
              var sStr = util.toSetString(aStr);
              return this._set.hasOwnProperty(sStr);
            };
            ArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {
              var sStr = util.toSetString(aStr);
              if (this._set.hasOwnProperty(sStr)) {
                return this._set[sStr];
              }
              throw new Error('"' + aStr + '" is not in the set.');
            };
            ArraySet.prototype.at = function ArraySet_at(aIdx) {
              if (aIdx >= 0 && aIdx < this._array.length) {
                return this._array[aIdx];
              }
              throw new Error('No element indexed by ' + aIdx);
            };
            ArraySet.prototype.toArray = function ArraySet_toArray() {
              return this._array.slice();
            };
            exports.ArraySet = ArraySet;
          }
        }, {"600": 600}],
        592: [function(_dereq_, module, exports) {
          {
            var base64 = _dereq_(593);
            var VLQ_BASE_SHIFT = 5;
            var VLQ_BASE = 1 << VLQ_BASE_SHIFT;
            var VLQ_BASE_MASK = VLQ_BASE - 1;
            var VLQ_CONTINUATION_BIT = VLQ_BASE;
            function toVLQSigned(aValue) {
              return aValue < 0 ? ((-aValue) << 1) + 1 : (aValue << 1) + 0;
            }
            function fromVLQSigned(aValue) {
              var isNegative = (aValue & 1) === 1;
              var shifted = aValue >> 1;
              return isNegative ? -shifted : shifted;
            }
            exports.encode = function base64VLQ_encode(aValue) {
              var encoded = "";
              var digit;
              var vlq = toVLQSigned(aValue);
              do {
                digit = vlq & VLQ_BASE_MASK;
                vlq >>>= VLQ_BASE_SHIFT;
                if (vlq > 0) {
                  digit |= VLQ_CONTINUATION_BIT;
                }
                encoded += base64.encode(digit);
              } while (vlq > 0);
              return encoded;
            };
            exports.decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {
              var strLen = aStr.length;
              var result = 0;
              var shift = 0;
              var continuation,
                  digit;
              do {
                if (aIndex >= strLen) {
                  throw new Error("Expected more digits in base 64 VLQ value.");
                }
                digit = base64.decode(aStr.charCodeAt(aIndex++));
                if (digit === -1) {
                  throw new Error("Invalid base64 digit: " + aStr.charAt(aIndex - 1));
                }
                continuation = !!(digit & VLQ_CONTINUATION_BIT);
                digit &= VLQ_BASE_MASK;
                result = result + (digit << shift);
                shift += VLQ_BASE_SHIFT;
              } while (continuation);
              aOutParam.value = fromVLQSigned(result);
              aOutParam.rest = aIndex;
            };
          }
        }, {"593": 593}],
        593: [function(_dereq_, module, exports) {
          {
            var intToCharMap = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');
            exports.encode = function(number) {
              if (0 <= number && number < intToCharMap.length) {
                return intToCharMap[number];
              }
              throw new TypeError("Must be between 0 and 63: " + number);
            };
            exports.decode = function(charCode) {
              var bigA = 65;
              var bigZ = 90;
              var littleA = 97;
              var littleZ = 122;
              var zero = 48;
              var nine = 57;
              var plus = 43;
              var slash = 47;
              var littleOffset = 26;
              var numberOffset = 52;
              if (bigA <= charCode && charCode <= bigZ) {
                return (charCode - bigA);
              }
              if (littleA <= charCode && charCode <= littleZ) {
                return (charCode - littleA + littleOffset);
              }
              if (zero <= charCode && charCode <= nine) {
                return (charCode - zero + numberOffset);
              }
              if (charCode == plus) {
                return 62;
              }
              if (charCode == slash) {
                return 63;
              }
              return -1;
            };
          }
        }, {}],
        594: [function(_dereq_, module, exports) {
          {
            exports.GREATEST_LOWER_BOUND = 1;
            exports.LEAST_UPPER_BOUND = 2;
            function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {
              var mid = Math.floor((aHigh - aLow) / 2) + aLow;
              var cmp = aCompare(aNeedle, aHaystack[mid], true);
              if (cmp === 0) {
                return mid;
              } else if (cmp > 0) {
                if (aHigh - mid > 1) {
                  return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);
                }
                if (aBias == exports.LEAST_UPPER_BOUND) {
                  return aHigh < aHaystack.length ? aHigh : -1;
                } else {
                  return mid;
                }
              } else {
                if (mid - aLow > 1) {
                  return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);
                }
                if (aBias == exports.LEAST_UPPER_BOUND) {
                  return mid;
                } else {
                  return aLow < 0 ? -1 : aLow;
                }
              }
            }
            exports.search = function search(aNeedle, aHaystack, aCompare, aBias) {
              if (aHaystack.length === 0) {
                return -1;
              }
              var index = recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack, aCompare, aBias || exports.GREATEST_LOWER_BOUND);
              if (index < 0) {
                return -1;
              }
              while (index - 1 >= 0) {
                if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {
                  break;
                }
                --index;
              }
              return index;
            };
          }
        }, {}],
        595: [function(_dereq_, module, exports) {
          {
            var util = _dereq_(600);
            function generatedPositionAfter(mappingA, mappingB) {
              var lineA = mappingA.generatedLine;
              var lineB = mappingB.generatedLine;
              var columnA = mappingA.generatedColumn;
              var columnB = mappingB.generatedColumn;
              return lineB > lineA || lineB == lineA && columnB >= columnA || util.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;
            }
            function MappingList() {
              this._array = [];
              this._sorted = true;
              this._last = {
                generatedLine: -1,
                generatedColumn: 0
              };
            }
            MappingList.prototype.unsortedForEach = function MappingList_forEach(aCallback, aThisArg) {
              this._array.forEach(aCallback, aThisArg);
            };
            MappingList.prototype.add = function MappingList_add(aMapping) {
              if (generatedPositionAfter(this._last, aMapping)) {
                this._last = aMapping;
                this._array.push(aMapping);
              } else {
                this._sorted = false;
                this._array.push(aMapping);
              }
            };
            MappingList.prototype.toArray = function MappingList_toArray() {
              if (!this._sorted) {
                this._array.sort(util.compareByGeneratedPositionsInflated);
                this._sorted = true;
              }
              return this._array;
            };
            exports.MappingList = MappingList;
          }
        }, {"600": 600}],
        596: [function(_dereq_, module, exports) {
          {
            function swap(ary, x, y) {
              var temp = ary[x];
              ary[x] = ary[y];
              ary[y] = temp;
            }
            function randomIntInRange(low, high) {
              return Math.round(low + (Math.random() * (high - low)));
            }
            function doQuickSort(ary, comparator, p, r) {
              if (p < r) {
                var pivotIndex = randomIntInRange(p, r);
                var i = p - 1;
                swap(ary, pivotIndex, r);
                var pivot = ary[r];
                for (var j = p; j < r; j++) {
                  if (comparator(ary[j], pivot) <= 0) {
                    i += 1;
                    swap(ary, i, j);
                  }
                }
                swap(ary, i + 1, j);
                var q = i + 1;
                doQuickSort(ary, comparator, p, q - 1);
                doQuickSort(ary, comparator, q + 1, r);
              }
            }
            exports.quickSort = function(ary, comparator) {
              doQuickSort(ary, comparator, 0, ary.length - 1);
            };
          }
        }, {}],
        597: [function(_dereq_, module, exports) {
          {
            var util = _dereq_(600);
            var binarySearch = _dereq_(594);
            var ArraySet = _dereq_(591).ArraySet;
            var base64VLQ = _dereq_(592);
            var quickSort = _dereq_(596).quickSort;
            function SourceMapConsumer(aSourceMap) {
              var sourceMap = aSourceMap;
              if (typeof aSourceMap === 'string') {
                sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''));
              }
              return sourceMap.sections != null ? new IndexedSourceMapConsumer(sourceMap) : new BasicSourceMapConsumer(sourceMap);
            }
            SourceMapConsumer.fromSourceMap = function(aSourceMap) {
              return BasicSourceMapConsumer.fromSourceMap(aSourceMap);
            };
            SourceMapConsumer.prototype._version = 3;
            SourceMapConsumer.prototype.__generatedMappings = null;
            Object.defineProperty(SourceMapConsumer.prototype, '_generatedMappings', {get: function() {
                if (!this.__generatedMappings) {
                  this._parseMappings(this._mappings, this.sourceRoot);
                }
                return this.__generatedMappings;
              }});
            SourceMapConsumer.prototype.__originalMappings = null;
            Object.defineProperty(SourceMapConsumer.prototype, '_originalMappings', {get: function() {
                if (!this.__originalMappings) {
                  this._parseMappings(this._mappings, this.sourceRoot);
                }
                return this.__originalMappings;
              }});
            SourceMapConsumer.prototype._charIsMappingSeparator = function SourceMapConsumer_charIsMappingSeparator(aStr, index) {
              var c = aStr.charAt(index);
              return c === ";" || c === ",";
            };
            SourceMapConsumer.prototype._parseMappings = function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
              throw new Error("Subclasses must implement _parseMappings");
            };
            SourceMapConsumer.GENERATED_ORDER = 1;
            SourceMapConsumer.ORIGINAL_ORDER = 2;
            SourceMapConsumer.GREATEST_LOWER_BOUND = 1;
            SourceMapConsumer.LEAST_UPPER_BOUND = 2;
            SourceMapConsumer.prototype.eachMapping = function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {
              var context = aContext || null;
              var order = aOrder || SourceMapConsumer.GENERATED_ORDER;
              var mappings;
              switch (order) {
                case SourceMapConsumer.GENERATED_ORDER:
                  mappings = this._generatedMappings;
                  break;
                case SourceMapConsumer.ORIGINAL_ORDER:
                  mappings = this._originalMappings;
                  break;
                default:
                  throw new Error("Unknown order of iteration.");
              }
              var sourceRoot = this.sourceRoot;
              mappings.map(function(mapping) {
                var source = mapping.source === null ? null : this._sources.at(mapping.source);
                if (source != null && sourceRoot != null) {
                  source = util.join(sourceRoot, source);
                }
                return {
                  source: source,
                  generatedLine: mapping.generatedLine,
                  generatedColumn: mapping.generatedColumn,
                  originalLine: mapping.originalLine,
                  originalColumn: mapping.originalColumn,
                  name: mapping.name === null ? null : this._names.at(mapping.name)
                };
              }, this).forEach(aCallback, context);
            };
            SourceMapConsumer.prototype.allGeneratedPositionsFor = function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {
              var line = util.getArg(aArgs, 'line');
              var needle = {
                source: util.getArg(aArgs, 'source'),
                originalLine: line,
                originalColumn: util.getArg(aArgs, 'column', 0)
              };
              if (this.sourceRoot != null) {
                needle.source = util.relative(this.sourceRoot, needle.source);
              }
              if (!this._sources.has(needle.source)) {
                return [];
              }
              needle.source = this._sources.indexOf(needle.source);
              var mappings = [];
              var index = this._findMapping(needle, this._originalMappings, "originalLine", "originalColumn", util.compareByOriginalPositions, binarySearch.LEAST_UPPER_BOUND);
              if (index >= 0) {
                var mapping = this._originalMappings[index];
                if (aArgs.column === undefined) {
                  var originalLine = mapping.originalLine;
                  while (mapping && mapping.originalLine === originalLine) {
                    mappings.push({
                      line: util.getArg(mapping, 'generatedLine', null),
                      column: util.getArg(mapping, 'generatedColumn', null),
                      lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
                    });
                    mapping = this._originalMappings[++index];
                  }
                } else {
                  var originalColumn = mapping.originalColumn;
                  while (mapping && mapping.originalLine === line && mapping.originalColumn == originalColumn) {
                    mappings.push({
                      line: util.getArg(mapping, 'generatedLine', null),
                      column: util.getArg(mapping, 'generatedColumn', null),
                      lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
                    });
                    mapping = this._originalMappings[++index];
                  }
                }
              }
              return mappings;
            };
            exports.SourceMapConsumer = SourceMapConsumer;
            function BasicSourceMapConsumer(aSourceMap) {
              var sourceMap = aSourceMap;
              if (typeof aSourceMap === 'string') {
                sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''));
              }
              var version = util.getArg(sourceMap, 'version');
              var sources = util.getArg(sourceMap, 'sources');
              var names = util.getArg(sourceMap, 'names', []);
              var sourceRoot = util.getArg(sourceMap, 'sourceRoot', null);
              var sourcesContent = util.getArg(sourceMap, 'sourcesContent', null);
              var mappings = util.getArg(sourceMap, 'mappings');
              var file = util.getArg(sourceMap, 'file', null);
              if (version != this._version) {
                throw new Error('Unsupported version: ' + version);
              }
              sources = sources.map(util.normalize).map(function(source) {
                return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source) ? util.relative(sourceRoot, source) : source;
              });
              this._names = ArraySet.fromArray(names, true);
              this._sources = ArraySet.fromArray(sources, true);
              this.sourceRoot = sourceRoot;
              this.sourcesContent = sourcesContent;
              this._mappings = mappings;
              this.file = file;
            }
            BasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
            BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;
            BasicSourceMapConsumer.fromSourceMap = function SourceMapConsumer_fromSourceMap(aSourceMap) {
              var smc = Object.create(BasicSourceMapConsumer.prototype);
              var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);
              var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);
              smc.sourceRoot = aSourceMap._sourceRoot;
              smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(), smc.sourceRoot);
              smc.file = aSourceMap._file;
              var generatedMappings = aSourceMap._mappings.toArray().slice();
              var destGeneratedMappings = smc.__generatedMappings = [];
              var destOriginalMappings = smc.__originalMappings = [];
              for (var i = 0,
                  length = generatedMappings.length; i < length; i++) {
                var srcMapping = generatedMappings[i];
                var destMapping = new Mapping;
                destMapping.generatedLine = srcMapping.generatedLine;
                destMapping.generatedColumn = srcMapping.generatedColumn;
                if (srcMapping.source) {
                  destMapping.source = sources.indexOf(srcMapping.source);
                  destMapping.originalLine = srcMapping.originalLine;
                  destMapping.originalColumn = srcMapping.originalColumn;
                  if (srcMapping.name) {
                    destMapping.name = names.indexOf(srcMapping.name);
                  }
                  destOriginalMappings.push(destMapping);
                }
                destGeneratedMappings.push(destMapping);
              }
              quickSort(smc.__originalMappings, util.compareByOriginalPositions);
              return smc;
            };
            BasicSourceMapConsumer.prototype._version = 3;
            Object.defineProperty(BasicSourceMapConsumer.prototype, 'sources', {get: function() {
                return this._sources.toArray().map(function(s) {
                  return this.sourceRoot != null ? util.join(this.sourceRoot, s) : s;
                }, this);
              }});
            function Mapping() {
              this.generatedLine = 0;
              this.generatedColumn = 0;
              this.source = null;
              this.originalLine = null;
              this.originalColumn = null;
              this.name = null;
            }
            BasicSourceMapConsumer.prototype._parseMappings = function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
              var generatedLine = 1;
              var previousGeneratedColumn = 0;
              var previousOriginalLine = 0;
              var previousOriginalColumn = 0;
              var previousSource = 0;
              var previousName = 0;
              var length = aStr.length;
              var index = 0;
              var cachedSegments = {};
              var temp = {};
              var originalMappings = [];
              var generatedMappings = [];
              var mapping,
                  str,
                  segment,
                  end,
                  value;
              while (index < length) {
                if (aStr.charAt(index) === ';') {
                  generatedLine++;
                  index++;
                  previousGeneratedColumn = 0;
                } else if (aStr.charAt(index) === ',') {
                  index++;
                } else {
                  mapping = new Mapping();
                  mapping.generatedLine = generatedLine;
                  for (end = index; end < length; end++) {
                    if (this._charIsMappingSeparator(aStr, end)) {
                      break;
                    }
                  }
                  str = aStr.slice(index, end);
                  segment = cachedSegments[str];
                  if (segment) {
                    index += str.length;
                  } else {
                    segment = [];
                    while (index < end) {
                      base64VLQ.decode(aStr, index, temp);
                      value = temp.value;
                      index = temp.rest;
                      segment.push(value);
                    }
                    if (segment.length === 2) {
                      throw new Error('Found a source, but no line and column');
                    }
                    if (segment.length === 3) {
                      throw new Error('Found a source and line, but no column');
                    }
                    cachedSegments[str] = segment;
                  }
                  mapping.generatedColumn = previousGeneratedColumn + segment[0];
                  previousGeneratedColumn = mapping.generatedColumn;
                  if (segment.length > 1) {
                    mapping.source = previousSource + segment[1];
                    previousSource += segment[1];
                    mapping.originalLine = previousOriginalLine + segment[2];
                    previousOriginalLine = mapping.originalLine;
                    mapping.originalLine += 1;
                    mapping.originalColumn = previousOriginalColumn + segment[3];
                    previousOriginalColumn = mapping.originalColumn;
                    if (segment.length > 4) {
                      mapping.name = previousName + segment[4];
                      previousName += segment[4];
                    }
                  }
                  generatedMappings.push(mapping);
                  if (typeof mapping.originalLine === 'number') {
                    originalMappings.push(mapping);
                  }
                }
              }
              quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated);
              this.__generatedMappings = generatedMappings;
              quickSort(originalMappings, util.compareByOriginalPositions);
              this.__originalMappings = originalMappings;
            };
            BasicSourceMapConsumer.prototype._findMapping = function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName, aColumnName, aComparator, aBias) {
              if (aNeedle[aLineName] <= 0) {
                throw new TypeError('Line must be greater than or equal to 1, got ' + aNeedle[aLineName]);
              }
              if (aNeedle[aColumnName] < 0) {
                throw new TypeError('Column must be greater than or equal to 0, got ' + aNeedle[aColumnName]);
              }
              return binarySearch.search(aNeedle, aMappings, aComparator, aBias);
            };
            BasicSourceMapConsumer.prototype.computeColumnSpans = function SourceMapConsumer_computeColumnSpans() {
              for (var index = 0; index < this._generatedMappings.length; ++index) {
                var mapping = this._generatedMappings[index];
                if (index + 1 < this._generatedMappings.length) {
                  var nextMapping = this._generatedMappings[index + 1];
                  if (mapping.generatedLine === nextMapping.generatedLine) {
                    mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;
                    continue;
                  }
                }
                mapping.lastGeneratedColumn = Infinity;
              }
            };
            BasicSourceMapConsumer.prototype.originalPositionFor = function SourceMapConsumer_originalPositionFor(aArgs) {
              var needle = {
                generatedLine: util.getArg(aArgs, 'line'),
                generatedColumn: util.getArg(aArgs, 'column')
              };
              var index = this._findMapping(needle, this._generatedMappings, "generatedLine", "generatedColumn", util.compareByGeneratedPositionsDeflated, util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND));
              if (index >= 0) {
                var mapping = this._generatedMappings[index];
                if (mapping.generatedLine === needle.generatedLine) {
                  var source = util.getArg(mapping, 'source', null);
                  if (source !== null) {
                    source = this._sources.at(source);
                    if (this.sourceRoot != null) {
                      source = util.join(this.sourceRoot, source);
                    }
                  }
                  var name = util.getArg(mapping, 'name', null);
                  if (name !== null) {
                    name = this._names.at(name);
                  }
                  return {
                    source: source,
                    line: util.getArg(mapping, 'originalLine', null),
                    column: util.getArg(mapping, 'originalColumn', null),
                    name: name
                  };
                }
              }
              return {
                source: null,
                line: null,
                column: null,
                name: null
              };
            };
            BasicSourceMapConsumer.prototype.hasContentsOfAllSources = function BasicSourceMapConsumer_hasContentsOfAllSources() {
              if (!this.sourcesContent) {
                return false;
              }
              return this.sourcesContent.length >= this._sources.size() && !this.sourcesContent.some(function(sc) {
                return sc == null;
              });
            };
            BasicSourceMapConsumer.prototype.sourceContentFor = function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
              if (!this.sourcesContent) {
                return null;
              }
              if (this.sourceRoot != null) {
                aSource = util.relative(this.sourceRoot, aSource);
              }
              if (this._sources.has(aSource)) {
                return this.sourcesContent[this._sources.indexOf(aSource)];
              }
              var url;
              if (this.sourceRoot != null && (url = util.urlParse(this.sourceRoot))) {
                var fileUriAbsPath = aSource.replace(/^file:\/\//, "");
                if (url.scheme == "file" && this._sources.has(fileUriAbsPath)) {
                  return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)];
                }
                if ((!url.path || url.path == "/") && this._sources.has("/" + aSource)) {
                  return this.sourcesContent[this._sources.indexOf("/" + aSource)];
                }
              }
              if (nullOnMissing) {
                return null;
              } else {
                throw new Error('"' + aSource + '" is not in the SourceMap.');
              }
            };
            BasicSourceMapConsumer.prototype.generatedPositionFor = function SourceMapConsumer_generatedPositionFor(aArgs) {
              var source = util.getArg(aArgs, 'source');
              if (this.sourceRoot != null) {
                source = util.relative(this.sourceRoot, source);
              }
              if (!this._sources.has(source)) {
                return {
                  line: null,
                  column: null,
                  lastColumn: null
                };
              }
              source = this._sources.indexOf(source);
              var needle = {
                source: source,
                originalLine: util.getArg(aArgs, 'line'),
                originalColumn: util.getArg(aArgs, 'column')
              };
              var index = this._findMapping(needle, this._originalMappings, "originalLine", "originalColumn", util.compareByOriginalPositions, util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND));
              if (index >= 0) {
                var mapping = this._originalMappings[index];
                if (mapping.source === needle.source) {
                  return {
                    line: util.getArg(mapping, 'generatedLine', null),
                    column: util.getArg(mapping, 'generatedColumn', null),
                    lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
                  };
                }
              }
              return {
                line: null,
                column: null,
                lastColumn: null
              };
            };
            exports.BasicSourceMapConsumer = BasicSourceMapConsumer;
            function IndexedSourceMapConsumer(aSourceMap) {
              var sourceMap = aSourceMap;
              if (typeof aSourceMap === 'string') {
                sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''));
              }
              var version = util.getArg(sourceMap, 'version');
              var sections = util.getArg(sourceMap, 'sections');
              if (version != this._version) {
                throw new Error('Unsupported version: ' + version);
              }
              this._sources = new ArraySet();
              this._names = new ArraySet();
              var lastOffset = {
                line: -1,
                column: 0
              };
              this._sections = sections.map(function(s) {
                if (s.url) {
                  throw new Error('Support for url field in sections not implemented.');
                }
                var offset = util.getArg(s, 'offset');
                var offsetLine = util.getArg(offset, 'line');
                var offsetColumn = util.getArg(offset, 'column');
                if (offsetLine < lastOffset.line || (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)) {
                  throw new Error('Section offsets must be ordered and non-overlapping.');
                }
                lastOffset = offset;
                return {
                  generatedOffset: {
                    generatedLine: offsetLine + 1,
                    generatedColumn: offsetColumn + 1
                  },
                  consumer: new SourceMapConsumer(util.getArg(s, 'map'))
                };
              });
            }
            IndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
            IndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;
            IndexedSourceMapConsumer.prototype._version = 3;
            Object.defineProperty(IndexedSourceMapConsumer.prototype, 'sources', {get: function() {
                var sources = [];
                for (var i = 0; i < this._sections.length; i++) {
                  for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {
                    sources.push(this._sections[i].consumer.sources[j]);
                  }
                }
                return sources;
              }});
            IndexedSourceMapConsumer.prototype.originalPositionFor = function IndexedSourceMapConsumer_originalPositionFor(aArgs) {
              var needle = {
                generatedLine: util.getArg(aArgs, 'line'),
                generatedColumn: util.getArg(aArgs, 'column')
              };
              var sectionIndex = binarySearch.search(needle, this._sections, function(needle, section) {
                var cmp = needle.generatedLine - section.generatedOffset.generatedLine;
                if (cmp) {
                  return cmp;
                }
                return (needle.generatedColumn - section.generatedOffset.generatedColumn);
              });
              var section = this._sections[sectionIndex];
              if (!section) {
                return {
                  source: null,
                  line: null,
                  column: null,
                  name: null
                };
              }
              return section.consumer.originalPositionFor({
                line: needle.generatedLine - (section.generatedOffset.generatedLine - 1),
                column: needle.generatedColumn - (section.generatedOffset.generatedLine === needle.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),
                bias: aArgs.bias
              });
            };
            IndexedSourceMapConsumer.prototype.hasContentsOfAllSources = function IndexedSourceMapConsumer_hasContentsOfAllSources() {
              return this._sections.every(function(s) {
                return s.consumer.hasContentsOfAllSources();
              });
            };
            IndexedSourceMapConsumer.prototype.sourceContentFor = function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
              for (var i = 0; i < this._sections.length; i++) {
                var section = this._sections[i];
                var content = section.consumer.sourceContentFor(aSource, true);
                if (content) {
                  return content;
                }
              }
              if (nullOnMissing) {
                return null;
              } else {
                throw new Error('"' + aSource + '" is not in the SourceMap.');
              }
            };
            IndexedSourceMapConsumer.prototype.generatedPositionFor = function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {
              for (var i = 0; i < this._sections.length; i++) {
                var section = this._sections[i];
                if (section.consumer.sources.indexOf(util.getArg(aArgs, 'source')) === -1) {
                  continue;
                }
                var generatedPosition = section.consumer.generatedPositionFor(aArgs);
                if (generatedPosition) {
                  var ret = {
                    line: generatedPosition.line + (section.generatedOffset.generatedLine - 1),
                    column: generatedPosition.column + (section.generatedOffset.generatedLine === generatedPosition.line ? section.generatedOffset.generatedColumn - 1 : 0)
                  };
                  return ret;
                }
              }
              return {
                line: null,
                column: null
              };
            };
            IndexedSourceMapConsumer.prototype._parseMappings = function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {
              this.__generatedMappings = [];
              this.__originalMappings = [];
              for (var i = 0; i < this._sections.length; i++) {
                var section = this._sections[i];
                var sectionMappings = section.consumer._generatedMappings;
                for (var j = 0; j < sectionMappings.length; j++) {
                  var mapping = sectionMappings[j];
                  var source = section.consumer._sources.at(mapping.source);
                  if (section.consumer.sourceRoot !== null) {
                    source = util.join(section.consumer.sourceRoot, source);
                  }
                  this._sources.add(source);
                  source = this._sources.indexOf(source);
                  var name = section.consumer._names.at(mapping.name);
                  this._names.add(name);
                  name = this._names.indexOf(name);
                  var adjustedMapping = {
                    source: source,
                    generatedLine: mapping.generatedLine + (section.generatedOffset.generatedLine - 1),
                    generatedColumn: mapping.generatedColumn + (section.generatedOffset.generatedLine === mapping.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),
                    originalLine: mapping.originalLine,
                    originalColumn: mapping.originalColumn,
                    name: name
                  };
                  this.__generatedMappings.push(adjustedMapping);
                  if (typeof adjustedMapping.originalLine === 'number') {
                    this.__originalMappings.push(adjustedMapping);
                  }
                }
              }
              quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);
              quickSort(this.__originalMappings, util.compareByOriginalPositions);
            };
            exports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;
          }
        }, {
          "591": 591,
          "592": 592,
          "594": 594,
          "596": 596,
          "600": 600
        }],
        598: [function(_dereq_, module, exports) {
          {
            var base64VLQ = _dereq_(592);
            var util = _dereq_(600);
            var ArraySet = _dereq_(591).ArraySet;
            var MappingList = _dereq_(595).MappingList;
            function SourceMapGenerator(aArgs) {
              if (!aArgs) {
                aArgs = {};
              }
              this._file = util.getArg(aArgs, 'file', null);
              this._sourceRoot = util.getArg(aArgs, 'sourceRoot', null);
              this._skipValidation = util.getArg(aArgs, 'skipValidation', false);
              this._sources = new ArraySet();
              this._names = new ArraySet();
              this._mappings = new MappingList();
              this._sourcesContents = null;
            }
            SourceMapGenerator.prototype._version = 3;
            SourceMapGenerator.fromSourceMap = function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {
              var sourceRoot = aSourceMapConsumer.sourceRoot;
              var generator = new SourceMapGenerator({
                file: aSourceMapConsumer.file,
                sourceRoot: sourceRoot
              });
              aSourceMapConsumer.eachMapping(function(mapping) {
                var newMapping = {generated: {
                    line: mapping.generatedLine,
                    column: mapping.generatedColumn
                  }};
                if (mapping.source != null) {
                  newMapping.source = mapping.source;
                  if (sourceRoot != null) {
                    newMapping.source = util.relative(sourceRoot, newMapping.source);
                  }
                  newMapping.original = {
                    line: mapping.originalLine,
                    column: mapping.originalColumn
                  };
                  if (mapping.name != null) {
                    newMapping.name = mapping.name;
                  }
                }
                generator.addMapping(newMapping);
              });
              aSourceMapConsumer.sources.forEach(function(sourceFile) {
                var content = aSourceMapConsumer.sourceContentFor(sourceFile);
                if (content != null) {
                  generator.setSourceContent(sourceFile, content);
                }
              });
              return generator;
            };
            SourceMapGenerator.prototype.addMapping = function SourceMapGenerator_addMapping(aArgs) {
              var generated = util.getArg(aArgs, 'generated');
              var original = util.getArg(aArgs, 'original', null);
              var source = util.getArg(aArgs, 'source', null);
              var name = util.getArg(aArgs, 'name', null);
              if (!this._skipValidation) {
                this._validateMapping(generated, original, source, name);
              }
              if (source != null && !this._sources.has(source)) {
                this._sources.add(source);
              }
              if (name != null && !this._names.has(name)) {
                this._names.add(name);
              }
              this._mappings.add({
                generatedLine: generated.line,
                generatedColumn: generated.column,
                originalLine: original != null && original.line,
                originalColumn: original != null && original.column,
                source: source,
                name: name
              });
            };
            SourceMapGenerator.prototype.setSourceContent = function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {
              var source = aSourceFile;
              if (this._sourceRoot != null) {
                source = util.relative(this._sourceRoot, source);
              }
              if (aSourceContent != null) {
                if (!this._sourcesContents) {
                  this._sourcesContents = {};
                }
                this._sourcesContents[util.toSetString(source)] = aSourceContent;
              } else if (this._sourcesContents) {
                delete this._sourcesContents[util.toSetString(source)];
                if (Object.keys(this._sourcesContents).length === 0) {
                  this._sourcesContents = null;
                }
              }
            };
            SourceMapGenerator.prototype.applySourceMap = function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {
              var sourceFile = aSourceFile;
              if (aSourceFile == null) {
                if (aSourceMapConsumer.file == null) {
                  throw new Error('SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, ' + 'or the source map\'s "file" property. Both were omitted.');
                }
                sourceFile = aSourceMapConsumer.file;
              }
              var sourceRoot = this._sourceRoot;
              if (sourceRoot != null) {
                sourceFile = util.relative(sourceRoot, sourceFile);
              }
              var newSources = new ArraySet();
              var newNames = new ArraySet();
              this._mappings.unsortedForEach(function(mapping) {
                if (mapping.source === sourceFile && mapping.originalLine != null) {
                  var original = aSourceMapConsumer.originalPositionFor({
                    line: mapping.originalLine,
                    column: mapping.originalColumn
                  });
                  if (original.source != null) {
                    mapping.source = original.source;
                    if (aSourceMapPath != null) {
                      mapping.source = util.join(aSourceMapPath, mapping.source);
                    }
                    if (sourceRoot != null) {
                      mapping.source = util.relative(sourceRoot, mapping.source);
                    }
                    mapping.originalLine = original.line;
                    mapping.originalColumn = original.column;
                    if (original.name != null) {
                      mapping.name = original.name;
                    }
                  }
                }
                var source = mapping.source;
                if (source != null && !newSources.has(source)) {
                  newSources.add(source);
                }
                var name = mapping.name;
                if (name != null && !newNames.has(name)) {
                  newNames.add(name);
                }
              }, this);
              this._sources = newSources;
              this._names = newNames;
              aSourceMapConsumer.sources.forEach(function(sourceFile) {
                var content = aSourceMapConsumer.sourceContentFor(sourceFile);
                if (content != null) {
                  if (aSourceMapPath != null) {
                    sourceFile = util.join(aSourceMapPath, sourceFile);
                  }
                  if (sourceRoot != null) {
                    sourceFile = util.relative(sourceRoot, sourceFile);
                  }
                  this.setSourceContent(sourceFile, content);
                }
              }, this);
            };
            SourceMapGenerator.prototype._validateMapping = function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource, aName) {
              if (aGenerated && 'line' in aGenerated && 'column' in aGenerated && aGenerated.line > 0 && aGenerated.column >= 0 && !aOriginal && !aSource && !aName) {
                return;
              } else if (aGenerated && 'line' in aGenerated && 'column' in aGenerated && aOriginal && 'line' in aOriginal && 'column' in aOriginal && aGenerated.line > 0 && aGenerated.column >= 0 && aOriginal.line > 0 && aOriginal.column >= 0 && aSource) {
                return;
              } else {
                throw new Error('Invalid mapping: ' + JSON.stringify({
                  generated: aGenerated,
                  source: aSource,
                  original: aOriginal,
                  name: aName
                }));
              }
            };
            SourceMapGenerator.prototype._serializeMappings = function SourceMapGenerator_serializeMappings() {
              var previousGeneratedColumn = 0;
              var previousGeneratedLine = 1;
              var previousOriginalColumn = 0;
              var previousOriginalLine = 0;
              var previousName = 0;
              var previousSource = 0;
              var result = '';
              var mapping;
              var nameIdx;
              var sourceIdx;
              var mappings = this._mappings.toArray();
              for (var i = 0,
                  len = mappings.length; i < len; i++) {
                mapping = mappings[i];
                if (mapping.generatedLine !== previousGeneratedLine) {
                  previousGeneratedColumn = 0;
                  while (mapping.generatedLine !== previousGeneratedLine) {
                    result += ';';
                    previousGeneratedLine++;
                  }
                } else {
                  if (i > 0) {
                    if (!util.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {
                      continue;
                    }
                    result += ',';
                  }
                }
                result += base64VLQ.encode(mapping.generatedColumn - previousGeneratedColumn);
                previousGeneratedColumn = mapping.generatedColumn;
                if (mapping.source != null) {
                  sourceIdx = this._sources.indexOf(mapping.source);
                  result += base64VLQ.encode(sourceIdx - previousSource);
                  previousSource = sourceIdx;
                  result += base64VLQ.encode(mapping.originalLine - 1 - previousOriginalLine);
                  previousOriginalLine = mapping.originalLine - 1;
                  result += base64VLQ.encode(mapping.originalColumn - previousOriginalColumn);
                  previousOriginalColumn = mapping.originalColumn;
                  if (mapping.name != null) {
                    nameIdx = this._names.indexOf(mapping.name);
                    result += base64VLQ.encode(nameIdx - previousName);
                    previousName = nameIdx;
                  }
                }
              }
              return result;
            };
            SourceMapGenerator.prototype._generateSourcesContent = function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {
              return aSources.map(function(source) {
                if (!this._sourcesContents) {
                  return null;
                }
                if (aSourceRoot != null) {
                  source = util.relative(aSourceRoot, source);
                }
                var key = util.toSetString(source);
                return Object.prototype.hasOwnProperty.call(this._sourcesContents, key) ? this._sourcesContents[key] : null;
              }, this);
            };
            SourceMapGenerator.prototype.toJSON = function SourceMapGenerator_toJSON() {
              var map = {
                version: this._version,
                sources: this._sources.toArray(),
                names: this._names.toArray(),
                mappings: this._serializeMappings()
              };
              if (this._file != null) {
                map.file = this._file;
              }
              if (this._sourceRoot != null) {
                map.sourceRoot = this._sourceRoot;
              }
              if (this._sourcesContents) {
                map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);
              }
              return map;
            };
            SourceMapGenerator.prototype.toString = function SourceMapGenerator_toString() {
              return JSON.stringify(this.toJSON());
            };
            exports.SourceMapGenerator = SourceMapGenerator;
          }
        }, {
          "591": 591,
          "592": 592,
          "595": 595,
          "600": 600
        }],
        599: [function(_dereq_, module, exports) {
          {
            var SourceMapGenerator = _dereq_(598).SourceMapGenerator;
            var util = _dereq_(600);
            var REGEX_NEWLINE = /(\r?\n)/;
            var NEWLINE_CODE = 10;
            var isSourceNode = "$$$isSourceNode$$$";
            function SourceNode(aLine, aColumn, aSource, aChunks, aName) {
              this.children = [];
              this.sourceContents = {};
              this.line = aLine == null ? null : aLine;
              this.column = aColumn == null ? null : aColumn;
              this.source = aSource == null ? null : aSource;
              this.name = aName == null ? null : aName;
              this[isSourceNode] = true;
              if (aChunks != null)
                this.add(aChunks);
            }
            SourceNode.fromStringWithSourceMap = function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {
              var node = new SourceNode();
              var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);
              var shiftNextLine = function() {
                var lineContents = remainingLines.shift();
                var newLine = remainingLines.shift() || "";
                return lineContents + newLine;
              };
              var lastGeneratedLine = 1,
                  lastGeneratedColumn = 0;
              var lastMapping = null;
              aSourceMapConsumer.eachMapping(function(mapping) {
                if (lastMapping !== null) {
                  if (lastGeneratedLine < mapping.generatedLine) {
                    addMappingWithCode(lastMapping, shiftNextLine());
                    lastGeneratedLine++;
                    lastGeneratedColumn = 0;
                  } else {
                    var nextLine = remainingLines[0];
                    var code = nextLine.substr(0, mapping.generatedColumn - lastGeneratedColumn);
                    remainingLines[0] = nextLine.substr(mapping.generatedColumn - lastGeneratedColumn);
                    lastGeneratedColumn = mapping.generatedColumn;
                    addMappingWithCode(lastMapping, code);
                    lastMapping = mapping;
                    return;
                  }
                }
                while (lastGeneratedLine < mapping.generatedLine) {
                  node.add(shiftNextLine());
                  lastGeneratedLine++;
                }
                if (lastGeneratedColumn < mapping.generatedColumn) {
                  var nextLine = remainingLines[0];
                  node.add(nextLine.substr(0, mapping.generatedColumn));
                  remainingLines[0] = nextLine.substr(mapping.generatedColumn);
                  lastGeneratedColumn = mapping.generatedColumn;
                }
                lastMapping = mapping;
              }, this);
              if (remainingLines.length > 0) {
                if (lastMapping) {
                  addMappingWithCode(lastMapping, shiftNextLine());
                }
                node.add(remainingLines.join(""));
              }
              aSourceMapConsumer.sources.forEach(function(sourceFile) {
                var content = aSourceMapConsumer.sourceContentFor(sourceFile);
                if (content != null) {
                  if (aRelativePath != null) {
                    sourceFile = util.join(aRelativePath, sourceFile);
                  }
                  node.setSourceContent(sourceFile, content);
                }
              });
              return node;
              function addMappingWithCode(mapping, code) {
                if (mapping === null || mapping.source === undefined) {
                  node.add(code);
                } else {
                  var source = aRelativePath ? util.join(aRelativePath, mapping.source) : mapping.source;
                  node.add(new SourceNode(mapping.originalLine, mapping.originalColumn, source, code, mapping.name));
                }
              }
            };
            SourceNode.prototype.add = function SourceNode_add(aChunk) {
              if (Array.isArray(aChunk)) {
                aChunk.forEach(function(chunk) {
                  this.add(chunk);
                }, this);
              } else if (aChunk[isSourceNode] || typeof aChunk === "string") {
                if (aChunk) {
                  this.children.push(aChunk);
                }
              } else {
                throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk);
              }
              return this;
            };
            SourceNode.prototype.prepend = function SourceNode_prepend(aChunk) {
              if (Array.isArray(aChunk)) {
                for (var i = aChunk.length - 1; i >= 0; i--) {
                  this.prepend(aChunk[i]);
                }
              } else if (aChunk[isSourceNode] || typeof aChunk === "string") {
                this.children.unshift(aChunk);
              } else {
                throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk);
              }
              return this;
            };
            SourceNode.prototype.walk = function SourceNode_walk(aFn) {
              var chunk;
              for (var i = 0,
                  len = this.children.length; i < len; i++) {
                chunk = this.children[i];
                if (chunk[isSourceNode]) {
                  chunk.walk(aFn);
                } else {
                  if (chunk !== '') {
                    aFn(chunk, {
                      source: this.source,
                      line: this.line,
                      column: this.column,
                      name: this.name
                    });
                  }
                }
              }
            };
            SourceNode.prototype.join = function SourceNode_join(aSep) {
              var newChildren;
              var i;
              var len = this.children.length;
              if (len > 0) {
                newChildren = [];
                for (i = 0; i < len - 1; i++) {
                  newChildren.push(this.children[i]);
                  newChildren.push(aSep);
                }
                newChildren.push(this.children[i]);
                this.children = newChildren;
              }
              return this;
            };
            SourceNode.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {
              var lastChild = this.children[this.children.length - 1];
              if (lastChild[isSourceNode]) {
                lastChild.replaceRight(aPattern, aReplacement);
              } else if (typeof lastChild === 'string') {
                this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);
              } else {
                this.children.push(''.replace(aPattern, aReplacement));
              }
              return this;
            };
            SourceNode.prototype.setSourceContent = function SourceNode_setSourceContent(aSourceFile, aSourceContent) {
              this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;
            };
            SourceNode.prototype.walkSourceContents = function SourceNode_walkSourceContents(aFn) {
              for (var i = 0,
                  len = this.children.length; i < len; i++) {
                if (this.children[i][isSourceNode]) {
                  this.children[i].walkSourceContents(aFn);
                }
              }
              var sources = Object.keys(this.sourceContents);
              for (var i = 0,
                  len = sources.length; i < len; i++) {
                aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);
              }
            };
            SourceNode.prototype.toString = function SourceNode_toString() {
              var str = "";
              this.walk(function(chunk) {
                str += chunk;
              });
              return str;
            };
            SourceNode.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {
              var generated = {
                code: "",
                line: 1,
                column: 0
              };
              var map = new SourceMapGenerator(aArgs);
              var sourceMappingActive = false;
              var lastOriginalSource = null;
              var lastOriginalLine = null;
              var lastOriginalColumn = null;
              var lastOriginalName = null;
              this.walk(function(chunk, original) {
                generated.code += chunk;
                if (original.source !== null && original.line !== null && original.column !== null) {
                  if (lastOriginalSource !== original.source || lastOriginalLine !== original.line || lastOriginalColumn !== original.column || lastOriginalName !== original.name) {
                    map.addMapping({
                      source: original.source,
                      original: {
                        line: original.line,
                        column: original.column
                      },
                      generated: {
                        line: generated.line,
                        column: generated.column
                      },
                      name: original.name
                    });
                  }
                  lastOriginalSource = original.source;
                  lastOriginalLine = original.line;
                  lastOriginalColumn = original.column;
                  lastOriginalName = original.name;
                  sourceMappingActive = true;
                } else if (sourceMappingActive) {
                  map.addMapping({generated: {
                      line: generated.line,
                      column: generated.column
                    }});
                  lastOriginalSource = null;
                  sourceMappingActive = false;
                }
                for (var idx = 0,
                    length = chunk.length; idx < length; idx++) {
                  if (chunk.charCodeAt(idx) === NEWLINE_CODE) {
                    generated.line++;
                    generated.column = 0;
                    if (idx + 1 === length) {
                      lastOriginalSource = null;
                      sourceMappingActive = false;
                    } else if (sourceMappingActive) {
                      map.addMapping({
                        source: original.source,
                        original: {
                          line: original.line,
                          column: original.column
                        },
                        generated: {
                          line: generated.line,
                          column: generated.column
                        },
                        name: original.name
                      });
                    }
                  } else {
                    generated.column++;
                  }
                }
              });
              this.walkSourceContents(function(sourceFile, sourceContent) {
                map.setSourceContent(sourceFile, sourceContent);
              });
              return {
                code: generated.code,
                map: map
              };
            };
            exports.SourceNode = SourceNode;
          }
        }, {
          "598": 598,
          "600": 600
        }],
        600: [function(_dereq_, module, exports) {
          {
            function getArg(aArgs, aName, aDefaultValue) {
              if (aName in aArgs) {
                return aArgs[aName];
              } else if (arguments.length === 3) {
                return aDefaultValue;
              } else {
                throw new Error('"' + aName + '" is a required argument.');
              }
            }
            exports.getArg = getArg;
            var urlRegexp = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.]*)(?::(\d+))?(\S*)$/;
            var dataUrlRegexp = /^data:.+\,.+$/;
            function urlParse(aUrl) {
              var match = aUrl.match(urlRegexp);
              if (!match) {
                return null;
              }
              return {
                scheme: match[1],
                auth: match[2],
                host: match[3],
                port: match[4],
                path: match[5]
              };
            }
            exports.urlParse = urlParse;
            function urlGenerate(aParsedUrl) {
              var url = '';
              if (aParsedUrl.scheme) {
                url += aParsedUrl.scheme + ':';
              }
              url += '//';
              if (aParsedUrl.auth) {
                url += aParsedUrl.auth + '@';
              }
              if (aParsedUrl.host) {
                url += aParsedUrl.host;
              }
              if (aParsedUrl.port) {
                url += ":" + aParsedUrl.port;
              }
              if (aParsedUrl.path) {
                url += aParsedUrl.path;
              }
              return url;
            }
            exports.urlGenerate = urlGenerate;
            function normalize(aPath) {
              var path = aPath;
              var url = urlParse(aPath);
              if (url) {
                if (!url.path) {
                  return aPath;
                }
                path = url.path;
              }
              var isAbsolute = exports.isAbsolute(path);
              var parts = path.split(/\/+/);
              for (var part,
                  up = 0,
                  i = parts.length - 1; i >= 0; i--) {
                part = parts[i];
                if (part === '.') {
                  parts.splice(i, 1);
                } else if (part === '..') {
                  up++;
                } else if (up > 0) {
                  if (part === '') {
                    parts.splice(i + 1, up);
                    up = 0;
                  } else {
                    parts.splice(i, 2);
                    up--;
                  }
                }
              }
              path = parts.join('/');
              if (path === '') {
                path = isAbsolute ? '/' : '.';
              }
              if (url) {
                url.path = path;
                return urlGenerate(url);
              }
              return path;
            }
            exports.normalize = normalize;
            function join(aRoot, aPath) {
              if (aRoot === "") {
                aRoot = ".";
              }
              if (aPath === "") {
                aPath = ".";
              }
              var aPathUrl = urlParse(aPath);
              var aRootUrl = urlParse(aRoot);
              if (aRootUrl) {
                aRoot = aRootUrl.path || '/';
              }
              if (aPathUrl && !aPathUrl.scheme) {
                if (aRootUrl) {
                  aPathUrl.scheme = aRootUrl.scheme;
                }
                return urlGenerate(aPathUrl);
              }
              if (aPathUrl || aPath.match(dataUrlRegexp)) {
                return aPath;
              }
              if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {
                aRootUrl.host = aPath;
                return urlGenerate(aRootUrl);
              }
              var joined = aPath.charAt(0) === '/' ? aPath : normalize(aRoot.replace(/\/+$/, '') + '/' + aPath);
              if (aRootUrl) {
                aRootUrl.path = joined;
                return urlGenerate(aRootUrl);
              }
              return joined;
            }
            exports.join = join;
            exports.isAbsolute = function(aPath) {
              return aPath.charAt(0) === '/' || !!aPath.match(urlRegexp);
            };
            function relative(aRoot, aPath) {
              if (aRoot === "") {
                aRoot = ".";
              }
              aRoot = aRoot.replace(/\/$/, '');
              var level = 0;
              while (aPath.indexOf(aRoot + '/') !== 0) {
                var index = aRoot.lastIndexOf("/");
                if (index < 0) {
                  return aPath;
                }
                aRoot = aRoot.slice(0, index);
                if (aRoot.match(/^([^\/]+:\/)?\/*$/)) {
                  return aPath;
                }
                ++level;
              }
              return Array(level + 1).join("../") + aPath.substr(aRoot.length + 1);
            }
            exports.relative = relative;
            function toSetString(aStr) {
              return '$' + aStr;
            }
            exports.toSetString = toSetString;
            function fromSetString(aStr) {
              return aStr.substr(1);
            }
            exports.fromSetString = fromSetString;
            function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {
              var cmp = mappingA.source - mappingB.source;
              if (cmp !== 0) {
                return cmp;
              }
              cmp = mappingA.originalLine - mappingB.originalLine;
              if (cmp !== 0) {
                return cmp;
              }
              cmp = mappingA.originalColumn - mappingB.originalColumn;
              if (cmp !== 0 || onlyCompareOriginal) {
                return cmp;
              }
              cmp = mappingA.generatedColumn - mappingB.generatedColumn;
              if (cmp !== 0) {
                return cmp;
              }
              cmp = mappingA.generatedLine - mappingB.generatedLine;
              if (cmp !== 0) {
                return cmp;
              }
              return mappingA.name - mappingB.name;
            }
            exports.compareByOriginalPositions = compareByOriginalPositions;
            function compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {
              var cmp = mappingA.generatedLine - mappingB.generatedLine;
              if (cmp !== 0) {
                return cmp;
              }
              cmp = mappingA.generatedColumn - mappingB.generatedColumn;
              if (cmp !== 0 || onlyCompareGenerated) {
                return cmp;
              }
              cmp = mappingA.source - mappingB.source;
              if (cmp !== 0) {
                return cmp;
              }
              cmp = mappingA.originalLine - mappingB.originalLine;
              if (cmp !== 0) {
                return cmp;
              }
              cmp = mappingA.originalColumn - mappingB.originalColumn;
              if (cmp !== 0) {
                return cmp;
              }
              return mappingA.name - mappingB.name;
            }
            exports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;
            function strcmp(aStr1, aStr2) {
              if (aStr1 === aStr2) {
                return 0;
              }
              if (aStr1 > aStr2) {
                return 1;
              }
              return -1;
            }
            function compareByGeneratedPositionsInflated(mappingA, mappingB) {
              var cmp = mappingA.generatedLine - mappingB.generatedLine;
              if (cmp !== 0) {
                return cmp;
              }
              cmp = mappingA.generatedColumn - mappingB.generatedColumn;
              if (cmp !== 0) {
                return cmp;
              }
              cmp = strcmp(mappingA.source, mappingB.source);
              if (cmp !== 0) {
                return cmp;
              }
              cmp = mappingA.originalLine - mappingB.originalLine;
              if (cmp !== 0) {
                return cmp;
              }
              cmp = mappingA.originalColumn - mappingB.originalColumn;
              if (cmp !== 0) {
                return cmp;
              }
              return strcmp(mappingA.name, mappingB.name);
            }
            exports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;
          }
        }, {}],
        601: [function(_dereq_, module, exports) {
          exports.SourceMapGenerator = _dereq_(598).SourceMapGenerator;
          exports.SourceMapConsumer = _dereq_(597).SourceMapConsumer;
          exports.SourceNode = _dereq_(599).SourceNode;
        }, {
          "597": 597,
          "598": 598,
          "599": 599
        }],
        602: [function(_dereq_, module, exports) {
          (function() {
            var stable = function(arr, comp) {
              return exec(arr.slice(), comp);
            };
            stable.inplace = function(arr, comp) {
              var result = exec(arr, comp);
              if (result !== arr) {
                pass(result, null, arr.length, arr);
              }
              return arr;
            };
            function exec(arr, comp) {
              if (typeof(comp) !== 'function') {
                comp = function(a, b) {
                  return String(a).localeCompare(b);
                };
              }
              var len = arr.length;
              if (len <= 1) {
                return arr;
              }
              var buffer = new Array(len);
              for (var chk = 1; chk < len; chk *= 2) {
                pass(arr, comp, chk, buffer);
                var tmp = arr;
                arr = buffer;
                buffer = tmp;
              }
              return arr;
            }
            var pass = function(arr, comp, chk, result) {
              var len = arr.length;
              var i = 0;
              var dbl = chk * 2;
              var l,
                  r,
                  e;
              var li,
                  ri;
              for (l = 0; l < len; l += dbl) {
                r = l + chk;
                e = r + chk;
                if (r > len)
                  r = len;
                if (e > len)
                  e = len;
                li = l;
                ri = r;
                while (true) {
                  if (li < r && ri < e) {
                    if (comp(arr[li], arr[ri]) <= 0) {
                      result[i++] = arr[li++];
                    } else {
                      result[i++] = arr[ri++];
                    }
                  } else if (li < r) {
                    result[i++] = arr[li++];
                  } else if (ri < e) {
                    result[i++] = arr[ri++];
                  } else {
                    break;
                  }
                }
              }
            };
            if (typeof(module) !== 'undefined') {
              module.exports = stable;
            } else {
              window.stable = stable;
            }
          })();
        }, {}],
        603: [function(_dereq_, module, exports) {
          var StringMap = (function() {
            "use strict";
            var hasOwnProperty = Object.prototype.hasOwnProperty;
            var create = (function() {
              function hasOwnEnumerableProps(obj) {
                for (var prop in obj) {
                  if (hasOwnProperty.call(obj, prop)) {
                    return true;
                  }
                }
                return false;
              }
              function hasOwnPollutedProps(obj) {
                return hasOwnProperty.call(obj, "__count__") || hasOwnProperty.call(obj, "__parent__");
              }
              var useObjectCreate = false;
              if (typeof Object.create === "function") {
                if (!hasOwnEnumerableProps(Object.create(null))) {
                  useObjectCreate = true;
                }
              }
              if (useObjectCreate === false) {
                if (hasOwnEnumerableProps({})) {
                  throw new Error("StringMap environment error 0, please file a bug at https://github.com/olov/stringmap/issues");
                }
              }
              var o = (useObjectCreate ? Object.create(null) : {});
              var useProtoClear = false;
              if (hasOwnPollutedProps(o)) {
                o.__proto__ = null;
                if (hasOwnEnumerableProps(o) || hasOwnPollutedProps(o)) {
                  throw new Error("StringMap environment error 1, please file a bug at https://github.com/olov/stringmap/issues");
                }
                useProtoClear = true;
              }
              return function() {
                var o = (useObjectCreate ? Object.create(null) : {});
                if (useProtoClear) {
                  o.__proto__ = null;
                }
                return o;
              };
            })();
            function stringmap(optional_object) {
              if (!(this instanceof stringmap)) {
                return new stringmap(optional_object);
              }
              this.obj = create();
              this.hasProto = false;
              this.proto = undefined;
              if (optional_object) {
                this.setMany(optional_object);
              }
            }
            ;
            stringmap.prototype.has = function(key) {
              if (typeof key !== "string") {
                throw new Error("StringMap expected string key");
              }
              return (key === "__proto__" ? this.hasProto : hasOwnProperty.call(this.obj, key));
            };
            stringmap.prototype.get = function(key) {
              if (typeof key !== "string") {
                throw new Error("StringMap expected string key");
              }
              return (key === "__proto__" ? this.proto : (hasOwnProperty.call(this.obj, key) ? this.obj[key] : undefined));
            };
            stringmap.prototype.set = function(key, value) {
              if (typeof key !== "string") {
                throw new Error("StringMap expected string key");
              }
              if (key === "__proto__") {
                this.hasProto = true;
                this.proto = value;
              } else {
                this.obj[key] = value;
              }
            };
            stringmap.prototype.remove = function(key) {
              if (typeof key !== "string") {
                throw new Error("StringMap expected string key");
              }
              var didExist = this.has(key);
              if (key === "__proto__") {
                this.hasProto = false;
                this.proto = undefined;
              } else {
                delete this.obj[key];
              }
              return didExist;
            };
            stringmap.prototype['delete'] = stringmap.prototype.remove;
            stringmap.prototype.isEmpty = function() {
              for (var key in this.obj) {
                if (hasOwnProperty.call(this.obj, key)) {
                  return false;
                }
              }
              return !this.hasProto;
            };
            stringmap.prototype.size = function() {
              var len = 0;
              for (var key in this.obj) {
                if (hasOwnProperty.call(this.obj, key)) {
                  ++len;
                }
              }
              return (this.hasProto ? len + 1 : len);
            };
            stringmap.prototype.keys = function() {
              var keys = [];
              for (var key in this.obj) {
                if (hasOwnProperty.call(this.obj, key)) {
                  keys.push(key);
                }
              }
              if (this.hasProto) {
                keys.push("__proto__");
              }
              return keys;
            };
            stringmap.prototype.values = function() {
              var values = [];
              for (var key in this.obj) {
                if (hasOwnProperty.call(this.obj, key)) {
                  values.push(this.obj[key]);
                }
              }
              if (this.hasProto) {
                values.push(this.proto);
              }
              return values;
            };
            stringmap.prototype.items = function() {
              var items = [];
              for (var key in this.obj) {
                if (hasOwnProperty.call(this.obj, key)) {
                  items.push([key, this.obj[key]]);
                }
              }
              if (this.hasProto) {
                items.push(["__proto__", this.proto]);
              }
              return items;
            };
            stringmap.prototype.setMany = function(object) {
              if (object === null || (typeof object !== "object" && typeof object !== "function")) {
                throw new Error("StringMap expected Object");
              }
              for (var key in object) {
                if (hasOwnProperty.call(object, key)) {
                  this.set(key, object[key]);
                }
              }
              return this;
            };
            stringmap.prototype.merge = function(other) {
              var keys = other.keys();
              for (var i = 0; i < keys.length; i++) {
                var key = keys[i];
                this.set(key, other.get(key));
              }
              return this;
            };
            stringmap.prototype.map = function(fn) {
              var keys = this.keys();
              for (var i = 0; i < keys.length; i++) {
                var key = keys[i];
                keys[i] = fn(this.get(key), key);
              }
              return keys;
            };
            stringmap.prototype.forEach = function(fn) {
              var keys = this.keys();
              for (var i = 0; i < keys.length; i++) {
                var key = keys[i];
                fn(this.get(key), key);
              }
            };
            stringmap.prototype.clone = function() {
              var other = stringmap();
              return other.merge(this);
            };
            stringmap.prototype.toString = function() {
              var self = this;
              return "{" + this.keys().map(function(key) {
                return JSON.stringify(key) + ":" + JSON.stringify(self.get(key));
              }).join(",") + "}";
            };
            return stringmap;
          })();
          if (typeof module !== "undefined" && typeof module.exports !== "undefined") {
            module.exports = StringMap;
          }
        }, {}],
        604: [function(_dereq_, module, exports) {
          var StringSet = (function() {
            "use strict";
            var hasOwnProperty = Object.prototype.hasOwnProperty;
            var create = (function() {
              function hasOwnEnumerableProps(obj) {
                for (var prop in obj) {
                  if (hasOwnProperty.call(obj, prop)) {
                    return true;
                  }
                }
                return false;
              }
              function hasOwnPollutedProps(obj) {
                return hasOwnProperty.call(obj, "__count__") || hasOwnProperty.call(obj, "__parent__");
              }
              var useObjectCreate = false;
              if (typeof Object.create === "function") {
                if (!hasOwnEnumerableProps(Object.create(null))) {
                  useObjectCreate = true;
                }
              }
              if (useObjectCreate === false) {
                if (hasOwnEnumerableProps({})) {
                  throw new Error("StringSet environment error 0, please file a bug at https://github.com/olov/stringset/issues");
                }
              }
              var o = (useObjectCreate ? Object.create(null) : {});
              var useProtoClear = false;
              if (hasOwnPollutedProps(o)) {
                o.__proto__ = null;
                if (hasOwnEnumerableProps(o) || hasOwnPollutedProps(o)) {
                  throw new Error("StringSet environment error 1, please file a bug at https://github.com/olov/stringset/issues");
                }
                useProtoClear = true;
              }
              return function() {
                var o = (useObjectCreate ? Object.create(null) : {});
                if (useProtoClear) {
                  o.__proto__ = null;
                }
                return o;
              };
            })();
            function stringset(optional_array) {
              if (!(this instanceof stringset)) {
                return new stringset(optional_array);
              }
              this.obj = create();
              this.hasProto = false;
              if (optional_array) {
                this.addMany(optional_array);
              }
            }
            ;
            stringset.prototype.has = function(item) {
              if (typeof item !== "string") {
                throw new Error("StringSet expected string item");
              }
              return (item === "__proto__" ? this.hasProto : hasOwnProperty.call(this.obj, item));
            };
            stringset.prototype.add = function(item) {
              if (typeof item !== "string") {
                throw new Error("StringSet expected string item");
              }
              if (item === "__proto__") {
                this.hasProto = true;
              } else {
                this.obj[item] = true;
              }
            };
            stringset.prototype.remove = function(item) {
              if (typeof item !== "string") {
                throw new Error("StringSet expected string item");
              }
              var didExist = this.has(item);
              if (item === "__proto__") {
                this.hasProto = false;
              } else {
                delete this.obj[item];
              }
              return didExist;
            };
            stringset.prototype['delete'] = stringset.prototype.remove;
            stringset.prototype.isEmpty = function() {
              for (var item in this.obj) {
                if (hasOwnProperty.call(this.obj, item)) {
                  return false;
                }
              }
              return !this.hasProto;
            };
            stringset.prototype.size = function() {
              var len = 0;
              for (var item in this.obj) {
                if (hasOwnProperty.call(this.obj, item)) {
                  ++len;
                }
              }
              return (this.hasProto ? len + 1 : len);
            };
            stringset.prototype.items = function() {
              var items = [];
              for (var item in this.obj) {
                if (hasOwnProperty.call(this.obj, item)) {
                  items.push(item);
                }
              }
              if (this.hasProto) {
                items.push("__proto__");
              }
              return items;
            };
            stringset.prototype.addMany = function(items) {
              if (!Array.isArray(items)) {
                throw new Error("StringSet expected array");
              }
              for (var i = 0; i < items.length; i++) {
                this.add(items[i]);
              }
              return this;
            };
            stringset.prototype.merge = function(other) {
              this.addMany(other.items());
              return this;
            };
            stringset.prototype.clone = function() {
              var other = stringset();
              return other.merge(this);
            };
            stringset.prototype.toString = function() {
              return "{" + this.items().map(JSON.stringify).join(",") + "}";
            };
            return stringset;
          })();
          if (typeof module !== "undefined" && typeof module.exports !== "undefined") {
            module.exports = StringSet;
          }
        }, {}],
        605: [function(_dereq_, module, exports) {
          'use strict';
          var ansiRegex = _dereq_(184)();
          module.exports = function(str) {
            return typeof str === 'string' ? str.replace(ansiRegex, '') : str;
          };
        }, {"184": 184}],
        606: [function(_dereq_, module, exports) {
          (function(process) {
            'use strict';
            var argv = process.argv;
            var terminator = argv.indexOf('--');
            var hasFlag = function(flag) {
              flag = '--' + flag;
              var pos = argv.indexOf(flag);
              return pos !== -1 && (terminator !== -1 ? pos < terminator : true);
            };
            module.exports = (function() {
              if ('FORCE_COLOR' in process.env) {
                return true;
              }
              if (hasFlag('no-color') || hasFlag('no-colors') || hasFlag('color=false')) {
                return false;
              }
              if (hasFlag('color') || hasFlag('colors') || hasFlag('color=true') || hasFlag('color=always')) {
                return true;
              }
              if (process.stdout && !process.stdout.isTTY) {
                return false;
              }
              if (process.platform === 'win32') {
                return true;
              }
              if ('COLORTERM' in process.env) {
                return true;
              }
              if (process.env.TERM === 'dumb') {
                return false;
              }
              if (/^screen|^xterm|^vt100|color|ansi|cygwin|linux/i.test(process.env.TERM)) {
                return true;
              }
              return false;
            })();
          }).call(this, _dereq_(10));
        }, {"10": 10}],
        607: [function(_dereq_, module, exports) {
          'use strict';
          module.exports = function toFastProperties(obj) {
            function f() {}
            f.prototype = obj;
            new f();
            return;
            eval(obj);
          };
        }, {}],
        608: [function(_dereq_, module, exports) {
          'use strict';
          module.exports = function(str) {
            var tail = str.length;
            while (/[\s\uFEFF\u00A0]/.test(str[tail - 1])) {
              tail--;
            }
            return str.slice(0, tail);
          };
        }, {}],
        609: [function(_dereq_, module, exports) {
          (function(process) {
            var Module = _dereq_(3);
            var resolve = module.exports = function(loc, _require) {
              try {
                return (_require || _dereq_).resolve(loc);
              } catch (err) {
                return null;
              }
            };
            var relativeMod;
            resolve.relative = function(loc) {
              if (typeof Module === "object")
                return null;
              if (!relativeMod) {
                relativeMod = new Module;
                relativeMod.paths = Module._nodeModulePaths(process.cwd());
              }
              try {
                return Module._resolveFilename(loc, relativeMod);
              } catch (err) {
                return null;
              }
            };
          }).call(this, _dereq_(10));
        }, {
          "10": 10,
          "3": 3
        }],
        610: [function(_dereq_, module, exports) {
          module.exports = {
            "name": "babel-core",
            "version": "5.8.38",
            "description": "A compiler for writing next generation JavaScript",
            "author": "Sebastian McKenzie <sebmck@gmail.com>",
            "homepage": "https://babeljs.io/",
            "license": "MIT",
            "repository": "babel/babel",
            "browser": {"./lib/api/register/node.js": "./lib/api/register/browser.js"},
            "keywords": ["6to5", "babel", "classes", "const", "es6", "harmony", "let", "modules", "transpile", "transpiler", "var"],
            "scripts": {
              "bench": "make bench",
              "test": "make test"
            },
            "dependencies": {
              "babel-plugin-constant-folding": "^1.0.1",
              "babel-plugin-dead-code-elimination": "^1.0.2",
              "babel-plugin-eval": "^1.0.1",
              "babel-plugin-inline-environment-variables": "^1.0.1",
              "babel-plugin-jscript": "^1.0.4",
              "babel-plugin-member-expression-literals": "^1.0.1",
              "babel-plugin-property-literals": "^1.0.1",
              "babel-plugin-proto-to-assign": "^1.0.3",
              "babel-plugin-react-constant-elements": "^1.0.3",
              "babel-plugin-react-display-name": "^1.0.3",
              "babel-plugin-remove-console": "^1.0.1",
              "babel-plugin-remove-debugger": "^1.0.1",
              "babel-plugin-runtime": "^1.0.7",
              "babel-plugin-undeclared-variables-check": "^1.0.2",
              "babel-plugin-undefined-to-void": "^1.1.6",
              "babylon": "^5.8.38",
              "bluebird": "^2.9.33",
              "chalk": "^1.0.0",
              "convert-source-map": "^1.1.0",
              "core-js": "^1.0.0",
              "debug": "^2.1.1",
              "detect-indent": "^3.0.0",
              "esutils": "^2.0.0",
              "fs-readdir-recursive": "^0.1.0",
              "globals": "^6.4.0",
              "home-or-tmp": "^1.0.0",
              "is-integer": "^1.0.4",
              "js-tokens": "1.0.1",
              "json5": "^0.4.0",
              "lodash": "^3.10.0",
              "minimatch": "^2.0.3",
              "output-file-sync": "^1.1.0",
              "path-exists": "^1.0.0",
              "path-is-absolute": "^1.0.0",
              "private": "^0.1.6",
              "regenerator": "0.8.40",
              "regexpu": "^1.3.0",
              "repeating": "^1.1.2",
              "resolve": "^1.1.6",
              "shebang-regex": "^1.0.0",
              "slash": "^1.0.0",
              "source-map": "^0.5.0",
              "source-map-support": "^0.2.10",
              "to-fast-properties": "^1.0.0",
              "trim-right": "^1.0.0",
              "try-resolve": "^1.0.0"
            }
          };
        }, {}],
        611: [function(_dereq_, module, exports) {
          module.exports = {
            "abstract-expression-call": {
              "type": "Program",
              "body": [{
                "type": "ExpressionStatement",
                "expression": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "MemberExpression",
                    "object": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "MemberExpression",
                        "object": {
                          "type": "Identifier",
                          "name": "PROPERTY"
                        },
                        "property": {
                          "type": "MemberExpression",
                          "object": {
                            "type": "Identifier",
                            "name": "Symbol"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "referenceGet"
                          },
                          "computed": false
                        },
                        "computed": true
                      },
                      "arguments": [{
                        "type": "Identifier",
                        "name": "OBJECT"
                      }]
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "call"
                    },
                    "computed": false
                  },
                  "arguments": [{
                    "type": "Identifier",
                    "name": "OBJECT"
                  }]
                }
              }]
            },
            "abstract-expression-delete": {
              "type": "Program",
              "body": [{
                "type": "ExpressionStatement",
                "expression": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "MemberExpression",
                    "object": {
                      "type": "Identifier",
                      "name": "PROPERTY"
                    },
                    "property": {
                      "type": "MemberExpression",
                      "object": {
                        "type": "Identifier",
                        "name": "Symbol"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "referenceDelete"
                      },
                      "computed": false
                    },
                    "computed": true
                  },
                  "arguments": [{
                    "type": "Identifier",
                    "name": "OBJECT"
                  }]
                }
              }]
            },
            "abstract-expression-get": {
              "type": "Program",
              "body": [{
                "type": "ExpressionStatement",
                "expression": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "MemberExpression",
                    "object": {
                      "type": "Identifier",
                      "name": "PROPERTY"
                    },
                    "property": {
                      "type": "MemberExpression",
                      "object": {
                        "type": "Identifier",
                        "name": "Symbol"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "referenceGet"
                      },
                      "computed": false
                    },
                    "computed": true
                  },
                  "arguments": [{
                    "type": "Identifier",
                    "name": "OBJECT"
                  }]
                }
              }]
            },
            "abstract-expression-set": {
              "type": "Program",
              "body": [{
                "type": "ExpressionStatement",
                "expression": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "MemberExpression",
                    "object": {
                      "type": "Identifier",
                      "name": "PROPERTY"
                    },
                    "property": {
                      "type": "MemberExpression",
                      "object": {
                        "type": "Identifier",
                        "name": "Symbol"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "referenceSet"
                      },
                      "computed": false
                    },
                    "computed": true
                  },
                  "arguments": [{
                    "type": "Identifier",
                    "name": "OBJECT"
                  }, {
                    "type": "Identifier",
                    "name": "VALUE"
                  }]
                }
              }]
            },
            "array-comprehension-container": {
              "type": "Program",
              "body": [{
                "type": "ExpressionStatement",
                "expression": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "FunctionExpression",
                    "id": null,
                    "generator": false,
                    "expression": false,
                    "params": [],
                    "body": {
                      "type": "BlockStatement",
                      "body": [{
                        "type": "VariableDeclaration",
                        "declarations": [{
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "KEY"
                          },
                          "init": {
                            "type": "ArrayExpression",
                            "elements": []
                          }
                        }],
                        "kind": "var"
                      }, {
                        "type": "ReturnStatement",
                        "argument": {
                          "type": "Identifier",
                          "name": "KEY"
                        }
                      }]
                    },
                    "parenthesizedExpression": true
                  },
                  "arguments": []
                }
              }]
            },
            "array-from": {
              "type": "Program",
              "body": [{
                "type": "ExpressionStatement",
                "expression": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "MemberExpression",
                    "object": {
                      "type": "Identifier",
                      "name": "Array"
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "from"
                    },
                    "computed": false
                  },
                  "arguments": [{
                    "type": "Identifier",
                    "name": "VALUE"
                  }]
                }
              }]
            },
            "array-push": {
              "type": "Program",
              "body": [{
                "type": "ExpressionStatement",
                "expression": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "MemberExpression",
                    "object": {
                      "type": "Identifier",
                      "name": "KEY"
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "push"
                    },
                    "computed": false
                  },
                  "arguments": [{
                    "type": "Identifier",
                    "name": "STATEMENT"
                  }]
                }
              }]
            },
            "call": {
              "type": "Program",
              "body": [{
                "type": "ExpressionStatement",
                "expression": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "MemberExpression",
                    "object": {
                      "type": "Identifier",
                      "name": "OBJECT"
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "call"
                    },
                    "computed": false
                  },
                  "arguments": [{
                    "type": "Identifier",
                    "name": "CONTEXT"
                  }]
                }
              }]
            },
            "class-decorator": {
              "type": "Program",
              "body": [{
                "type": "ExpressionStatement",
                "expression": {
                  "type": "AssignmentExpression",
                  "operator": "=",
                  "left": {
                    "type": "Identifier",
                    "name": "CLASS_REF"
                  },
                  "right": {
                    "type": "LogicalExpression",
                    "left": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "DECORATOR"
                      },
                      "arguments": [{
                        "type": "Identifier",
                        "name": "CLASS_REF"
                      }]
                    },
                    "operator": "||",
                    "right": {
                      "type": "Identifier",
                      "name": "CLASS_REF"
                    }
                  }
                }
              }]
            },
            "class-derived-default-constructor": {
              "type": "Program",
              "body": [{
                "type": "ExpressionStatement",
                "expression": {
                  "type": "FunctionExpression",
                  "id": null,
                  "generator": false,
                  "expression": false,
                  "params": [],
                  "body": {
                    "type": "BlockStatement",
                    "body": [{
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "CallExpression",
                        "callee": {"type": "Super"},
                        "arguments": [{
                          "type": "SpreadElement",
                          "argument": {
                            "type": "Identifier",
                            "name": "arguments"
                          }
                        }]
                      }
                    }]
                  },
                  "parenthesizedExpression": true
                }
              }]
            },
            "default-parameter-assign": {
              "type": "Program",
              "body": [{
                "type": "IfStatement",
                "test": {
                  "type": "BinaryExpression",
                  "left": {
                    "type": "Identifier",
                    "name": "VARIABLE_NAME"
                  },
                  "operator": "===",
                  "right": {
                    "type": "Identifier",
                    "name": "undefined"
                  }
                },
                "consequent": {
                  "type": "ExpressionStatement",
                  "expression": {
                    "type": "AssignmentExpression",
                    "operator": "=",
                    "left": {
                      "type": "Identifier",
                      "name": "VARIABLE_NAME"
                    },
                    "right": {
                      "type": "Identifier",
                      "name": "DEFAULT_VALUE"
                    }
                  }
                },
                "alternate": null
              }]
            },
            "default-parameter": {
              "type": "Program",
              "body": [{
                "type": "VariableDeclaration",
                "declarations": [{
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "Identifier",
                    "name": "VARIABLE_NAME"
                  },
                  "init": {
                    "type": "ConditionalExpression",
                    "test": {
                      "type": "LogicalExpression",
                      "left": {
                        "type": "BinaryExpression",
                        "left": {
                          "type": "MemberExpression",
                          "object": {
                            "type": "Identifier",
                            "name": "ARGUMENTS"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "length"
                          },
                          "computed": false
                        },
                        "operator": "<=",
                        "right": {
                          "type": "Identifier",
                          "name": "ARGUMENT_KEY"
                        }
                      },
                      "operator": "||",
                      "right": {
                        "type": "BinaryExpression",
                        "left": {
                          "type": "MemberExpression",
                          "object": {
                            "type": "Identifier",
                            "name": "ARGUMENTS"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "ARGUMENT_KEY"
                          },
                          "computed": true
                        },
                        "operator": "===",
                        "right": {
                          "type": "Identifier",
                          "name": "undefined"
                        }
                      }
                    },
                    "consequent": {
                      "type": "Identifier",
                      "name": "DEFAULT_VALUE"
                    },
                    "alternate": {
                      "type": "MemberExpression",
                      "object": {
                        "type": "Identifier",
                        "name": "ARGUMENTS"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "ARGUMENT_KEY"
                      },
                      "computed": true
                    }
                  }
                }],
                "kind": "let"
              }]
            },
            "exports-assign": {
              "type": "Program",
              "body": [{
                "type": "ExpressionStatement",
                "expression": {
                  "type": "AssignmentExpression",
                  "operator": "=",
                  "left": {
                    "type": "MemberExpression",
                    "object": {
                      "type": "Identifier",
                      "name": "exports"
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "KEY"
                    },
                    "computed": false
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "VALUE"
                  }
                }
              }]
            },
            "exports-default-assign": {
              "type": "Program",
              "body": [{
                "type": "ExpressionStatement",
                "expression": {
                  "type": "AssignmentExpression",
                  "operator": "=",
                  "left": {
                    "type": "MemberExpression",
                    "object": {
                      "type": "Identifier",
                      "name": "module"
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "exports"
                    },
                    "computed": false
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "VALUE"
                  }
                }
              }]
            },
            "exports-from-assign": {
              "type": "Program",
              "body": [{
                "type": "ExpressionStatement",
                "expression": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "MemberExpression",
                    "object": {
                      "type": "Identifier",
                      "name": "Object"
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "defineProperty"
                    },
                    "computed": false
                  },
                  "arguments": [{
                    "type": "Identifier",
                    "name": "exports"
                  }, {
                    "type": "Identifier",
                    "name": "ID"
                  }, {
                    "type": "ObjectExpression",
                    "properties": [{
                      "type": "Property",
                      "method": false,
                      "shorthand": false,
                      "computed": false,
                      "key": {
                        "type": "Identifier",
                        "name": "enumerable"
                      },
                      "value": {
                        "type": "Literal",
                        "value": true
                      },
                      "kind": "init"
                    }, {
                      "type": "Property",
                      "method": false,
                      "shorthand": false,
                      "computed": false,
                      "key": {
                        "type": "Identifier",
                        "name": "get"
                      },
                      "value": {
                        "type": "FunctionExpression",
                        "id": {
                          "type": "Identifier",
                          "name": "get"
                        },
                        "generator": false,
                        "expression": false,
                        "params": [],
                        "body": {
                          "type": "BlockStatement",
                          "body": [{
                            "type": "ReturnStatement",
                            "argument": {
                              "type": "Identifier",
                              "name": "INIT"
                            }
                          }]
                        }
                      },
                      "kind": "init"
                    }]
                  }]
                }
              }]
            },
            "exports-module-declaration-loose": {
              "type": "Program",
              "body": [{
                "type": "ExpressionStatement",
                "expression": {
                  "type": "AssignmentExpression",
                  "operator": "=",
                  "left": {
                    "type": "MemberExpression",
                    "object": {
                      "type": "Identifier",
                      "name": "exports"
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "__esModule"
                    },
                    "computed": false
                  },
                  "right": {
                    "type": "Literal",
                    "value": true
                  }
                }
              }]
            },
            "exports-module-declaration": {
              "type": "Program",
              "body": [{
                "type": "ExpressionStatement",
                "expression": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "MemberExpression",
                    "object": {
                      "type": "Identifier",
                      "name": "Object"
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "defineProperty"
                    },
                    "computed": false
                  },
                  "arguments": [{
                    "type": "Identifier",
                    "name": "exports"
                  }, {
                    "type": "Literal",
                    "value": "__esModule"
                  }, {
                    "type": "ObjectExpression",
                    "properties": [{
                      "type": "Property",
                      "method": false,
                      "shorthand": false,
                      "computed": false,
                      "key": {
                        "type": "Identifier",
                        "name": "value"
                      },
                      "value": {
                        "type": "Literal",
                        "value": true
                      },
                      "kind": "init"
                    }]
                  }]
                }
              }]
            },
            "for-of-array": {
              "type": "Program",
              "body": [{
                "type": "ForStatement",
                "init": {
                  "type": "VariableDeclaration",
                  "declarations": [{
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "KEY"
                    },
                    "init": {
                      "type": "Literal",
                      "value": 0
                    }
                  }],
                  "kind": "var"
                },
                "test": {
                  "type": "BinaryExpression",
                  "left": {
                    "type": "Identifier",
                    "name": "KEY"
                  },
                  "operator": "<",
                  "right": {
                    "type": "MemberExpression",
                    "object": {
                      "type": "Identifier",
                      "name": "ARR"
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "length"
                    },
                    "computed": false
                  }
                },
                "update": {
                  "type": "UpdateExpression",
                  "operator": "++",
                  "prefix": false,
                  "argument": {
                    "type": "Identifier",
                    "name": "KEY"
                  }
                },
                "body": {
                  "type": "ExpressionStatement",
                  "expression": {
                    "type": "Identifier",
                    "name": "BODY"
                  }
                }
              }]
            },
            "for-of-loose": {
              "type": "Program",
              "body": [{
                "type": "ForStatement",
                "init": {
                  "type": "VariableDeclaration",
                  "declarations": [{
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "LOOP_OBJECT"
                    },
                    "init": {
                      "type": "Identifier",
                      "name": "OBJECT"
                    }
                  }, {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "IS_ARRAY"
                    },
                    "init": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "MemberExpression",
                        "object": {
                          "type": "Identifier",
                          "name": "Array"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "isArray"
                        },
                        "computed": false
                      },
                      "arguments": [{
                        "type": "Identifier",
                        "name": "LOOP_OBJECT"
                      }]
                    }
                  }, {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "INDEX"
                    },
                    "init": {
                      "type": "Literal",
                      "value": 0
                    }
                  }, {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "LOOP_OBJECT"
                    },
                    "init": {
                      "type": "ConditionalExpression",
                      "test": {
                        "type": "Identifier",
                        "name": "IS_ARRAY"
                      },
                      "consequent": {
                        "type": "Identifier",
                        "name": "LOOP_OBJECT"
                      },
                      "alternate": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "MemberExpression",
                          "object": {
                            "type": "Identifier",
                            "name": "LOOP_OBJECT"
                          },
                          "property": {
                            "type": "MemberExpression",
                            "object": {
                              "type": "Identifier",
                              "name": "Symbol"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "iterator"
                            },
                            "computed": false
                          },
                          "computed": true
                        },
                        "arguments": []
                      }
                    }
                  }],
                  "kind": "var"
                },
                "test": null,
                "update": null,
                "body": {
                  "type": "BlockStatement",
                  "body": [{
                    "type": "VariableDeclaration",
                    "declarations": [{
                      "type": "VariableDeclarator",
                      "id": {
                        "type": "Identifier",
                        "name": "ID"
                      },
                      "init": null
                    }],
                    "kind": "var"
                  }, {
                    "type": "IfStatement",
                    "test": {
                      "type": "Identifier",
                      "name": "IS_ARRAY"
                    },
                    "consequent": {
                      "type": "BlockStatement",
                      "body": [{
                        "type": "IfStatement",
                        "test": {
                          "type": "BinaryExpression",
                          "left": {
                            "type": "Identifier",
                            "name": "INDEX"
                          },
                          "operator": ">=",
                          "right": {
                            "type": "MemberExpression",
                            "object": {
                              "type": "Identifier",
                              "name": "LOOP_OBJECT"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "length"
                            },
                            "computed": false
                          }
                        },
                        "consequent": {
                          "type": "BreakStatement",
                          "label": null
                        },
                        "alternate": null
                      }, {
                        "type": "ExpressionStatement",
                        "expression": {
                          "type": "AssignmentExpression",
                          "operator": "=",
                          "left": {
                            "type": "Identifier",
                            "name": "ID"
                          },
                          "right": {
                            "type": "MemberExpression",
                            "object": {
                              "type": "Identifier",
                              "name": "LOOP_OBJECT"
                            },
                            "property": {
                              "type": "UpdateExpression",
                              "operator": "++",
                              "prefix": false,
                              "argument": {
                                "type": "Identifier",
                                "name": "INDEX"
                              }
                            },
                            "computed": true
                          }
                        }
                      }]
                    },
                    "alternate": {
                      "type": "BlockStatement",
                      "body": [{
                        "type": "ExpressionStatement",
                        "expression": {
                          "type": "AssignmentExpression",
                          "operator": "=",
                          "left": {
                            "type": "Identifier",
                            "name": "INDEX"
                          },
                          "right": {
                            "type": "CallExpression",
                            "callee": {
                              "type": "MemberExpression",
                              "object": {
                                "type": "Identifier",
                                "name": "LOOP_OBJECT"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "next"
                              },
                              "computed": false
                            },
                            "arguments": []
                          }
                        }
                      }, {
                        "type": "IfStatement",
                        "test": {
                          "type": "MemberExpression",
                          "object": {
                            "type": "Identifier",
                            "name": "INDEX"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "done"
                          },
                          "computed": false
                        },
                        "consequent": {
                          "type": "BreakStatement",
                          "label": null
                        },
                        "alternate": null
                      }, {
                        "type": "ExpressionStatement",
                        "expression": {
                          "type": "AssignmentExpression",
                          "operator": "=",
                          "left": {
                            "type": "Identifier",
                            "name": "ID"
                          },
                          "right": {
                            "type": "MemberExpression",
                            "object": {
                              "type": "Identifier",
                              "name": "INDEX"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "value"
                            },
                            "computed": false
                          }
                        }
                      }]
                    }
                  }]
                }
              }]
            },
            "for-of": {
              "type": "Program",
              "body": [{
                "type": "VariableDeclaration",
                "declarations": [{
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "Identifier",
                    "name": "ITERATOR_COMPLETION"
                  },
                  "init": {
                    "type": "Literal",
                    "value": true
                  }
                }],
                "kind": "var"
              }, {
                "type": "VariableDeclaration",
                "declarations": [{
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "Identifier",
                    "name": "ITERATOR_HAD_ERROR_KEY"
                  },
                  "init": {
                    "type": "Literal",
                    "value": false
                  }
                }],
                "kind": "var"
              }, {
                "type": "VariableDeclaration",
                "declarations": [{
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "Identifier",
                    "name": "ITERATOR_ERROR_KEY"
                  },
                  "init": {
                    "type": "Identifier",
                    "name": "undefined"
                  }
                }],
                "kind": "var"
              }, {
                "type": "TryStatement",
                "block": {
                  "type": "BlockStatement",
                  "body": [{
                    "type": "ForStatement",
                    "init": {
                      "type": "VariableDeclaration",
                      "declarations": [{
                        "type": "VariableDeclarator",
                        "id": {
                          "type": "Identifier",
                          "name": "ITERATOR_KEY"
                        },
                        "init": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "MemberExpression",
                            "object": {
                              "type": "Identifier",
                              "name": "OBJECT"
                            },
                            "property": {
                              "type": "MemberExpression",
                              "object": {
                                "type": "Identifier",
                                "name": "Symbol"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "iterator"
                              },
                              "computed": false
                            },
                            "computed": true
                          },
                          "arguments": []
                        }
                      }, {
                        "type": "VariableDeclarator",
                        "id": {
                          "type": "Identifier",
                          "name": "STEP_KEY"
                        },
                        "init": null
                      }],
                      "kind": "var"
                    },
                    "test": {
                      "type": "UnaryExpression",
                      "operator": "!",
                      "prefix": true,
                      "argument": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "ITERATOR_COMPLETION"
                        },
                        "right": {
                          "type": "MemberExpression",
                          "object": {
                            "type": "AssignmentExpression",
                            "operator": "=",
                            "left": {
                              "type": "Identifier",
                              "name": "STEP_KEY"
                            },
                            "right": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "MemberExpression",
                                "object": {
                                  "type": "Identifier",
                                  "name": "ITERATOR_KEY"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "next"
                                },
                                "computed": false
                              },
                              "arguments": []
                            },
                            "parenthesizedExpression": true
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "done"
                          },
                          "computed": false
                        },
                        "parenthesizedExpression": true
                      }
                    },
                    "update": {
                      "type": "AssignmentExpression",
                      "operator": "=",
                      "left": {
                        "type": "Identifier",
                        "name": "ITERATOR_COMPLETION"
                      },
                      "right": {
                        "type": "Literal",
                        "value": true
                      }
                    },
                    "body": {
                      "type": "BlockStatement",
                      "body": []
                    }
                  }]
                },
                "handler": {
                  "type": "CatchClause",
                  "param": {
                    "type": "Identifier",
                    "name": "err"
                  },
                  "body": {
                    "type": "BlockStatement",
                    "body": [{
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "ITERATOR_HAD_ERROR_KEY"
                        },
                        "right": {
                          "type": "Literal",
                          "value": true
                        }
                      }
                    }, {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "Identifier",
                          "name": "ITERATOR_ERROR_KEY"
                        },
                        "right": {
                          "type": "Identifier",
                          "name": "err"
                        }
                      }
                    }]
                  }
                },
                "guardedHandlers": [],
                "finalizer": {
                  "type": "BlockStatement",
                  "body": [{
                    "type": "TryStatement",
                    "block": {
                      "type": "BlockStatement",
                      "body": [{
                        "type": "IfStatement",
                        "test": {
                          "type": "LogicalExpression",
                          "left": {
                            "type": "UnaryExpression",
                            "operator": "!",
                            "prefix": true,
                            "argument": {
                              "type": "Identifier",
                              "name": "ITERATOR_COMPLETION"
                            }
                          },
                          "operator": "&&",
                          "right": {
                            "type": "MemberExpression",
                            "object": {
                              "type": "Identifier",
                              "name": "ITERATOR_KEY"
                            },
                            "property": {
                              "type": "Literal",
                              "value": "return"
                            },
                            "computed": true
                          }
                        },
                        "consequent": {
                          "type": "BlockStatement",
                          "body": [{
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "MemberExpression",
                                "object": {
                                  "type": "Identifier",
                                  "name": "ITERATOR_KEY"
                                },
                                "property": {
                                  "type": "Literal",
                                  "value": "return"
                                },
                                "computed": true
                              },
                              "arguments": []
                            }
                          }]
                        },
                        "alternate": null
                      }]
                    },
                    "handler": null,
                    "guardedHandlers": [],
                    "finalizer": {
                      "type": "BlockStatement",
                      "body": [{
                        "type": "IfStatement",
                        "test": {
                          "type": "Identifier",
                          "name": "ITERATOR_HAD_ERROR_KEY"
                        },
                        "consequent": {
                          "type": "BlockStatement",
                          "body": [{
                            "type": "ThrowStatement",
                            "argument": {
                              "type": "Identifier",
                              "name": "ITERATOR_ERROR_KEY"
                            }
                          }]
                        },
                        "alternate": null
                      }]
                    }
                  }]
                }
              }]
            },
            "helper-async-to-generator": {
              "type": "Program",
              "body": [{
                "type": "ExpressionStatement",
                "expression": {
                  "type": "FunctionExpression",
                  "id": null,
                  "generator": false,
                  "expression": false,
                  "params": [{
                    "type": "Identifier",
                    "name": "fn"
                  }],
                  "body": {
                    "type": "BlockStatement",
                    "body": [{
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "FunctionExpression",
                        "id": null,
                        "generator": false,
                        "expression": false,
                        "params": [],
                        "body": {
                          "type": "BlockStatement",
                          "body": [{
                            "type": "VariableDeclaration",
                            "declarations": [{
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "Identifier",
                                "name": "gen"
                              },
                              "init": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "MemberExpression",
                                  "object": {
                                    "type": "Identifier",
                                    "name": "fn"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "apply"
                                  },
                                  "computed": false
                                },
                                "arguments": [{"type": "ThisExpression"}, {
                                  "type": "Identifier",
                                  "name": "arguments"
                                }]
                              }
                            }],
                            "kind": "var"
                          }, {
                            "type": "ReturnStatement",
                            "argument": {
                              "type": "NewExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "Promise"
                              },
                              "arguments": [{
                                "type": "FunctionExpression",
                                "id": null,
                                "generator": false,
                                "expression": false,
                                "params": [{
                                  "type": "Identifier",
                                  "name": "resolve"
                                }, {
                                  "type": "Identifier",
                                  "name": "reject"
                                }],
                                "body": {
                                  "type": "BlockStatement",
                                  "body": [{
                                    "type": "VariableDeclaration",
                                    "declarations": [{
                                      "type": "VariableDeclarator",
                                      "id": {
                                        "type": "Identifier",
                                        "name": "callNext"
                                      },
                                      "init": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "MemberExpression",
                                          "object": {
                                            "type": "Identifier",
                                            "name": "step"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "bind"
                                          },
                                          "computed": false
                                        },
                                        "arguments": [{
                                          "type": "Literal",
                                          "value": null,
                                          "rawValue": null
                                        }, {
                                          "type": "Literal",
                                          "value": "next"
                                        }]
                                      }
                                    }],
                                    "kind": "var"
                                  }, {
                                    "type": "VariableDeclaration",
                                    "declarations": [{
                                      "type": "VariableDeclarator",
                                      "id": {
                                        "type": "Identifier",
                                        "name": "callThrow"
                                      },
                                      "init": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "MemberExpression",
                                          "object": {
                                            "type": "Identifier",
                                            "name": "step"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "bind"
                                          },
                                          "computed": false
                                        },
                                        "arguments": [{
                                          "type": "Literal",
                                          "value": null,
                                          "rawValue": null
                                        }, {
                                          "type": "Literal",
                                          "value": "throw"
                                        }]
                                      }
                                    }],
                                    "kind": "var"
                                  }, {
                                    "type": "FunctionDeclaration",
                                    "id": {
                                      "type": "Identifier",
                                      "name": "step"
                                    },
                                    "generator": false,
                                    "expression": false,
                                    "params": [{
                                      "type": "Identifier",
                                      "name": "key"
                                    }, {
                                      "type": "Identifier",
                                      "name": "arg"
                                    }],
                                    "body": {
                                      "type": "BlockStatement",
                                      "body": [{
                                        "type": "TryStatement",
                                        "block": {
                                          "type": "BlockStatement",
                                          "body": [{
                                            "type": "VariableDeclaration",
                                            "declarations": [{
                                              "type": "VariableDeclarator",
                                              "id": {
                                                "type": "Identifier",
                                                "name": "info"
                                              },
                                              "init": {
                                                "type": "CallExpression",
                                                "callee": {
                                                  "type": "MemberExpression",
                                                  "object": {
                                                    "type": "Identifier",
                                                    "name": "gen"
                                                  },
                                                  "property": {
                                                    "type": "Identifier",
                                                    "name": "key"
                                                  },
                                                  "computed": true
                                                },
                                                "arguments": [{
                                                  "type": "Identifier",
                                                  "name": "arg"
                                                }]
                                              }
                                            }],
                                            "kind": "var"
                                          }, {
                                            "type": "VariableDeclaration",
                                            "declarations": [{
                                              "type": "VariableDeclarator",
                                              "id": {
                                                "type": "Identifier",
                                                "name": "value"
                                              },
                                              "init": {
                                                "type": "MemberExpression",
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "info"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "value"
                                                },
                                                "computed": false
                                              }
                                            }],
                                            "kind": "var"
                                          }]
                                        },
                                        "handler": {
                                          "type": "CatchClause",
                                          "param": {
                                            "type": "Identifier",
                                            "name": "error"
                                          },
                                          "body": {
                                            "type": "BlockStatement",
                                            "body": [{
                                              "type": "ExpressionStatement",
                                              "expression": {
                                                "type": "CallExpression",
                                                "callee": {
                                                  "type": "Identifier",
                                                  "name": "reject"
                                                },
                                                "arguments": [{
                                                  "type": "Identifier",
                                                  "name": "error"
                                                }]
                                              }
                                            }, {
                                              "type": "ReturnStatement",
                                              "argument": null
                                            }]
                                          }
                                        },
                                        "guardedHandlers": [],
                                        "finalizer": null
                                      }, {
                                        "type": "IfStatement",
                                        "test": {
                                          "type": "MemberExpression",
                                          "object": {
                                            "type": "Identifier",
                                            "name": "info"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "done"
                                          },
                                          "computed": false
                                        },
                                        "consequent": {
                                          "type": "BlockStatement",
                                          "body": [{
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "Identifier",
                                                "name": "resolve"
                                              },
                                              "arguments": [{
                                                "type": "Identifier",
                                                "name": "value"
                                              }]
                                            }
                                          }]
                                        },
                                        "alternate": {
                                          "type": "BlockStatement",
                                          "body": [{
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "CallExpression",
                                              "callee": {
                                                "type": "MemberExpression",
                                                "object": {
                                                  "type": "CallExpression",
                                                  "callee": {
                                                    "type": "MemberExpression",
                                                    "object": {
                                                      "type": "Identifier",
                                                      "name": "Promise"
                                                    },
                                                    "property": {
                                                      "type": "Identifier",
                                                      "name": "resolve"
                                                    },
                                                    "computed": false
                                                  },
                                                  "arguments": [{
                                                    "type": "Identifier",
                                                    "name": "value"
                                                  }]
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "then"
                                                },
                                                "computed": false
                                              },
                                              "arguments": [{
                                                "type": "Identifier",
                                                "name": "callNext"
                                              }, {
                                                "type": "Identifier",
                                                "name": "callThrow"
                                              }]
                                            }
                                          }]
                                        }
                                      }]
                                    }
                                  }, {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "Identifier",
                                        "name": "callNext"
                                      },
                                      "arguments": []
                                    }
                                  }]
                                }
                              }]
                            }
                          }]
                        }
                      }
                    }]
                  },
                  "parenthesizedExpression": true
                }
              }]
            },
            "helper-bind": {
              "type": "Program",
              "body": [{
                "type": "ExpressionStatement",
                "expression": {
                  "type": "MemberExpression",
                  "object": {
                    "type": "MemberExpression",
                    "object": {
                      "type": "Identifier",
                      "name": "Function"
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "prototype"
                    },
                    "computed": false
                  },
                  "property": {
                    "type": "Identifier",
                    "name": "bind"
                  },
                  "computed": false
                }
              }]
            },
            "helper-class-call-check": {
              "type": "Program",
              "body": [{
                "type": "ExpressionStatement",
                "expression": {
                  "type": "FunctionExpression",
                  "id": null,
                  "generator": false,
                  "expression": false,
                  "params": [{
                    "type": "Identifier",
                    "name": "instance"
                  }, {
                    "type": "Identifier",
                    "name": "Constructor"
                  }],
                  "body": {
                    "type": "BlockStatement",
                    "body": [{
                      "type": "IfStatement",
                      "test": {
                        "type": "UnaryExpression",
                        "operator": "!",
                        "prefix": true,
                        "argument": {
                          "type": "BinaryExpression",
                          "left": {
                            "type": "Identifier",
                            "name": "instance"
                          },
                          "operator": "instanceof",
                          "right": {
                            "type": "Identifier",
                            "name": "Constructor"
                          },
                          "parenthesizedExpression": true
                        }
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [{
                          "type": "ThrowStatement",
                          "argument": {
                            "type": "NewExpression",
                            "callee": {
                              "type": "Identifier",
                              "name": "TypeError"
                            },
                            "arguments": [{
                              "type": "Literal",
                              "value": "Cannot call a class as a function"
                            }]
                          }
                        }]
                      },
                      "alternate": null
                    }]
                  },
                  "parenthesizedExpression": true
                }
              }]
            },
            "helper-create-class": {
              "type": "Program",
              "body": [{
                "type": "ExpressionStatement",
                "expression": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "FunctionExpression",
                    "id": null,
                    "generator": false,
                    "expression": false,
                    "params": [],
                    "body": {
                      "type": "BlockStatement",
                      "body": [{
                        "type": "FunctionDeclaration",
                        "id": {
                          "type": "Identifier",
                          "name": "defineProperties"
                        },
                        "generator": false,
                        "expression": false,
                        "params": [{
                          "type": "Identifier",
                          "name": "target"
                        }, {
                          "type": "Identifier",
                          "name": "props"
                        }],
                        "body": {
                          "type": "BlockStatement",
                          "body": [{
                            "type": "ForStatement",
                            "init": {
                              "type": "VariableDeclaration",
                              "declarations": [{
                                "type": "VariableDeclarator",
                                "id": {
                                  "type": "Identifier",
                                  "name": "i"
                                },
                                "init": {
                                  "type": "Literal",
                                  "value": 0
                                }
                              }],
                              "kind": "var"
                            },
                            "test": {
                              "type": "BinaryExpression",
                              "left": {
                                "type": "Identifier",
                                "name": "i"
                              },
                              "operator": "<",
                              "right": {
                                "type": "MemberExpression",
                                "object": {
                                  "type": "Identifier",
                                  "name": "props"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "length"
                                },
                                "computed": false
                              }
                            },
                            "update": {
                              "type": "UpdateExpression",
                              "operator": "++",
                              "prefix": false,
                              "argument": {
                                "type": "Identifier",
                                "name": "i"
                              }
                            },
                            "body": {
                              "type": "BlockStatement",
                              "body": [{
                                "type": "VariableDeclaration",
                                "declarations": [{
                                  "type": "VariableDeclarator",
                                  "id": {
                                    "type": "Identifier",
                                    "name": "descriptor"
                                  },
                                  "init": {
                                    "type": "MemberExpression",
                                    "object": {
                                      "type": "Identifier",
                                      "name": "props"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "i"
                                    },
                                    "computed": true
                                  }
                                }],
                                "kind": "var"
                              }, {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "AssignmentExpression",
                                  "operator": "=",
                                  "left": {
                                    "type": "MemberExpression",
                                    "object": {
                                      "type": "Identifier",
                                      "name": "descriptor"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "enumerable"
                                    },
                                    "computed": false
                                  },
                                  "right": {
                                    "type": "LogicalExpression",
                                    "left": {
                                      "type": "MemberExpression",
                                      "object": {
                                        "type": "Identifier",
                                        "name": "descriptor"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "enumerable"
                                      },
                                      "computed": false
                                    },
                                    "operator": "||",
                                    "right": {
                                      "type": "Literal",
                                      "value": false
                                    }
                                  }
                                }
                              }, {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "AssignmentExpression",
                                  "operator": "=",
                                  "left": {
                                    "type": "MemberExpression",
                                    "object": {
                                      "type": "Identifier",
                                      "name": "descriptor"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "configurable"
                                    },
                                    "computed": false
                                  },
                                  "right": {
                                    "type": "Literal",
                                    "value": true
                                  }
                                }
                              }, {
                                "type": "IfStatement",
                                "test": {
                                  "type": "BinaryExpression",
                                  "left": {
                                    "type": "Literal",
                                    "value": "value"
                                  },
                                  "operator": "in",
                                  "right": {
                                    "type": "Identifier",
                                    "name": "descriptor"
                                  }
                                },
                                "consequent": {
                                  "type": "ExpressionStatement",
                                  "expression": {
                                    "type": "AssignmentExpression",
                                    "operator": "=",
                                    "left": {
                                      "type": "MemberExpression",
                                      "object": {
                                        "type": "Identifier",
                                        "name": "descriptor"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "writable"
                                      },
                                      "computed": false
                                    },
                                    "right": {
                                      "type": "Literal",
                                      "value": true
                                    }
                                  }
                                },
                                "alternate": null
                              }, {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "MemberExpression",
                                    "object": {
                                      "type": "Identifier",
                                      "name": "Object"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "defineProperty"
                                    },
                                    "computed": false
                                  },
                                  "arguments": [{
                                    "type": "Identifier",
                                    "name": "target"
                                  }, {
                                    "type": "MemberExpression",
                                    "object": {
                                      "type": "Identifier",
                                      "name": "descriptor"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "key"
                                    },
                                    "computed": false
                                  }, {
                                    "type": "Identifier",
                                    "name": "descriptor"
                                  }]
                                }
                              }]
                            }
                          }]
                        }
                      }, {
                        "type": "ReturnStatement",
                        "argument": {
                          "type": "FunctionExpression",
                          "id": null,
                          "generator": false,
                          "expression": false,
                          "params": [{
                            "type": "Identifier",
                            "name": "Constructor"
                          }, {
                            "type": "Identifier",
                            "name": "protoProps"
                          }, {
                            "type": "Identifier",
                            "name": "staticProps"
                          }],
                          "body": {
                            "type": "BlockStatement",
                            "body": [{
                              "type": "IfStatement",
                              "test": {
                                "type": "Identifier",
                                "name": "protoProps"
                              },
                              "consequent": {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "Identifier",
                                    "name": "defineProperties"
                                  },
                                  "arguments": [{
                                    "type": "MemberExpression",
                                    "object": {
                                      "type": "Identifier",
                                      "name": "Constructor"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "prototype"
                                    },
                                    "computed": false
                                  }, {
                                    "type": "Identifier",
                                    "name": "protoProps"
                                  }]
                                }
                              },
                              "alternate": null
                            }, {
                              "type": "IfStatement",
                              "test": {
                                "type": "Identifier",
                                "name": "staticProps"
                              },
                              "consequent": {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "Identifier",
                                    "name": "defineProperties"
                                  },
                                  "arguments": [{
                                    "type": "Identifier",
                                    "name": "Constructor"
                                  }, {
                                    "type": "Identifier",
                                    "name": "staticProps"
                                  }]
                                }
                              },
                              "alternate": null
                            }, {
                              "type": "ReturnStatement",
                              "argument": {
                                "type": "Identifier",
                                "name": "Constructor"
                              }
                            }]
                          }
                        }
                      }]
                    },
                    "parenthesizedExpression": true
                  },
                  "arguments": []
                }
              }]
            },
            "helper-create-decorated-class": {
              "type": "Program",
              "body": [{
                "type": "ExpressionStatement",
                "expression": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "FunctionExpression",
                    "id": null,
                    "generator": false,
                    "expression": false,
                    "params": [],
                    "body": {
                      "type": "BlockStatement",
                      "body": [{
                        "type": "FunctionDeclaration",
                        "id": {
                          "type": "Identifier",
                          "name": "defineProperties"
                        },
                        "generator": false,
                        "expression": false,
                        "params": [{
                          "type": "Identifier",
                          "name": "target"
                        }, {
                          "type": "Identifier",
                          "name": "descriptors"
                        }, {
                          "type": "Identifier",
                          "name": "initializers"
                        }],
                        "body": {
                          "type": "BlockStatement",
                          "body": [{
                            "type": "ForStatement",
                            "init": {
                              "type": "VariableDeclaration",
                              "declarations": [{
                                "type": "VariableDeclarator",
                                "id": {
                                  "type": "Identifier",
                                  "name": "i"
                                },
                                "init": {
                                  "type": "Literal",
                                  "value": 0
                                }
                              }],
                              "kind": "var"
                            },
                            "test": {
                              "type": "BinaryExpression",
                              "left": {
                                "type": "Identifier",
                                "name": "i"
                              },
                              "operator": "<",
                              "right": {
                                "type": "MemberExpression",
                                "object": {
                                  "type": "Identifier",
                                  "name": "descriptors"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "length"
                                },
                                "computed": false
                              }
                            },
                            "update": {
                              "type": "UpdateExpression",
                              "operator": "++",
                              "prefix": false,
                              "argument": {
                                "type": "Identifier",
                                "name": "i"
                              }
                            },
                            "body": {
                              "type": "BlockStatement",
                              "body": [{
                                "type": "VariableDeclaration",
                                "declarations": [{
                                  "type": "VariableDeclarator",
                                  "id": {
                                    "type": "Identifier",
                                    "name": "descriptor"
                                  },
                                  "init": {
                                    "type": "MemberExpression",
                                    "object": {
                                      "type": "Identifier",
                                      "name": "descriptors"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "i"
                                    },
                                    "computed": true
                                  }
                                }],
                                "kind": "var"
                              }, {
                                "type": "VariableDeclaration",
                                "declarations": [{
                                  "type": "VariableDeclarator",
                                  "id": {
                                    "type": "Identifier",
                                    "name": "decorators"
                                  },
                                  "init": {
                                    "type": "MemberExpression",
                                    "object": {
                                      "type": "Identifier",
                                      "name": "descriptor"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "decorators"
                                    },
                                    "computed": false
                                  }
                                }],
                                "kind": "var"
                              }, {
                                "type": "VariableDeclaration",
                                "declarations": [{
                                  "type": "VariableDeclarator",
                                  "id": {
                                    "type": "Identifier",
                                    "name": "key"
                                  },
                                  "init": {
                                    "type": "MemberExpression",
                                    "object": {
                                      "type": "Identifier",
                                      "name": "descriptor"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "key"
                                    },
                                    "computed": false
                                  }
                                }],
                                "kind": "var"
                              }, {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "UnaryExpression",
                                  "operator": "delete",
                                  "prefix": true,
                                  "argument": {
                                    "type": "MemberExpression",
                                    "object": {
                                      "type": "Identifier",
                                      "name": "descriptor",
                                      "leadingComments": null
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "key"
                                    },
                                    "computed": false,
                                    "leadingComments": null
                                  },
                                  "leadingComments": null
                                }
                              }, {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "UnaryExpression",
                                  "operator": "delete",
                                  "prefix": true,
                                  "argument": {
                                    "type": "MemberExpression",
                                    "object": {
                                      "type": "Identifier",
                                      "name": "descriptor"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "decorators"
                                    },
                                    "computed": false
                                  }
                                }
                              }, {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "AssignmentExpression",
                                  "operator": "=",
                                  "left": {
                                    "type": "MemberExpression",
                                    "object": {
                                      "type": "Identifier",
                                      "name": "descriptor"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "enumerable"
                                    },
                                    "computed": false
                                  },
                                  "right": {
                                    "type": "LogicalExpression",
                                    "left": {
                                      "type": "MemberExpression",
                                      "object": {
                                        "type": "Identifier",
                                        "name": "descriptor"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "enumerable"
                                      },
                                      "computed": false
                                    },
                                    "operator": "||",
                                    "right": {
                                      "type": "Literal",
                                      "value": false
                                    }
                                  }
                                }
                              }, {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "AssignmentExpression",
                                  "operator": "=",
                                  "left": {
                                    "type": "MemberExpression",
                                    "object": {
                                      "type": "Identifier",
                                      "name": "descriptor"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "configurable"
                                    },
                                    "computed": false
                                  },
                                  "right": {
                                    "type": "Literal",
                                    "value": true
                                  }
                                }
                              }, {
                                "type": "IfStatement",
                                "test": {
                                  "type": "LogicalExpression",
                                  "left": {
                                    "type": "BinaryExpression",
                                    "left": {
                                      "type": "Literal",
                                      "value": "value"
                                    },
                                    "operator": "in",
                                    "right": {
                                      "type": "Identifier",
                                      "name": "descriptor"
                                    }
                                  },
                                  "operator": "||",
                                  "right": {
                                    "type": "MemberExpression",
                                    "object": {
                                      "type": "Identifier",
                                      "name": "descriptor"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "initializer"
                                    },
                                    "computed": false
                                  }
                                },
                                "consequent": {
                                  "type": "ExpressionStatement",
                                  "expression": {
                                    "type": "AssignmentExpression",
                                    "operator": "=",
                                    "left": {
                                      "type": "MemberExpression",
                                      "object": {
                                        "type": "Identifier",
                                        "name": "descriptor"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "writable"
                                      },
                                      "computed": false
                                    },
                                    "right": {
                                      "type": "Literal",
                                      "value": true
                                    }
                                  }
                                },
                                "alternate": null
                              }, {
                                "type": "IfStatement",
                                "test": {
                                  "type": "Identifier",
                                  "name": "decorators"
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [{
                                    "type": "ForStatement",
                                    "init": {
                                      "type": "VariableDeclaration",
                                      "declarations": [{
                                        "type": "VariableDeclarator",
                                        "id": {
                                          "type": "Identifier",
                                          "name": "f"
                                        },
                                        "init": {
                                          "type": "Literal",
                                          "value": 0
                                        }
                                      }],
                                      "kind": "var"
                                    },
                                    "test": {
                                      "type": "BinaryExpression",
                                      "left": {
                                        "type": "Identifier",
                                        "name": "f"
                                      },
                                      "operator": "<",
                                      "right": {
                                        "type": "MemberExpression",
                                        "object": {
                                          "type": "Identifier",
                                          "name": "decorators"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "length"
                                        },
                                        "computed": false
                                      }
                                    },
                                    "update": {
                                      "type": "UpdateExpression",
                                      "operator": "++",
                                      "prefix": false,
                                      "argument": {
                                        "type": "Identifier",
                                        "name": "f"
                                      }
                                    },
                                    "body": {
                                      "type": "BlockStatement",
                                      "body": [{
                                        "type": "VariableDeclaration",
                                        "declarations": [{
                                          "type": "VariableDeclarator",
                                          "id": {
                                            "type": "Identifier",
                                            "name": "decorator"
                                          },
                                          "init": {
                                            "type": "MemberExpression",
                                            "object": {
                                              "type": "Identifier",
                                              "name": "decorators"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "f"
                                            },
                                            "computed": true
                                          }
                                        }],
                                        "kind": "var"
                                      }, {
                                        "type": "IfStatement",
                                        "test": {
                                          "type": "BinaryExpression",
                                          "left": {
                                            "type": "UnaryExpression",
                                            "operator": "typeof",
                                            "prefix": true,
                                            "argument": {
                                              "type": "Identifier",
                                              "name": "decorator"
                                            }
                                          },
                                          "operator": "===",
                                          "right": {
                                            "type": "Literal",
                                            "value": "function"
                                          }
                                        },
                                        "consequent": {
                                          "type": "BlockStatement",
                                          "body": [{
                                            "type": "ExpressionStatement",
                                            "expression": {
                                              "type": "AssignmentExpression",
                                              "operator": "=",
                                              "left": {
                                                "type": "Identifier",
                                                "name": "descriptor"
                                              },
                                              "right": {
                                                "type": "LogicalExpression",
                                                "left": {
                                                  "type": "CallExpression",
                                                  "callee": {
                                                    "type": "Identifier",
                                                    "name": "decorator"
                                                  },
                                                  "arguments": [{
                                                    "type": "Identifier",
                                                    "name": "target"
                                                  }, {
                                                    "type": "Identifier",
                                                    "name": "key"
                                                  }, {
                                                    "type": "Identifier",
                                                    "name": "descriptor"
                                                  }]
                                                },
                                                "operator": "||",
                                                "right": {
                                                  "type": "Identifier",
                                                  "name": "descriptor"
                                                }
                                              }
                                            }
                                          }]
                                        },
                                        "alternate": {
                                          "type": "BlockStatement",
                                          "body": [{
                                            "type": "ThrowStatement",
                                            "argument": {
                                              "type": "NewExpression",
                                              "callee": {
                                                "type": "Identifier",
                                                "name": "TypeError"
                                              },
                                              "arguments": [{
                                                "type": "BinaryExpression",
                                                "left": {
                                                  "type": "BinaryExpression",
                                                  "left": {
                                                    "type": "BinaryExpression",
                                                    "left": {
                                                      "type": "Literal",
                                                      "value": "The decorator for method "
                                                    },
                                                    "operator": "+",
                                                    "right": {
                                                      "type": "MemberExpression",
                                                      "object": {
                                                        "type": "Identifier",
                                                        "name": "descriptor"
                                                      },
                                                      "property": {
                                                        "type": "Identifier",
                                                        "name": "key"
                                                      },
                                                      "computed": false
                                                    }
                                                  },
                                                  "operator": "+",
                                                  "right": {
                                                    "type": "Literal",
                                                    "value": " is of the invalid type "
                                                  }
                                                },
                                                "operator": "+",
                                                "right": {
                                                  "type": "UnaryExpression",
                                                  "operator": "typeof",
                                                  "prefix": true,
                                                  "argument": {
                                                    "type": "Identifier",
                                                    "name": "decorator"
                                                  }
                                                }
                                              }]
                                            }
                                          }]
                                        }
                                      }]
                                    }
                                  }, {
                                    "type": "IfStatement",
                                    "test": {
                                      "type": "BinaryExpression",
                                      "left": {
                                        "type": "MemberExpression",
                                        "object": {
                                          "type": "Identifier",
                                          "name": "descriptor"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "initializer"
                                        },
                                        "computed": false
                                      },
                                      "operator": "!==",
                                      "right": {
                                        "type": "Identifier",
                                        "name": "undefined"
                                      }
                                    },
                                    "consequent": {
                                      "type": "BlockStatement",
                                      "body": [{
                                        "type": "ExpressionStatement",
                                        "expression": {
                                          "type": "AssignmentExpression",
                                          "operator": "=",
                                          "left": {
                                            "type": "MemberExpression",
                                            "object": {
                                              "type": "Identifier",
                                              "name": "initializers"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "key"
                                            },
                                            "computed": true
                                          },
                                          "right": {
                                            "type": "Identifier",
                                            "name": "descriptor"
                                          }
                                        }
                                      }, {
                                        "type": "ContinueStatement",
                                        "label": null
                                      }]
                                    },
                                    "alternate": null
                                  }]
                                },
                                "alternate": null
                              }, {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "MemberExpression",
                                    "object": {
                                      "type": "Identifier",
                                      "name": "Object"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "defineProperty"
                                    },
                                    "computed": false
                                  },
                                  "arguments": [{
                                    "type": "Identifier",
                                    "name": "target"
                                  }, {
                                    "type": "Identifier",
                                    "name": "key"
                                  }, {
                                    "type": "Identifier",
                                    "name": "descriptor"
                                  }]
                                }
                              }]
                            }
                          }]
                        }
                      }, {
                        "type": "ReturnStatement",
                        "argument": {
                          "type": "FunctionExpression",
                          "id": null,
                          "generator": false,
                          "expression": false,
                          "params": [{
                            "type": "Identifier",
                            "name": "Constructor"
                          }, {
                            "type": "Identifier",
                            "name": "protoProps"
                          }, {
                            "type": "Identifier",
                            "name": "staticProps"
                          }, {
                            "type": "Identifier",
                            "name": "protoInitializers"
                          }, {
                            "type": "Identifier",
                            "name": "staticInitializers"
                          }],
                          "body": {
                            "type": "BlockStatement",
                            "body": [{
                              "type": "IfStatement",
                              "test": {
                                "type": "Identifier",
                                "name": "protoProps"
                              },
                              "consequent": {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "Identifier",
                                    "name": "defineProperties"
                                  },
                                  "arguments": [{
                                    "type": "MemberExpression",
                                    "object": {
                                      "type": "Identifier",
                                      "name": "Constructor"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "prototype"
                                    },
                                    "computed": false
                                  }, {
                                    "type": "Identifier",
                                    "name": "protoProps"
                                  }, {
                                    "type": "Identifier",
                                    "name": "protoInitializers"
                                  }]
                                }
                              },
                              "alternate": null
                            }, {
                              "type": "IfStatement",
                              "test": {
                                "type": "Identifier",
                                "name": "staticProps"
                              },
                              "consequent": {
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "Identifier",
                                    "name": "defineProperties"
                                  },
                                  "arguments": [{
                                    "type": "Identifier",
                                    "name": "Constructor"
                                  }, {
                                    "type": "Identifier",
                                    "name": "staticProps"
                                  }, {
                                    "type": "Identifier",
                                    "name": "staticInitializers"
                                  }]
                                }
                              },
                              "alternate": null
                            }, {
                              "type": "ReturnStatement",
                              "argument": {
                                "type": "Identifier",
                                "name": "Constructor"
                              }
                            }]
                          }
                        }
                      }]
                    },
                    "parenthesizedExpression": true
                  },
                  "arguments": []
                }
              }]
            },
            "helper-create-decorated-object": {
              "type": "Program",
              "body": [{
                "type": "ExpressionStatement",
                "expression": {
                  "type": "FunctionExpression",
                  "id": null,
                  "generator": false,
                  "expression": false,
                  "params": [{
                    "type": "Identifier",
                    "name": "descriptors"
                  }],
                  "body": {
                    "type": "BlockStatement",
                    "body": [{
                      "type": "VariableDeclaration",
                      "declarations": [{
                        "type": "VariableDeclarator",
                        "id": {
                          "type": "Identifier",
                          "name": "target"
                        },
                        "init": {
                          "type": "ObjectExpression",
                          "properties": []
                        }
                      }],
                      "kind": "var"
                    }, {
                      "type": "ForStatement",
                      "init": {
                        "type": "VariableDeclaration",
                        "declarations": [{
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "i"
                          },
                          "init": {
                            "type": "Literal",
                            "value": 0
                          }
                        }],
                        "kind": "var"
                      },
                      "test": {
                        "type": "BinaryExpression",
                        "left": {
                          "type": "Identifier",
                          "name": "i"
                        },
                        "operator": "<",
                        "right": {
                          "type": "MemberExpression",
                          "object": {
                            "type": "Identifier",
                            "name": "descriptors"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "length"
                          },
                          "computed": false
                        }
                      },
                      "update": {
                        "type": "UpdateExpression",
                        "operator": "++",
                        "prefix": false,
                        "argument": {
                          "type": "Identifier",
                          "name": "i"
                        }
                      },
                      "body": {
                        "type": "BlockStatement",
                        "body": [{
                          "type": "VariableDeclaration",
                          "declarations": [{
                            "type": "VariableDeclarator",
                            "id": {
                              "type": "Identifier",
                              "name": "descriptor"
                            },
                            "init": {
                              "type": "MemberExpression",
                              "object": {
                                "type": "Identifier",
                                "name": "descriptors"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "i"
                              },
                              "computed": true
                            }
                          }],
                          "kind": "var"
                        }, {
                          "type": "VariableDeclaration",
                          "declarations": [{
                            "type": "VariableDeclarator",
                            "id": {
                              "type": "Identifier",
                              "name": "decorators"
                            },
                            "init": {
                              "type": "MemberExpression",
                              "object": {
                                "type": "Identifier",
                                "name": "descriptor"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "decorators"
                              },
                              "computed": false
                            }
                          }],
                          "kind": "var"
                        }, {
                          "type": "VariableDeclaration",
                          "declarations": [{
                            "type": "VariableDeclarator",
                            "id": {
                              "type": "Identifier",
                              "name": "key"
                            },
                            "init": {
                              "type": "MemberExpression",
                              "object": {
                                "type": "Identifier",
                                "name": "descriptor"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "key"
                              },
                              "computed": false
                            }
                          }],
                          "kind": "var"
                        }, {
                          "type": "ExpressionStatement",
                          "expression": {
                            "type": "UnaryExpression",
                            "operator": "delete",
                            "prefix": true,
                            "argument": {
                              "type": "MemberExpression",
                              "object": {
                                "type": "Identifier",
                                "name": "descriptor",
                                "leadingComments": null
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "key"
                              },
                              "computed": false,
                              "leadingComments": null
                            },
                            "leadingComments": null
                          }
                        }, {
                          "type": "ExpressionStatement",
                          "expression": {
                            "type": "UnaryExpression",
                            "operator": "delete",
                            "prefix": true,
                            "argument": {
                              "type": "MemberExpression",
                              "object": {
                                "type": "Identifier",
                                "name": "descriptor"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "decorators"
                              },
                              "computed": false
                            }
                          }
                        }, {
                          "type": "ExpressionStatement",
                          "expression": {
                            "type": "AssignmentExpression",
                            "operator": "=",
                            "left": {
                              "type": "MemberExpression",
                              "object": {
                                "type": "Identifier",
                                "name": "descriptor"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "enumerable"
                              },
                              "computed": false
                            },
                            "right": {
                              "type": "Literal",
                              "value": true
                            }
                          }
                        }, {
                          "type": "ExpressionStatement",
                          "expression": {
                            "type": "AssignmentExpression",
                            "operator": "=",
                            "left": {
                              "type": "MemberExpression",
                              "object": {
                                "type": "Identifier",
                                "name": "descriptor"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "configurable"
                              },
                              "computed": false
                            },
                            "right": {
                              "type": "Literal",
                              "value": true
                            }
                          }
                        }, {
                          "type": "IfStatement",
                          "test": {
                            "type": "LogicalExpression",
                            "left": {
                              "type": "BinaryExpression",
                              "left": {
                                "type": "Literal",
                                "value": "value"
                              },
                              "operator": "in",
                              "right": {
                                "type": "Identifier",
                                "name": "descriptor"
                              }
                            },
                            "operator": "||",
                            "right": {
                              "type": "MemberExpression",
                              "object": {
                                "type": "Identifier",
                                "name": "descriptor"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "initializer"
                              },
                              "computed": false
                            }
                          },
                          "consequent": {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "AssignmentExpression",
                              "operator": "=",
                              "left": {
                                "type": "MemberExpression",
                                "object": {
                                  "type": "Identifier",
                                  "name": "descriptor"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "writable"
                                },
                                "computed": false
                              },
                              "right": {
                                "type": "Literal",
                                "value": true
                              }
                            }
                          },
                          "alternate": null
                        }, {
                          "type": "IfStatement",
                          "test": {
                            "type": "Identifier",
                            "name": "decorators"
                          },
                          "consequent": {
                            "type": "BlockStatement",
                            "body": [{
                              "type": "ForStatement",
                              "init": {
                                "type": "VariableDeclaration",
                                "declarations": [{
                                  "type": "VariableDeclarator",
                                  "id": {
                                    "type": "Identifier",
                                    "name": "f"
                                  },
                                  "init": {
                                    "type": "Literal",
                                    "value": 0
                                  }
                                }],
                                "kind": "var"
                              },
                              "test": {
                                "type": "BinaryExpression",
                                "left": {
                                  "type": "Identifier",
                                  "name": "f"
                                },
                                "operator": "<",
                                "right": {
                                  "type": "MemberExpression",
                                  "object": {
                                    "type": "Identifier",
                                    "name": "decorators"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "length"
                                  },
                                  "computed": false
                                }
                              },
                              "update": {
                                "type": "UpdateExpression",
                                "operator": "++",
                                "prefix": false,
                                "argument": {
                                  "type": "Identifier",
                                  "name": "f"
                                }
                              },
                              "body": {
                                "type": "BlockStatement",
                                "body": [{
                                  "type": "VariableDeclaration",
                                  "declarations": [{
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "Identifier",
                                      "name": "decorator"
                                    },
                                    "init": {
                                      "type": "MemberExpression",
                                      "object": {
                                        "type": "Identifier",
                                        "name": "decorators"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "f"
                                      },
                                      "computed": true
                                    }
                                  }],
                                  "kind": "var"
                                }, {
                                  "type": "IfStatement",
                                  "test": {
                                    "type": "BinaryExpression",
                                    "left": {
                                      "type": "UnaryExpression",
                                      "operator": "typeof",
                                      "prefix": true,
                                      "argument": {
                                        "type": "Identifier",
                                        "name": "decorator"
                                      }
                                    },
                                    "operator": "===",
                                    "right": {
                                      "type": "Literal",
                                      "value": "function"
                                    }
                                  },
                                  "consequent": {
                                    "type": "BlockStatement",
                                    "body": [{
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "AssignmentExpression",
                                        "operator": "=",
                                        "left": {
                                          "type": "Identifier",
                                          "name": "descriptor"
                                        },
                                        "right": {
                                          "type": "LogicalExpression",
                                          "left": {
                                            "type": "CallExpression",
                                            "callee": {
                                              "type": "Identifier",
                                              "name": "decorator"
                                            },
                                            "arguments": [{
                                              "type": "Identifier",
                                              "name": "target"
                                            }, {
                                              "type": "Identifier",
                                              "name": "key"
                                            }, {
                                              "type": "Identifier",
                                              "name": "descriptor"
                                            }]
                                          },
                                          "operator": "||",
                                          "right": {
                                            "type": "Identifier",
                                            "name": "descriptor"
                                          }
                                        }
                                      }
                                    }]
                                  },
                                  "alternate": {
                                    "type": "BlockStatement",
                                    "body": [{
                                      "type": "ThrowStatement",
                                      "argument": {
                                        "type": "NewExpression",
                                        "callee": {
                                          "type": "Identifier",
                                          "name": "TypeError"
                                        },
                                        "arguments": [{
                                          "type": "BinaryExpression",
                                          "left": {
                                            "type": "BinaryExpression",
                                            "left": {
                                              "type": "BinaryExpression",
                                              "left": {
                                                "type": "Literal",
                                                "value": "The decorator for method "
                                              },
                                              "operator": "+",
                                              "right": {
                                                "type": "MemberExpression",
                                                "object": {
                                                  "type": "Identifier",
                                                  "name": "descriptor"
                                                },
                                                "property": {
                                                  "type": "Identifier",
                                                  "name": "key"
                                                },
                                                "computed": false
                                              }
                                            },
                                            "operator": "+",
                                            "right": {
                                              "type": "Literal",
                                              "value": " is of the invalid type "
                                            }
                                          },
                                          "operator": "+",
                                          "right": {
                                            "type": "UnaryExpression",
                                            "operator": "typeof",
                                            "prefix": true,
                                            "argument": {
                                              "type": "Identifier",
                                              "name": "decorator"
                                            }
                                          }
                                        }]
                                      }
                                    }]
                                  }
                                }]
                              }
                            }]
                          },
                          "alternate": null
                        }, {
                          "type": "IfStatement",
                          "test": {
                            "type": "MemberExpression",
                            "object": {
                              "type": "Identifier",
                              "name": "descriptor"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "initializer"
                            },
                            "computed": false
                          },
                          "consequent": {
                            "type": "BlockStatement",
                            "body": [{
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "AssignmentExpression",
                                "operator": "=",
                                "left": {
                                  "type": "MemberExpression",
                                  "object": {
                                    "type": "Identifier",
                                    "name": "descriptor"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "value"
                                  },
                                  "computed": false
                                },
                                "right": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "MemberExpression",
                                    "object": {
                                      "type": "MemberExpression",
                                      "object": {
                                        "type": "Identifier",
                                        "name": "descriptor"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "initializer"
                                      },
                                      "computed": false
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "call"
                                    },
                                    "computed": false
                                  },
                                  "arguments": [{
                                    "type": "Identifier",
                                    "name": "target"
                                  }]
                                }
                              }
                            }]
                          },
                          "alternate": null
                        }, {
                          "type": "ExpressionStatement",
                          "expression": {
                            "type": "CallExpression",
                            "callee": {
                              "type": "MemberExpression",
                              "object": {
                                "type": "Identifier",
                                "name": "Object"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "defineProperty"
                              },
                              "computed": false
                            },
                            "arguments": [{
                              "type": "Identifier",
                              "name": "target"
                            }, {
                              "type": "Identifier",
                              "name": "key"
                            }, {
                              "type": "Identifier",
                              "name": "descriptor"
                            }]
                          }
                        }]
                      }
                    }, {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "Identifier",
                        "name": "target"
                      }
                    }]
                  },
                  "parenthesizedExpression": true
                }
              }]
            },
            "helper-default-props": {
              "type": "Program",
              "body": [{
                "type": "ExpressionStatement",
                "expression": {
                  "type": "FunctionExpression",
                  "id": null,
                  "generator": false,
                  "expression": false,
                  "params": [{
                    "type": "Identifier",
                    "name": "defaultProps"
                  }, {
                    "type": "Identifier",
                    "name": "props"
                  }],
                  "body": {
                    "type": "BlockStatement",
                    "body": [{
                      "type": "IfStatement",
                      "test": {
                        "type": "Identifier",
                        "name": "defaultProps"
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [{
                          "type": "ForInStatement",
                          "left": {
                            "type": "VariableDeclaration",
                            "declarations": [{
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "Identifier",
                                "name": "propName"
                              },
                              "init": null
                            }],
                            "kind": "var"
                          },
                          "right": {
                            "type": "Identifier",
                            "name": "defaultProps"
                          },
                          "body": {
                            "type": "BlockStatement",
                            "body": [{
                              "type": "IfStatement",
                              "test": {
                                "type": "BinaryExpression",
                                "left": {
                                  "type": "UnaryExpression",
                                  "operator": "typeof",
                                  "prefix": true,
                                  "argument": {
                                    "type": "MemberExpression",
                                    "object": {
                                      "type": "Identifier",
                                      "name": "props"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "propName"
                                    },
                                    "computed": true
                                  }
                                },
                                "operator": "===",
                                "right": {
                                  "type": "Literal",
                                  "value": "undefined"
                                }
                              },
                              "consequent": {
                                "type": "BlockStatement",
                                "body": [{
                                  "type": "ExpressionStatement",
                                  "expression": {
                                    "type": "AssignmentExpression",
                                    "operator": "=",
                                    "left": {
                                      "type": "MemberExpression",
                                      "object": {
                                        "type": "Identifier",
                                        "name": "props"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "propName"
                                      },
                                      "computed": true
                                    },
                                    "right": {
                                      "type": "MemberExpression",
                                      "object": {
                                        "type": "Identifier",
                                        "name": "defaultProps"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "propName"
                                      },
                                      "computed": true
                                    }
                                  }
                                }]
                              },
                              "alternate": null
                            }]
                          }
                        }]
                      },
                      "alternate": null
                    }, {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "Identifier",
                        "name": "props"
                      }
                    }]
                  },
                  "parenthesizedExpression": true
                }
              }]
            },
            "helper-defaults": {
              "type": "Program",
              "body": [{
                "type": "ExpressionStatement",
                "expression": {
                  "type": "FunctionExpression",
                  "id": null,
                  "generator": false,
                  "expression": false,
                  "params": [{
                    "type": "Identifier",
                    "name": "obj"
                  }, {
                    "type": "Identifier",
                    "name": "defaults"
                  }],
                  "body": {
                    "type": "BlockStatement",
                    "body": [{
                      "type": "VariableDeclaration",
                      "declarations": [{
                        "type": "VariableDeclarator",
                        "id": {
                          "type": "Identifier",
                          "name": "keys"
                        },
                        "init": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "MemberExpression",
                            "object": {
                              "type": "Identifier",
                              "name": "Object"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "getOwnPropertyNames"
                            },
                            "computed": false
                          },
                          "arguments": [{
                            "type": "Identifier",
                            "name": "defaults"
                          }]
                        }
                      }],
                      "kind": "var"
                    }, {
                      "type": "ForStatement",
                      "init": {
                        "type": "VariableDeclaration",
                        "declarations": [{
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "i"
                          },
                          "init": {
                            "type": "Literal",
                            "value": 0
                          }
                        }],
                        "kind": "var"
                      },
                      "test": {
                        "type": "BinaryExpression",
                        "left": {
                          "type": "Identifier",
                          "name": "i"
                        },
                        "operator": "<",
                        "right": {
                          "type": "MemberExpression",
                          "object": {
                            "type": "Identifier",
                            "name": "keys"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "length"
                          },
                          "computed": false
                        }
                      },
                      "update": {
                        "type": "UpdateExpression",
                        "operator": "++",
                        "prefix": false,
                        "argument": {
                          "type": "Identifier",
                          "name": "i"
                        }
                      },
                      "body": {
                        "type": "BlockStatement",
                        "body": [{
                          "type": "VariableDeclaration",
                          "declarations": [{
                            "type": "VariableDeclarator",
                            "id": {
                              "type": "Identifier",
                              "name": "key"
                            },
                            "init": {
                              "type": "MemberExpression",
                              "object": {
                                "type": "Identifier",
                                "name": "keys"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "i"
                              },
                              "computed": true
                            }
                          }],
                          "kind": "var"
                        }, {
                          "type": "VariableDeclaration",
                          "declarations": [{
                            "type": "VariableDeclarator",
                            "id": {
                              "type": "Identifier",
                              "name": "value"
                            },
                            "init": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "MemberExpression",
                                "object": {
                                  "type": "Identifier",
                                  "name": "Object"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "getOwnPropertyDescriptor"
                                },
                                "computed": false
                              },
                              "arguments": [{
                                "type": "Identifier",
                                "name": "defaults"
                              }, {
                                "type": "Identifier",
                                "name": "key"
                              }]
                            }
                          }],
                          "kind": "var"
                        }, {
                          "type": "IfStatement",
                          "test": {
                            "type": "LogicalExpression",
                            "left": {
                              "type": "LogicalExpression",
                              "left": {
                                "type": "Identifier",
                                "name": "value"
                              },
                              "operator": "&&",
                              "right": {
                                "type": "MemberExpression",
                                "object": {
                                  "type": "Identifier",
                                  "name": "value"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "configurable"
                                },
                                "computed": false
                              }
                            },
                            "operator": "&&",
                            "right": {
                              "type": "BinaryExpression",
                              "left": {
                                "type": "MemberExpression",
                                "object": {
                                  "type": "Identifier",
                                  "name": "obj"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "key"
                                },
                                "computed": true
                              },
                              "operator": "===",
                              "right": {
                                "type": "Identifier",
                                "name": "undefined"
                              }
                            }
                          },
                          "consequent": {
                            "type": "BlockStatement",
                            "body": [{
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "MemberExpression",
                                  "object": {
                                    "type": "Identifier",
                                    "name": "Object"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "defineProperty"
                                  },
                                  "computed": false
                                },
                                "arguments": [{
                                  "type": "Identifier",
                                  "name": "obj"
                                }, {
                                  "type": "Identifier",
                                  "name": "key"
                                }, {
                                  "type": "Identifier",
                                  "name": "value"
                                }]
                              }
                            }]
                          },
                          "alternate": null
                        }]
                      }
                    }, {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "Identifier",
                        "name": "obj"
                      }
                    }]
                  },
                  "parenthesizedExpression": true
                }
              }]
            },
            "helper-define-decorated-property-descriptor": {
              "type": "Program",
              "body": [{
                "type": "ExpressionStatement",
                "expression": {
                  "type": "FunctionExpression",
                  "id": null,
                  "generator": false,
                  "expression": false,
                  "params": [{
                    "type": "Identifier",
                    "name": "target"
                  }, {
                    "type": "Identifier",
                    "name": "key"
                  }, {
                    "type": "Identifier",
                    "name": "descriptors"
                  }],
                  "body": {
                    "type": "BlockStatement",
                    "body": [{
                      "type": "VariableDeclaration",
                      "declarations": [{
                        "type": "VariableDeclarator",
                        "id": {
                          "type": "Identifier",
                          "name": "_descriptor"
                        },
                        "init": {
                          "type": "MemberExpression",
                          "object": {
                            "type": "Identifier",
                            "name": "descriptors"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "key"
                          },
                          "computed": true
                        }
                      }],
                      "kind": "var"
                    }, {
                      "type": "IfStatement",
                      "test": {
                        "type": "UnaryExpression",
                        "operator": "!",
                        "prefix": true,
                        "argument": {
                          "type": "Identifier",
                          "name": "_descriptor"
                        }
                      },
                      "consequent": {
                        "type": "ReturnStatement",
                        "argument": null,
                        "leadingComments": null,
                        "trailingComments": null
                      },
                      "alternate": null
                    }, {
                      "type": "VariableDeclaration",
                      "declarations": [{
                        "type": "VariableDeclarator",
                        "id": {
                          "type": "Identifier",
                          "name": "descriptor",
                          "leadingComments": null
                        },
                        "init": {
                          "type": "ObjectExpression",
                          "properties": []
                        },
                        "leadingComments": null
                      }],
                      "kind": "var"
                    }, {
                      "type": "ForInStatement",
                      "left": {
                        "type": "VariableDeclaration",
                        "declarations": [{
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "_key"
                          },
                          "init": null
                        }],
                        "kind": "var"
                      },
                      "right": {
                        "type": "Identifier",
                        "name": "_descriptor"
                      },
                      "body": {
                        "type": "ExpressionStatement",
                        "expression": {
                          "type": "AssignmentExpression",
                          "operator": "=",
                          "left": {
                            "type": "MemberExpression",
                            "object": {
                              "type": "Identifier",
                              "name": "descriptor"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "_key"
                            },
                            "computed": true
                          },
                          "right": {
                            "type": "MemberExpression",
                            "object": {
                              "type": "Identifier",
                              "name": "_descriptor"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "_key"
                            },
                            "computed": true
                          }
                        },
                        "trailingComments": null
                      }
                    }, {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "MemberExpression",
                          "object": {
                            "type": "Identifier",
                            "name": "descriptor",
                            "leadingComments": null
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "value"
                          },
                          "computed": false,
                          "leadingComments": null
                        },
                        "right": {
                          "type": "ConditionalExpression",
                          "test": {
                            "type": "MemberExpression",
                            "object": {
                              "type": "Identifier",
                              "name": "descriptor"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "initializer"
                            },
                            "computed": false
                          },
                          "consequent": {
                            "type": "CallExpression",
                            "callee": {
                              "type": "MemberExpression",
                              "object": {
                                "type": "MemberExpression",
                                "object": {
                                  "type": "Identifier",
                                  "name": "descriptor"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "initializer"
                                },
                                "computed": false
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "call"
                              },
                              "computed": false
                            },
                            "arguments": [{
                              "type": "Identifier",
                              "name": "target"
                            }]
                          },
                          "alternate": {
                            "type": "Identifier",
                            "name": "undefined"
                          }
                        },
                        "leadingComments": null
                      }
                    }, {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "MemberExpression",
                          "object": {
                            "type": "Identifier",
                            "name": "Object"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "defineProperty"
                          },
                          "computed": false
                        },
                        "arguments": [{
                          "type": "Identifier",
                          "name": "target"
                        }, {
                          "type": "Identifier",
                          "name": "key"
                        }, {
                          "type": "Identifier",
                          "name": "descriptor"
                        }]
                      }
                    }]
                  },
                  "parenthesizedExpression": true
                }
              }]
            },
            "helper-define-property": {
              "type": "Program",
              "body": [{
                "type": "ExpressionStatement",
                "expression": {
                  "type": "FunctionExpression",
                  "id": null,
                  "generator": false,
                  "expression": false,
                  "params": [{
                    "type": "Identifier",
                    "name": "obj"
                  }, {
                    "type": "Identifier",
                    "name": "key"
                  }, {
                    "type": "Identifier",
                    "name": "value"
                  }],
                  "body": {
                    "type": "BlockStatement",
                    "body": [{
                      "type": "IfStatement",
                      "test": {
                        "type": "BinaryExpression",
                        "left": {
                          "type": "Identifier",
                          "name": "key",
                          "leadingComments": null
                        },
                        "operator": "in",
                        "right": {
                          "type": "Identifier",
                          "name": "obj"
                        },
                        "leadingComments": null
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [{
                          "type": "ExpressionStatement",
                          "expression": {
                            "type": "CallExpression",
                            "callee": {
                              "type": "MemberExpression",
                              "object": {
                                "type": "Identifier",
                                "name": "Object"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "defineProperty"
                              },
                              "computed": false
                            },
                            "arguments": [{
                              "type": "Identifier",
                              "name": "obj"
                            }, {
                              "type": "Identifier",
                              "name": "key"
                            }, {
                              "type": "ObjectExpression",
                              "properties": [{
                                "type": "Property",
                                "method": false,
                                "shorthand": false,
                                "computed": false,
                                "key": {
                                  "type": "Identifier",
                                  "name": "value"
                                },
                                "value": {
                                  "type": "Identifier",
                                  "name": "value"
                                },
                                "kind": "init"
                              }, {
                                "type": "Property",
                                "method": false,
                                "shorthand": false,
                                "computed": false,
                                "key": {
                                  "type": "Identifier",
                                  "name": "enumerable"
                                },
                                "value": {
                                  "type": "Literal",
                                  "value": true
                                },
                                "kind": "init"
                              }, {
                                "type": "Property",
                                "method": false,
                                "shorthand": false,
                                "computed": false,
                                "key": {
                                  "type": "Identifier",
                                  "name": "configurable"
                                },
                                "value": {
                                  "type": "Literal",
                                  "value": true
                                },
                                "kind": "init"
                              }, {
                                "type": "Property",
                                "method": false,
                                "shorthand": false,
                                "computed": false,
                                "key": {
                                  "type": "Identifier",
                                  "name": "writable"
                                },
                                "value": {
                                  "type": "Literal",
                                  "value": true
                                },
                                "kind": "init"
                              }]
                            }]
                          }
                        }]
                      },
                      "alternate": {
                        "type": "BlockStatement",
                        "body": [{
                          "type": "ExpressionStatement",
                          "expression": {
                            "type": "AssignmentExpression",
                            "operator": "=",
                            "left": {
                              "type": "MemberExpression",
                              "object": {
                                "type": "Identifier",
                                "name": "obj"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "key"
                              },
                              "computed": true
                            },
                            "right": {
                              "type": "Identifier",
                              "name": "value"
                            }
                          }
                        }]
                      }
                    }, {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "Identifier",
                        "name": "obj"
                      }
                    }]
                  },
                  "parenthesizedExpression": true
                }
              }]
            },
            "helper-extends": {
              "type": "Program",
              "body": [{
                "type": "ExpressionStatement",
                "expression": {
                  "type": "LogicalExpression",
                  "left": {
                    "type": "MemberExpression",
                    "object": {
                      "type": "Identifier",
                      "name": "Object"
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "assign"
                    },
                    "computed": false
                  },
                  "operator": "||",
                  "right": {
                    "type": "FunctionExpression",
                    "id": null,
                    "generator": false,
                    "expression": false,
                    "params": [{
                      "type": "Identifier",
                      "name": "target"
                    }],
                    "body": {
                      "type": "BlockStatement",
                      "body": [{
                        "type": "ForStatement",
                        "init": {
                          "type": "VariableDeclaration",
                          "declarations": [{
                            "type": "VariableDeclarator",
                            "id": {
                              "type": "Identifier",
                              "name": "i"
                            },
                            "init": {
                              "type": "Literal",
                              "value": 1
                            }
                          }],
                          "kind": "var"
                        },
                        "test": {
                          "type": "BinaryExpression",
                          "left": {
                            "type": "Identifier",
                            "name": "i"
                          },
                          "operator": "<",
                          "right": {
                            "type": "MemberExpression",
                            "object": {
                              "type": "Identifier",
                              "name": "arguments"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "length"
                            },
                            "computed": false
                          }
                        },
                        "update": {
                          "type": "UpdateExpression",
                          "operator": "++",
                          "prefix": false,
                          "argument": {
                            "type": "Identifier",
                            "name": "i"
                          }
                        },
                        "body": {
                          "type": "BlockStatement",
                          "body": [{
                            "type": "VariableDeclaration",
                            "declarations": [{
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "Identifier",
                                "name": "source"
                              },
                              "init": {
                                "type": "MemberExpression",
                                "object": {
                                  "type": "Identifier",
                                  "name": "arguments"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "i"
                                },
                                "computed": true
                              }
                            }],
                            "kind": "var"
                          }, {
                            "type": "ForInStatement",
                            "left": {
                              "type": "VariableDeclaration",
                              "declarations": [{
                                "type": "VariableDeclarator",
                                "id": {
                                  "type": "Identifier",
                                  "name": "key"
                                },
                                "init": null
                              }],
                              "kind": "var"
                            },
                            "right": {
                              "type": "Identifier",
                              "name": "source"
                            },
                            "body": {
                              "type": "BlockStatement",
                              "body": [{
                                "type": "IfStatement",
                                "test": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "MemberExpression",
                                    "object": {
                                      "type": "MemberExpression",
                                      "object": {
                                        "type": "MemberExpression",
                                        "object": {
                                          "type": "Identifier",
                                          "name": "Object"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "prototype"
                                        },
                                        "computed": false
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "hasOwnProperty"
                                      },
                                      "computed": false
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "call"
                                    },
                                    "computed": false
                                  },
                                  "arguments": [{
                                    "type": "Identifier",
                                    "name": "source"
                                  }, {
                                    "type": "Identifier",
                                    "name": "key"
                                  }]
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [{
                                    "type": "ExpressionStatement",
                                    "expression": {
                                      "type": "AssignmentExpression",
                                      "operator": "=",
                                      "left": {
                                        "type": "MemberExpression",
                                        "object": {
                                          "type": "Identifier",
                                          "name": "target"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "key"
                                        },
                                        "computed": true
                                      },
                                      "right": {
                                        "type": "MemberExpression",
                                        "object": {
                                          "type": "Identifier",
                                          "name": "source"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "key"
                                        },
                                        "computed": true
                                      }
                                    }
                                  }]
                                },
                                "alternate": null
                              }]
                            }
                          }]
                        }
                      }, {
                        "type": "ReturnStatement",
                        "argument": {
                          "type": "Identifier",
                          "name": "target"
                        }
                      }]
                    }
                  }
                }
              }]
            },
            "helper-get": {
              "type": "Program",
              "body": [{
                "type": "ExpressionStatement",
                "expression": {
                  "type": "FunctionExpression",
                  "id": {
                    "type": "Identifier",
                    "name": "get"
                  },
                  "generator": false,
                  "expression": false,
                  "params": [{
                    "type": "Identifier",
                    "name": "object"
                  }, {
                    "type": "Identifier",
                    "name": "property"
                  }, {
                    "type": "Identifier",
                    "name": "receiver"
                  }],
                  "body": {
                    "type": "BlockStatement",
                    "body": [{
                      "type": "IfStatement",
                      "test": {
                        "type": "BinaryExpression",
                        "left": {
                          "type": "Identifier",
                          "name": "object"
                        },
                        "operator": "===",
                        "right": {
                          "type": "Literal",
                          "value": null,
                          "rawValue": null
                        }
                      },
                      "consequent": {
                        "type": "ExpressionStatement",
                        "expression": {
                          "type": "AssignmentExpression",
                          "operator": "=",
                          "left": {
                            "type": "Identifier",
                            "name": "object"
                          },
                          "right": {
                            "type": "MemberExpression",
                            "object": {
                              "type": "Identifier",
                              "name": "Function"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "prototype"
                            },
                            "computed": false
                          }
                        }
                      },
                      "alternate": null
                    }, {
                      "type": "VariableDeclaration",
                      "declarations": [{
                        "type": "VariableDeclarator",
                        "id": {
                          "type": "Identifier",
                          "name": "desc"
                        },
                        "init": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "MemberExpression",
                            "object": {
                              "type": "Identifier",
                              "name": "Object"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "getOwnPropertyDescriptor"
                            },
                            "computed": false
                          },
                          "arguments": [{
                            "type": "Identifier",
                            "name": "object"
                          }, {
                            "type": "Identifier",
                            "name": "property"
                          }]
                        }
                      }],
                      "kind": "var"
                    }, {
                      "type": "IfStatement",
                      "test": {
                        "type": "BinaryExpression",
                        "left": {
                          "type": "Identifier",
                          "name": "desc"
                        },
                        "operator": "===",
                        "right": {
                          "type": "Identifier",
                          "name": "undefined"
                        }
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [{
                          "type": "VariableDeclaration",
                          "declarations": [{
                            "type": "VariableDeclarator",
                            "id": {
                              "type": "Identifier",
                              "name": "parent"
                            },
                            "init": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "MemberExpression",
                                "object": {
                                  "type": "Identifier",
                                  "name": "Object"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "getPrototypeOf"
                                },
                                "computed": false
                              },
                              "arguments": [{
                                "type": "Identifier",
                                "name": "object"
                              }]
                            }
                          }],
                          "kind": "var"
                        }, {
                          "type": "IfStatement",
                          "test": {
                            "type": "BinaryExpression",
                            "left": {
                              "type": "Identifier",
                              "name": "parent"
                            },
                            "operator": "===",
                            "right": {
                              "type": "Literal",
                              "value": null,
                              "rawValue": null
                            }
                          },
                          "consequent": {
                            "type": "BlockStatement",
                            "body": [{
                              "type": "ReturnStatement",
                              "argument": {
                                "type": "Identifier",
                                "name": "undefined"
                              }
                            }]
                          },
                          "alternate": {
                            "type": "BlockStatement",
                            "body": [{
                              "type": "ReturnStatement",
                              "argument": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "get"
                                },
                                "arguments": [{
                                  "type": "Identifier",
                                  "name": "parent"
                                }, {
                                  "type": "Identifier",
                                  "name": "property"
                                }, {
                                  "type": "Identifier",
                                  "name": "receiver"
                                }]
                              }
                            }]
                          }
                        }]
                      },
                      "alternate": {
                        "type": "IfStatement",
                        "test": {
                          "type": "BinaryExpression",
                          "left": {
                            "type": "Literal",
                            "value": "value"
                          },
                          "operator": "in",
                          "right": {
                            "type": "Identifier",
                            "name": "desc"
                          }
                        },
                        "consequent": {
                          "type": "BlockStatement",
                          "body": [{
                            "type": "ReturnStatement",
                            "argument": {
                              "type": "MemberExpression",
                              "object": {
                                "type": "Identifier",
                                "name": "desc"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "value"
                              },
                              "computed": false
                            }
                          }]
                        },
                        "alternate": {
                          "type": "BlockStatement",
                          "body": [{
                            "type": "VariableDeclaration",
                            "declarations": [{
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "Identifier",
                                "name": "getter"
                              },
                              "init": {
                                "type": "MemberExpression",
                                "object": {
                                  "type": "Identifier",
                                  "name": "desc"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "get"
                                },
                                "computed": false
                              }
                            }],
                            "kind": "var"
                          }, {
                            "type": "IfStatement",
                            "test": {
                              "type": "BinaryExpression",
                              "left": {
                                "type": "Identifier",
                                "name": "getter"
                              },
                              "operator": "===",
                              "right": {
                                "type": "Identifier",
                                "name": "undefined"
                              }
                            },
                            "consequent": {
                              "type": "BlockStatement",
                              "body": [{
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "Identifier",
                                  "name": "undefined"
                                }
                              }]
                            },
                            "alternate": null
                          }, {
                            "type": "ReturnStatement",
                            "argument": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "MemberExpression",
                                "object": {
                                  "type": "Identifier",
                                  "name": "getter"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "call"
                                },
                                "computed": false
                              },
                              "arguments": [{
                                "type": "Identifier",
                                "name": "receiver"
                              }]
                            }
                          }]
                        }
                      }
                    }]
                  },
                  "parenthesizedExpression": true
                }
              }]
            },
            "helper-has-own": {
              "type": "Program",
              "body": [{
                "type": "ExpressionStatement",
                "expression": {
                  "type": "MemberExpression",
                  "object": {
                    "type": "MemberExpression",
                    "object": {
                      "type": "Identifier",
                      "name": "Object"
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "prototype"
                    },
                    "computed": false
                  },
                  "property": {
                    "type": "Identifier",
                    "name": "hasOwnProperty"
                  },
                  "computed": false
                }
              }]
            },
            "helper-inherits": {
              "type": "Program",
              "body": [{
                "type": "ExpressionStatement",
                "expression": {
                  "type": "FunctionExpression",
                  "id": null,
                  "generator": false,
                  "expression": false,
                  "params": [{
                    "type": "Identifier",
                    "name": "subClass"
                  }, {
                    "type": "Identifier",
                    "name": "superClass"
                  }],
                  "body": {
                    "type": "BlockStatement",
                    "body": [{
                      "type": "IfStatement",
                      "test": {
                        "type": "LogicalExpression",
                        "left": {
                          "type": "BinaryExpression",
                          "left": {
                            "type": "UnaryExpression",
                            "operator": "typeof",
                            "prefix": true,
                            "argument": {
                              "type": "Identifier",
                              "name": "superClass"
                            }
                          },
                          "operator": "!==",
                          "right": {
                            "type": "Literal",
                            "value": "function"
                          }
                        },
                        "operator": "&&",
                        "right": {
                          "type": "BinaryExpression",
                          "left": {
                            "type": "Identifier",
                            "name": "superClass"
                          },
                          "operator": "!==",
                          "right": {
                            "type": "Literal",
                            "value": null,
                            "rawValue": null
                          }
                        }
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [{
                          "type": "ThrowStatement",
                          "argument": {
                            "type": "NewExpression",
                            "callee": {
                              "type": "Identifier",
                              "name": "TypeError"
                            },
                            "arguments": [{
                              "type": "BinaryExpression",
                              "left": {
                                "type": "Literal",
                                "value": "Super expression must either be null or a function, not "
                              },
                              "operator": "+",
                              "right": {
                                "type": "UnaryExpression",
                                "operator": "typeof",
                                "prefix": true,
                                "argument": {
                                  "type": "Identifier",
                                  "name": "superClass"
                                }
                              }
                            }]
                          }
                        }]
                      },
                      "alternate": null
                    }, {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "MemberExpression",
                          "object": {
                            "type": "Identifier",
                            "name": "subClass"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "prototype"
                          },
                          "computed": false
                        },
                        "right": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "MemberExpression",
                            "object": {
                              "type": "Identifier",
                              "name": "Object"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "create"
                            },
                            "computed": false
                          },
                          "arguments": [{
                            "type": "LogicalExpression",
                            "left": {
                              "type": "Identifier",
                              "name": "superClass"
                            },
                            "operator": "&&",
                            "right": {
                              "type": "MemberExpression",
                              "object": {
                                "type": "Identifier",
                                "name": "superClass"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "prototype"
                              },
                              "computed": false
                            }
                          }, {
                            "type": "ObjectExpression",
                            "properties": [{
                              "type": "Property",
                              "method": false,
                              "shorthand": false,
                              "computed": false,
                              "key": {
                                "type": "Identifier",
                                "name": "constructor"
                              },
                              "value": {
                                "type": "ObjectExpression",
                                "properties": [{
                                  "type": "Property",
                                  "method": false,
                                  "shorthand": false,
                                  "computed": false,
                                  "key": {
                                    "type": "Identifier",
                                    "name": "value"
                                  },
                                  "value": {
                                    "type": "Identifier",
                                    "name": "subClass"
                                  },
                                  "kind": "init"
                                }, {
                                  "type": "Property",
                                  "method": false,
                                  "shorthand": false,
                                  "computed": false,
                                  "key": {
                                    "type": "Identifier",
                                    "name": "enumerable"
                                  },
                                  "value": {
                                    "type": "Literal",
                                    "value": false
                                  },
                                  "kind": "init"
                                }, {
                                  "type": "Property",
                                  "method": false,
                                  "shorthand": false,
                                  "computed": false,
                                  "key": {
                                    "type": "Identifier",
                                    "name": "writable"
                                  },
                                  "value": {
                                    "type": "Literal",
                                    "value": true
                                  },
                                  "kind": "init"
                                }, {
                                  "type": "Property",
                                  "method": false,
                                  "shorthand": false,
                                  "computed": false,
                                  "key": {
                                    "type": "Identifier",
                                    "name": "configurable"
                                  },
                                  "value": {
                                    "type": "Literal",
                                    "value": true
                                  },
                                  "kind": "init"
                                }]
                              },
                              "kind": "init"
                            }]
                          }]
                        }
                      }
                    }, {
                      "type": "IfStatement",
                      "test": {
                        "type": "Identifier",
                        "name": "superClass"
                      },
                      "consequent": {
                        "type": "ExpressionStatement",
                        "expression": {
                          "type": "ConditionalExpression",
                          "test": {
                            "type": "MemberExpression",
                            "object": {
                              "type": "Identifier",
                              "name": "Object"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "setPrototypeOf"
                            },
                            "computed": false
                          },
                          "consequent": {
                            "type": "CallExpression",
                            "callee": {
                              "type": "MemberExpression",
                              "object": {
                                "type": "Identifier",
                                "name": "Object"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "setPrototypeOf"
                              },
                              "computed": false
                            },
                            "arguments": [{
                              "type": "Identifier",
                              "name": "subClass"
                            }, {
                              "type": "Identifier",
                              "name": "superClass"
                            }]
                          },
                          "alternate": {
                            "type": "AssignmentExpression",
                            "operator": "=",
                            "left": {
                              "type": "MemberExpression",
                              "object": {
                                "type": "Identifier",
                                "name": "subClass"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "__proto__"
                              },
                              "computed": false
                            },
                            "right": {
                              "type": "Identifier",
                              "name": "superClass"
                            }
                          }
                        }
                      },
                      "alternate": null
                    }]
                  },
                  "parenthesizedExpression": true
                }
              }]
            },
            "helper-instanceof": {
              "type": "Program",
              "body": [{
                "type": "ExpressionStatement",
                "expression": {
                  "type": "FunctionExpression",
                  "id": null,
                  "generator": false,
                  "expression": false,
                  "params": [{
                    "type": "Identifier",
                    "name": "left"
                  }, {
                    "type": "Identifier",
                    "name": "right"
                  }],
                  "body": {
                    "type": "BlockStatement",
                    "body": [{
                      "type": "IfStatement",
                      "test": {
                        "type": "LogicalExpression",
                        "left": {
                          "type": "BinaryExpression",
                          "left": {
                            "type": "Identifier",
                            "name": "right"
                          },
                          "operator": "!=",
                          "right": {
                            "type": "Literal",
                            "value": null,
                            "rawValue": null
                          }
                        },
                        "operator": "&&",
                        "right": {
                          "type": "MemberExpression",
                          "object": {
                            "type": "Identifier",
                            "name": "right"
                          },
                          "property": {
                            "type": "MemberExpression",
                            "object": {
                              "type": "Identifier",
                              "name": "Symbol"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "hasInstance"
                            },
                            "computed": false
                          },
                          "computed": true
                        }
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [{
                          "type": "ReturnStatement",
                          "argument": {
                            "type": "CallExpression",
                            "callee": {
                              "type": "MemberExpression",
                              "object": {
                                "type": "Identifier",
                                "name": "right"
                              },
                              "property": {
                                "type": "MemberExpression",
                                "object": {
                                  "type": "Identifier",
                                  "name": "Symbol"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "hasInstance"
                                },
                                "computed": false
                              },
                              "computed": true
                            },
                            "arguments": [{
                              "type": "Identifier",
                              "name": "left"
                            }]
                          }
                        }]
                      },
                      "alternate": {
                        "type": "BlockStatement",
                        "body": [{
                          "type": "ReturnStatement",
                          "argument": {
                            "type": "BinaryExpression",
                            "left": {
                              "type": "Identifier",
                              "name": "left"
                            },
                            "operator": "instanceof",
                            "right": {
                              "type": "Identifier",
                              "name": "right"
                            }
                          }
                        }]
                      }
                    }]
                  },
                  "parenthesizedExpression": true
                }
              }]
            },
            "helper-interop-export-wildcard": {
              "type": "Program",
              "body": [{
                "type": "ExpressionStatement",
                "expression": {
                  "type": "FunctionExpression",
                  "id": null,
                  "generator": false,
                  "expression": false,
                  "params": [{
                    "type": "Identifier",
                    "name": "obj"
                  }, {
                    "type": "Identifier",
                    "name": "defaults"
                  }],
                  "body": {
                    "type": "BlockStatement",
                    "body": [{
                      "type": "VariableDeclaration",
                      "declarations": [{
                        "type": "VariableDeclarator",
                        "id": {
                          "type": "Identifier",
                          "name": "newObj"
                        },
                        "init": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "defaults"
                          },
                          "arguments": [{
                            "type": "ObjectExpression",
                            "properties": []
                          }, {
                            "type": "Identifier",
                            "name": "obj"
                          }]
                        }
                      }],
                      "kind": "var"
                    }, {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "UnaryExpression",
                        "operator": "delete",
                        "prefix": true,
                        "argument": {
                          "type": "MemberExpression",
                          "object": {
                            "type": "Identifier",
                            "name": "newObj"
                          },
                          "property": {
                            "type": "Literal",
                            "value": "default"
                          },
                          "computed": true
                        }
                      }
                    }, {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "Identifier",
                        "name": "newObj"
                      }
                    }]
                  },
                  "parenthesizedExpression": true
                }
              }]
            },
            "helper-interop-require-default": {
              "type": "Program",
              "body": [{
                "type": "ExpressionStatement",
                "expression": {
                  "type": "FunctionExpression",
                  "id": null,
                  "generator": false,
                  "expression": false,
                  "params": [{
                    "type": "Identifier",
                    "name": "obj"
                  }],
                  "body": {
                    "type": "BlockStatement",
                    "body": [{
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "ConditionalExpression",
                        "test": {
                          "type": "LogicalExpression",
                          "left": {
                            "type": "Identifier",
                            "name": "obj"
                          },
                          "operator": "&&",
                          "right": {
                            "type": "MemberExpression",
                            "object": {
                              "type": "Identifier",
                              "name": "obj"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "__esModule"
                            },
                            "computed": false
                          }
                        },
                        "consequent": {
                          "type": "Identifier",
                          "name": "obj"
                        },
                        "alternate": {
                          "type": "ObjectExpression",
                          "properties": [{
                            "type": "Property",
                            "method": false,
                            "shorthand": false,
                            "computed": false,
                            "key": {
                              "type": "Literal",
                              "value": "default"
                            },
                            "value": {
                              "type": "Identifier",
                              "name": "obj"
                            },
                            "kind": "init"
                          }]
                        }
                      }
                    }]
                  },
                  "parenthesizedExpression": true
                }
              }]
            },
            "helper-interop-require-wildcard": {
              "type": "Program",
              "body": [{
                "type": "ExpressionStatement",
                "expression": {
                  "type": "FunctionExpression",
                  "id": null,
                  "generator": false,
                  "expression": false,
                  "params": [{
                    "type": "Identifier",
                    "name": "obj"
                  }],
                  "body": {
                    "type": "BlockStatement",
                    "body": [{
                      "type": "IfStatement",
                      "test": {
                        "type": "LogicalExpression",
                        "left": {
                          "type": "Identifier",
                          "name": "obj"
                        },
                        "operator": "&&",
                        "right": {
                          "type": "MemberExpression",
                          "object": {
                            "type": "Identifier",
                            "name": "obj"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "__esModule"
                          },
                          "computed": false
                        }
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [{
                          "type": "ReturnStatement",
                          "argument": {
                            "type": "Identifier",
                            "name": "obj"
                          }
                        }]
                      },
                      "alternate": {
                        "type": "BlockStatement",
                        "body": [{
                          "type": "VariableDeclaration",
                          "declarations": [{
                            "type": "VariableDeclarator",
                            "id": {
                              "type": "Identifier",
                              "name": "newObj"
                            },
                            "init": {
                              "type": "ObjectExpression",
                              "properties": []
                            }
                          }],
                          "kind": "var"
                        }, {
                          "type": "IfStatement",
                          "test": {
                            "type": "BinaryExpression",
                            "left": {
                              "type": "Identifier",
                              "name": "obj"
                            },
                            "operator": "!=",
                            "right": {
                              "type": "Literal",
                              "value": null,
                              "rawValue": null
                            }
                          },
                          "consequent": {
                            "type": "BlockStatement",
                            "body": [{
                              "type": "ForInStatement",
                              "left": {
                                "type": "VariableDeclaration",
                                "declarations": [{
                                  "type": "VariableDeclarator",
                                  "id": {
                                    "type": "Identifier",
                                    "name": "key"
                                  },
                                  "init": null
                                }],
                                "kind": "var"
                              },
                              "right": {
                                "type": "Identifier",
                                "name": "obj"
                              },
                              "body": {
                                "type": "BlockStatement",
                                "body": [{
                                  "type": "IfStatement",
                                  "test": {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "MemberExpression",
                                      "object": {
                                        "type": "MemberExpression",
                                        "object": {
                                          "type": "MemberExpression",
                                          "object": {
                                            "type": "Identifier",
                                            "name": "Object"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "prototype"
                                          },
                                          "computed": false
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "hasOwnProperty"
                                        },
                                        "computed": false
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "call"
                                      },
                                      "computed": false
                                    },
                                    "arguments": [{
                                      "type": "Identifier",
                                      "name": "obj"
                                    }, {
                                      "type": "Identifier",
                                      "name": "key"
                                    }]
                                  },
                                  "consequent": {
                                    "type": "ExpressionStatement",
                                    "expression": {
                                      "type": "AssignmentExpression",
                                      "operator": "=",
                                      "left": {
                                        "type": "MemberExpression",
                                        "object": {
                                          "type": "Identifier",
                                          "name": "newObj"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "key"
                                        },
                                        "computed": true
                                      },
                                      "right": {
                                        "type": "MemberExpression",
                                        "object": {
                                          "type": "Identifier",
                                          "name": "obj"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "key"
                                        },
                                        "computed": true
                                      }
                                    }
                                  },
                                  "alternate": null
                                }]
                              }
                            }]
                          },
                          "alternate": null
                        }, {
                          "type": "ExpressionStatement",
                          "expression": {
                            "type": "AssignmentExpression",
                            "operator": "=",
                            "left": {
                              "type": "MemberExpression",
                              "object": {
                                "type": "Identifier",
                                "name": "newObj"
                              },
                              "property": {
                                "type": "Literal",
                                "value": "default"
                              },
                              "computed": true
                            },
                            "right": {
                              "type": "Identifier",
                              "name": "obj"
                            }
                          }
                        }, {
                          "type": "ReturnStatement",
                          "argument": {
                            "type": "Identifier",
                            "name": "newObj"
                          }
                        }]
                      }
                    }]
                  },
                  "parenthesizedExpression": true
                }
              }]
            },
            "helper-interop-require": {
              "type": "Program",
              "body": [{
                "type": "ExpressionStatement",
                "expression": {
                  "type": "FunctionExpression",
                  "id": null,
                  "generator": false,
                  "expression": false,
                  "params": [{
                    "type": "Identifier",
                    "name": "obj"
                  }],
                  "body": {
                    "type": "BlockStatement",
                    "body": [{
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "ConditionalExpression",
                        "test": {
                          "type": "LogicalExpression",
                          "left": {
                            "type": "Identifier",
                            "name": "obj"
                          },
                          "operator": "&&",
                          "right": {
                            "type": "MemberExpression",
                            "object": {
                              "type": "Identifier",
                              "name": "obj"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "__esModule"
                            },
                            "computed": false
                          }
                        },
                        "consequent": {
                          "type": "MemberExpression",
                          "object": {
                            "type": "Identifier",
                            "name": "obj"
                          },
                          "property": {
                            "type": "Literal",
                            "value": "default"
                          },
                          "computed": true
                        },
                        "alternate": {
                          "type": "Identifier",
                          "name": "obj"
                        }
                      }
                    }]
                  },
                  "parenthesizedExpression": true
                }
              }]
            },
            "helper-new-arrow-check": {
              "type": "Program",
              "body": [{
                "type": "ExpressionStatement",
                "expression": {
                  "type": "FunctionExpression",
                  "id": null,
                  "generator": false,
                  "expression": false,
                  "params": [{
                    "type": "Identifier",
                    "name": "innerThis"
                  }, {
                    "type": "Identifier",
                    "name": "boundThis"
                  }],
                  "body": {
                    "type": "BlockStatement",
                    "body": [{
                      "type": "IfStatement",
                      "test": {
                        "type": "BinaryExpression",
                        "left": {
                          "type": "Identifier",
                          "name": "innerThis"
                        },
                        "operator": "!==",
                        "right": {
                          "type": "Identifier",
                          "name": "boundThis"
                        }
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [{
                          "type": "ThrowStatement",
                          "argument": {
                            "type": "NewExpression",
                            "callee": {
                              "type": "Identifier",
                              "name": "TypeError"
                            },
                            "arguments": [{
                              "type": "Literal",
                              "value": "Cannot instantiate an arrow function"
                            }]
                          }
                        }]
                      },
                      "alternate": null
                    }]
                  },
                  "parenthesizedExpression": true
                }
              }]
            },
            "helper-object-destructuring-empty": {
              "type": "Program",
              "body": [{
                "type": "ExpressionStatement",
                "expression": {
                  "type": "FunctionExpression",
                  "id": null,
                  "generator": false,
                  "expression": false,
                  "params": [{
                    "type": "Identifier",
                    "name": "obj"
                  }],
                  "body": {
                    "type": "BlockStatement",
                    "body": [{
                      "type": "IfStatement",
                      "test": {
                        "type": "BinaryExpression",
                        "left": {
                          "type": "Identifier",
                          "name": "obj"
                        },
                        "operator": "==",
                        "right": {
                          "type": "Literal",
                          "value": null,
                          "rawValue": null
                        }
                      },
                      "consequent": {
                        "type": "ThrowStatement",
                        "argument": {
                          "type": "NewExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "TypeError"
                          },
                          "arguments": [{
                            "type": "Literal",
                            "value": "Cannot destructure undefined"
                          }]
                        }
                      },
                      "alternate": null
                    }]
                  },
                  "parenthesizedExpression": true
                }
              }]
            },
            "helper-object-without-properties": {
              "type": "Program",
              "body": [{
                "type": "ExpressionStatement",
                "expression": {
                  "type": "FunctionExpression",
                  "id": null,
                  "generator": false,
                  "expression": false,
                  "params": [{
                    "type": "Identifier",
                    "name": "obj"
                  }, {
                    "type": "Identifier",
                    "name": "keys"
                  }],
                  "body": {
                    "type": "BlockStatement",
                    "body": [{
                      "type": "VariableDeclaration",
                      "declarations": [{
                        "type": "VariableDeclarator",
                        "id": {
                          "type": "Identifier",
                          "name": "target"
                        },
                        "init": {
                          "type": "ObjectExpression",
                          "properties": []
                        }
                      }],
                      "kind": "var"
                    }, {
                      "type": "ForInStatement",
                      "left": {
                        "type": "VariableDeclaration",
                        "declarations": [{
                          "type": "VariableDeclarator",
                          "id": {
                            "type": "Identifier",
                            "name": "i"
                          },
                          "init": null
                        }],
                        "kind": "var"
                      },
                      "right": {
                        "type": "Identifier",
                        "name": "obj"
                      },
                      "body": {
                        "type": "BlockStatement",
                        "body": [{
                          "type": "IfStatement",
                          "test": {
                            "type": "BinaryExpression",
                            "left": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "MemberExpression",
                                "object": {
                                  "type": "Identifier",
                                  "name": "keys"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "indexOf"
                                },
                                "computed": false
                              },
                              "arguments": [{
                                "type": "Identifier",
                                "name": "i"
                              }]
                            },
                            "operator": ">=",
                            "right": {
                              "type": "Literal",
                              "value": 0
                            }
                          },
                          "consequent": {
                            "type": "ContinueStatement",
                            "label": null
                          },
                          "alternate": null
                        }, {
                          "type": "IfStatement",
                          "test": {
                            "type": "UnaryExpression",
                            "operator": "!",
                            "prefix": true,
                            "argument": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "MemberExpression",
                                "object": {
                                  "type": "MemberExpression",
                                  "object": {
                                    "type": "MemberExpression",
                                    "object": {
                                      "type": "Identifier",
                                      "name": "Object"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "prototype"
                                    },
                                    "computed": false
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "hasOwnProperty"
                                  },
                                  "computed": false
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "call"
                                },
                                "computed": false
                              },
                              "arguments": [{
                                "type": "Identifier",
                                "name": "obj"
                              }, {
                                "type": "Identifier",
                                "name": "i"
                              }]
                            }
                          },
                          "consequent": {
                            "type": "ContinueStatement",
                            "label": null
                          },
                          "alternate": null
                        }, {
                          "type": "ExpressionStatement",
                          "expression": {
                            "type": "AssignmentExpression",
                            "operator": "=",
                            "left": {
                              "type": "MemberExpression",
                              "object": {
                                "type": "Identifier",
                                "name": "target"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "i"
                              },
                              "computed": true
                            },
                            "right": {
                              "type": "MemberExpression",
                              "object": {
                                "type": "Identifier",
                                "name": "obj"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "i"
                              },
                              "computed": true
                            }
                          }
                        }]
                      }
                    }, {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "Identifier",
                        "name": "target"
                      }
                    }]
                  },
                  "parenthesizedExpression": true
                }
              }]
            },
            "helper-self-global": {
              "type": "Program",
              "body": [{
                "type": "ExpressionStatement",
                "expression": {
                  "type": "ConditionalExpression",
                  "test": {
                    "type": "BinaryExpression",
                    "left": {
                      "type": "UnaryExpression",
                      "operator": "typeof",
                      "prefix": true,
                      "argument": {
                        "type": "Identifier",
                        "name": "global"
                      }
                    },
                    "operator": "===",
                    "right": {
                      "type": "Literal",
                      "value": "undefined"
                    }
                  },
                  "consequent": {
                    "type": "Identifier",
                    "name": "self"
                  },
                  "alternate": {
                    "type": "Identifier",
                    "name": "global"
                  }
                }
              }]
            },
            "helper-set": {
              "type": "Program",
              "body": [{
                "type": "ExpressionStatement",
                "expression": {
                  "type": "FunctionExpression",
                  "id": {
                    "type": "Identifier",
                    "name": "set"
                  },
                  "generator": false,
                  "expression": false,
                  "params": [{
                    "type": "Identifier",
                    "name": "object"
                  }, {
                    "type": "Identifier",
                    "name": "property"
                  }, {
                    "type": "Identifier",
                    "name": "value"
                  }, {
                    "type": "Identifier",
                    "name": "receiver"
                  }],
                  "body": {
                    "type": "BlockStatement",
                    "body": [{
                      "type": "VariableDeclaration",
                      "declarations": [{
                        "type": "VariableDeclarator",
                        "id": {
                          "type": "Identifier",
                          "name": "desc"
                        },
                        "init": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "MemberExpression",
                            "object": {
                              "type": "Identifier",
                              "name": "Object"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "getOwnPropertyDescriptor"
                            },
                            "computed": false
                          },
                          "arguments": [{
                            "type": "Identifier",
                            "name": "object"
                          }, {
                            "type": "Identifier",
                            "name": "property"
                          }]
                        }
                      }],
                      "kind": "var"
                    }, {
                      "type": "IfStatement",
                      "test": {
                        "type": "BinaryExpression",
                        "left": {
                          "type": "Identifier",
                          "name": "desc"
                        },
                        "operator": "===",
                        "right": {
                          "type": "Identifier",
                          "name": "undefined"
                        }
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [{
                          "type": "VariableDeclaration",
                          "declarations": [{
                            "type": "VariableDeclarator",
                            "id": {
                              "type": "Identifier",
                              "name": "parent"
                            },
                            "init": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "MemberExpression",
                                "object": {
                                  "type": "Identifier",
                                  "name": "Object"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "getPrototypeOf"
                                },
                                "computed": false
                              },
                              "arguments": [{
                                "type": "Identifier",
                                "name": "object"
                              }]
                            }
                          }],
                          "kind": "var"
                        }, {
                          "type": "IfStatement",
                          "test": {
                            "type": "BinaryExpression",
                            "left": {
                              "type": "Identifier",
                              "name": "parent"
                            },
                            "operator": "!==",
                            "right": {
                              "type": "Literal",
                              "value": null,
                              "rawValue": null
                            }
                          },
                          "consequent": {
                            "type": "BlockStatement",
                            "body": [{
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "set"
                                },
                                "arguments": [{
                                  "type": "Identifier",
                                  "name": "parent"
                                }, {
                                  "type": "Identifier",
                                  "name": "property"
                                }, {
                                  "type": "Identifier",
                                  "name": "value"
                                }, {
                                  "type": "Identifier",
                                  "name": "receiver"
                                }]
                              }
                            }]
                          },
                          "alternate": null
                        }]
                      },
                      "alternate": {
                        "type": "IfStatement",
                        "test": {
                          "type": "LogicalExpression",
                          "left": {
                            "type": "BinaryExpression",
                            "left": {
                              "type": "Literal",
                              "value": "value"
                            },
                            "operator": "in",
                            "right": {
                              "type": "Identifier",
                              "name": "desc"
                            }
                          },
                          "operator": "&&",
                          "right": {
                            "type": "MemberExpression",
                            "object": {
                              "type": "Identifier",
                              "name": "desc"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "writable"
                            },
                            "computed": false
                          }
                        },
                        "consequent": {
                          "type": "BlockStatement",
                          "body": [{
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "AssignmentExpression",
                              "operator": "=",
                              "left": {
                                "type": "MemberExpression",
                                "object": {
                                  "type": "Identifier",
                                  "name": "desc"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "value"
                                },
                                "computed": false
                              },
                              "right": {
                                "type": "Identifier",
                                "name": "value"
                              }
                            }
                          }]
                        },
                        "alternate": {
                          "type": "BlockStatement",
                          "body": [{
                            "type": "VariableDeclaration",
                            "declarations": [{
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "Identifier",
                                "name": "setter"
                              },
                              "init": {
                                "type": "MemberExpression",
                                "object": {
                                  "type": "Identifier",
                                  "name": "desc"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "set"
                                },
                                "computed": false
                              }
                            }],
                            "kind": "var"
                          }, {
                            "type": "IfStatement",
                            "test": {
                              "type": "BinaryExpression",
                              "left": {
                                "type": "Identifier",
                                "name": "setter"
                              },
                              "operator": "!==",
                              "right": {
                                "type": "Identifier",
                                "name": "undefined"
                              }
                            },
                            "consequent": {
                              "type": "BlockStatement",
                              "body": [{
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "MemberExpression",
                                    "object": {
                                      "type": "Identifier",
                                      "name": "setter"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "call"
                                    },
                                    "computed": false
                                  },
                                  "arguments": [{
                                    "type": "Identifier",
                                    "name": "receiver"
                                  }, {
                                    "type": "Identifier",
                                    "name": "value"
                                  }]
                                }
                              }]
                            },
                            "alternate": null
                          }]
                        }
                      }
                    }, {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "Identifier",
                        "name": "value"
                      }
                    }]
                  },
                  "parenthesizedExpression": true
                }
              }]
            },
            "helper-slice": {
              "type": "Program",
              "body": [{
                "type": "ExpressionStatement",
                "expression": {
                  "type": "MemberExpression",
                  "object": {
                    "type": "MemberExpression",
                    "object": {
                      "type": "Identifier",
                      "name": "Array"
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "prototype"
                    },
                    "computed": false
                  },
                  "property": {
                    "type": "Identifier",
                    "name": "slice"
                  },
                  "computed": false
                }
              }]
            },
            "helper-sliced-to-array-loose": {
              "type": "Program",
              "body": [{
                "type": "ExpressionStatement",
                "expression": {
                  "type": "FunctionExpression",
                  "id": null,
                  "generator": false,
                  "expression": false,
                  "params": [{
                    "type": "Identifier",
                    "name": "arr"
                  }, {
                    "type": "Identifier",
                    "name": "i"
                  }],
                  "body": {
                    "type": "BlockStatement",
                    "body": [{
                      "type": "IfStatement",
                      "test": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "MemberExpression",
                          "object": {
                            "type": "Identifier",
                            "name": "Array"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "isArray"
                          },
                          "computed": false
                        },
                        "arguments": [{
                          "type": "Identifier",
                          "name": "arr"
                        }]
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [{
                          "type": "ReturnStatement",
                          "argument": {
                            "type": "Identifier",
                            "name": "arr"
                          }
                        }]
                      },
                      "alternate": {
                        "type": "IfStatement",
                        "test": {
                          "type": "BinaryExpression",
                          "left": {
                            "type": "MemberExpression",
                            "object": {
                              "type": "Identifier",
                              "name": "Symbol"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "iterator"
                            },
                            "computed": false
                          },
                          "operator": "in",
                          "right": {
                            "type": "CallExpression",
                            "callee": {
                              "type": "Identifier",
                              "name": "Object"
                            },
                            "arguments": [{
                              "type": "Identifier",
                              "name": "arr"
                            }]
                          }
                        },
                        "consequent": {
                          "type": "BlockStatement",
                          "body": [{
                            "type": "VariableDeclaration",
                            "declarations": [{
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "Identifier",
                                "name": "_arr"
                              },
                              "init": {
                                "type": "ArrayExpression",
                                "elements": []
                              }
                            }],
                            "kind": "var"
                          }, {
                            "type": "ForStatement",
                            "init": {
                              "type": "VariableDeclaration",
                              "declarations": [{
                                "type": "VariableDeclarator",
                                "id": {
                                  "type": "Identifier",
                                  "name": "_iterator"
                                },
                                "init": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "MemberExpression",
                                    "object": {
                                      "type": "Identifier",
                                      "name": "arr"
                                    },
                                    "property": {
                                      "type": "MemberExpression",
                                      "object": {
                                        "type": "Identifier",
                                        "name": "Symbol"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "iterator"
                                      },
                                      "computed": false
                                    },
                                    "computed": true
                                  },
                                  "arguments": []
                                }
                              }, {
                                "type": "VariableDeclarator",
                                "id": {
                                  "type": "Identifier",
                                  "name": "_step"
                                },
                                "init": null
                              }],
                              "kind": "var"
                            },
                            "test": {
                              "type": "UnaryExpression",
                              "operator": "!",
                              "prefix": true,
                              "argument": {
                                "type": "MemberExpression",
                                "object": {
                                  "type": "AssignmentExpression",
                                  "operator": "=",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "_step"
                                  },
                                  "right": {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "MemberExpression",
                                      "object": {
                                        "type": "Identifier",
                                        "name": "_iterator"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "next"
                                      },
                                      "computed": false
                                    },
                                    "arguments": []
                                  },
                                  "parenthesizedExpression": true
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "done"
                                },
                                "computed": false
                              }
                            },
                            "update": null,
                            "body": {
                              "type": "BlockStatement",
                              "body": [{
                                "type": "ExpressionStatement",
                                "expression": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "MemberExpression",
                                    "object": {
                                      "type": "Identifier",
                                      "name": "_arr"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "push"
                                    },
                                    "computed": false
                                  },
                                  "arguments": [{
                                    "type": "MemberExpression",
                                    "object": {
                                      "type": "Identifier",
                                      "name": "_step"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "value"
                                    },
                                    "computed": false
                                  }]
                                }
                              }, {
                                "type": "IfStatement",
                                "test": {
                                  "type": "LogicalExpression",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "i"
                                  },
                                  "operator": "&&",
                                  "right": {
                                    "type": "BinaryExpression",
                                    "left": {
                                      "type": "MemberExpression",
                                      "object": {
                                        "type": "Identifier",
                                        "name": "_arr"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "length"
                                      },
                                      "computed": false
                                    },
                                    "operator": "===",
                                    "right": {
                                      "type": "Identifier",
                                      "name": "i"
                                    }
                                  }
                                },
                                "consequent": {
                                  "type": "BreakStatement",
                                  "label": null
                                },
                                "alternate": null
                              }]
                            }
                          }, {
                            "type": "ReturnStatement",
                            "argument": {
                              "type": "Identifier",
                              "name": "_arr"
                            }
                          }]
                        },
                        "alternate": {
                          "type": "BlockStatement",
                          "body": [{
                            "type": "ThrowStatement",
                            "argument": {
                              "type": "NewExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "TypeError"
                              },
                              "arguments": [{
                                "type": "Literal",
                                "value": "Invalid attempt to destructure non-iterable instance"
                              }]
                            }
                          }]
                        }
                      }
                    }]
                  },
                  "parenthesizedExpression": true
                }
              }]
            },
            "helper-sliced-to-array": {
              "type": "Program",
              "body": [{
                "type": "ExpressionStatement",
                "expression": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "FunctionExpression",
                    "id": null,
                    "generator": false,
                    "expression": false,
                    "params": [],
                    "body": {
                      "type": "BlockStatement",
                      "body": [{
                        "type": "FunctionDeclaration",
                        "id": {
                          "type": "Identifier",
                          "name": "sliceIterator",
                          "leadingComments": null
                        },
                        "generator": false,
                        "expression": false,
                        "params": [{
                          "type": "Identifier",
                          "name": "arr"
                        }, {
                          "type": "Identifier",
                          "name": "i"
                        }],
                        "body": {
                          "type": "BlockStatement",
                          "body": [{
                            "type": "VariableDeclaration",
                            "declarations": [{
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "Identifier",
                                "name": "_arr",
                                "leadingComments": null
                              },
                              "init": {
                                "type": "ArrayExpression",
                                "elements": []
                              },
                              "leadingComments": null
                            }],
                            "kind": "var"
                          }, {
                            "type": "VariableDeclaration",
                            "declarations": [{
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "Identifier",
                                "name": "_n"
                              },
                              "init": {
                                "type": "Literal",
                                "value": true
                              }
                            }],
                            "kind": "var"
                          }, {
                            "type": "VariableDeclaration",
                            "declarations": [{
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "Identifier",
                                "name": "_d"
                              },
                              "init": {
                                "type": "Literal",
                                "value": false
                              }
                            }],
                            "kind": "var"
                          }, {
                            "type": "VariableDeclaration",
                            "declarations": [{
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "Identifier",
                                "name": "_e"
                              },
                              "init": {
                                "type": "Identifier",
                                "name": "undefined"
                              }
                            }],
                            "kind": "var"
                          }, {
                            "type": "TryStatement",
                            "block": {
                              "type": "BlockStatement",
                              "body": [{
                                "type": "ForStatement",
                                "init": {
                                  "type": "VariableDeclaration",
                                  "declarations": [{
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "Identifier",
                                      "name": "_i"
                                    },
                                    "init": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "MemberExpression",
                                        "object": {
                                          "type": "Identifier",
                                          "name": "arr"
                                        },
                                        "property": {
                                          "type": "MemberExpression",
                                          "object": {
                                            "type": "Identifier",
                                            "name": "Symbol"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "iterator"
                                          },
                                          "computed": false
                                        },
                                        "computed": true
                                      },
                                      "arguments": []
                                    }
                                  }, {
                                    "type": "VariableDeclarator",
                                    "id": {
                                      "type": "Identifier",
                                      "name": "_s"
                                    },
                                    "init": null
                                  }],
                                  "kind": "var"
                                },
                                "test": {
                                  "type": "UnaryExpression",
                                  "operator": "!",
                                  "prefix": true,
                                  "argument": {
                                    "type": "AssignmentExpression",
                                    "operator": "=",
                                    "left": {
                                      "type": "Identifier",
                                      "name": "_n"
                                    },
                                    "right": {
                                      "type": "MemberExpression",
                                      "object": {
                                        "type": "AssignmentExpression",
                                        "operator": "=",
                                        "left": {
                                          "type": "Identifier",
                                          "name": "_s"
                                        },
                                        "right": {
                                          "type": "CallExpression",
                                          "callee": {
                                            "type": "MemberExpression",
                                            "object": {
                                              "type": "Identifier",
                                              "name": "_i"
                                            },
                                            "property": {
                                              "type": "Identifier",
                                              "name": "next"
                                            },
                                            "computed": false
                                          },
                                          "arguments": []
                                        },
                                        "parenthesizedExpression": true
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "done"
                                      },
                                      "computed": false
                                    },
                                    "parenthesizedExpression": true
                                  }
                                },
                                "update": {
                                  "type": "AssignmentExpression",
                                  "operator": "=",
                                  "left": {
                                    "type": "Identifier",
                                    "name": "_n"
                                  },
                                  "right": {
                                    "type": "Literal",
                                    "value": true
                                  }
                                },
                                "body": {
                                  "type": "BlockStatement",
                                  "body": [{
                                    "type": "ExpressionStatement",
                                    "expression": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "MemberExpression",
                                        "object": {
                                          "type": "Identifier",
                                          "name": "_arr"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "push"
                                        },
                                        "computed": false
                                      },
                                      "arguments": [{
                                        "type": "MemberExpression",
                                        "object": {
                                          "type": "Identifier",
                                          "name": "_s"
                                        },
                                        "property": {
                                          "type": "Identifier",
                                          "name": "value"
                                        },
                                        "computed": false
                                      }]
                                    }
                                  }, {
                                    "type": "IfStatement",
                                    "test": {
                                      "type": "LogicalExpression",
                                      "left": {
                                        "type": "Identifier",
                                        "name": "i"
                                      },
                                      "operator": "&&",
                                      "right": {
                                        "type": "BinaryExpression",
                                        "left": {
                                          "type": "MemberExpression",
                                          "object": {
                                            "type": "Identifier",
                                            "name": "_arr"
                                          },
                                          "property": {
                                            "type": "Identifier",
                                            "name": "length"
                                          },
                                          "computed": false
                                        },
                                        "operator": "===",
                                        "right": {
                                          "type": "Identifier",
                                          "name": "i"
                                        }
                                      }
                                    },
                                    "consequent": {
                                      "type": "BreakStatement",
                                      "label": null
                                    },
                                    "alternate": null
                                  }]
                                }
                              }]
                            },
                            "handler": {
                              "type": "CatchClause",
                              "param": {
                                "type": "Identifier",
                                "name": "err"
                              },
                              "body": {
                                "type": "BlockStatement",
                                "body": [{
                                  "type": "ExpressionStatement",
                                  "expression": {
                                    "type": "AssignmentExpression",
                                    "operator": "=",
                                    "left": {
                                      "type": "Identifier",
                                      "name": "_d"
                                    },
                                    "right": {
                                      "type": "Literal",
                                      "value": true
                                    }
                                  }
                                }, {
                                  "type": "ExpressionStatement",
                                  "expression": {
                                    "type": "AssignmentExpression",
                                    "operator": "=",
                                    "left": {
                                      "type": "Identifier",
                                      "name": "_e"
                                    },
                                    "right": {
                                      "type": "Identifier",
                                      "name": "err"
                                    }
                                  }
                                }]
                              }
                            },
                            "guardedHandlers": [],
                            "finalizer": {
                              "type": "BlockStatement",
                              "body": [{
                                "type": "TryStatement",
                                "block": {
                                  "type": "BlockStatement",
                                  "body": [{
                                    "type": "IfStatement",
                                    "test": {
                                      "type": "LogicalExpression",
                                      "left": {
                                        "type": "UnaryExpression",
                                        "operator": "!",
                                        "prefix": true,
                                        "argument": {
                                          "type": "Identifier",
                                          "name": "_n"
                                        }
                                      },
                                      "operator": "&&",
                                      "right": {
                                        "type": "MemberExpression",
                                        "object": {
                                          "type": "Identifier",
                                          "name": "_i"
                                        },
                                        "property": {
                                          "type": "Literal",
                                          "value": "return"
                                        },
                                        "computed": true
                                      }
                                    },
                                    "consequent": {
                                      "type": "ExpressionStatement",
                                      "expression": {
                                        "type": "CallExpression",
                                        "callee": {
                                          "type": "MemberExpression",
                                          "object": {
                                            "type": "Identifier",
                                            "name": "_i"
                                          },
                                          "property": {
                                            "type": "Literal",
                                            "value": "return"
                                          },
                                          "computed": true
                                        },
                                        "arguments": []
                                      }
                                    },
                                    "alternate": null
                                  }]
                                },
                                "handler": null,
                                "guardedHandlers": [],
                                "finalizer": {
                                  "type": "BlockStatement",
                                  "body": [{
                                    "type": "IfStatement",
                                    "test": {
                                      "type": "Identifier",
                                      "name": "_d"
                                    },
                                    "consequent": {
                                      "type": "ThrowStatement",
                                      "argument": {
                                        "type": "Identifier",
                                        "name": "_e"
                                      }
                                    },
                                    "alternate": null
                                  }]
                                }
                              }]
                            }
                          }, {
                            "type": "ReturnStatement",
                            "argument": {
                              "type": "Identifier",
                              "name": "_arr"
                            }
                          }]
                        }
                      }, {
                        "type": "ReturnStatement",
                        "argument": {
                          "type": "FunctionExpression",
                          "id": null,
                          "generator": false,
                          "expression": false,
                          "params": [{
                            "type": "Identifier",
                            "name": "arr"
                          }, {
                            "type": "Identifier",
                            "name": "i"
                          }],
                          "body": {
                            "type": "BlockStatement",
                            "body": [{
                              "type": "IfStatement",
                              "test": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "MemberExpression",
                                  "object": {
                                    "type": "Identifier",
                                    "name": "Array"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "isArray"
                                  },
                                  "computed": false
                                },
                                "arguments": [{
                                  "type": "Identifier",
                                  "name": "arr"
                                }]
                              },
                              "consequent": {
                                "type": "BlockStatement",
                                "body": [{
                                  "type": "ReturnStatement",
                                  "argument": {
                                    "type": "Identifier",
                                    "name": "arr"
                                  }
                                }]
                              },
                              "alternate": {
                                "type": "IfStatement",
                                "test": {
                                  "type": "BinaryExpression",
                                  "left": {
                                    "type": "MemberExpression",
                                    "object": {
                                      "type": "Identifier",
                                      "name": "Symbol"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "iterator"
                                    },
                                    "computed": false
                                  },
                                  "operator": "in",
                                  "right": {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "Identifier",
                                      "name": "Object"
                                    },
                                    "arguments": [{
                                      "type": "Identifier",
                                      "name": "arr"
                                    }]
                                  }
                                },
                                "consequent": {
                                  "type": "BlockStatement",
                                  "body": [{
                                    "type": "ReturnStatement",
                                    "argument": {
                                      "type": "CallExpression",
                                      "callee": {
                                        "type": "Identifier",
                                        "name": "sliceIterator"
                                      },
                                      "arguments": [{
                                        "type": "Identifier",
                                        "name": "arr"
                                      }, {
                                        "type": "Identifier",
                                        "name": "i"
                                      }]
                                    }
                                  }]
                                },
                                "alternate": {
                                  "type": "BlockStatement",
                                  "body": [{
                                    "type": "ThrowStatement",
                                    "argument": {
                                      "type": "NewExpression",
                                      "callee": {
                                        "type": "Identifier",
                                        "name": "TypeError"
                                      },
                                      "arguments": [{
                                        "type": "Literal",
                                        "value": "Invalid attempt to destructure non-iterable instance"
                                      }]
                                    }
                                  }]
                                }
                              }
                            }]
                          }
                        }
                      }]
                    },
                    "parenthesizedExpression": true
                  },
                  "arguments": []
                }
              }]
            },
            "helper-tagged-template-literal-loose": {
              "type": "Program",
              "body": [{
                "type": "ExpressionStatement",
                "expression": {
                  "type": "FunctionExpression",
                  "id": null,
                  "generator": false,
                  "expression": false,
                  "params": [{
                    "type": "Identifier",
                    "name": "strings"
                  }, {
                    "type": "Identifier",
                    "name": "raw"
                  }],
                  "body": {
                    "type": "BlockStatement",
                    "body": [{
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "AssignmentExpression",
                        "operator": "=",
                        "left": {
                          "type": "MemberExpression",
                          "object": {
                            "type": "Identifier",
                            "name": "strings"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "raw"
                          },
                          "computed": false
                        },
                        "right": {
                          "type": "Identifier",
                          "name": "raw"
                        }
                      }
                    }, {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "Identifier",
                        "name": "strings"
                      }
                    }]
                  },
                  "parenthesizedExpression": true
                }
              }]
            },
            "helper-tagged-template-literal": {
              "type": "Program",
              "body": [{
                "type": "ExpressionStatement",
                "expression": {
                  "type": "FunctionExpression",
                  "id": null,
                  "generator": false,
                  "expression": false,
                  "params": [{
                    "type": "Identifier",
                    "name": "strings"
                  }, {
                    "type": "Identifier",
                    "name": "raw"
                  }],
                  "body": {
                    "type": "BlockStatement",
                    "body": [{
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "MemberExpression",
                          "object": {
                            "type": "Identifier",
                            "name": "Object"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "freeze"
                          },
                          "computed": false
                        },
                        "arguments": [{
                          "type": "CallExpression",
                          "callee": {
                            "type": "MemberExpression",
                            "object": {
                              "type": "Identifier",
                              "name": "Object"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "defineProperties"
                            },
                            "computed": false
                          },
                          "arguments": [{
                            "type": "Identifier",
                            "name": "strings"
                          }, {
                            "type": "ObjectExpression",
                            "properties": [{
                              "type": "Property",
                              "method": false,
                              "shorthand": false,
                              "computed": false,
                              "key": {
                                "type": "Identifier",
                                "name": "raw"
                              },
                              "value": {
                                "type": "ObjectExpression",
                                "properties": [{
                                  "type": "Property",
                                  "method": false,
                                  "shorthand": false,
                                  "computed": false,
                                  "key": {
                                    "type": "Identifier",
                                    "name": "value"
                                  },
                                  "value": {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "MemberExpression",
                                      "object": {
                                        "type": "Identifier",
                                        "name": "Object"
                                      },
                                      "property": {
                                        "type": "Identifier",
                                        "name": "freeze"
                                      },
                                      "computed": false
                                    },
                                    "arguments": [{
                                      "type": "Identifier",
                                      "name": "raw"
                                    }]
                                  },
                                  "kind": "init"
                                }]
                              },
                              "kind": "init"
                            }]
                          }]
                        }]
                      }
                    }]
                  },
                  "parenthesizedExpression": true
                }
              }]
            },
            "helper-temporal-assert-defined": {
              "type": "Program",
              "body": [{
                "type": "ExpressionStatement",
                "expression": {
                  "type": "FunctionExpression",
                  "id": null,
                  "generator": false,
                  "expression": false,
                  "params": [{
                    "type": "Identifier",
                    "name": "val"
                  }, {
                    "type": "Identifier",
                    "name": "name"
                  }, {
                    "type": "Identifier",
                    "name": "undef"
                  }],
                  "body": {
                    "type": "BlockStatement",
                    "body": [{
                      "type": "IfStatement",
                      "test": {
                        "type": "BinaryExpression",
                        "left": {
                          "type": "Identifier",
                          "name": "val"
                        },
                        "operator": "===",
                        "right": {
                          "type": "Identifier",
                          "name": "undef"
                        }
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [{
                          "type": "ThrowStatement",
                          "argument": {
                            "type": "NewExpression",
                            "callee": {
                              "type": "Identifier",
                              "name": "ReferenceError"
                            },
                            "arguments": [{
                              "type": "BinaryExpression",
                              "left": {
                                "type": "Identifier",
                                "name": "name"
                              },
                              "operator": "+",
                              "right": {
                                "type": "Literal",
                                "value": " is not defined - temporal dead zone"
                              }
                            }]
                          }
                        }]
                      },
                      "alternate": null
                    }, {
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "Literal",
                        "value": true
                      }
                    }]
                  },
                  "parenthesizedExpression": true
                }
              }]
            },
            "helper-temporal-undefined": {
              "type": "Program",
              "body": [{
                "type": "ExpressionStatement",
                "expression": {
                  "type": "ObjectExpression",
                  "properties": [],
                  "parenthesizedExpression": true
                }
              }]
            },
            "helper-to-array": {
              "type": "Program",
              "body": [{
                "type": "ExpressionStatement",
                "expression": {
                  "type": "FunctionExpression",
                  "id": null,
                  "generator": false,
                  "expression": false,
                  "params": [{
                    "type": "Identifier",
                    "name": "arr"
                  }],
                  "body": {
                    "type": "BlockStatement",
                    "body": [{
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "ConditionalExpression",
                        "test": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "MemberExpression",
                            "object": {
                              "type": "Identifier",
                              "name": "Array"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "isArray"
                            },
                            "computed": false
                          },
                          "arguments": [{
                            "type": "Identifier",
                            "name": "arr"
                          }]
                        },
                        "consequent": {
                          "type": "Identifier",
                          "name": "arr"
                        },
                        "alternate": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "MemberExpression",
                            "object": {
                              "type": "Identifier",
                              "name": "Array"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "from"
                            },
                            "computed": false
                          },
                          "arguments": [{
                            "type": "Identifier",
                            "name": "arr"
                          }]
                        }
                      }
                    }]
                  },
                  "parenthesizedExpression": true
                }
              }]
            },
            "helper-to-consumable-array": {
              "type": "Program",
              "body": [{
                "type": "ExpressionStatement",
                "expression": {
                  "type": "FunctionExpression",
                  "id": null,
                  "generator": false,
                  "expression": false,
                  "params": [{
                    "type": "Identifier",
                    "name": "arr"
                  }],
                  "body": {
                    "type": "BlockStatement",
                    "body": [{
                      "type": "IfStatement",
                      "test": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "MemberExpression",
                          "object": {
                            "type": "Identifier",
                            "name": "Array"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "isArray"
                          },
                          "computed": false
                        },
                        "arguments": [{
                          "type": "Identifier",
                          "name": "arr"
                        }]
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [{
                          "type": "ForStatement",
                          "init": {
                            "type": "VariableDeclaration",
                            "declarations": [{
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "Identifier",
                                "name": "i"
                              },
                              "init": {
                                "type": "Literal",
                                "value": 0
                              }
                            }, {
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "Identifier",
                                "name": "arr2"
                              },
                              "init": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "Array"
                                },
                                "arguments": [{
                                  "type": "MemberExpression",
                                  "object": {
                                    "type": "Identifier",
                                    "name": "arr"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "length"
                                  },
                                  "computed": false
                                }]
                              }
                            }],
                            "kind": "var"
                          },
                          "test": {
                            "type": "BinaryExpression",
                            "left": {
                              "type": "Identifier",
                              "name": "i"
                            },
                            "operator": "<",
                            "right": {
                              "type": "MemberExpression",
                              "object": {
                                "type": "Identifier",
                                "name": "arr"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "length"
                              },
                              "computed": false
                            }
                          },
                          "update": {
                            "type": "UpdateExpression",
                            "operator": "++",
                            "prefix": false,
                            "argument": {
                              "type": "Identifier",
                              "name": "i"
                            }
                          },
                          "body": {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "AssignmentExpression",
                              "operator": "=",
                              "left": {
                                "type": "MemberExpression",
                                "object": {
                                  "type": "Identifier",
                                  "name": "arr2"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "i"
                                },
                                "computed": true
                              },
                              "right": {
                                "type": "MemberExpression",
                                "object": {
                                  "type": "Identifier",
                                  "name": "arr"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "i"
                                },
                                "computed": true
                              }
                            }
                          }
                        }, {
                          "type": "ReturnStatement",
                          "argument": {
                            "type": "Identifier",
                            "name": "arr2"
                          }
                        }]
                      },
                      "alternate": {
                        "type": "BlockStatement",
                        "body": [{
                          "type": "ReturnStatement",
                          "argument": {
                            "type": "CallExpression",
                            "callee": {
                              "type": "MemberExpression",
                              "object": {
                                "type": "Identifier",
                                "name": "Array"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "from"
                              },
                              "computed": false
                            },
                            "arguments": [{
                              "type": "Identifier",
                              "name": "arr"
                            }]
                          }
                        }]
                      }
                    }]
                  },
                  "parenthesizedExpression": true
                }
              }]
            },
            "helper-typeof-react-element": {
              "type": "Program",
              "body": [{
                "type": "ExpressionStatement",
                "expression": {
                  "type": "LogicalExpression",
                  "left": {
                    "type": "LogicalExpression",
                    "left": {
                      "type": "LogicalExpression",
                      "left": {
                        "type": "BinaryExpression",
                        "left": {
                          "type": "UnaryExpression",
                          "operator": "typeof",
                          "prefix": true,
                          "argument": {
                            "type": "Identifier",
                            "name": "Symbol"
                          }
                        },
                        "operator": "===",
                        "right": {
                          "type": "Literal",
                          "value": "function"
                        }
                      },
                      "operator": "&&",
                      "right": {
                        "type": "MemberExpression",
                        "object": {
                          "type": "Identifier",
                          "name": "Symbol"
                        },
                        "property": {
                          "type": "Literal",
                          "value": "for"
                        },
                        "computed": true
                      }
                    },
                    "operator": "&&",
                    "right": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "MemberExpression",
                        "object": {
                          "type": "Identifier",
                          "name": "Symbol"
                        },
                        "property": {
                          "type": "Literal",
                          "value": "for"
                        },
                        "computed": true
                      },
                      "arguments": [{
                        "type": "Literal",
                        "value": "react.element"
                      }]
                    }
                  },
                  "operator": "||",
                  "right": {
                    "type": "Literal",
                    "value": 60103
                  }
                }
              }]
            },
            "helper-typeof": {
              "type": "Program",
              "body": [{
                "type": "ExpressionStatement",
                "expression": {
                  "type": "FunctionExpression",
                  "id": null,
                  "generator": false,
                  "expression": false,
                  "params": [{
                    "type": "Identifier",
                    "name": "obj"
                  }],
                  "body": {
                    "type": "BlockStatement",
                    "body": [{
                      "type": "ReturnStatement",
                      "argument": {
                        "type": "ConditionalExpression",
                        "test": {
                          "type": "LogicalExpression",
                          "left": {
                            "type": "Identifier",
                            "name": "obj"
                          },
                          "operator": "&&",
                          "right": {
                            "type": "BinaryExpression",
                            "left": {
                              "type": "MemberExpression",
                              "object": {
                                "type": "Identifier",
                                "name": "obj"
                              },
                              "property": {
                                "type": "Identifier",
                                "name": "constructor"
                              },
                              "computed": false
                            },
                            "operator": "===",
                            "right": {
                              "type": "Identifier",
                              "name": "Symbol"
                            }
                          }
                        },
                        "consequent": {
                          "type": "Literal",
                          "value": "symbol"
                        },
                        "alternate": {
                          "type": "UnaryExpression",
                          "operator": "typeof",
                          "prefix": true,
                          "argument": {
                            "type": "Identifier",
                            "name": "obj"
                          }
                        }
                      }
                    }]
                  },
                  "parenthesizedExpression": true
                }
              }]
            },
            "let-scoping-return": {
              "type": "Program",
              "body": [{
                "type": "IfStatement",
                "test": {
                  "type": "BinaryExpression",
                  "left": {
                    "type": "UnaryExpression",
                    "operator": "typeof",
                    "prefix": true,
                    "argument": {
                      "type": "Identifier",
                      "name": "RETURN"
                    }
                  },
                  "operator": "===",
                  "right": {
                    "type": "Literal",
                    "value": "object"
                  }
                },
                "consequent": {
                  "type": "ReturnStatement",
                  "argument": {
                    "type": "MemberExpression",
                    "object": {
                      "type": "Identifier",
                      "name": "RETURN"
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "v"
                    },
                    "computed": false
                  }
                },
                "alternate": null
              }]
            },
            "named-function": {
              "type": "Program",
              "body": [{
                "type": "ExpressionStatement",
                "expression": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "FunctionExpression",
                    "id": null,
                    "generator": false,
                    "expression": false,
                    "params": [],
                    "body": {
                      "type": "BlockStatement",
                      "body": [{
                        "type": "FunctionDeclaration",
                        "id": {
                          "type": "Identifier",
                          "name": "GET_OUTER_ID"
                        },
                        "generator": false,
                        "expression": false,
                        "params": [],
                        "body": {
                          "type": "BlockStatement",
                          "body": [{
                            "type": "ReturnStatement",
                            "argument": {
                              "type": "Identifier",
                              "name": "FUNCTION_ID"
                            }
                          }]
                        }
                      }, {
                        "type": "ReturnStatement",
                        "argument": {
                          "type": "Identifier",
                          "name": "FUNCTION"
                        }
                      }]
                    },
                    "parenthesizedExpression": true
                  },
                  "arguments": []
                }
              }]
            },
            "property-method-assignment-wrapper-generator": {
              "type": "Program",
              "body": [{
                "type": "ExpressionStatement",
                "expression": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "FunctionExpression",
                    "id": null,
                    "generator": false,
                    "expression": false,
                    "params": [{
                      "type": "Identifier",
                      "name": "FUNCTION_KEY"
                    }],
                    "body": {
                      "type": "BlockStatement",
                      "body": [{
                        "type": "FunctionDeclaration",
                        "id": {
                          "type": "Identifier",
                          "name": "FUNCTION_ID"
                        },
                        "generator": true,
                        "expression": false,
                        "params": [],
                        "body": {
                          "type": "BlockStatement",
                          "body": [{
                            "type": "ReturnStatement",
                            "argument": {
                              "type": "YieldExpression",
                              "delegate": true,
                              "argument": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "MemberExpression",
                                  "object": {
                                    "type": "Identifier",
                                    "name": "FUNCTION_KEY"
                                  },
                                  "property": {
                                    "type": "Identifier",
                                    "name": "apply"
                                  },
                                  "computed": false
                                },
                                "arguments": [{"type": "ThisExpression"}, {
                                  "type": "Identifier",
                                  "name": "arguments"
                                }]
                              }
                            }
                          }]
                        }
                      }, {
                        "type": "ExpressionStatement",
                        "expression": {
                          "type": "AssignmentExpression",
                          "operator": "=",
                          "left": {
                            "type": "MemberExpression",
                            "object": {
                              "type": "Identifier",
                              "name": "FUNCTION_ID"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "toString"
                            },
                            "computed": false
                          },
                          "right": {
                            "type": "FunctionExpression",
                            "id": null,
                            "generator": false,
                            "expression": false,
                            "params": [],
                            "body": {
                              "type": "BlockStatement",
                              "body": [{
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "MemberExpression",
                                    "object": {
                                      "type": "Identifier",
                                      "name": "FUNCTION_KEY"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "toString"
                                    },
                                    "computed": false
                                  },
                                  "arguments": []
                                }
                              }]
                            }
                          }
                        }
                      }, {
                        "type": "ReturnStatement",
                        "argument": {
                          "type": "Identifier",
                          "name": "FUNCTION_ID"
                        }
                      }]
                    },
                    "parenthesizedExpression": true
                  },
                  "arguments": [{
                    "type": "Identifier",
                    "name": "FUNCTION"
                  }]
                }
              }]
            },
            "property-method-assignment-wrapper": {
              "type": "Program",
              "body": [{
                "type": "ExpressionStatement",
                "expression": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "FunctionExpression",
                    "id": null,
                    "generator": false,
                    "expression": false,
                    "params": [{
                      "type": "Identifier",
                      "name": "FUNCTION_KEY"
                    }],
                    "body": {
                      "type": "BlockStatement",
                      "body": [{
                        "type": "FunctionDeclaration",
                        "id": {
                          "type": "Identifier",
                          "name": "FUNCTION_ID"
                        },
                        "generator": false,
                        "expression": false,
                        "params": [],
                        "body": {
                          "type": "BlockStatement",
                          "body": [{
                            "type": "ReturnStatement",
                            "argument": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "MemberExpression",
                                "object": {
                                  "type": "Identifier",
                                  "name": "FUNCTION_KEY"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "apply"
                                },
                                "computed": false
                              },
                              "arguments": [{"type": "ThisExpression"}, {
                                "type": "Identifier",
                                "name": "arguments"
                              }]
                            }
                          }]
                        }
                      }, {
                        "type": "ExpressionStatement",
                        "expression": {
                          "type": "AssignmentExpression",
                          "operator": "=",
                          "left": {
                            "type": "MemberExpression",
                            "object": {
                              "type": "Identifier",
                              "name": "FUNCTION_ID"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "toString"
                            },
                            "computed": false
                          },
                          "right": {
                            "type": "FunctionExpression",
                            "id": null,
                            "generator": false,
                            "expression": false,
                            "params": [],
                            "body": {
                              "type": "BlockStatement",
                              "body": [{
                                "type": "ReturnStatement",
                                "argument": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "MemberExpression",
                                    "object": {
                                      "type": "Identifier",
                                      "name": "FUNCTION_KEY"
                                    },
                                    "property": {
                                      "type": "Identifier",
                                      "name": "toString"
                                    },
                                    "computed": false
                                  },
                                  "arguments": []
                                }
                              }]
                            }
                          }
                        }
                      }, {
                        "type": "ReturnStatement",
                        "argument": {
                          "type": "Identifier",
                          "name": "FUNCTION_ID"
                        }
                      }]
                    },
                    "parenthesizedExpression": true
                  },
                  "arguments": [{
                    "type": "Identifier",
                    "name": "FUNCTION"
                  }]
                }
              }]
            },
            "prototype-identifier": {
              "type": "Program",
              "body": [{
                "type": "ExpressionStatement",
                "expression": {
                  "type": "MemberExpression",
                  "object": {
                    "type": "Identifier",
                    "name": "CLASS_NAME"
                  },
                  "property": {
                    "type": "Identifier",
                    "name": "prototype"
                  },
                  "computed": false
                }
              }]
            },
            "require-assign-key": {
              "type": "Program",
              "body": [{
                "type": "VariableDeclaration",
                "declarations": [{
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "Identifier",
                    "name": "VARIABLE_NAME"
                  },
                  "init": {
                    "type": "MemberExpression",
                    "object": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "require"
                      },
                      "arguments": [{
                        "type": "Identifier",
                        "name": "MODULE_NAME"
                      }]
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "KEY"
                    },
                    "computed": false
                  }
                }],
                "kind": "var"
              }]
            },
            "require": {
              "type": "Program",
              "body": [{
                "type": "ExpressionStatement",
                "expression": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "require"
                  },
                  "arguments": [{
                    "type": "Identifier",
                    "name": "MODULE_NAME"
                  }]
                }
              }]
            },
            "rest": {
              "type": "Program",
              "body": [{
                "type": "ForStatement",
                "init": {
                  "type": "VariableDeclaration",
                  "declarations": [{
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "LEN"
                    },
                    "init": {
                      "type": "MemberExpression",
                      "object": {
                        "type": "Identifier",
                        "name": "ARGUMENTS"
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "length"
                      },
                      "computed": false
                    }
                  }, {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "ARRAY"
                    },
                    "init": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "Array"
                      },
                      "arguments": [{
                        "type": "Identifier",
                        "name": "ARRAY_LEN"
                      }]
                    }
                  }, {
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "KEY"
                    },
                    "init": {
                      "type": "Identifier",
                      "name": "START"
                    }
                  }],
                  "kind": "var"
                },
                "test": {
                  "type": "BinaryExpression",
                  "left": {
                    "type": "Identifier",
                    "name": "KEY"
                  },
                  "operator": "<",
                  "right": {
                    "type": "Identifier",
                    "name": "LEN"
                  }
                },
                "update": {
                  "type": "UpdateExpression",
                  "operator": "++",
                  "prefix": false,
                  "argument": {
                    "type": "Identifier",
                    "name": "KEY"
                  }
                },
                "body": {
                  "type": "BlockStatement",
                  "body": [{
                    "type": "ExpressionStatement",
                    "expression": {
                      "type": "AssignmentExpression",
                      "operator": "=",
                      "left": {
                        "type": "MemberExpression",
                        "object": {
                          "type": "Identifier",
                          "name": "ARRAY"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "ARRAY_KEY"
                        },
                        "computed": true
                      },
                      "right": {
                        "type": "MemberExpression",
                        "object": {
                          "type": "Identifier",
                          "name": "ARGUMENTS"
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "KEY"
                        },
                        "computed": true
                      }
                    }
                  }]
                }
              }]
            },
            "self-contained-helpers-head": {
              "type": "Program",
              "body": [{
                "type": "ExpressionStatement",
                "expression": {
                  "type": "AssignmentExpression",
                  "operator": "=",
                  "left": {
                    "type": "MemberExpression",
                    "object": {
                      "type": "Identifier",
                      "name": "exports"
                    },
                    "property": {
                      "type": "Literal",
                      "value": "default"
                    },
                    "computed": true
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "HELPER"
                  }
                }
              }, {
                "type": "ExpressionStatement",
                "expression": {
                  "type": "AssignmentExpression",
                  "operator": "=",
                  "left": {
                    "type": "MemberExpression",
                    "object": {
                      "type": "Identifier",
                      "name": "exports"
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "__esModule"
                    },
                    "computed": false
                  },
                  "right": {
                    "type": "Literal",
                    "value": true
                  }
                }
              }]
            },
            "system": {
              "type": "Program",
              "body": [{
                "type": "ExpressionStatement",
                "expression": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "MemberExpression",
                    "object": {
                      "type": "Identifier",
                      "name": "System"
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "register"
                    },
                    "computed": false
                  },
                  "arguments": [{
                    "type": "Identifier",
                    "name": "MODULE_NAME"
                  }, {
                    "type": "Identifier",
                    "name": "MODULE_DEPENDENCIES"
                  }, {
                    "type": "FunctionExpression",
                    "id": null,
                    "generator": false,
                    "expression": false,
                    "params": [{
                      "type": "Identifier",
                      "name": "EXPORT_IDENTIFIER"
                    }],
                    "body": {
                      "type": "BlockStatement",
                      "body": [{
                        "type": "ReturnStatement",
                        "argument": {
                          "type": "ObjectExpression",
                          "properties": [{
                            "type": "Property",
                            "method": false,
                            "shorthand": false,
                            "computed": false,
                            "key": {
                              "type": "Identifier",
                              "name": "setters"
                            },
                            "value": {
                              "type": "Identifier",
                              "name": "SETTERS"
                            },
                            "kind": "init"
                          }, {
                            "type": "Property",
                            "method": false,
                            "shorthand": false,
                            "computed": false,
                            "key": {
                              "type": "Identifier",
                              "name": "execute"
                            },
                            "value": {
                              "type": "Identifier",
                              "name": "EXECUTE"
                            },
                            "kind": "init"
                          }]
                        }
                      }]
                    }
                  }]
                }
              }]
            },
            "tail-call-body": {
              "type": "Program",
              "body": [{
                "type": "BlockStatement",
                "body": [{
                  "type": "VariableDeclaration",
                  "declarations": [{
                    "type": "VariableDeclarator",
                    "id": {
                      "type": "Identifier",
                      "name": "AGAIN_ID"
                    },
                    "init": {
                      "type": "Literal",
                      "value": true
                    }
                  }],
                  "kind": "var"
                }, {
                  "type": "LabeledStatement",
                  "body": {
                    "type": "WhileStatement",
                    "test": {
                      "type": "Identifier",
                      "name": "AGAIN_ID"
                    },
                    "body": {
                      "type": "ExpressionStatement",
                      "expression": {
                        "type": "Identifier",
                        "name": "BLOCK"
                      }
                    }
                  },
                  "label": {
                    "type": "Identifier",
                    "name": "FUNCTION_ID"
                  }
                }]
              }]
            },
            "test-exports": {
              "type": "Program",
              "body": [{
                "type": "ExpressionStatement",
                "expression": {
                  "type": "BinaryExpression",
                  "left": {
                    "type": "UnaryExpression",
                    "operator": "typeof",
                    "prefix": true,
                    "argument": {
                      "type": "Identifier",
                      "name": "exports"
                    }
                  },
                  "operator": "!==",
                  "right": {
                    "type": "Literal",
                    "value": "undefined"
                  }
                }
              }]
            },
            "test-module": {
              "type": "Program",
              "body": [{
                "type": "ExpressionStatement",
                "expression": {
                  "type": "BinaryExpression",
                  "left": {
                    "type": "UnaryExpression",
                    "operator": "typeof",
                    "prefix": true,
                    "argument": {
                      "type": "Identifier",
                      "name": "module"
                    }
                  },
                  "operator": "!==",
                  "right": {
                    "type": "Literal",
                    "value": "undefined"
                  }
                }
              }]
            },
            "umd-commonjs-strict": {
              "type": "Program",
              "body": [{
                "type": "ExpressionStatement",
                "expression": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "FunctionExpression",
                    "id": null,
                    "generator": false,
                    "expression": false,
                    "params": [{
                      "type": "Identifier",
                      "name": "root"
                    }, {
                      "type": "Identifier",
                      "name": "factory"
                    }],
                    "body": {
                      "type": "BlockStatement",
                      "body": [{
                        "type": "IfStatement",
                        "test": {
                          "type": "LogicalExpression",
                          "left": {
                            "type": "BinaryExpression",
                            "left": {
                              "type": "UnaryExpression",
                              "operator": "typeof",
                              "prefix": true,
                              "argument": {
                                "type": "Identifier",
                                "name": "define"
                              }
                            },
                            "operator": "===",
                            "right": {
                              "type": "Literal",
                              "value": "function"
                            }
                          },
                          "operator": "&&",
                          "right": {
                            "type": "MemberExpression",
                            "object": {
                              "type": "Identifier",
                              "name": "define"
                            },
                            "property": {
                              "type": "Identifier",
                              "name": "amd"
                            },
                            "computed": false
                          }
                        },
                        "consequent": {
                          "type": "BlockStatement",
                          "body": [{
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "define"
                              },
                              "arguments": [{
                                "type": "Identifier",
                                "name": "AMD_ARGUMENTS"
                              }, {
                                "type": "Identifier",
                                "name": "factory"
                              }]
                            }
                          }]
                        },
                        "alternate": {
                          "type": "IfStatement",
                          "test": {
                            "type": "BinaryExpression",
                            "left": {
                              "type": "UnaryExpression",
                              "operator": "typeof",
                              "prefix": true,
                              "argument": {
                                "type": "Identifier",
                                "name": "exports"
                              }
                            },
                            "operator": "===",
                            "right": {
                              "type": "Literal",
                              "value": "object"
                            }
                          },
                          "consequent": {
                            "type": "BlockStatement",
                            "body": [{
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "factory"
                                },
                                "arguments": [{
                                  "type": "Identifier",
                                  "name": "COMMON_ARGUMENTS"
                                }]
                              }
                            }]
                          },
                          "alternate": {
                            "type": "BlockStatement",
                            "body": [{
                              "type": "ExpressionStatement",
                              "expression": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "factory"
                                },
                                "arguments": [{
                                  "type": "Identifier",
                                  "name": "BROWSER_ARGUMENTS"
                                }]
                              }
                            }]
                          }
                        }
                      }]
                    },
                    "parenthesizedExpression": true
                  },
                  "arguments": [{
                    "type": "Identifier",
                    "name": "UMD_ROOT"
                  }, {
                    "type": "FunctionExpression",
                    "id": null,
                    "generator": false,
                    "expression": false,
                    "params": [{
                      "type": "Identifier",
                      "name": "FACTORY_PARAMETERS"
                    }],
                    "body": {
                      "type": "BlockStatement",
                      "body": [{
                        "type": "ExpressionStatement",
                        "expression": {
                          "type": "Identifier",
                          "name": "FACTORY_BODY"
                        }
                      }]
                    }
                  }]
                }
              }]
            },
            "umd-runner-body": {
              "type": "Program",
              "body": [{
                "type": "ExpressionStatement",
                "expression": {
                  "type": "FunctionExpression",
                  "id": null,
                  "generator": false,
                  "expression": false,
                  "params": [{
                    "type": "Identifier",
                    "name": "global"
                  }, {
                    "type": "Identifier",
                    "name": "factory"
                  }],
                  "body": {
                    "type": "BlockStatement",
                    "body": [{
                      "type": "IfStatement",
                      "test": {
                        "type": "LogicalExpression",
                        "left": {
                          "type": "BinaryExpression",
                          "left": {
                            "type": "UnaryExpression",
                            "operator": "typeof",
                            "prefix": true,
                            "argument": {
                              "type": "Identifier",
                              "name": "define"
                            }
                          },
                          "operator": "===",
                          "right": {
                            "type": "Literal",
                            "value": "function"
                          }
                        },
                        "operator": "&&",
                        "right": {
                          "type": "MemberExpression",
                          "object": {
                            "type": "Identifier",
                            "name": "define"
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "amd"
                          },
                          "computed": false
                        }
                      },
                      "consequent": {
                        "type": "BlockStatement",
                        "body": [{
                          "type": "ExpressionStatement",
                          "expression": {
                            "type": "CallExpression",
                            "callee": {
                              "type": "Identifier",
                              "name": "define"
                            },
                            "arguments": [{
                              "type": "Identifier",
                              "name": "AMD_ARGUMENTS"
                            }, {
                              "type": "Identifier",
                              "name": "factory"
                            }]
                          }
                        }]
                      },
                      "alternate": {
                        "type": "IfStatement",
                        "test": {
                          "type": "Identifier",
                          "name": "COMMON_TEST"
                        },
                        "consequent": {
                          "type": "BlockStatement",
                          "body": [{
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "factory"
                              },
                              "arguments": [{
                                "type": "Identifier",
                                "name": "COMMON_ARGUMENTS"
                              }]
                            }
                          }]
                        },
                        "alternate": {
                          "type": "BlockStatement",
                          "body": [{
                            "type": "VariableDeclaration",
                            "declarations": [{
                              "type": "VariableDeclarator",
                              "id": {
                                "type": "Identifier",
                                "name": "mod"
                              },
                              "init": {
                                "type": "ObjectExpression",
                                "properties": [{
                                  "type": "Property",
                                  "method": false,
                                  "shorthand": false,
                                  "computed": false,
                                  "key": {
                                    "type": "Identifier",
                                    "name": "exports"
                                  },
                                  "value": {
                                    "type": "ObjectExpression",
                                    "properties": []
                                  },
                                  "kind": "init"
                                }]
                              }
                            }],
                            "kind": "var"
                          }, {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "factory"
                              },
                              "arguments": [{
                                "type": "MemberExpression",
                                "object": {
                                  "type": "Identifier",
                                  "name": "mod"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "exports"
                                },
                                "computed": false
                              }, {
                                "type": "Identifier",
                                "name": "BROWSER_ARGUMENTS"
                              }]
                            }
                          }, {
                            "type": "ExpressionStatement",
                            "expression": {
                              "type": "AssignmentExpression",
                              "operator": "=",
                              "left": {
                                "type": "MemberExpression",
                                "object": {
                                  "type": "Identifier",
                                  "name": "global"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "GLOBAL_ARG"
                                },
                                "computed": false
                              },
                              "right": {
                                "type": "MemberExpression",
                                "object": {
                                  "type": "Identifier",
                                  "name": "mod"
                                },
                                "property": {
                                  "type": "Identifier",
                                  "name": "exports"
                                },
                                "computed": false
                              }
                            }
                          }]
                        }
                      }
                    }]
                  },
                  "parenthesizedExpression": true
                }
              }]
            }
          };
        }, {}],
        612: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          exports.parse = parse;
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {"default": obj};
          }
          var _parser = _dereq_(616);
          var _parser2 = _interopRequireDefault(_parser);
          _dereq_(621);
          _dereq_(620);
          _dereq_(618);
          _dereq_(615);
          _dereq_(619);
          _dereq_(617);
          _dereq_(614);
          var _tokenizerTypes = _dereq_(628);
          _dereq_(626);
          _dereq_(625);
          var _pluginsFlow = _dereq_(622);
          var _pluginsFlow2 = _interopRequireDefault(_pluginsFlow);
          var _pluginsJsx = _dereq_(623);
          var _pluginsJsx2 = _interopRequireDefault(_pluginsJsx);
          _parser.plugins.flow = _pluginsFlow2["default"];
          _parser.plugins.jsx = _pluginsJsx2["default"];
          function parse(input, options) {
            return new _parser2["default"](options, input).parse();
          }
          exports.tokTypes = _tokenizerTypes.types;
        }, {
          "614": 614,
          "615": 615,
          "616": 616,
          "617": 617,
          "618": 618,
          "619": 619,
          "620": 620,
          "621": 621,
          "622": 622,
          "623": 623,
          "625": 625,
          "626": 626,
          "628": 628
        }],
        613: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          exports.getOptions = getOptions;
          var defaultOptions = {
            sourceType: "script",
            allowReserved: true,
            allowReturnOutsideFunction: false,
            allowImportExportEverywhere: false,
            plugins: {},
            features: {},
            strictMode: null
          };
          exports.defaultOptions = defaultOptions;
          function getOptions(opts) {
            var options = {};
            for (var key in defaultOptions) {
              options[key] = opts && key in opts ? opts[key] : defaultOptions[key];
            }
            return options;
          }
        }, {}],
        614: [function(_dereq_, module, exports) {
          "use strict";
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {"default": obj};
          }
          var _index = _dereq_(616);
          var _index2 = _interopRequireDefault(_index);
          function last(stack) {
            return stack[stack.length - 1];
          }
          var pp = _index2["default"].prototype;
          pp.addComment = function(comment) {
            this.state.trailingComments.push(comment);
            this.state.leadingComments.push(comment);
          };
          pp.processComment = function(node) {
            if (node.type === "Program" && node.body.length > 0)
              return;
            var stack = this.state.commentStack;
            var lastChild,
                trailingComments,
                i;
            if (this.state.trailingComments.length > 0) {
              if (this.state.trailingComments[0].start >= node.end) {
                trailingComments = this.state.trailingComments;
                this.state.trailingComments = [];
              } else {
                this.state.trailingComments.length = 0;
              }
            } else {
              var lastInStack = last(stack);
              if (stack.length > 0 && lastInStack.trailingComments && lastInStack.trailingComments[0].start >= node.end) {
                trailingComments = lastInStack.trailingComments;
                lastInStack.trailingComments = null;
              }
            }
            while (stack.length > 0 && last(stack).start >= node.start) {
              lastChild = stack.pop();
            }
            if (lastChild) {
              if (lastChild.leadingComments) {
                if (lastChild !== node && last(lastChild.leadingComments).end <= node.start) {
                  node.leadingComments = lastChild.leadingComments;
                  lastChild.leadingComments = null;
                } else {
                  for (i = lastChild.leadingComments.length - 2; i >= 0; --i) {
                    if (lastChild.leadingComments[i].end <= node.start) {
                      node.leadingComments = lastChild.leadingComments.splice(0, i + 1);
                      break;
                    }
                  }
                }
              }
            } else if (this.state.leadingComments.length > 0) {
              if (last(this.state.leadingComments).end <= node.start) {
                node.leadingComments = this.state.leadingComments;
                this.state.leadingComments = [];
              } else {
                for (i = 0; i < this.state.leadingComments.length; i++) {
                  if (this.state.leadingComments[i].end > node.start) {
                    break;
                  }
                }
                node.leadingComments = this.state.leadingComments.slice(0, i);
                if (node.leadingComments.length === 0) {
                  node.leadingComments = null;
                }
                trailingComments = this.state.leadingComments.slice(i);
                if (trailingComments.length === 0) {
                  trailingComments = null;
                }
              }
            }
            if (trailingComments) {
              if (trailingComments.length && trailingComments[0].start >= node.start && last(trailingComments).end <= node.end) {
                node.innerComments = trailingComments;
              } else {
                node.trailingComments = trailingComments;
              }
            }
            stack.push(node);
          };
        }, {"616": 616}],
        615: [function(_dereq_, module, exports) {
          "use strict";
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {"default": obj};
          }
          var _tokenizerTypes = _dereq_(628);
          var _index = _dereq_(616);
          var _index2 = _interopRequireDefault(_index);
          var _utilIdentifier = _dereq_(629);
          var pp = _index2["default"].prototype;
          pp.checkPropClash = function(prop, propHash) {
            if (prop.computed || prop.method || prop.shorthand)
              return;
            var key = prop.key,
                name = undefined;
            switch (key.type) {
              case "Identifier":
                name = key.name;
                break;
              case "Literal":
                name = String(key.value);
                break;
              default:
                return;
            }
            var kind = prop.kind;
            if (name === "__proto__" && kind === "init") {
              if (propHash.proto)
                this.raise(key.start, "Redefinition of __proto__ property");
              propHash.proto = true;
            }
          };
          pp.parseExpression = function(noIn, refShorthandDefaultPos) {
            var startPos = this.state.start,
                startLoc = this.state.startLoc;
            var expr = this.parseMaybeAssign(noIn, refShorthandDefaultPos);
            if (this.match(_tokenizerTypes.types.comma)) {
              var node = this.startNodeAt(startPos, startLoc);
              node.expressions = [expr];
              while (this.eat(_tokenizerTypes.types.comma)) {
                node.expressions.push(this.parseMaybeAssign(noIn, refShorthandDefaultPos));
              }
              this.toReferencedList(node.expressions);
              return this.finishNode(node, "SequenceExpression");
            }
            return expr;
          };
          pp.parseMaybeAssign = function(noIn, refShorthandDefaultPos, afterLeftParse) {
            if (this.match(_tokenizerTypes.types._yield) && this.state.inGenerator) {
              return this.parseYield();
            }
            var failOnShorthandAssign = undefined;
            if (!refShorthandDefaultPos) {
              refShorthandDefaultPos = {start: 0};
              failOnShorthandAssign = true;
            } else {
              failOnShorthandAssign = false;
            }
            var startPos = this.state.start,
                startLoc = this.state.startLoc;
            if (this.match(_tokenizerTypes.types.parenL) || this.match(_tokenizerTypes.types.name)) {
              this.state.potentialArrowAt = this.state.start;
            }
            var left = this.parseMaybeConditional(noIn, refShorthandDefaultPos);
            if (afterLeftParse)
              left = afterLeftParse.call(this, left, startPos, startLoc);
            if (this.state.type.isAssign) {
              var node = this.startNodeAt(startPos, startLoc);
              node.operator = this.state.value;
              node.left = this.match(_tokenizerTypes.types.eq) ? this.toAssignable(left) : left;
              refShorthandDefaultPos.start = 0;
              this.checkLVal(left);
              if (left.parenthesizedExpression) {
                var errorMsg = undefined;
                if (left.type === "ObjectPattern") {
                  errorMsg = "`({a}) = 0` use `({a} = 0)`";
                } else if (left.type === "ArrayPattern") {
                  errorMsg = "`([a]) = 0` use `([a] = 0)`";
                }
                if (errorMsg) {
                  this.raise(left.start, "You're trying to assign to a parenthesized expression, eg. instead of " + errorMsg);
                }
              }
              this.next();
              node.right = this.parseMaybeAssign(noIn);
              return this.finishNode(node, "AssignmentExpression");
            } else if (failOnShorthandAssign && refShorthandDefaultPos.start) {
              this.unexpected(refShorthandDefaultPos.start);
            }
            return left;
          };
          pp.parseMaybeConditional = function(noIn, refShorthandDefaultPos) {
            var startPos = this.state.start,
                startLoc = this.state.startLoc;
            var expr = this.parseExprOps(noIn, refShorthandDefaultPos);
            if (refShorthandDefaultPos && refShorthandDefaultPos.start)
              return expr;
            if (this.eat(_tokenizerTypes.types.question)) {
              var node = this.startNodeAt(startPos, startLoc);
              node.test = expr;
              node.consequent = this.parseMaybeAssign();
              this.expect(_tokenizerTypes.types.colon);
              node.alternate = this.parseMaybeAssign(noIn);
              return this.finishNode(node, "ConditionalExpression");
            }
            return expr;
          };
          pp.parseExprOps = function(noIn, refShorthandDefaultPos) {
            var startPos = this.state.start,
                startLoc = this.state.startLoc;
            var expr = this.parseMaybeUnary(refShorthandDefaultPos);
            if (refShorthandDefaultPos && refShorthandDefaultPos.start) {
              return expr;
            } else {
              return this.parseExprOp(expr, startPos, startLoc, -1, noIn);
            }
          };
          pp.parseExprOp = function(left, leftStartPos, leftStartLoc, minPrec, noIn) {
            var prec = this.state.type.binop;
            if (prec != null && (!noIn || !this.match(_tokenizerTypes.types._in))) {
              if (prec > minPrec) {
                var node = this.startNodeAt(leftStartPos, leftStartLoc);
                node.left = left;
                node.operator = this.state.value;
                var op = this.state.type;
                this.next();
                var startPos = this.state.start,
                    startLoc = this.state.startLoc;
                node.right = this.parseExprOp(this.parseMaybeUnary(), startPos, startLoc, op.rightAssociative ? prec - 1 : prec, noIn);
                this.finishNode(node, op === _tokenizerTypes.types.logicalOR || op === _tokenizerTypes.types.logicalAND ? "LogicalExpression" : "BinaryExpression");
                return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, noIn);
              }
            }
            return left;
          };
          pp.parseMaybeUnary = function(refShorthandDefaultPos) {
            if (this.state.type.prefix) {
              var node = this.startNode(),
                  update = this.match(_tokenizerTypes.types.incDec);
              node.operator = this.state.value;
              node.prefix = true;
              this.next();
              node.argument = this.parseMaybeUnary();
              if (refShorthandDefaultPos && refShorthandDefaultPos.start)
                this.unexpected(refShorthandDefaultPos.start);
              if (update) {
                this.checkLVal(node.argument);
              } else if (this.strict && node.operator === "delete" && node.argument.type === "Identifier") {
                this.raise(node.start, "Deleting local variable in strict mode");
              }
              return this.finishNode(node, update ? "UpdateExpression" : "UnaryExpression");
            }
            var startPos = this.state.start,
                startLoc = this.state.startLoc;
            var expr = this.parseExprSubscripts(refShorthandDefaultPos);
            if (refShorthandDefaultPos && refShorthandDefaultPos.start)
              return expr;
            while (this.state.type.postfix && !this.canInsertSemicolon()) {
              var node = this.startNodeAt(startPos, startLoc);
              node.operator = this.state.value;
              node.prefix = false;
              node.argument = expr;
              this.checkLVal(expr);
              this.next();
              expr = this.finishNode(node, "UpdateExpression");
            }
            return expr;
          };
          pp.parseExprSubscripts = function(refShorthandDefaultPos) {
            var startPos = this.state.start,
                startLoc = this.state.startLoc;
            var expr = this.parseExprAtom(refShorthandDefaultPos);
            if (refShorthandDefaultPos && refShorthandDefaultPos.start) {
              return expr;
            } else {
              return this.parseSubscripts(expr, startPos, startLoc);
            }
          };
          pp.parseSubscripts = function(base, startPos, startLoc, noCalls) {
            for (; ; ) {
              if (!noCalls && this.eat(_tokenizerTypes.types.doubleColon)) {
                var node = this.startNodeAt(startPos, startLoc);
                node.object = base;
                node.callee = this.parseNoCallExpr();
                return this.parseSubscripts(this.finishNode(node, "BindExpression"), startPos, startLoc, noCalls);
              } else if (this.eat(_tokenizerTypes.types.dot)) {
                var node = this.startNodeAt(startPos, startLoc);
                node.object = base;
                node.property = this.parseIdent(true);
                node.computed = false;
                base = this.finishNode(node, "MemberExpression");
              } else if (this.eat(_tokenizerTypes.types.bracketL)) {
                var node = this.startNodeAt(startPos, startLoc);
                node.object = base;
                node.property = this.parseExpression();
                node.computed = true;
                this.expect(_tokenizerTypes.types.bracketR);
                base = this.finishNode(node, "MemberExpression");
              } else if (!noCalls && this.match(_tokenizerTypes.types.parenL)) {
                var possibleAsync = base.type === "Identifier" && base.name === "async" && !this.canInsertSemicolon();
                this.next();
                var node = this.startNodeAt(startPos, startLoc);
                node.callee = base;
                node.arguments = this.parseExprList(_tokenizerTypes.types.parenR, this.options.features["es7.trailingFunctionCommas"]);
                base = this.finishNode(node, "CallExpression");
                if (possibleAsync && (this.match(_tokenizerTypes.types.colon) || this.match(_tokenizerTypes.types.arrow))) {
                  base = this.parseAsyncArrowFromCallExpression(this.startNodeAt(startPos, startLoc), node);
                } else {
                  this.toReferencedList(node.arguments);
                }
              } else if (this.match(_tokenizerTypes.types.backQuote)) {
                var node = this.startNodeAt(startPos, startLoc);
                node.tag = base;
                node.quasi = this.parseTemplate();
                base = this.finishNode(node, "TaggedTemplateExpression");
              } else {
                return base;
              }
            }
          };
          pp.parseAsyncArrowFromCallExpression = function(node, call) {
            if (!this.options.features["es7.asyncFunctions"])
              this.unexpected();
            this.expect(_tokenizerTypes.types.arrow);
            return this.parseArrowExpression(node, call.arguments, true);
          };
          pp.parseNoCallExpr = function() {
            var startPos = this.state.start,
                startLoc = this.state.startLoc;
            return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);
          };
          pp.parseExprAtom = function(refShorthandDefaultPos) {
            var node = undefined,
                canBeArrow = this.state.potentialArrowAt === this.state.start;
            switch (this.state.type) {
              case _tokenizerTypes.types._super:
                if (!this.state.inFunction)
                  this.raise(this.state.start, "'super' outside of function or class");
              case _tokenizerTypes.types._this:
                var type = this.match(_tokenizerTypes.types._this) ? "ThisExpression" : "Super";
                node = this.startNode();
                this.next();
                return this.finishNode(node, type);
              case _tokenizerTypes.types._yield:
                if (this.state.inGenerator)
                  this.unexpected();
              case _tokenizerTypes.types._do:
                if (this.options.features["es7.doExpressions"]) {
                  var _node = this.startNode();
                  this.next();
                  var oldInFunction = this.state.inFunction;
                  var oldLabels = this.state.labels;
                  this.state.labels = [];
                  this.state.inFunction = false;
                  _node.body = this.parseBlock();
                  this.state.inFunction = oldInFunction;
                  this.state.labels = oldLabels;
                  return this.finishNode(_node, "DoExpression");
                }
              case _tokenizerTypes.types.name:
                node = this.startNode();
                var id = this.parseIdent(true);
                if (this.options.features["es7.asyncFunctions"]) {
                  if (id.name === "await") {
                    if (this.inAsync)
                      return this.parseAwait(node);
                  } else if (id.name === "async" && this.match(_tokenizerTypes.types._function) && !this.canInsertSemicolon()) {
                    this.next();
                    return this.parseFunction(node, false, false, true);
                  } else if (canBeArrow && id.name === "async" && this.match(_tokenizerTypes.types.name)) {
                    var params = [this.parseIdent()];
                    this.expect(_tokenizerTypes.types.arrow);
                    return this.parseArrowExpression(node, params, true);
                  }
                }
                if (canBeArrow && !this.canInsertSemicolon() && this.eat(_tokenizerTypes.types.arrow)) {
                  return this.parseArrowExpression(node, [id]);
                }
                return id;
              case _tokenizerTypes.types.regexp:
                var value = this.state.value;
                node = this.parseLiteral(value.value);
                node.regex = {
                  pattern: value.pattern,
                  flags: value.flags
                };
                return node;
              case _tokenizerTypes.types.num:
              case _tokenizerTypes.types.string:
                return this.parseLiteral(this.state.value);
              case _tokenizerTypes.types._null:
              case _tokenizerTypes.types._true:
              case _tokenizerTypes.types._false:
                node = this.startNode();
                node.rawValue = node.value = this.match(_tokenizerTypes.types._null) ? null : this.match(_tokenizerTypes.types._true);
                node.raw = this.state.type.keyword;
                this.next();
                return this.finishNode(node, "Literal");
              case _tokenizerTypes.types.parenL:
                return this.parseParenAndDistinguishExpression(null, null, canBeArrow);
              case _tokenizerTypes.types.bracketL:
                node = this.startNode();
                this.next();
                if (this.options.features["es7.comprehensions"] && this.match(_tokenizerTypes.types._for)) {
                  return this.parseComprehension(node, false);
                }
                node.elements = this.parseExprList(_tokenizerTypes.types.bracketR, true, true, refShorthandDefaultPos);
                this.toReferencedList(node.elements);
                return this.finishNode(node, "ArrayExpression");
              case _tokenizerTypes.types.braceL:
                return this.parseObj(false, refShorthandDefaultPos);
              case _tokenizerTypes.types._function:
                node = this.startNode();
                this.next();
                return this.parseFunction(node, false);
              case _tokenizerTypes.types.at:
                this.parseDecorators();
              case _tokenizerTypes.types._class:
                node = this.startNode();
                this.takeDecorators(node);
                return this.parseClass(node, false);
              case _tokenizerTypes.types._new:
                return this.parseNew();
              case _tokenizerTypes.types.backQuote:
                return this.parseTemplate();
              case _tokenizerTypes.types.doubleColon:
                node = this.startNode();
                this.next();
                node.object = null;
                var callee = node.callee = this.parseNoCallExpr();
                if (callee.type === "MemberExpression") {
                  return this.finishNode(node, "BindExpression");
                } else {
                  this.raise(callee.start, "Binding should be performed on object property.");
                }
              default:
                this.unexpected();
            }
          };
          pp.parseLiteral = function(value) {
            var node = this.startNode();
            node.rawValue = node.value = value;
            node.raw = this.input.slice(this.state.start, this.state.end);
            this.next();
            return this.finishNode(node, "Literal");
          };
          pp.parseParenExpression = function() {
            this.expect(_tokenizerTypes.types.parenL);
            var val = this.parseExpression();
            this.expect(_tokenizerTypes.types.parenR);
            return val;
          };
          pp.parseParenAndDistinguishExpression = function(startPos, startLoc, canBeArrow, isAsync) {
            startPos = startPos || this.state.start;
            startLoc = startLoc || this.state.startLoc;
            var val = undefined;
            this.next();
            if (this.options.features["es7.comprehensions"] && this.match(_tokenizerTypes.types._for)) {
              return this.parseComprehension(this.startNodeAt(startPos, startLoc), true);
            }
            var innerStartPos = this.state.start,
                innerStartLoc = this.state.startLoc;
            var exprList = [],
                first = true;
            var refShorthandDefaultPos = {start: 0},
                spreadStart = undefined,
                innerParenStart = undefined,
                optionalCommaStart = undefined;
            while (!this.match(_tokenizerTypes.types.parenR)) {
              if (first) {
                first = false;
              } else {
                this.expect(_tokenizerTypes.types.comma);
                if (this.match(_tokenizerTypes.types.parenR) && this.options.features["es7.trailingFunctionCommas"]) {
                  optionalCommaStart = this.state.start;
                  break;
                }
              }
              if (this.match(_tokenizerTypes.types.ellipsis)) {
                var spreadNodeStartPos = this.state.start,
                    spreadNodeStartLoc = this.state.startLoc;
                spreadStart = this.state.start;
                exprList.push(this.parseParenItem(this.parseRest(), spreadNodeStartLoc, spreadNodeStartPos));
                break;
              } else {
                if (this.match(_tokenizerTypes.types.parenL) && !innerParenStart) {
                  innerParenStart = this.state.start;
                }
                exprList.push(this.parseMaybeAssign(false, refShorthandDefaultPos, this.parseParenItem));
              }
            }
            var innerEndPos = this.state.start;
            var innerEndLoc = this.state.startLoc;
            this.expect(_tokenizerTypes.types.parenR);
            if (canBeArrow && !this.canInsertSemicolon() && this.eat(_tokenizerTypes.types.arrow)) {
              if (innerParenStart)
                this.unexpected(innerParenStart);
              return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList, isAsync);
            }
            if (!exprList.length) {
              if (isAsync) {
                return;
              } else {
                this.unexpected(this.state.lastTokStart);
              }
            }
            if (optionalCommaStart)
              this.unexpected(optionalCommaStart);
            if (spreadStart)
              this.unexpected(spreadStart);
            if (refShorthandDefaultPos.start)
              this.unexpected(refShorthandDefaultPos.start);
            if (exprList.length > 1) {
              val = this.startNodeAt(innerStartPos, innerStartLoc);
              val.expressions = exprList;
              this.toReferencedList(val.expressions);
              this.finishNodeAt(val, "SequenceExpression", innerEndPos, innerEndLoc);
            } else {
              val = exprList[0];
            }
            val.parenthesizedExpression = true;
            return val;
          };
          pp.parseParenItem = function(node) {
            return node;
          };
          pp.parseNew = function() {
            var node = this.startNode();
            var meta = this.parseIdent(true);
            if (this.eat(_tokenizerTypes.types.dot)) {
              node.meta = meta;
              node.property = this.parseIdent(true);
              if (node.property.name !== "target") {
                this.raise(node.property.start, "The only valid meta property for new is new.target");
              }
              return this.finishNode(node, "MetaProperty");
            }
            node.callee = this.parseNoCallExpr();
            if (this.eat(_tokenizerTypes.types.parenL)) {
              node.arguments = this.parseExprList(_tokenizerTypes.types.parenR, this.options.features["es7.trailingFunctionCommas"]);
              this.toReferencedList(node.arguments);
            } else {
              node.arguments = [];
            }
            return this.finishNode(node, "NewExpression");
          };
          pp.parseTemplateElement = function() {
            var elem = this.startNode();
            elem.value = {
              raw: this.input.slice(this.state.start, this.state.end).replace(/\r\n?/g, "\n"),
              cooked: this.state.value
            };
            this.next();
            elem.tail = this.match(_tokenizerTypes.types.backQuote);
            return this.finishNode(elem, "TemplateElement");
          };
          pp.parseTemplate = function() {
            var node = this.startNode();
            this.next();
            node.expressions = [];
            var curElt = this.parseTemplateElement();
            node.quasis = [curElt];
            while (!curElt.tail) {
              this.expect(_tokenizerTypes.types.dollarBraceL);
              node.expressions.push(this.parseExpression());
              this.expect(_tokenizerTypes.types.braceR);
              node.quasis.push(curElt = this.parseTemplateElement());
            }
            this.next();
            return this.finishNode(node, "TemplateLiteral");
          };
          pp.parseObj = function(isPattern, refShorthandDefaultPos) {
            var node = this.startNode(),
                first = true,
                propHash = Object.create(null);
            node.properties = [];
            var decorators = [];
            this.next();
            while (!this.eat(_tokenizerTypes.types.braceR)) {
              if (first) {
                first = false;
              } else {
                this.expect(_tokenizerTypes.types.comma);
                if (this.eat(_tokenizerTypes.types.braceR))
                  break;
              }
              while (this.match(_tokenizerTypes.types.at)) {
                decorators.push(this.parseDecorator());
              }
              var prop = this.startNode(),
                  isGenerator = false,
                  isAsync = false,
                  startPos = undefined,
                  startLoc = undefined;
              if (decorators.length) {
                prop.decorators = decorators;
                decorators = [];
              }
              if (this.options.features["es7.objectRestSpread"] && this.match(_tokenizerTypes.types.ellipsis)) {
                prop = this.parseSpread();
                prop.type = "SpreadProperty";
                node.properties.push(prop);
                continue;
              }
              prop.method = false;
              prop.shorthand = false;
              if (isPattern || refShorthandDefaultPos) {
                startPos = this.state.start;
                startLoc = this.state.startLoc;
              }
              if (!isPattern) {
                isGenerator = this.eat(_tokenizerTypes.types.star);
              }
              if (!isPattern && this.options.features["es7.asyncFunctions"] && this.isContextual("async")) {
                if (isGenerator)
                  this.unexpected();
                var asyncId = this.parseIdent();
                if (this.match(_tokenizerTypes.types.colon) || this.match(_tokenizerTypes.types.parenL) || this.match(_tokenizerTypes.types.braceR)) {
                  prop.key = asyncId;
                } else {
                  isAsync = true;
                  this.parsePropertyName(prop);
                }
              } else {
                this.parsePropertyName(prop);
              }
              this.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, refShorthandDefaultPos);
              this.checkPropClash(prop, propHash);
              node.properties.push(this.finishNode(prop, "Property"));
            }
            if (decorators.length) {
              this.raise(this.state.start, "You have trailing decorators with no property");
            }
            return this.finishNode(node, isPattern ? "ObjectPattern" : "ObjectExpression");
          };
          pp.parseObjPropValue = function(prop, startPos, startLoc, isGenerator, isAsync, isPattern, refShorthandDefaultPos) {
            if (this.eat(_tokenizerTypes.types.colon)) {
              prop.value = isPattern ? this.parseMaybeDefault(this.state.start, this.state.startLoc) : this.parseMaybeAssign(false, refShorthandDefaultPos);
              prop.kind = "init";
            } else if (this.match(_tokenizerTypes.types.parenL)) {
              if (isPattern)
                this.unexpected();
              prop.kind = "init";
              prop.method = true;
              prop.value = this.parseMethod(isGenerator, isAsync);
            } else if (!prop.computed && prop.key.type === "Identifier" && (prop.key.name === "get" || prop.key.name === "set") && !this.match(_tokenizerTypes.types.comma) && !this.match(_tokenizerTypes.types.braceR)) {
              if (isGenerator || isAsync || isPattern)
                this.unexpected();
              prop.kind = prop.key.name;
              this.parsePropertyName(prop);
              prop.value = this.parseMethod(false);
              var paramCount = prop.kind === "get" ? 0 : 1;
              if (prop.value.params.length !== paramCount) {
                var start = prop.value.start;
                if (prop.kind === "get")
                  this.raise(start, "getter should have no params");
                else
                  this.raise(start, "setter should have exactly one param");
              }
            } else if (!prop.computed && prop.key.type === "Identifier") {
              prop.kind = "init";
              if (isPattern) {
                if (this.isKeyword(prop.key.name) || this.strict && (_utilIdentifier.reservedWords.strictBind(prop.key.name) || _utilIdentifier.reservedWords.strict(prop.key.name)) || !this.options.allowReserved && this.isReservedWord(prop.key.name))
                  this.raise(prop.key.start, "Binding " + prop.key.name);
                prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key.__clone());
              } else if (this.match(_tokenizerTypes.types.eq) && refShorthandDefaultPos) {
                if (!refShorthandDefaultPos.start)
                  refShorthandDefaultPos.start = this.state.start;
                prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key.__clone());
              } else {
                prop.value = prop.key.__clone();
              }
              prop.shorthand = true;
            } else {
              this.unexpected();
            }
          };
          pp.parsePropertyName = function(prop) {
            if (this.eat(_tokenizerTypes.types.bracketL)) {
              prop.computed = true;
              prop.key = this.parseMaybeAssign();
              this.expect(_tokenizerTypes.types.bracketR);
              return prop.key;
            } else {
              prop.computed = false;
              return prop.key = this.match(_tokenizerTypes.types.num) || this.match(_tokenizerTypes.types.string) ? this.parseExprAtom() : this.parseIdent(true);
            }
          };
          pp.initFunction = function(node, isAsync) {
            node.id = null;
            node.generator = false;
            node.expression = false;
            if (this.options.features["es7.asyncFunctions"]) {
              node.async = !!isAsync;
            }
          };
          pp.parseMethod = function(isGenerator, isAsync) {
            var node = this.startNode();
            this.initFunction(node, isAsync);
            this.expect(_tokenizerTypes.types.parenL);
            node.params = this.parseBindingList(_tokenizerTypes.types.parenR, false, this.options.features["es7.trailingFunctionCommas"]);
            node.generator = isGenerator;
            this.parseFunctionBody(node);
            return this.finishNode(node, "FunctionExpression");
          };
          pp.parseArrowExpression = function(node, params, isAsync) {
            this.initFunction(node, isAsync);
            node.params = this.toAssignableList(params, true);
            this.parseFunctionBody(node, true);
            return this.finishNode(node, "ArrowFunctionExpression");
          };
          pp.parseFunctionBody = function(node, allowExpression) {
            var isExpression = allowExpression && !this.match(_tokenizerTypes.types.braceL);
            var oldInAsync = this.inAsync;
            this.inAsync = node.async;
            if (isExpression) {
              node.body = this.parseMaybeAssign();
              node.expression = true;
            } else {
              var oldInFunc = this.state.inFunction,
                  oldInGen = this.state.inGenerator,
                  oldLabels = this.state.labels;
              this.state.inFunction = true;
              this.state.inGenerator = node.generator;
              this.state.labels = [];
              node.body = this.parseBlock(true);
              node.expression = false;
              this.state.inFunction = oldInFunc;
              this.state.inGenerator = oldInGen;
              this.state.labels = oldLabels;
            }
            this.inAsync = oldInAsync;
            if (this.strict || !isExpression && node.body.body.length && this.isUseStrict(node.body.body[0])) {
              var nameHash = Object.create(null),
                  oldStrict = this.strict;
              this.strict = true;
              if (node.id) {
                this.checkLVal(node.id, true);
              }
              var _arr = node.params;
              for (var _i = 0; _i < _arr.length; _i++) {
                var param = _arr[_i];
                this.checkLVal(param, true, nameHash);
              }
              this.strict = oldStrict;
            }
          };
          pp.parseExprList = function(close, allowTrailingComma, allowEmpty, refShorthandDefaultPos) {
            var elts = [],
                first = true;
            while (!this.eat(close)) {
              if (first) {
                first = false;
              } else {
                this.expect(_tokenizerTypes.types.comma);
                if (allowTrailingComma && this.eat(close))
                  break;
              }
              elts.push(this.parseExprListItem(allowEmpty, refShorthandDefaultPos));
            }
            return elts;
          };
          pp.parseExprListItem = function(allowEmpty, refShorthandDefaultPos) {
            var elt = undefined;
            if (allowEmpty && this.match(_tokenizerTypes.types.comma)) {
              elt = null;
            } else if (this.match(_tokenizerTypes.types.ellipsis)) {
              elt = this.parseSpread(refShorthandDefaultPos);
            } else {
              elt = this.parseMaybeAssign(false, refShorthandDefaultPos);
            }
            return elt;
          };
          pp.parseIdent = function(liberal) {
            var node = this.startNode();
            if (this.match(_tokenizerTypes.types.name)) {
              if (!liberal && (!this.options.allowReserved && this.isReservedWord(this.state.value) || this.strict && _utilIdentifier.reservedWords.strict(this.state.value)))
                this.raise(this.state.start, "The keyword '" + this.state.value + "' is reserved");
              node.name = this.state.value;
            } else if (liberal && this.state.type.keyword) {
              node.name = this.state.type.keyword;
            } else {
              this.unexpected();
            }
            this.next();
            return this.finishNode(node, "Identifier");
          };
          pp.parseAwait = function(node) {
            if (this.eat(_tokenizerTypes.types.semi) || this.canInsertSemicolon()) {
              this.unexpected();
            }
            node.all = this.eat(_tokenizerTypes.types.star);
            node.argument = this.parseMaybeUnary();
            return this.finishNode(node, "AwaitExpression");
          };
          pp.parseYield = function() {
            var node = this.startNode();
            this.next();
            if (this.match(_tokenizerTypes.types.semi) || this.canInsertSemicolon() || !this.match(_tokenizerTypes.types.star) && !this.state.type.startsExpr) {
              node.delegate = false;
              node.argument = null;
            } else {
              node.delegate = this.eat(_tokenizerTypes.types.star);
              node.argument = this.parseMaybeAssign();
            }
            return this.finishNode(node, "YieldExpression");
          };
          pp.parseComprehension = function(node, isGenerator) {
            node.blocks = [];
            while (this.match(_tokenizerTypes.types._for)) {
              var block = this.startNode();
              this.next();
              this.expect(_tokenizerTypes.types.parenL);
              block.left = this.parseBindingAtom();
              this.checkLVal(block.left, true);
              this.expectContextual("of");
              block.right = this.parseExpression();
              this.expect(_tokenizerTypes.types.parenR);
              node.blocks.push(this.finishNode(block, "ComprehensionBlock"));
            }
            node.filter = this.eat(_tokenizerTypes.types._if) ? this.parseParenExpression() : null;
            node.body = this.parseExpression();
            this.expect(isGenerator ? _tokenizerTypes.types.parenR : _tokenizerTypes.types.bracketR);
            node.generator = isGenerator;
            return this.finishNode(node, "ComprehensionExpression");
          };
        }, {
          "616": 616,
          "628": 628,
          "629": 629
        }],
        616: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {"default": obj};
          }
          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }
          function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
              throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
              }});
            if (superClass)
              Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
          }
          var _utilIdentifier = _dereq_(629);
          var _options = _dereq_(613);
          var _tokenizer = _dereq_(626);
          var _tokenizer2 = _interopRequireDefault(_tokenizer);
          var plugins = {};
          exports.plugins = plugins;
          var Parser = (function(_Tokenizer) {
            _inherits(Parser, _Tokenizer);
            function Parser(options, input) {
              _classCallCheck(this, Parser);
              _Tokenizer.call(this, input);
              this.options = _options.getOptions(options);
              this.isKeyword = _utilIdentifier.isKeyword;
              this.isReservedWord = _utilIdentifier.reservedWords[6];
              this.input = input;
              this.loadPlugins(this.options.plugins);
              this.inModule = this.options.sourceType === "module";
              this.strict = this.options.strictMode === false ? false : this.inModule;
              if (this.state.pos === 0 && this.input[0] === "#" && this.input[1] === "!") {
                this.skipLineComment(2);
              }
            }
            Parser.prototype.extend = function extend(name, f) {
              this[name] = f(this[name]);
            };
            Parser.prototype.loadPlugins = function loadPlugins(plugins) {
              for (var _name in plugins) {
                var plugin = exports.plugins[_name];
                if (!plugin)
                  throw new Error("Plugin '" + _name + "' not found");
                plugin(this, plugins[_name]);
              }
            };
            Parser.prototype.parse = function parse() {
              var file = this.startNode();
              var program = this.startNode();
              this.nextToken();
              return this.parseTopLevel(file, program);
            };
            return Parser;
          })(_tokenizer2["default"]);
          exports["default"] = Parser;
        }, {
          "613": 613,
          "626": 626,
          "629": 629
        }],
        617: [function(_dereq_, module, exports) {
          "use strict";
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {"default": obj};
          }
          var _utilLocation = _dereq_(630);
          var _index = _dereq_(616);
          var _index2 = _interopRequireDefault(_index);
          var pp = _index2["default"].prototype;
          pp.raise = function(pos, message) {
            var loc = _utilLocation.getLineInfo(this.input, pos);
            message += " (" + loc.line + ":" + loc.column + ")";
            var err = new SyntaxError(message);
            err.pos = pos;
            err.loc = loc;
            throw err;
          };
        }, {
          "616": 616,
          "630": 630
        }],
        618: [function(_dereq_, module, exports) {
          "use strict";
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {"default": obj};
          }
          var _tokenizerTypes = _dereq_(628);
          var _index = _dereq_(616);
          var _index2 = _interopRequireDefault(_index);
          var _utilIdentifier = _dereq_(629);
          var pp = _index2["default"].prototype;
          pp.toAssignable = function(node, isBinding) {
            if (node) {
              switch (node.type) {
                case "Identifier":
                case "ObjectPattern":
                case "ArrayPattern":
                case "AssignmentPattern":
                  break;
                case "ObjectExpression":
                  node.type = "ObjectPattern";
                  var _arr = node.properties;
                  for (var _i = 0; _i < _arr.length; _i++) {
                    var prop = _arr[_i];
                    if (prop.type === "SpreadProperty")
                      continue;
                    if (prop.kind !== "init")
                      this.raise(prop.key.start, "Object pattern can't contain getter or setter");
                    this.toAssignable(prop.value, isBinding);
                  }
                  break;
                case "ArrayExpression":
                  node.type = "ArrayPattern";
                  this.toAssignableList(node.elements, isBinding);
                  break;
                case "AssignmentExpression":
                  if (node.operator === "=") {
                    node.type = "AssignmentPattern";
                    delete node.operator;
                  } else {
                    this.raise(node.left.end, "Only '=' operator can be used for specifying default value.");
                  }
                  break;
                case "MemberExpression":
                  if (!isBinding)
                    break;
                default:
                  this.raise(node.start, "Assigning to rvalue");
              }
            }
            return node;
          };
          pp.toAssignableList = function(exprList, isBinding) {
            var end = exprList.length;
            if (end) {
              var last = exprList[end - 1];
              if (last && last.type === "RestElement") {
                --end;
              } else if (last && last.type === "SpreadElement") {
                last.type = "RestElement";
                var arg = last.argument;
                this.toAssignable(arg, isBinding);
                if (arg.type !== "Identifier" && arg.type !== "MemberExpression" && arg.type !== "ArrayPattern") {
                  this.unexpected(arg.start);
                }
                --end;
              }
            }
            for (var i = 0; i < end; i++) {
              var elt = exprList[i];
              if (elt)
                this.toAssignable(elt, isBinding);
            }
            return exprList;
          };
          pp.toReferencedList = function(exprList) {
            return exprList;
          };
          pp.parseSpread = function(refShorthandDefaultPos) {
            var node = this.startNode();
            this.next();
            node.argument = this.parseMaybeAssign(refShorthandDefaultPos);
            return this.finishNode(node, "SpreadElement");
          };
          pp.parseRest = function() {
            var node = this.startNode();
            this.next();
            node.argument = this.match(_tokenizerTypes.types.name) || this.match(_tokenizerTypes.types.bracketL) ? this.parseBindingAtom() : this.unexpected();
            return this.finishNode(node, "RestElement");
          };
          pp.parseBindingAtom = function() {
            switch (this.state.type) {
              case _tokenizerTypes.types.name:
                return this.parseIdent();
              case _tokenizerTypes.types.bracketL:
                var node = this.startNode();
                this.next();
                node.elements = this.parseBindingList(_tokenizerTypes.types.bracketR, true, true);
                return this.finishNode(node, "ArrayPattern");
              case _tokenizerTypes.types.braceL:
                return this.parseObj(true);
              default:
                this.unexpected();
            }
          };
          pp.parseBindingList = function(close, allowEmpty, allowTrailingComma) {
            var elts = [],
                first = true;
            while (!this.eat(close)) {
              if (first)
                first = false;
              else
                this.expect(_tokenizerTypes.types.comma);
              if (allowEmpty && this.match(_tokenizerTypes.types.comma)) {
                elts.push(null);
              } else if (allowTrailingComma && this.eat(close)) {
                break;
              } else if (this.match(_tokenizerTypes.types.ellipsis)) {
                elts.push(this.parseAssignableListItemTypes(this.parseRest()));
                this.expect(close);
                break;
              } else {
                var left = this.parseMaybeDefault();
                this.parseAssignableListItemTypes(left);
                elts.push(this.parseMaybeDefault(null, null, left));
              }
            }
            return elts;
          };
          pp.parseAssignableListItemTypes = function(param) {
            return param;
          };
          pp.parseMaybeDefault = function(startPos, startLoc, left) {
            startLoc = startLoc || this.state.startLoc;
            startPos = startPos || this.state.start;
            left = left || this.parseBindingAtom();
            if (!this.eat(_tokenizerTypes.types.eq))
              return left;
            var node = this.startNodeAt(startPos, startLoc);
            node.left = left;
            node.right = this.parseMaybeAssign();
            return this.finishNode(node, "AssignmentPattern");
          };
          pp.checkLVal = function(expr, isBinding, checkClashes) {
            switch (expr.type) {
              case "Identifier":
                if (this.strict && (_utilIdentifier.reservedWords.strictBind(expr.name) || _utilIdentifier.reservedWords.strict(expr.name)))
                  this.raise(expr.start, (isBinding ? "Binding " : "Assigning to ") + expr.name + " in strict mode");
                if (checkClashes) {
                  if (checkClashes[expr.name]) {
                    this.raise(expr.start, "Argument name clash in strict mode");
                  } else {
                    checkClashes[expr.name] = true;
                  }
                }
                break;
              case "MemberExpression":
                if (isBinding)
                  this.raise(expr.start, (isBinding ? "Binding" : "Assigning to") + " member expression");
                break;
              case "ObjectPattern":
                var _arr2 = expr.properties;
                for (var _i2 = 0; _i2 < _arr2.length; _i2++) {
                  var prop = _arr2[_i2];
                  if (prop.type === "Property")
                    prop = prop.value;
                  this.checkLVal(prop, isBinding, checkClashes);
                }
                break;
              case "ArrayPattern":
                var _arr3 = expr.elements;
                for (var _i3 = 0; _i3 < _arr3.length; _i3++) {
                  var elem = _arr3[_i3];
                  if (elem)
                    this.checkLVal(elem, isBinding, checkClashes);
                }
                break;
              case "AssignmentPattern":
                this.checkLVal(expr.left, isBinding, checkClashes);
                break;
              case "SpreadProperty":
              case "RestElement":
                this.checkLVal(expr.argument, isBinding, checkClashes);
                break;
              default:
                this.raise(expr.start, (isBinding ? "Binding" : "Assigning to") + " rvalue");
            }
          };
        }, {
          "616": 616,
          "628": 628,
          "629": 629
        }],
        619: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {"default": obj};
          }
          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }
          var _index = _dereq_(616);
          var _index2 = _interopRequireDefault(_index);
          var _utilLocation = _dereq_(630);
          var pp = _index2["default"].prototype;
          var Node = (function() {
            function Node(parser, pos, loc) {
              _classCallCheck(this, Node);
              this.type = "";
              this.start = pos;
              this.end = 0;
              this.loc = new _utilLocation.SourceLocation(loc);
            }
            Node.prototype.__clone = function __clone() {
              var node2 = new Node();
              for (var key in this)
                node2[key] = this[key];
              return node2;
            };
            return Node;
          })();
          exports.Node = Node;
          pp.startNode = function() {
            return new Node(this, this.state.start, this.state.startLoc);
          };
          pp.startNodeAt = function(pos, loc) {
            return new Node(this, pos, loc);
          };
          function finishNodeAt(node, type, pos, loc) {
            node.type = type;
            node.end = pos;
            node.loc.end = loc;
            this.processComment(node);
            return node;
          }
          pp.finishNode = function(node, type) {
            return finishNodeAt.call(this, node, type, this.state.lastTokEnd, this.state.lastTokEndLoc);
          };
          pp.finishNodeAt = function(node, type, pos, loc) {
            return finishNodeAt.call(this, node, type, pos, loc);
          };
        }, {
          "616": 616,
          "630": 630
        }],
        620: [function(_dereq_, module, exports) {
          "use strict";
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {"default": obj};
          }
          var _tokenizerTypes = _dereq_(628);
          var _index = _dereq_(616);
          var _index2 = _interopRequireDefault(_index);
          var _utilWhitespace = _dereq_(631);
          var pp = _index2["default"].prototype;
          pp.parseTopLevel = function(file, program) {
            program.sourceType = this.options.sourceType;
            program.body = [];
            var first = true;
            while (!this.match(_tokenizerTypes.types.eof)) {
              var stmt = this.parseStatement(true, true);
              program.body.push(stmt);
              if (first) {
                if (this.isUseStrict(stmt))
                  this.setStrict(true);
                first = false;
              }
            }
            this.next();
            file.program = this.finishNode(program, "Program");
            file.comments = this.state.comments;
            file.tokens = this.state.tokens;
            return this.finishNode(file, "File");
          };
          var loopLabel = {kind: "loop"},
              switchLabel = {kind: "switch"};
          pp.parseStatement = function(declaration, topLevel) {
            if (this.match(_tokenizerTypes.types.at)) {
              this.parseDecorators(true);
            }
            var starttype = this.state.type,
                node = this.startNode();
            switch (starttype) {
              case _tokenizerTypes.types._break:
              case _tokenizerTypes.types._continue:
                return this.parseBreakContinueStatement(node, starttype.keyword);
              case _tokenizerTypes.types._debugger:
                return this.parseDebuggerStatement(node);
              case _tokenizerTypes.types._do:
                return this.parseDoStatement(node);
              case _tokenizerTypes.types._for:
                return this.parseForStatement(node);
              case _tokenizerTypes.types._function:
                if (!declaration)
                  this.unexpected();
                return this.parseFunctionStatement(node);
              case _tokenizerTypes.types._class:
                if (!declaration)
                  this.unexpected();
                this.takeDecorators(node);
                return this.parseClass(node, true);
              case _tokenizerTypes.types._if:
                return this.parseIfStatement(node);
              case _tokenizerTypes.types._return:
                return this.parseReturnStatement(node);
              case _tokenizerTypes.types._switch:
                return this.parseSwitchStatement(node);
              case _tokenizerTypes.types._throw:
                return this.parseThrowStatement(node);
              case _tokenizerTypes.types._try:
                return this.parseTryStatement(node);
              case _tokenizerTypes.types._let:
              case _tokenizerTypes.types._const:
                if (!declaration)
                  this.unexpected();
              case _tokenizerTypes.types._var:
                return this.parseVarStatement(node, starttype);
              case _tokenizerTypes.types._while:
                return this.parseWhileStatement(node);
              case _tokenizerTypes.types._with:
                return this.parseWithStatement(node);
              case _tokenizerTypes.types.braceL:
                return this.parseBlock();
              case _tokenizerTypes.types.semi:
                return this.parseEmptyStatement(node);
              case _tokenizerTypes.types._export:
              case _tokenizerTypes.types._import:
                if (!this.options.allowImportExportEverywhere) {
                  if (!topLevel)
                    this.raise(this.state.start, "'import' and 'export' may only appear at the top level");
                  if (!this.inModule)
                    this.raise(this.state.start, "'import' and 'export' may appear only with 'sourceType: module'");
                }
                return starttype === _tokenizerTypes.types._import ? this.parseImport(node) : this.parseExport(node);
              case _tokenizerTypes.types.name:
                if (this.options.features["es7.asyncFunctions"] && this.state.value === "async") {
                  var state = this.state.clone();
                  this.next();
                  if (this.match(_tokenizerTypes.types._function) && !this.canInsertSemicolon()) {
                    this.expect(_tokenizerTypes.types._function);
                    return this.parseFunction(node, true, false, true);
                  } else {
                    this.state = state;
                  }
                }
              default:
                var maybeName = this.state.value,
                    expr = this.parseExpression();
                if (starttype === _tokenizerTypes.types.name && expr.type === "Identifier" && this.eat(_tokenizerTypes.types.colon)) {
                  return this.parseLabeledStatement(node, maybeName, expr);
                } else {
                  return this.parseExpressionStatement(node, expr);
                }
            }
          };
          pp.takeDecorators = function(node) {
            if (this.state.decorators.length) {
              node.decorators = this.state.decorators;
              this.state.decorators = [];
            }
          };
          pp.parseDecorators = function(allowExport) {
            while (this.match(_tokenizerTypes.types.at)) {
              this.state.decorators.push(this.parseDecorator());
            }
            if (allowExport && this.match(_tokenizerTypes.types._export)) {
              return;
            }
            if (!this.match(_tokenizerTypes.types._class)) {
              this.raise(this.state.start, "Leading decorators must be attached to a class declaration");
            }
          };
          pp.parseDecorator = function() {
            if (!this.options.features["es7.decorators"]) {
              this.unexpected();
            }
            var node = this.startNode();
            this.next();
            node.expression = this.parseMaybeAssign();
            return this.finishNode(node, "Decorator");
          };
          pp.parseBreakContinueStatement = function(node, keyword) {
            var isBreak = keyword === "break";
            this.next();
            if (this.eat(_tokenizerTypes.types.semi) || this.canInsertSemicolon()) {
              node.label = null;
            } else if (!this.match(_tokenizerTypes.types.name)) {
              this.unexpected();
            } else {
              node.label = this.parseIdent();
              this.semicolon();
            }
            for (var i = 0; i < this.state.labels.length; ++i) {
              var lab = this.state.labels[i];
              if (node.label == null || lab.name === node.label.name) {
                if (lab.kind != null && (isBreak || lab.kind === "loop"))
                  break;
                if (node.label && isBreak)
                  break;
              }
            }
            if (i === this.state.labels.length)
              this.raise(node.start, "Unsyntactic " + keyword);
            return this.finishNode(node, isBreak ? "BreakStatement" : "ContinueStatement");
          };
          pp.parseDebuggerStatement = function(node) {
            this.next();
            this.semicolon();
            return this.finishNode(node, "DebuggerStatement");
          };
          pp.parseDoStatement = function(node) {
            this.next();
            this.state.labels.push(loopLabel);
            node.body = this.parseStatement(false);
            this.state.labels.pop();
            this.expect(_tokenizerTypes.types._while);
            node.test = this.parseParenExpression();
            this.eat(_tokenizerTypes.types.semi);
            return this.finishNode(node, "DoWhileStatement");
          };
          pp.parseForStatement = function(node) {
            this.next();
            this.state.labels.push(loopLabel);
            this.expect(_tokenizerTypes.types.parenL);
            if (this.match(_tokenizerTypes.types.semi)) {
              return this.parseFor(node, null);
            }
            if (this.match(_tokenizerTypes.types._var) || this.match(_tokenizerTypes.types._let) || this.match(_tokenizerTypes.types._const)) {
              var _init = this.startNode(),
                  varKind = this.state.type;
              this.next();
              this.parseVar(_init, true, varKind);
              this.finishNode(_init, "VariableDeclaration");
              if ((this.match(_tokenizerTypes.types._in) || this.isContextual("of")) && _init.declarations.length === 1 && !(varKind !== _tokenizerTypes.types._var && _init.declarations[0].init))
                return this.parseForIn(node, _init);
              return this.parseFor(node, _init);
            }
            var refShorthandDefaultPos = {start: 0};
            var init = this.parseExpression(true, refShorthandDefaultPos);
            if (this.match(_tokenizerTypes.types._in) || this.isContextual("of")) {
              this.toAssignable(init);
              this.checkLVal(init);
              return this.parseForIn(node, init);
            } else if (refShorthandDefaultPos.start) {
              this.unexpected(refShorthandDefaultPos.start);
            }
            return this.parseFor(node, init);
          };
          pp.parseFunctionStatement = function(node) {
            this.next();
            return this.parseFunction(node, true);
          };
          pp.parseIfStatement = function(node) {
            this.next();
            node.test = this.parseParenExpression();
            node.consequent = this.parseStatement(false);
            node.alternate = this.eat(_tokenizerTypes.types._else) ? this.parseStatement(false) : null;
            return this.finishNode(node, "IfStatement");
          };
          pp.parseReturnStatement = function(node) {
            if (!this.state.inFunction && !this.options.allowReturnOutsideFunction) {
              this.raise(this.state.start, "'return' outside of function");
            }
            this.next();
            if (this.eat(_tokenizerTypes.types.semi) || this.canInsertSemicolon()) {
              node.argument = null;
            } else {
              node.argument = this.parseExpression();
              this.semicolon();
            }
            return this.finishNode(node, "ReturnStatement");
          };
          pp.parseSwitchStatement = function(node) {
            this.next();
            node.discriminant = this.parseParenExpression();
            node.cases = [];
            this.expect(_tokenizerTypes.types.braceL);
            this.state.labels.push(switchLabel);
            for (var cur,
                sawDefault; !this.match(_tokenizerTypes.types.braceR); ) {
              if (this.match(_tokenizerTypes.types._case) || this.match(_tokenizerTypes.types._default)) {
                var isCase = this.match(_tokenizerTypes.types._case);
                if (cur)
                  this.finishNode(cur, "SwitchCase");
                node.cases.push(cur = this.startNode());
                cur.consequent = [];
                this.next();
                if (isCase) {
                  cur.test = this.parseExpression();
                } else {
                  if (sawDefault)
                    this.raise(this.state.lastTokStart, "Multiple default clauses");
                  sawDefault = true;
                  cur.test = null;
                }
                this.expect(_tokenizerTypes.types.colon);
              } else {
                if (!cur)
                  this.unexpected();
                cur.consequent.push(this.parseStatement(true));
              }
            }
            if (cur)
              this.finishNode(cur, "SwitchCase");
            this.next();
            this.state.labels.pop();
            return this.finishNode(node, "SwitchStatement");
          };
          pp.parseThrowStatement = function(node) {
            this.next();
            if (_utilWhitespace.lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start)))
              this.raise(this.state.lastTokEnd, "Illegal newline after throw");
            node.argument = this.parseExpression();
            this.semicolon();
            return this.finishNode(node, "ThrowStatement");
          };
          var empty = [];
          pp.parseTryStatement = function(node) {
            this.next();
            node.block = this.parseBlock();
            node.handler = null;
            if (this.match(_tokenizerTypes.types._catch)) {
              var clause = this.startNode();
              this.next();
              this.expect(_tokenizerTypes.types.parenL);
              clause.param = this.parseBindingAtom();
              this.checkLVal(clause.param, true);
              this.expect(_tokenizerTypes.types.parenR);
              clause.body = this.parseBlock();
              node.handler = this.finishNode(clause, "CatchClause");
            }
            node.guardedHandlers = empty;
            node.finalizer = this.eat(_tokenizerTypes.types._finally) ? this.parseBlock() : null;
            if (!node.handler && !node.finalizer) {
              this.raise(node.start, "Missing catch or finally clause");
            }
            return this.finishNode(node, "TryStatement");
          };
          pp.parseVarStatement = function(node, kind) {
            this.next();
            this.parseVar(node, false, kind);
            this.semicolon();
            return this.finishNode(node, "VariableDeclaration");
          };
          pp.parseWhileStatement = function(node) {
            this.next();
            node.test = this.parseParenExpression();
            this.state.labels.push(loopLabel);
            node.body = this.parseStatement(false);
            this.state.labels.pop();
            return this.finishNode(node, "WhileStatement");
          };
          pp.parseWithStatement = function(node) {
            if (this.strict)
              this.raise(this.state.start, "'with' in strict mode");
            this.next();
            node.object = this.parseParenExpression();
            node.body = this.parseStatement(false);
            return this.finishNode(node, "WithStatement");
          };
          pp.parseEmptyStatement = function(node) {
            this.next();
            return this.finishNode(node, "EmptyStatement");
          };
          pp.parseLabeledStatement = function(node, maybeName, expr) {
            var _arr = this.state.labels;
            for (var _i = 0; _i < _arr.length; _i++) {
              var label = _arr[_i];
              if (label.name === maybeName) {
                this.raise(expr.start, "Label '" + maybeName + "' is already declared");
              }
            }
            var kind = this.state.type.isLoop ? "loop" : this.match(_tokenizerTypes.types._switch) ? "switch" : null;
            for (var i = this.state.labels.length - 1; i >= 0; i--) {
              var label = this.state.labels[i];
              if (label.statementStart === node.start) {
                label.statementStart = this.state.start;
                label.kind = kind;
              } else {
                break;
              }
            }
            this.state.labels.push({
              name: maybeName,
              kind: kind,
              statementStart: this.state.start
            });
            node.body = this.parseStatement(true);
            this.state.labels.pop();
            node.label = expr;
            return this.finishNode(node, "LabeledStatement");
          };
          pp.parseExpressionStatement = function(node, expr) {
            node.expression = expr;
            this.semicolon();
            return this.finishNode(node, "ExpressionStatement");
          };
          pp.parseBlock = function(allowStrict) {
            var node = this.startNode(),
                first = true,
                oldStrict = undefined;
            node.body = [];
            this.expect(_tokenizerTypes.types.braceL);
            while (!this.eat(_tokenizerTypes.types.braceR)) {
              var stmt = this.parseStatement(true);
              node.body.push(stmt);
              if (first && allowStrict && this.isUseStrict(stmt)) {
                oldStrict = this.strict;
                this.setStrict(this.strict = true);
              }
              first = false;
            }
            if (oldStrict === false)
              this.setStrict(false);
            return this.finishNode(node, "BlockStatement");
          };
          pp.parseFor = function(node, init) {
            node.init = init;
            this.expect(_tokenizerTypes.types.semi);
            node.test = this.match(_tokenizerTypes.types.semi) ? null : this.parseExpression();
            this.expect(_tokenizerTypes.types.semi);
            node.update = this.match(_tokenizerTypes.types.parenR) ? null : this.parseExpression();
            this.expect(_tokenizerTypes.types.parenR);
            node.body = this.parseStatement(false);
            this.state.labels.pop();
            return this.finishNode(node, "ForStatement");
          };
          pp.parseForIn = function(node, init) {
            var type = this.match(_tokenizerTypes.types._in) ? "ForInStatement" : "ForOfStatement";
            this.next();
            node.left = init;
            node.right = this.parseExpression();
            this.expect(_tokenizerTypes.types.parenR);
            node.body = this.parseStatement(false);
            this.state.labels.pop();
            return this.finishNode(node, type);
          };
          pp.parseVar = function(node, isFor, kind) {
            node.declarations = [];
            node.kind = kind.keyword;
            for (; ; ) {
              var decl = this.startNode();
              this.parseVarHead(decl);
              if (this.eat(_tokenizerTypes.types.eq)) {
                decl.init = this.parseMaybeAssign(isFor);
              } else if (kind === _tokenizerTypes.types._const && !(this.match(_tokenizerTypes.types._in) || this.isContextual("of"))) {
                this.unexpected();
              } else if (decl.id.type !== "Identifier" && !(isFor && (this.match(_tokenizerTypes.types._in) || this.isContextual("of")))) {
                this.raise(this.state.lastTokEnd, "Complex binding patterns require an initialization value");
              } else {
                decl.init = null;
              }
              node.declarations.push(this.finishNode(decl, "VariableDeclarator"));
              if (!this.eat(_tokenizerTypes.types.comma))
                break;
            }
            return node;
          };
          pp.parseVarHead = function(decl) {
            decl.id = this.parseBindingAtom();
            this.checkLVal(decl.id, true);
          };
          pp.parseFunction = function(node, isStatement, allowExpressionBody, isAsync) {
            this.initFunction(node, isAsync);
            node.generator = this.eat(_tokenizerTypes.types.star);
            if (isStatement || this.match(_tokenizerTypes.types.name)) {
              node.id = this.parseIdent();
            }
            this.parseFunctionParams(node);
            this.parseFunctionBody(node, allowExpressionBody);
            return this.finishNode(node, isStatement ? "FunctionDeclaration" : "FunctionExpression");
          };
          pp.parseFunctionParams = function(node) {
            this.expect(_tokenizerTypes.types.parenL);
            node.params = this.parseBindingList(_tokenizerTypes.types.parenR, false, this.options.features["es7.trailingFunctionCommas"]);
          };
          pp.parseClass = function(node, isStatement) {
            this.next();
            this.parseClassId(node, isStatement);
            this.parseClassSuper(node);
            var classBody = this.startNode();
            var hadConstructor = false;
            classBody.body = [];
            this.expect(_tokenizerTypes.types.braceL);
            var decorators = [];
            while (!this.eat(_tokenizerTypes.types.braceR)) {
              if (this.eat(_tokenizerTypes.types.semi))
                continue;
              if (this.match(_tokenizerTypes.types.at)) {
                decorators.push(this.parseDecorator());
                continue;
              }
              var method = this.startNode();
              if (decorators.length) {
                method.decorators = decorators;
                decorators = [];
              }
              var isMaybeStatic = this.match(_tokenizerTypes.types.name) && this.state.value === "static";
              var isGenerator = this.eat(_tokenizerTypes.types.star),
                  isAsync = false;
              this.parsePropertyName(method);
              method["static"] = isMaybeStatic && !this.match(_tokenizerTypes.types.parenL);
              if (method["static"]) {
                if (isGenerator)
                  this.unexpected();
                isGenerator = this.eat(_tokenizerTypes.types.star);
                this.parsePropertyName(method);
              }
              if (!isGenerator && method.key.type === "Identifier" && !method.computed && this.isClassProperty()) {
                classBody.body.push(this.parseClassProperty(method));
                continue;
              }
              if (this.options.features["es7.asyncFunctions"] && !this.match(_tokenizerTypes.types.parenL) && !method.computed && method.key.type === "Identifier" && method.key.name === "async") {
                isAsync = true;
                this.parsePropertyName(method);
              }
              var isGetSet = false;
              method.kind = "method";
              if (!method.computed) {
                var key = method.key;
                if (!isAsync && !isGenerator && key.type === "Identifier" && !this.match(_tokenizerTypes.types.parenL) && (key.name === "get" || key.name === "set")) {
                  isGetSet = true;
                  method.kind = key.name;
                  key = this.parsePropertyName(method);
                }
                if (!method["static"] && (key.type === "Identifier" && key.name === "constructor" || key.type === "Literal" && key.value === "constructor")) {
                  if (hadConstructor)
                    this.raise(key.start, "Duplicate constructor in the same class");
                  if (isGetSet)
                    this.raise(key.start, "Constructor can't have get/set modifier");
                  if (isGenerator)
                    this.raise(key.start, "Constructor can't be a generator");
                  if (isAsync)
                    this.raise(key.start, "Constructor can't be an async function");
                  method.kind = "constructor";
                  hadConstructor = true;
                }
              }
              if (method.kind === "constructor" && method.decorators) {
                this.raise(method.start, "You can't attach decorators to a class constructor");
              }
              this.parseClassMethod(classBody, method, isGenerator, isAsync);
              if (isGetSet) {
                var paramCount = method.kind === "get" ? 0 : 1;
                if (method.value.params.length !== paramCount) {
                  var start = method.value.start;
                  if (method.kind === "get") {
                    this.raise(start, "getter should have no params");
                  } else {
                    this.raise(start, "setter should have exactly one param");
                  }
                }
              }
            }
            if (decorators.length) {
              this.raise(this.state.start, "You have trailing decorators with no method");
            }
            node.body = this.finishNode(classBody, "ClassBody");
            return this.finishNode(node, isStatement ? "ClassDeclaration" : "ClassExpression");
          };
          pp.isClassProperty = function() {
            return this.match(_tokenizerTypes.types.eq) || this.match(_tokenizerTypes.types.semi) || this.canInsertSemicolon();
          };
          pp.parseClassProperty = function(node) {
            if (this.match(_tokenizerTypes.types.eq)) {
              if (!this.options.features["es7.classProperties"])
                this.unexpected();
              this.next();
              node.value = this.parseMaybeAssign();
            } else {
              node.value = null;
            }
            this.semicolon();
            return this.finishNode(node, "ClassProperty");
          };
          pp.parseClassMethod = function(classBody, method, isGenerator, isAsync) {
            method.value = this.parseMethod(isGenerator, isAsync);
            classBody.body.push(this.finishNode(method, "MethodDefinition"));
          };
          pp.parseClassId = function(node, isStatement) {
            node.id = this.match(_tokenizerTypes.types.name) ? this.parseIdent() : isStatement ? this.unexpected() : null;
          };
          pp.parseClassSuper = function(node) {
            node.superClass = this.eat(_tokenizerTypes.types._extends) ? this.parseExprSubscripts() : null;
          };
          pp.parseExport = function(node) {
            this.next();
            if (this.match(_tokenizerTypes.types.star)) {
              var specifier = this.startNode();
              this.next();
              if (this.options.features["es7.exportExtensions"] && this.eatContextual("as")) {
                specifier.exported = this.parseIdent();
                node.specifiers = [this.finishNode(specifier, "ExportNamespaceSpecifier")];
                this.parseExportSpecifiersMaybe(node);
                this.parseExportFrom(node, true);
              } else {
                this.parseExportFrom(node, true);
                return this.finishNode(node, "ExportAllDeclaration");
              }
            } else if (this.options.features["es7.exportExtensions"] && this.isExportDefaultSpecifier()) {
              var specifier = this.startNode();
              specifier.exported = this.parseIdent(true);
              node.specifiers = [this.finishNode(specifier, "ExportDefaultSpecifier")];
              if (this.match(_tokenizerTypes.types.comma) && this.lookahead().type === _tokenizerTypes.types.star) {
                this.expect(_tokenizerTypes.types.comma);
                var _specifier = this.startNode();
                this.expect(_tokenizerTypes.types.star);
                this.expectContextual("as");
                _specifier.exported = this.parseIdent();
                node.specifiers.push(this.finishNode(_specifier, "ExportNamespaceSpecifier"));
              } else {
                this.parseExportSpecifiersMaybe(node);
              }
              this.parseExportFrom(node, true);
            } else if (this.eat(_tokenizerTypes.types._default)) {
              var possibleDeclaration = this.match(_tokenizerTypes.types._function) || this.match(_tokenizerTypes.types._class);
              var expr = this.parseMaybeAssign();
              var needsSemi = true;
              if (possibleDeclaration) {
                needsSemi = false;
                if (expr.id) {
                  expr.type = expr.type === "FunctionExpression" ? "FunctionDeclaration" : "ClassDeclaration";
                }
              }
              node.declaration = expr;
              if (needsSemi)
                this.semicolon();
              this.checkExport(node);
              return this.finishNode(node, "ExportDefaultDeclaration");
            } else if (this.state.type.keyword || this.shouldParseExportDeclaration()) {
              node.specifiers = [];
              node.source = null;
              node.declaration = this.parseExportDeclaration(node);
            } else {
              node.declaration = null;
              node.specifiers = this.parseExportSpecifiers();
              this.parseExportFrom(node);
            }
            this.checkExport(node);
            return this.finishNode(node, "ExportNamedDeclaration");
          };
          pp.parseExportDeclaration = function() {
            return this.parseStatement(true);
          };
          pp.isExportDefaultSpecifier = function() {
            if (this.match(_tokenizerTypes.types.name)) {
              return this.state.value !== "type" && this.state.value !== "async" && this.state.value !== "interface";
            }
            if (!this.match(_tokenizerTypes.types._default)) {
              return false;
            }
            var lookahead = this.lookahead();
            return lookahead.type === _tokenizerTypes.types.comma || lookahead.type === _tokenizerTypes.types.name && lookahead.value === "from";
          };
          pp.parseExportSpecifiersMaybe = function(node) {
            if (this.eat(_tokenizerTypes.types.comma)) {
              node.specifiers = node.specifiers.concat(this.parseExportSpecifiers());
            }
          };
          pp.parseExportFrom = function(node, expect) {
            if (this.eatContextual("from")) {
              node.source = this.match(_tokenizerTypes.types.string) ? this.parseExprAtom() : this.unexpected();
              this.checkExport(node);
            } else {
              if (expect) {
                this.unexpected();
              } else {
                node.source = null;
              }
            }
            this.semicolon();
          };
          pp.shouldParseExportDeclaration = function() {
            return this.options.features["es7.asyncFunctions"] && this.isContextual("async");
          };
          pp.checkExport = function(node) {
            if (this.state.decorators.length) {
              var isClass = node.declaration && (node.declaration.type === "ClassDeclaration" || node.declaration.type === "ClassExpression");
              if (!node.declaration || !isClass) {
                this.raise(node.start, "You can only use decorators on an export when exporting a class");
              }
              this.takeDecorators(node.declaration);
            }
          };
          pp.parseExportSpecifiers = function() {
            var nodes = [],
                first = true;
            this.expect(_tokenizerTypes.types.braceL);
            while (!this.eat(_tokenizerTypes.types.braceR)) {
              if (first) {
                first = false;
              } else {
                this.expect(_tokenizerTypes.types.comma);
                if (this.eat(_tokenizerTypes.types.braceR))
                  break;
              }
              var node = this.startNode();
              node.local = this.parseIdent(this.match(_tokenizerTypes.types._default));
              node.exported = this.eatContextual("as") ? this.parseIdent(true) : node.local.__clone();
              nodes.push(this.finishNode(node, "ExportSpecifier"));
            }
            return nodes;
          };
          pp.parseImport = function(node) {
            this.next();
            if (this.match(_tokenizerTypes.types.string)) {
              node.specifiers = [];
              node.source = this.parseExprAtom();
            } else {
              node.specifiers = [];
              this.parseImportSpecifiers(node);
              this.expectContextual("from");
              node.source = this.match(_tokenizerTypes.types.string) ? this.parseExprAtom() : this.unexpected();
            }
            this.semicolon();
            return this.finishNode(node, "ImportDeclaration");
          };
          pp.parseImportSpecifiers = function(node) {
            var first = true;
            if (this.match(_tokenizerTypes.types.name)) {
              var startPos = this.state.start,
                  startLoc = this.state.startLoc;
              node.specifiers.push(this.parseImportSpecifierDefault(this.parseIdent(), startPos, startLoc));
              if (!this.eat(_tokenizerTypes.types.comma))
                return;
            }
            if (this.match(_tokenizerTypes.types.star)) {
              var specifier = this.startNode();
              this.next();
              this.expectContextual("as");
              specifier.local = this.parseIdent();
              this.checkLVal(specifier.local, true);
              node.specifiers.push(this.finishNode(specifier, "ImportNamespaceSpecifier"));
              return;
            }
            this.expect(_tokenizerTypes.types.braceL);
            while (!this.eat(_tokenizerTypes.types.braceR)) {
              if (first) {
                first = false;
              } else {
                this.expect(_tokenizerTypes.types.comma);
                if (this.eat(_tokenizerTypes.types.braceR))
                  break;
              }
              var specifier = this.startNode();
              specifier.imported = this.parseIdent(true);
              specifier.local = this.eatContextual("as") ? this.parseIdent() : specifier.imported.__clone();
              this.checkLVal(specifier.local, true);
              node.specifiers.push(this.finishNode(specifier, "ImportSpecifier"));
            }
          };
          pp.parseImportSpecifierDefault = function(id, startPos, startLoc) {
            var node = this.startNodeAt(startPos, startLoc);
            node.local = id;
            this.checkLVal(node.local, true);
            return this.finishNode(node, "ImportDefaultSpecifier");
          };
        }, {
          "616": 616,
          "628": 628,
          "631": 631
        }],
        621: [function(_dereq_, module, exports) {
          "use strict";
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {"default": obj};
          }
          var _tokenizerTypes = _dereq_(628);
          var _index = _dereq_(616);
          var _index2 = _interopRequireDefault(_index);
          var _utilWhitespace = _dereq_(631);
          var pp = _index2["default"].prototype;
          pp.isUseStrict = function(stmt) {
            return stmt.type === "ExpressionStatement" && stmt.expression.type === "Literal" && stmt.expression.raw.slice(1, -1) === "use strict";
          };
          pp.isRelational = function(op) {
            return this.match(_tokenizerTypes.types.relational) && this.state.value === op;
          };
          pp.expectRelational = function(op) {
            if (this.isRelational(op)) {
              this.next();
            } else {
              this.unexpected();
            }
          };
          pp.isContextual = function(name) {
            return this.match(_tokenizerTypes.types.name) && this.state.value === name;
          };
          pp.eatContextual = function(name) {
            return this.state.value === name && this.eat(_tokenizerTypes.types.name);
          };
          pp.expectContextual = function(name) {
            if (!this.eatContextual(name))
              this.unexpected();
          };
          pp.canInsertSemicolon = function() {
            return this.match(_tokenizerTypes.types.eof) || this.match(_tokenizerTypes.types.braceR) || _utilWhitespace.lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start));
          };
          pp.semicolon = function() {
            if (!this.eat(_tokenizerTypes.types.semi) && !this.canInsertSemicolon())
              this.unexpected();
          };
          pp.expect = function(type) {
            return this.eat(type) || this.unexpected();
          };
          pp.unexpected = function(pos) {
            this.raise(pos != null ? pos : this.state.start, "Unexpected token");
          };
        }, {
          "616": 616,
          "628": 628,
          "631": 631
        }],
        622: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {"default": obj};
          }
          var _tokenizerTypes = _dereq_(628);
          var _parser = _dereq_(616);
          var _parser2 = _interopRequireDefault(_parser);
          var pp = _parser2["default"].prototype;
          pp.flowParseTypeInitialiser = function(tok) {
            var oldInType = this.state.inType;
            this.state.inType = true;
            this.expect(tok || _tokenizerTypes.types.colon);
            var type = this.flowParseType();
            this.state.inType = oldInType;
            return type;
          };
          pp.flowParseDeclareClass = function(node) {
            this.next();
            this.flowParseInterfaceish(node, true);
            return this.finishNode(node, "DeclareClass");
          };
          pp.flowParseDeclareFunction = function(node) {
            this.next();
            var id = node.id = this.parseIdent();
            var typeNode = this.startNode();
            var typeContainer = this.startNode();
            if (this.isRelational("<")) {
              typeNode.typeParameters = this.flowParseTypeParameterDeclaration();
            } else {
              typeNode.typeParameters = null;
            }
            this.expect(_tokenizerTypes.types.parenL);
            var tmp = this.flowParseFunctionTypeParams();
            typeNode.params = tmp.params;
            typeNode.rest = tmp.rest;
            this.expect(_tokenizerTypes.types.parenR);
            typeNode.returnType = this.flowParseTypeInitialiser();
            typeContainer.typeAnnotation = this.finishNode(typeNode, "FunctionTypeAnnotation");
            id.typeAnnotation = this.finishNode(typeContainer, "TypeAnnotation");
            this.finishNode(id, id.type);
            this.semicolon();
            return this.finishNode(node, "DeclareFunction");
          };
          pp.flowParseDeclare = function(node) {
            if (this.match(_tokenizerTypes.types._class)) {
              return this.flowParseDeclareClass(node);
            } else if (this.match(_tokenizerTypes.types._function)) {
              return this.flowParseDeclareFunction(node);
            } else if (this.match(_tokenizerTypes.types._var)) {
              return this.flowParseDeclareVariable(node);
            } else if (this.isContextual("module")) {
              return this.flowParseDeclareModule(node);
            } else if (this.isContextual("type")) {
              return this.flowParseDeclareTypeAlias(node);
            } else if (this.isContextual("interface")) {
              return this.flowParseDeclareInterface(node);
            } else {
              this.unexpected();
            }
          };
          pp.flowParseDeclareVariable = function(node) {
            this.next();
            node.id = this.flowParseTypeAnnotatableIdentifier();
            this.semicolon();
            return this.finishNode(node, "DeclareVariable");
          };
          pp.flowParseDeclareModule = function(node) {
            this.next();
            if (this.match(_tokenizerTypes.types.string)) {
              node.id = this.parseExprAtom();
            } else {
              node.id = this.parseIdent();
            }
            var bodyNode = node.body = this.startNode();
            var body = bodyNode.body = [];
            this.expect(_tokenizerTypes.types.braceL);
            while (!this.match(_tokenizerTypes.types.braceR)) {
              var node2 = this.startNode();
              this.next();
              body.push(this.flowParseDeclare(node2));
            }
            this.expect(_tokenizerTypes.types.braceR);
            this.finishNode(bodyNode, "BlockStatement");
            return this.finishNode(node, "DeclareModule");
          };
          pp.flowParseDeclareTypeAlias = function(node) {
            this.next();
            this.flowParseTypeAlias(node);
            return this.finishNode(node, "DeclareTypeAlias");
          };
          pp.flowParseDeclareInterface = function(node) {
            this.next();
            this.flowParseInterfaceish(node);
            return this.finishNode(node, "DeclareInterface");
          };
          pp.flowParseInterfaceish = function(node, allowStatic) {
            node.id = this.parseIdent();
            if (this.isRelational("<")) {
              node.typeParameters = this.flowParseTypeParameterDeclaration();
            } else {
              node.typeParameters = null;
            }
            node["extends"] = [];
            node.mixins = [];
            if (this.eat(_tokenizerTypes.types._extends)) {
              do {
                node["extends"].push(this.flowParseInterfaceExtends());
              } while (this.eat(_tokenizerTypes.types.comma));
            }
            if (this.isContextual("mixins")) {
              this.next();
              do {
                node.mixins.push(this.flowParseInterfaceExtends());
              } while (this.eat(_tokenizerTypes.types.comma));
            }
            node.body = this.flowParseObjectType(allowStatic);
          };
          pp.flowParseInterfaceExtends = function() {
            var node = this.startNode();
            node.id = this.parseIdent();
            if (this.isRelational("<")) {
              node.typeParameters = this.flowParseTypeParameterInstantiation();
            } else {
              node.typeParameters = null;
            }
            return this.finishNode(node, "InterfaceExtends");
          };
          pp.flowParseInterface = function(node) {
            this.flowParseInterfaceish(node, false);
            return this.finishNode(node, "InterfaceDeclaration");
          };
          pp.flowParseTypeAlias = function(node) {
            node.id = this.parseIdent();
            if (this.isRelational("<")) {
              node.typeParameters = this.flowParseTypeParameterDeclaration();
            } else {
              node.typeParameters = null;
            }
            node.right = this.flowParseTypeInitialiser(_tokenizerTypes.types.eq);
            this.semicolon();
            return this.finishNode(node, "TypeAlias");
          };
          pp.flowParseTypeParameterDeclaration = function() {
            var node = this.startNode();
            node.params = [];
            this.expectRelational("<");
            while (!this.isRelational(">")) {
              node.params.push(this.flowParseTypeAnnotatableIdentifier());
              if (!this.isRelational(">")) {
                this.expect(_tokenizerTypes.types.comma);
              }
            }
            this.expectRelational(">");
            return this.finishNode(node, "TypeParameterDeclaration");
          };
          pp.flowParseTypeParameterInstantiation = function() {
            var node = this.startNode(),
                oldInType = this.state.inType;
            node.params = [];
            this.state.inType = true;
            this.expectRelational("<");
            while (!this.isRelational(">")) {
              node.params.push(this.flowParseType());
              if (!this.isRelational(">")) {
                this.expect(_tokenizerTypes.types.comma);
              }
            }
            this.expectRelational(">");
            this.state.inType = oldInType;
            return this.finishNode(node, "TypeParameterInstantiation");
          };
          pp.flowParseObjectPropertyKey = function() {
            return this.match(_tokenizerTypes.types.num) || this.match(_tokenizerTypes.types.string) ? this.parseExprAtom() : this.parseIdent(true);
          };
          pp.flowParseObjectTypeIndexer = function(node, isStatic) {
            node["static"] = isStatic;
            this.expect(_tokenizerTypes.types.bracketL);
            node.id = this.flowParseObjectPropertyKey();
            node.key = this.flowParseTypeInitialiser();
            this.expect(_tokenizerTypes.types.bracketR);
            node.value = this.flowParseTypeInitialiser();
            this.flowObjectTypeSemicolon();
            return this.finishNode(node, "ObjectTypeIndexer");
          };
          pp.flowParseObjectTypeMethodish = function(node) {
            node.params = [];
            node.rest = null;
            node.typeParameters = null;
            if (this.isRelational("<")) {
              node.typeParameters = this.flowParseTypeParameterDeclaration();
            }
            this.expect(_tokenizerTypes.types.parenL);
            while (this.match(_tokenizerTypes.types.name)) {
              node.params.push(this.flowParseFunctionTypeParam());
              if (!this.match(_tokenizerTypes.types.parenR)) {
                this.expect(_tokenizerTypes.types.comma);
              }
            }
            if (this.eat(_tokenizerTypes.types.ellipsis)) {
              node.rest = this.flowParseFunctionTypeParam();
            }
            this.expect(_tokenizerTypes.types.parenR);
            node.returnType = this.flowParseTypeInitialiser();
            return this.finishNode(node, "FunctionTypeAnnotation");
          };
          pp.flowParseObjectTypeMethod = function(startPos, startLoc, isStatic, key) {
            var node = this.startNodeAt(startPos, startLoc);
            node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(startPos, startLoc));
            node["static"] = isStatic;
            node.key = key;
            node.optional = false;
            this.flowObjectTypeSemicolon();
            return this.finishNode(node, "ObjectTypeProperty");
          };
          pp.flowParseObjectTypeCallProperty = function(node, isStatic) {
            var valueNode = this.startNode();
            node["static"] = isStatic;
            node.value = this.flowParseObjectTypeMethodish(valueNode);
            this.flowObjectTypeSemicolon();
            return this.finishNode(node, "ObjectTypeCallProperty");
          };
          pp.flowParseObjectType = function(allowStatic) {
            var nodeStart = this.startNode();
            var node;
            var propertyKey;
            var isStatic;
            nodeStart.callProperties = [];
            nodeStart.properties = [];
            nodeStart.indexers = [];
            this.expect(_tokenizerTypes.types.braceL);
            while (!this.match(_tokenizerTypes.types.braceR)) {
              var optional = false;
              var startPos = this.state.start,
                  startLoc = this.state.startLoc;
              node = this.startNode();
              if (allowStatic && this.isContextual("static")) {
                this.next();
                isStatic = true;
              }
              if (this.match(_tokenizerTypes.types.bracketL)) {
                nodeStart.indexers.push(this.flowParseObjectTypeIndexer(node, isStatic));
              } else if (this.match(_tokenizerTypes.types.parenL) || this.isRelational("<")) {
                nodeStart.callProperties.push(this.flowParseObjectTypeCallProperty(node, allowStatic));
              } else {
                if (isStatic && this.match(_tokenizerTypes.types.colon)) {
                  propertyKey = this.parseIdent();
                } else {
                  propertyKey = this.flowParseObjectPropertyKey();
                }
                if (this.isRelational("<") || this.match(_tokenizerTypes.types.parenL)) {
                  nodeStart.properties.push(this.flowParseObjectTypeMethod(startPos, startLoc, isStatic, propertyKey));
                } else {
                  if (this.eat(_tokenizerTypes.types.question)) {
                    optional = true;
                  }
                  node.key = propertyKey;
                  node.value = this.flowParseTypeInitialiser();
                  node.optional = optional;
                  node["static"] = isStatic;
                  this.flowObjectTypeSemicolon();
                  nodeStart.properties.push(this.finishNode(node, "ObjectTypeProperty"));
                }
              }
            }
            this.expect(_tokenizerTypes.types.braceR);
            return this.finishNode(nodeStart, "ObjectTypeAnnotation");
          };
          pp.flowObjectTypeSemicolon = function() {
            if (!this.eat(_tokenizerTypes.types.semi) && !this.eat(_tokenizerTypes.types.comma) && !this.match(_tokenizerTypes.types.braceR)) {
              this.unexpected();
            }
          };
          pp.flowParseGenericType = function(startPos, startLoc, id) {
            var node = this.startNodeAt(startPos, startLoc);
            node.typeParameters = null;
            node.id = id;
            while (this.eat(_tokenizerTypes.types.dot)) {
              var node2 = this.startNodeAt(startPos, startLoc);
              node2.qualification = node.id;
              node2.id = this.parseIdent();
              node.id = this.finishNode(node2, "QualifiedTypeIdentifier");
            }
            if (this.isRelational("<")) {
              node.typeParameters = this.flowParseTypeParameterInstantiation();
            }
            return this.finishNode(node, "GenericTypeAnnotation");
          };
          pp.flowParseTypeofType = function() {
            var node = this.startNode();
            this.expect(_tokenizerTypes.types._typeof);
            node.argument = this.flowParsePrimaryType();
            return this.finishNode(node, "TypeofTypeAnnotation");
          };
          pp.flowParseTupleType = function() {
            var node = this.startNode();
            node.types = [];
            this.expect(_tokenizerTypes.types.bracketL);
            while (this.state.pos < this.input.length && !this.match(_tokenizerTypes.types.bracketR)) {
              node.types.push(this.flowParseType());
              if (this.match(_tokenizerTypes.types.bracketR))
                break;
              this.expect(_tokenizerTypes.types.comma);
            }
            this.expect(_tokenizerTypes.types.bracketR);
            return this.finishNode(node, "TupleTypeAnnotation");
          };
          pp.flowParseFunctionTypeParam = function() {
            var optional = false;
            var node = this.startNode();
            node.name = this.parseIdent();
            if (this.eat(_tokenizerTypes.types.question)) {
              optional = true;
            }
            node.optional = optional;
            node.typeAnnotation = this.flowParseTypeInitialiser();
            return this.finishNode(node, "FunctionTypeParam");
          };
          pp.flowParseFunctionTypeParams = function() {
            var ret = {
              params: [],
              rest: null
            };
            while (this.match(_tokenizerTypes.types.name)) {
              ret.params.push(this.flowParseFunctionTypeParam());
              if (!this.match(_tokenizerTypes.types.parenR)) {
                this.expect(_tokenizerTypes.types.comma);
              }
            }
            if (this.eat(_tokenizerTypes.types.ellipsis)) {
              ret.rest = this.flowParseFunctionTypeParam();
            }
            return ret;
          };
          pp.flowIdentToTypeAnnotation = function(startPos, startLoc, node, id) {
            switch (id.name) {
              case "any":
                return this.finishNode(node, "AnyTypeAnnotation");
              case "void":
                return this.finishNode(node, "VoidTypeAnnotation");
              case "bool":
              case "boolean":
                return this.finishNode(node, "BooleanTypeAnnotation");
              case "mixed":
                return this.finishNode(node, "MixedTypeAnnotation");
              case "number":
                return this.finishNode(node, "NumberTypeAnnotation");
              case "string":
                return this.finishNode(node, "StringTypeAnnotation");
              default:
                return this.flowParseGenericType(startPos, startLoc, id);
            }
          };
          pp.flowParsePrimaryType = function() {
            var startPos = this.state.start,
                startLoc = this.state.startLoc;
            var node = this.startNode();
            var tmp;
            var type;
            var isGroupedType = false;
            switch (this.state.type) {
              case _tokenizerTypes.types.name:
                return this.flowIdentToTypeAnnotation(startPos, startLoc, node, this.parseIdent());
              case _tokenizerTypes.types.braceL:
                return this.flowParseObjectType();
              case _tokenizerTypes.types.bracketL:
                return this.flowParseTupleType();
              case _tokenizerTypes.types.relational:
                if (this.state.value === "<") {
                  node.typeParameters = this.flowParseTypeParameterDeclaration();
                  this.expect(_tokenizerTypes.types.parenL);
                  tmp = this.flowParseFunctionTypeParams();
                  node.params = tmp.params;
                  node.rest = tmp.rest;
                  this.expect(_tokenizerTypes.types.parenR);
                  this.expect(_tokenizerTypes.types.arrow);
                  node.returnType = this.flowParseType();
                  return this.finishNode(node, "FunctionTypeAnnotation");
                }
              case _tokenizerTypes.types.parenL:
                this.next();
                if (!this.match(_tokenizerTypes.types.parenR) && !this.match(_tokenizerTypes.types.ellipsis)) {
                  if (this.match(_tokenizerTypes.types.name)) {
                    var token = this.lookahead().type;
                    isGroupedType = token !== _tokenizerTypes.types.question && token !== _tokenizerTypes.types.colon;
                  } else {
                    isGroupedType = true;
                  }
                }
                if (isGroupedType) {
                  type = this.flowParseType();
                  this.expect(_tokenizerTypes.types.parenR);
                  if (this.eat(_tokenizerTypes.types.arrow)) {
                    this.raise(node, "Unexpected token =>. It looks like " + "you are trying to write a function type, but you ended up " + "writing a grouped type followed by an =>, which is a syntax " + "error. Remember, function type parameters are named so function " + "types look like (name1: type1, name2: type2) => returnType. You " + "probably wrote (type1) => returnType");
                  }
                  return type;
                }
                tmp = this.flowParseFunctionTypeParams();
                node.params = tmp.params;
                node.rest = tmp.rest;
                this.expect(_tokenizerTypes.types.parenR);
                this.expect(_tokenizerTypes.types.arrow);
                node.returnType = this.flowParseType();
                node.typeParameters = null;
                return this.finishNode(node, "FunctionTypeAnnotation");
              case _tokenizerTypes.types.string:
                node.rawValue = node.value = this.state.value;
                node.raw = this.input.slice(this.state.start, this.state.end);
                this.next();
                return this.finishNode(node, "StringLiteralTypeAnnotation");
              case _tokenizerTypes.types._true:
              case _tokenizerTypes.types._false:
                node.value = this.match(_tokenizerTypes.types._true);
                this.next();
                return this.finishNode(node, "BooleanLiteralTypeAnnotation");
              case _tokenizerTypes.types.num:
                node.rawValue = node.value = this.state.value;
                node.raw = this.input.slice(this.state.start, this.state.end);
                this.next();
                return this.finishNode(node, "NumberLiteralTypeAnnotation");
              case _tokenizerTypes.types._null:
                node.value = this.match(_tokenizerTypes.types._null);
                this.next();
                return this.finishNode(node, "NullLiteralTypeAnnotation");
              case _tokenizerTypes.types._this:
                node.value = this.match(_tokenizerTypes.types._this);
                this.next();
                return this.finishNode(node, "ThisTypeAnnotation");
              default:
                if (this.state.type.keyword === "typeof") {
                  return this.flowParseTypeofType();
                }
            }
            this.unexpected();
          };
          pp.flowParsePostfixType = function() {
            var node = this.startNode();
            var type = node.elementType = this.flowParsePrimaryType();
            if (this.match(_tokenizerTypes.types.bracketL)) {
              this.expect(_tokenizerTypes.types.bracketL);
              this.expect(_tokenizerTypes.types.bracketR);
              return this.finishNode(node, "ArrayTypeAnnotation");
            } else {
              return type;
            }
          };
          pp.flowParsePrefixType = function() {
            var node = this.startNode();
            if (this.eat(_tokenizerTypes.types.question)) {
              node.typeAnnotation = this.flowParsePrefixType();
              return this.finishNode(node, "NullableTypeAnnotation");
            } else {
              return this.flowParsePostfixType();
            }
          };
          pp.flowParseIntersectionType = function() {
            var node = this.startNode();
            var type = this.flowParsePrefixType();
            node.types = [type];
            while (this.eat(_tokenizerTypes.types.bitwiseAND)) {
              node.types.push(this.flowParsePrefixType());
            }
            return node.types.length === 1 ? type : this.finishNode(node, "IntersectionTypeAnnotation");
          };
          pp.flowParseUnionType = function() {
            var node = this.startNode();
            var type = this.flowParseIntersectionType();
            node.types = [type];
            while (this.eat(_tokenizerTypes.types.bitwiseOR)) {
              node.types.push(this.flowParseIntersectionType());
            }
            return node.types.length === 1 ? type : this.finishNode(node, "UnionTypeAnnotation");
          };
          pp.flowParseType = function() {
            var oldInType = this.state.inType;
            this.state.inType = true;
            var type = this.flowParseUnionType();
            this.state.inType = oldInType;
            return type;
          };
          pp.flowParseTypeAnnotation = function() {
            var node = this.startNode();
            node.typeAnnotation = this.flowParseTypeInitialiser();
            return this.finishNode(node, "TypeAnnotation");
          };
          pp.flowParseTypeAnnotatableIdentifier = function(requireTypeAnnotation, canBeOptionalParam) {
            var ident = this.parseIdent();
            var isOptionalParam = false;
            if (canBeOptionalParam && this.eat(_tokenizerTypes.types.question)) {
              this.expect(_tokenizerTypes.types.question);
              isOptionalParam = true;
            }
            if (requireTypeAnnotation || this.match(_tokenizerTypes.types.colon)) {
              ident.typeAnnotation = this.flowParseTypeAnnotation();
              this.finishNode(ident, ident.type);
            }
            if (isOptionalParam) {
              ident.optional = true;
              this.finishNode(ident, ident.type);
            }
            return ident;
          };
          exports["default"] = function(instance) {
            instance.extend("parseFunctionBody", function(inner) {
              return function(node, allowExpression) {
                if (this.match(_tokenizerTypes.types.colon) && !allowExpression) {
                  node.returnType = this.flowParseTypeAnnotation();
                }
                return inner.call(this, node, allowExpression);
              };
            });
            instance.extend("parseStatement", function(inner) {
              return function(declaration, topLevel) {
                if (this.strict && this.match(_tokenizerTypes.types.name) && this.state.value === "interface") {
                  var node = this.startNode();
                  this.next();
                  return this.flowParseInterface(node);
                } else {
                  return inner.call(this, declaration, topLevel);
                }
              };
            });
            instance.extend("parseExpressionStatement", function(inner) {
              return function(node, expr) {
                if (expr.type === "Identifier") {
                  if (expr.name === "declare") {
                    if (this.match(_tokenizerTypes.types._class) || this.match(_tokenizerTypes.types.name) || this.match(_tokenizerTypes.types._function) || this.match(_tokenizerTypes.types._var)) {
                      return this.flowParseDeclare(node);
                    }
                  } else if (this.match(_tokenizerTypes.types.name)) {
                    if (expr.name === "interface") {
                      return this.flowParseInterface(node);
                    } else if (expr.name === "type") {
                      return this.flowParseTypeAlias(node);
                    }
                  }
                }
                return inner.call(this, node, expr);
              };
            });
            instance.extend("shouldParseExportDeclaration", function(inner) {
              return function() {
                return this.isContextual("type") || this.isContextual("interface") || inner.call(this);
              };
            });
            instance.extend("parseParenItem", function() {
              return function(node, startLoc, startPos, forceArrow) {
                if (this.match(_tokenizerTypes.types.colon)) {
                  var typeCastNode = this.startNodeAt(startLoc, startPos);
                  typeCastNode.expression = node;
                  typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();
                  if (forceArrow && !this.match(_tokenizerTypes.types.arrow)) {
                    this.unexpected();
                  }
                  if (this.eat(_tokenizerTypes.types.arrow)) {
                    var func = this.parseArrowExpression(this.startNodeAt(startLoc, startPos), [node]);
                    func.returnType = typeCastNode.typeAnnotation;
                    return func;
                  } else {
                    return this.finishNode(typeCastNode, "TypeCastExpression");
                  }
                } else {
                  return node;
                }
              };
            });
            instance.extend("parseExport", function(inner) {
              return function(node) {
                node = inner.call(this, node);
                if (node.type === "ExportNamedDeclaration") {
                  node.exportKind = node.exportKind || "value";
                }
                return node;
              };
            });
            instance.extend("parseExportDeclaration", function(inner) {
              return function(node) {
                if (this.isContextual("type")) {
                  node.exportKind = "type";
                  var declarationNode = this.startNode();
                  this.next();
                  if (this.match(_tokenizerTypes.types.braceL)) {
                    node.specifiers = this.parseExportSpecifiers();
                    this.parseExportFrom(node);
                    return null;
                  } else {
                    return this.flowParseTypeAlias(declarationNode);
                  }
                } else if (this.isContextual("interface")) {
                  node.exportKind = "type";
                  var _declarationNode = this.startNode();
                  this.next();
                  return this.flowParseInterface(_declarationNode);
                } else {
                  return inner.call(this, node);
                }
              };
            });
            instance.extend("parseClassId", function(inner) {
              return function(node, isStatement) {
                inner.call(this, node, isStatement);
                if (this.isRelational("<")) {
                  node.typeParameters = this.flowParseTypeParameterDeclaration();
                }
              };
            });
            instance.extend("isKeyword", function(inner) {
              return function(name) {
                if (this.state.inType && name === "void") {
                  return false;
                } else {
                  return inner.call(this, name);
                }
              };
            });
            instance.extend("readToken", function(inner) {
              return function(code) {
                if (this.state.inType && (code === 62 || code === 60)) {
                  return this.finishOp(_tokenizerTypes.types.relational, 1);
                } else {
                  return inner.call(this, code);
                }
              };
            });
            instance.extend("jsx_readToken", function(inner) {
              return function() {
                if (!this.state.inType)
                  return inner.call(this);
              };
            });
            function typeCastToParameter(node) {
              node.expression.typeAnnotation = node.typeAnnotation;
              return node.expression;
            }
            instance.extend("toAssignableList", function(inner) {
              return function(exprList, isBinding) {
                for (var i = 0; i < exprList.length; i++) {
                  var expr = exprList[i];
                  if (expr && expr.type === "TypeCastExpression") {
                    exprList[i] = typeCastToParameter(expr);
                  }
                }
                return inner.call(this, exprList, isBinding);
              };
            });
            instance.extend("toReferencedList", function() {
              return function(exprList) {
                for (var i = 0; i < exprList.length; i++) {
                  var expr = exprList[i];
                  if (expr && expr._exprListItem && expr.type === "TypeCastExpression") {
                    this.raise(expr.start, "Unexpected type cast");
                  }
                }
                return exprList;
              };
            });
            instance.extend("parseExprListItem", function(inner) {
              return function(allowEmpty, refShorthandDefaultPos) {
                var container = this.startNode();
                var node = inner.call(this, allowEmpty, refShorthandDefaultPos);
                if (this.match(_tokenizerTypes.types.colon)) {
                  container._exprListItem = true;
                  container.expression = node;
                  container.typeAnnotation = this.flowParseTypeAnnotation();
                  return this.finishNode(container, "TypeCastExpression");
                } else {
                  return node;
                }
              };
            });
            instance.extend("parseClassProperty", function(inner) {
              return function(node) {
                if (this.match(_tokenizerTypes.types.colon)) {
                  node.typeAnnotation = this.flowParseTypeAnnotation();
                }
                return inner.call(this, node);
              };
            });
            instance.extend("isClassProperty", function(inner) {
              return function() {
                return this.match(_tokenizerTypes.types.colon) || inner.call(this);
              };
            });
            instance.extend("parseClassMethod", function() {
              return function(classBody, method, isGenerator, isAsync) {
                var typeParameters;
                if (this.isRelational("<")) {
                  typeParameters = this.flowParseTypeParameterDeclaration();
                }
                method.value = this.parseMethod(isGenerator, isAsync);
                method.value.typeParameters = typeParameters;
                classBody.body.push(this.finishNode(method, "MethodDefinition"));
              };
            });
            instance.extend("parseClassSuper", function(inner) {
              return function(node, isStatement) {
                inner.call(this, node, isStatement);
                if (node.superClass && this.isRelational("<")) {
                  node.superTypeParameters = this.flowParseTypeParameterInstantiation();
                }
                if (this.isContextual("implements")) {
                  this.next();
                  var implemented = node["implements"] = [];
                  do {
                    var _node = this.startNode();
                    _node.id = this.parseIdent();
                    if (this.isRelational("<")) {
                      _node.typeParameters = this.flowParseTypeParameterInstantiation();
                    } else {
                      _node.typeParameters = null;
                    }
                    implemented.push(this.finishNode(_node, "ClassImplements"));
                  } while (this.eat(_tokenizerTypes.types.comma));
                }
              };
            });
            instance.extend("parseObjPropValue", function(inner) {
              return function(prop) {
                var typeParameters;
                if (this.isRelational("<")) {
                  typeParameters = this.flowParseTypeParameterDeclaration();
                  if (!this.match(_tokenizerTypes.types.parenL))
                    this.unexpected();
                }
                inner.apply(this, arguments);
                if (typeParameters) {
                  prop.value.typeParameters = typeParameters;
                }
              };
            });
            instance.extend("parseAssignableListItemTypes", function() {
              return function(param) {
                if (this.eat(_tokenizerTypes.types.question)) {
                  param.optional = true;
                }
                if (this.match(_tokenizerTypes.types.colon)) {
                  param.typeAnnotation = this.flowParseTypeAnnotation();
                }
                this.finishNode(param, param.type);
                return param;
              };
            });
            instance.extend("parseImportSpecifiers", function(inner) {
              return function(node) {
                node.importKind = "value";
                var kind = this.match(_tokenizerTypes.types._typeof) ? "typeof" : this.isContextual("type") ? "type" : null;
                if (kind) {
                  var lh = this.lookahead();
                  if (lh.type === _tokenizerTypes.types.name && lh.value !== "from" || lh.type === _tokenizerTypes.types.braceL || lh.type === _tokenizerTypes.types.star) {
                    this.next();
                    node.importKind = kind;
                  }
                }
                inner.call(this, node);
              };
            });
            instance.extend("parseFunctionParams", function(inner) {
              return function(node) {
                if (this.isRelational("<")) {
                  node.typeParameters = this.flowParseTypeParameterDeclaration();
                }
                inner.call(this, node);
              };
            });
            instance.extend("parseVarHead", function(inner) {
              return function(decl) {
                inner.call(this, decl);
                if (this.match(_tokenizerTypes.types.colon)) {
                  decl.id.typeAnnotation = this.flowParseTypeAnnotation();
                  this.finishNode(decl.id, decl.id.type);
                }
              };
            });
            instance.extend("parseAsyncArrowFromCallExpression", function(inner) {
              return function(node, call) {
                if (this.match(_tokenizerTypes.types.colon)) {
                  node.returnType = this.flowParseTypeAnnotation();
                }
                return inner.call(this, node, call);
              };
            });
            instance.extend("parseParenAndDistinguishExpression", function(inner) {
              return function(startPos, startLoc, canBeArrow, isAsync) {
                startPos = startPos || this.state.start;
                startLoc = startLoc || this.state.startLoc;
                if (this.lookahead().type === _tokenizerTypes.types.parenR) {
                  this.expect(_tokenizerTypes.types.parenL);
                  this.expect(_tokenizerTypes.types.parenR);
                  var node = this.startNodeAt(startPos, startLoc);
                  if (this.match(_tokenizerTypes.types.colon))
                    node.returnType = this.flowParseTypeAnnotation();
                  this.expect(_tokenizerTypes.types.arrow);
                  return this.parseArrowExpression(node, [], isAsync);
                } else {
                  var node = inner.call(this, startPos, startLoc, canBeArrow, isAsync);
                  if (this.match(_tokenizerTypes.types.colon)) {
                    var state = this.state.clone();
                    try {
                      return this.parseParenItem(node, startPos, startLoc, true);
                    } catch (err) {
                      if (err instanceof SyntaxError) {
                        this.state = state;
                        return node;
                      } else {
                        throw err;
                      }
                    }
                  } else {
                    return node;
                  }
                }
              };
            });
          };
          module.exports = exports["default"];
        }, {
          "616": 616,
          "628": 628
        }],
        623: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {"default": obj};
          }
          var _xhtml = _dereq_(624);
          var _xhtml2 = _interopRequireDefault(_xhtml);
          var _tokenizerTypes = _dereq_(628);
          var _tokenizerContext = _dereq_(625);
          var _parser = _dereq_(616);
          var _parser2 = _interopRequireDefault(_parser);
          var _utilIdentifier = _dereq_(629);
          var _utilWhitespace = _dereq_(631);
          var HEX_NUMBER = /^[\da-fA-F]+$/;
          var DECIMAL_NUMBER = /^\d+$/;
          _tokenizerContext.types.j_oTag = new _tokenizerContext.TokContext("<tag", false);
          _tokenizerContext.types.j_cTag = new _tokenizerContext.TokContext("</tag", false);
          _tokenizerContext.types.j_expr = new _tokenizerContext.TokContext("<tag>...</tag>", true, true);
          _tokenizerTypes.types.jsxName = new _tokenizerTypes.TokenType("jsxName");
          _tokenizerTypes.types.jsxText = new _tokenizerTypes.TokenType("jsxText", {beforeExpr: true});
          _tokenizerTypes.types.jsxTagStart = new _tokenizerTypes.TokenType("jsxTagStart");
          _tokenizerTypes.types.jsxTagEnd = new _tokenizerTypes.TokenType("jsxTagEnd");
          _tokenizerTypes.types.jsxTagStart.updateContext = function() {
            this.state.context.push(_tokenizerContext.types.j_expr);
            this.state.context.push(_tokenizerContext.types.j_oTag);
            this.state.exprAllowed = false;
          };
          _tokenizerTypes.types.jsxTagEnd.updateContext = function(prevType) {
            var out = this.state.context.pop();
            if (out === _tokenizerContext.types.j_oTag && prevType === _tokenizerTypes.types.slash || out === _tokenizerContext.types.j_cTag) {
              this.state.context.pop();
              this.state.exprAllowed = this.curContext() === _tokenizerContext.types.j_expr;
            } else {
              this.state.exprAllowed = true;
            }
          };
          var pp = _parser2["default"].prototype;
          pp.jsxReadToken = function() {
            var out = "",
                chunkStart = this.state.pos;
            for (; ; ) {
              if (this.state.pos >= this.input.length) {
                this.raise(this.state.start, "Unterminated JSX contents");
              }
              var ch = this.input.charCodeAt(this.state.pos);
              switch (ch) {
                case 60:
                case 123:
                  if (this.state.pos === this.state.start) {
                    if (ch === 60 && this.state.exprAllowed) {
                      ++this.state.pos;
                      return this.finishToken(_tokenizerTypes.types.jsxTagStart);
                    }
                    return this.getTokenFromCode(ch);
                  }
                  out += this.input.slice(chunkStart, this.state.pos);
                  return this.finishToken(_tokenizerTypes.types.jsxText, out);
                case 38:
                  out += this.input.slice(chunkStart, this.state.pos);
                  out += this.jsxReadEntity();
                  chunkStart = this.state.pos;
                  break;
                default:
                  if (_utilWhitespace.isNewLine(ch)) {
                    out += this.input.slice(chunkStart, this.state.pos);
                    out += this.jsxReadNewLine(true);
                    chunkStart = this.state.pos;
                  } else {
                    ++this.state.pos;
                  }
              }
            }
          };
          pp.jsxReadNewLine = function(normalizeCRLF) {
            var ch = this.input.charCodeAt(this.state.pos);
            var out;
            ++this.state.pos;
            if (ch === 13 && this.input.charCodeAt(this.state.pos) === 10) {
              ++this.state.pos;
              out = normalizeCRLF ? "\n" : "\r\n";
            } else {
              out = String.fromCharCode(ch);
            }
            ++this.state.curLine;
            this.state.lineStart = this.state.pos;
            return out;
          };
          pp.jsxReadString = function(quote) {
            var out = "",
                chunkStart = ++this.state.pos;
            for (; ; ) {
              if (this.state.pos >= this.input.length) {
                this.raise(this.state.start, "Unterminated string constant");
              }
              var ch = this.input.charCodeAt(this.state.pos);
              if (ch === quote)
                break;
              if (ch === 38) {
                out += this.input.slice(chunkStart, this.state.pos);
                out += this.jsxReadEntity();
                chunkStart = this.state.pos;
              } else if (_utilWhitespace.isNewLine(ch)) {
                out += this.input.slice(chunkStart, this.state.pos);
                out += this.jsxReadNewLine(false);
                chunkStart = this.state.pos;
              } else {
                ++this.state.pos;
              }
            }
            out += this.input.slice(chunkStart, this.state.pos++);
            return this.finishToken(_tokenizerTypes.types.string, out);
          };
          pp.jsxReadEntity = function() {
            var str = "",
                count = 0,
                entity;
            var ch = this.input[this.state.pos];
            var startPos = ++this.state.pos;
            while (this.state.pos < this.input.length && count++ < 10) {
              ch = this.input[this.state.pos++];
              if (ch === ";") {
                if (str[0] === "#") {
                  if (str[1] === "x") {
                    str = str.substr(2);
                    if (HEX_NUMBER.test(str))
                      entity = String.fromCharCode(parseInt(str, 16));
                  } else {
                    str = str.substr(1);
                    if (DECIMAL_NUMBER.test(str))
                      entity = String.fromCharCode(parseInt(str, 10));
                  }
                } else {
                  entity = _xhtml2["default"][str];
                }
                break;
              }
              str += ch;
            }
            if (!entity) {
              this.state.pos = startPos;
              return "&";
            }
            return entity;
          };
          pp.jsxReadWord = function() {
            var ch,
                start = this.state.pos;
            do {
              ch = this.input.charCodeAt(++this.state.pos);
            } while (_utilIdentifier.isIdentifierChar(ch) || ch === 45);
            return this.finishToken(_tokenizerTypes.types.jsxName, this.input.slice(start, this.state.pos));
          };
          function getQualifiedJSXName(object) {
            if (object.type === "JSXIdentifier") {
              return object.name;
            }
            if (object.type === "JSXNamespacedName") {
              return object.namespace.name + ":" + object.name.name;
            }
            if (object.type === "JSXMemberExpression") {
              return getQualifiedJSXName(object.object) + "." + getQualifiedJSXName(object.property);
            }
          }
          pp.jsxParseIdentifier = function() {
            var node = this.startNode();
            if (this.match(_tokenizerTypes.types.jsxName)) {
              node.name = this.state.value;
            } else if (this.state.type.keyword) {
              node.name = this.state.type.keyword;
            } else {
              this.unexpected();
            }
            this.next();
            return this.finishNode(node, "JSXIdentifier");
          };
          pp.jsxParseNamespacedName = function() {
            var startPos = this.state.start,
                startLoc = this.state.startLoc;
            var name = this.jsxParseIdentifier();
            if (!this.eat(_tokenizerTypes.types.colon))
              return name;
            var node = this.startNodeAt(startPos, startLoc);
            node.namespace = name;
            node.name = this.jsxParseIdentifier();
            return this.finishNode(node, "JSXNamespacedName");
          };
          pp.jsxParseElementName = function() {
            var startPos = this.state.start,
                startLoc = this.state.startLoc;
            var node = this.jsxParseNamespacedName();
            while (this.eat(_tokenizerTypes.types.dot)) {
              var newNode = this.startNodeAt(startPos, startLoc);
              newNode.object = node;
              newNode.property = this.jsxParseIdentifier();
              node = this.finishNode(newNode, "JSXMemberExpression");
            }
            return node;
          };
          pp.jsxParseAttributeValue = function() {
            var node;
            switch (this.state.type) {
              case _tokenizerTypes.types.braceL:
                node = this.jsxParseExpressionContainer();
                if (node.expression.type === "JSXEmptyExpression") {
                  this.raise(node.start, "JSX attributes must only be assigned a non-empty expression");
                } else {
                  return node;
                }
              case _tokenizerTypes.types.jsxTagStart:
              case _tokenizerTypes.types.string:
                node = this.parseExprAtom();
                node.rawValue = null;
                return node;
              default:
                this.raise(this.state.start, "JSX value should be either an expression or a quoted JSX text");
            }
          };
          pp.jsxParseEmptyExpression = function() {
            var tmp = this.state.start;
            this.state.start = this.state.lastTokEnd;
            this.state.lastTokEnd = tmp;
            tmp = this.state.startLoc;
            this.state.startLoc = this.state.lastTokEndLoc;
            this.state.lastTokEndLoc = tmp;
            return this.finishNode(this.startNode(), "JSXEmptyExpression");
          };
          pp.jsxParseExpressionContainer = function() {
            var node = this.startNode();
            this.next();
            if (this.match(_tokenizerTypes.types.braceR)) {
              node.expression = this.jsxParseEmptyExpression();
            } else {
              node.expression = this.parseExpression();
            }
            this.expect(_tokenizerTypes.types.braceR);
            return this.finishNode(node, "JSXExpressionContainer");
          };
          pp.jsxParseAttribute = function() {
            var node = this.startNode();
            if (this.eat(_tokenizerTypes.types.braceL)) {
              this.expect(_tokenizerTypes.types.ellipsis);
              node.argument = this.parseMaybeAssign();
              this.expect(_tokenizerTypes.types.braceR);
              return this.finishNode(node, "JSXSpreadAttribute");
            }
            node.name = this.jsxParseNamespacedName();
            node.value = this.eat(_tokenizerTypes.types.eq) ? this.jsxParseAttributeValue() : null;
            return this.finishNode(node, "JSXAttribute");
          };
          pp.jsxParseOpeningElementAt = function(startPos, startLoc) {
            var node = this.startNodeAt(startPos, startLoc);
            node.attributes = [];
            node.name = this.jsxParseElementName();
            while (!this.match(_tokenizerTypes.types.slash) && !this.match(_tokenizerTypes.types.jsxTagEnd)) {
              node.attributes.push(this.jsxParseAttribute());
            }
            node.selfClosing = this.eat(_tokenizerTypes.types.slash);
            this.expect(_tokenizerTypes.types.jsxTagEnd);
            return this.finishNode(node, "JSXOpeningElement");
          };
          pp.jsxParseClosingElementAt = function(startPos, startLoc) {
            var node = this.startNodeAt(startPos, startLoc);
            node.name = this.jsxParseElementName();
            this.expect(_tokenizerTypes.types.jsxTagEnd);
            return this.finishNode(node, "JSXClosingElement");
          };
          pp.jsxParseElementAt = function(startPos, startLoc) {
            var node = this.startNodeAt(startPos, startLoc);
            var children = [];
            var openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);
            var closingElement = null;
            if (!openingElement.selfClosing) {
              contents: for (; ; ) {
                switch (this.state.type) {
                  case _tokenizerTypes.types.jsxTagStart:
                    startPos = this.state.start;
                    startLoc = this.state.startLoc;
                    this.next();
                    if (this.eat(_tokenizerTypes.types.slash)) {
                      closingElement = this.jsxParseClosingElementAt(startPos, startLoc);
                      break contents;
                    }
                    children.push(this.jsxParseElementAt(startPos, startLoc));
                    break;
                  case _tokenizerTypes.types.jsxText:
                    children.push(this.parseExprAtom());
                    break;
                  case _tokenizerTypes.types.braceL:
                    children.push(this.jsxParseExpressionContainer());
                    break;
                  default:
                    this.unexpected();
                }
              }
              if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {
                this.raise(closingElement.start, "Expected corresponding JSX closing tag for <" + getQualifiedJSXName(openingElement.name) + ">");
              }
            }
            node.openingElement = openingElement;
            node.closingElement = closingElement;
            node.children = children;
            if (this.match(_tokenizerTypes.types.relational) && this.state.value === "<") {
              this.raise(this.state.start, "Adjacent JSX elements must be wrapped in an enclosing tag");
            }
            return this.finishNode(node, "JSXElement");
          };
          pp.jsxParseElement = function() {
            var startPos = this.state.start,
                startLoc = this.state.startLoc;
            this.next();
            return this.jsxParseElementAt(startPos, startLoc);
          };
          exports["default"] = function(instance) {
            instance.extend("parseExprAtom", function(inner) {
              return function(refShortHandDefaultPos) {
                if (this.match(_tokenizerTypes.types.jsxText)) {
                  var node = this.parseLiteral(this.state.value);
                  node.rawValue = null;
                  return node;
                } else if (this.match(_tokenizerTypes.types.jsxTagStart)) {
                  return this.jsxParseElement();
                } else {
                  return inner.call(this, refShortHandDefaultPos);
                }
              };
            });
            instance.extend("readToken", function(inner) {
              return function(code) {
                var context = this.curContext();
                if (context === _tokenizerContext.types.j_expr) {
                  return this.jsxReadToken();
                }
                if (context === _tokenizerContext.types.j_oTag || context === _tokenizerContext.types.j_cTag) {
                  if (_utilIdentifier.isIdentifierStart(code)) {
                    return this.jsxReadWord();
                  }
                  if (code === 62) {
                    ++this.state.pos;
                    return this.finishToken(_tokenizerTypes.types.jsxTagEnd);
                  }
                  if ((code === 34 || code === 39) && context === _tokenizerContext.types.j_oTag) {
                    return this.jsxReadString(code);
                  }
                }
                if (code === 60 && this.state.exprAllowed) {
                  ++this.state.pos;
                  return this.finishToken(_tokenizerTypes.types.jsxTagStart);
                }
                return inner.call(this, code);
              };
            });
            instance.extend("updateContext", function(inner) {
              return function(prevType) {
                if (this.match(_tokenizerTypes.types.braceL)) {
                  var curContext = this.curContext();
                  if (curContext === _tokenizerContext.types.j_oTag) {
                    this.state.context.push(_tokenizerContext.types.b_expr);
                  } else if (curContext === _tokenizerContext.types.j_expr) {
                    this.state.context.push(_tokenizerContext.types.b_tmpl);
                  } else {
                    inner.call(this, prevType);
                  }
                  this.state.exprAllowed = true;
                } else if (this.match(_tokenizerTypes.types.slash) && prevType === _tokenizerTypes.types.jsxTagStart) {
                  this.state.context.length -= 2;
                  this.state.context.push(_tokenizerContext.types.j_cTag);
                  this.state.exprAllowed = false;
                } else {
                  return inner.call(this, prevType);
                }
              };
            });
          };
          module.exports = exports["default"];
        }, {
          "616": 616,
          "624": 624,
          "625": 625,
          "628": 628,
          "629": 629,
          "631": 631
        }],
        624: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          exports["default"] = {
            quot: "\"",
            amp: "&",
            apos: "'",
            lt: "<",
            gt: ">",
            nbsp: " ",
            iexcl: "¡",
            cent: "¢",
            pound: "£",
            curren: "¤",
            yen: "¥",
            brvbar: "¦",
            sect: "§",
            uml: "¨",
            copy: "©",
            ordf: "ª",
            laquo: "«",
            not: "¬",
            shy: "­",
            reg: "®",
            macr: "¯",
            deg: "°",
            plusmn: "±",
            sup2: "²",
            sup3: "³",
            acute: "´",
            micro: "µ",
            para: "¶",
            middot: "·",
            cedil: "¸",
            sup1: "¹",
            ordm: "º",
            raquo: "»",
            frac14: "¼",
            frac12: "½",
            frac34: "¾",
            iquest: "¿",
            Agrave: "À",
            Aacute: "Á",
            Acirc: "Â",
            Atilde: "Ã",
            Auml: "Ä",
            Aring: "Å",
            AElig: "Æ",
            Ccedil: "Ç",
            Egrave: "È",
            Eacute: "É",
            Ecirc: "Ê",
            Euml: "Ë",
            Igrave: "Ì",
            Iacute: "Í",
            Icirc: "Î",
            Iuml: "Ï",
            ETH: "Ð",
            Ntilde: "Ñ",
            Ograve: "Ò",
            Oacute: "Ó",
            Ocirc: "Ô",
            Otilde: "Õ",
            Ouml: "Ö",
            times: "×",
            Oslash: "Ø",
            Ugrave: "Ù",
            Uacute: "Ú",
            Ucirc: "Û",
            Uuml: "Ü",
            Yacute: "Ý",
            THORN: "Þ",
            szlig: "ß",
            agrave: "à",
            aacute: "á",
            acirc: "â",
            atilde: "ã",
            auml: "ä",
            aring: "å",
            aelig: "æ",
            ccedil: "ç",
            egrave: "è",
            eacute: "é",
            ecirc: "ê",
            euml: "ë",
            igrave: "ì",
            iacute: "í",
            icirc: "î",
            iuml: "ï",
            eth: "ð",
            ntilde: "ñ",
            ograve: "ò",
            oacute: "ó",
            ocirc: "ô",
            otilde: "õ",
            ouml: "ö",
            divide: "÷",
            oslash: "ø",
            ugrave: "ù",
            uacute: "ú",
            ucirc: "û",
            uuml: "ü",
            yacute: "ý",
            thorn: "þ",
            yuml: "ÿ",
            OElig: "Œ",
            oelig: "œ",
            Scaron: "Š",
            scaron: "š",
            Yuml: "Ÿ",
            fnof: "ƒ",
            circ: "ˆ",
            tilde: "˜",
            Alpha: "Α",
            Beta: "Β",
            Gamma: "Γ",
            Delta: "Δ",
            Epsilon: "Ε",
            Zeta: "Ζ",
            Eta: "Η",
            Theta: "Θ",
            Iota: "Ι",
            Kappa: "Κ",
            Lambda: "Λ",
            Mu: "Μ",
            Nu: "Ν",
            Xi: "Ξ",
            Omicron: "Ο",
            Pi: "Π",
            Rho: "Ρ",
            Sigma: "Σ",
            Tau: "Τ",
            Upsilon: "Υ",
            Phi: "Φ",
            Chi: "Χ",
            Psi: "Ψ",
            Omega: "Ω",
            alpha: "α",
            beta: "β",
            gamma: "γ",
            delta: "δ",
            epsilon: "ε",
            zeta: "ζ",
            eta: "η",
            theta: "θ",
            iota: "ι",
            kappa: "κ",
            lambda: "λ",
            mu: "μ",
            nu: "ν",
            xi: "ξ",
            omicron: "ο",
            pi: "π",
            rho: "ρ",
            sigmaf: "ς",
            sigma: "σ",
            tau: "τ",
            upsilon: "υ",
            phi: "φ",
            chi: "χ",
            psi: "ψ",
            omega: "ω",
            thetasym: "ϑ",
            upsih: "ϒ",
            piv: "ϖ",
            ensp: " ",
            emsp: " ",
            thinsp: " ",
            zwnj: "‌",
            zwj: "‍",
            lrm: "‎",
            rlm: "‏",
            ndash: "–",
            mdash: "—",
            lsquo: "‘",
            rsquo: "’",
            sbquo: "‚",
            ldquo: "“",
            rdquo: "”",
            bdquo: "„",
            dagger: "†",
            Dagger: "‡",
            bull: "•",
            hellip: "…",
            permil: "‰",
            prime: "′",
            Prime: "″",
            lsaquo: "‹",
            rsaquo: "›",
            oline: "‾",
            frasl: "⁄",
            euro: "€",
            image: "ℑ",
            weierp: "℘",
            real: "ℜ",
            trade: "™",
            alefsym: "ℵ",
            larr: "←",
            uarr: "↑",
            rarr: "→",
            darr: "↓",
            harr: "↔",
            crarr: "↵",
            lArr: "⇐",
            uArr: "⇑",
            rArr: "⇒",
            dArr: "⇓",
            hArr: "⇔",
            forall: "∀",
            part: "∂",
            exist: "∃",
            empty: "∅",
            nabla: "∇",
            isin: "∈",
            notin: "∉",
            ni: "∋",
            prod: "∏",
            sum: "∑",
            minus: "−",
            lowast: "∗",
            radic: "√",
            prop: "∝",
            infin: "∞",
            ang: "∠",
            and: "∧",
            or: "∨",
            cap: "∩",
            cup: "∪",
            "int": "∫",
            there4: "∴",
            sim: "∼",
            cong: "≅",
            asymp: "≈",
            ne: "≠",
            equiv: "≡",
            le: "≤",
            ge: "≥",
            sub: "⊂",
            sup: "⊃",
            nsub: "⊄",
            sube: "⊆",
            supe: "⊇",
            oplus: "⊕",
            otimes: "⊗",
            perp: "⊥",
            sdot: "⋅",
            lceil: "⌈",
            rceil: "⌉",
            lfloor: "⌊",
            rfloor: "⌋",
            lang: "〈",
            rang: "〉",
            loz: "◊",
            spades: "♠",
            clubs: "♣",
            hearts: "♥",
            diams: "♦"
          };
          module.exports = exports["default"];
        }, {}],
        625: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }
          var _types = _dereq_(628);
          var TokContext = function TokContext(token, isExpr, preserveSpace, override) {
            _classCallCheck(this, TokContext);
            this.token = token;
            this.isExpr = !!isExpr;
            this.preserveSpace = !!preserveSpace;
            this.override = override;
          };
          exports.TokContext = TokContext;
          var types = {
            b_stat: new TokContext("{", false),
            b_expr: new TokContext("{", true),
            b_tmpl: new TokContext("${", true),
            p_stat: new TokContext("(", false),
            p_expr: new TokContext("(", true),
            q_tmpl: new TokContext("`", true, true, function(p) {
              return p.readTmplToken();
            }),
            f_expr: new TokContext("function", true)
          };
          exports.types = types;
          _types.types.parenR.updateContext = _types.types.braceR.updateContext = function() {
            if (this.state.context.length === 1) {
              this.state.exprAllowed = true;
              return;
            }
            var out = this.state.context.pop();
            if (out === types.b_stat && this.curContext() === types.f_expr) {
              this.state.context.pop();
              this.state.exprAllowed = false;
            } else if (out === types.b_tmpl) {
              this.state.exprAllowed = true;
            } else {
              this.state.exprAllowed = !out.isExpr;
            }
          };
          _types.types.braceL.updateContext = function(prevType) {
            this.state.context.push(this.braceIsBlock(prevType) ? types.b_stat : types.b_expr);
            this.state.exprAllowed = true;
          };
          _types.types.dollarBraceL.updateContext = function() {
            this.state.context.push(types.b_tmpl);
            this.state.exprAllowed = true;
          };
          _types.types.parenL.updateContext = function(prevType) {
            var statementParens = prevType === _types.types._if || prevType === _types.types._for || prevType === _types.types._with || prevType === _types.types._while;
            this.state.context.push(statementParens ? types.p_stat : types.p_expr);
            this.state.exprAllowed = true;
          };
          _types.types.incDec.updateContext = function() {};
          _types.types._function.updateContext = function() {
            if (this.curContext() !== types.b_stat) {
              this.state.context.push(types.f_expr);
            }
            this.state.exprAllowed = false;
          };
          _types.types.backQuote.updateContext = function() {
            if (this.curContext() === types.q_tmpl) {
              this.state.context.pop();
            } else {
              this.state.context.push(types.q_tmpl);
            }
            this.state.exprAllowed = false;
          };
        }, {"628": 628}],
        626: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : {"default": obj};
          }
          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }
          var _utilIdentifier = _dereq_(629);
          var _types = _dereq_(628);
          var _context = _dereq_(625);
          var _utilLocation = _dereq_(630);
          var _utilWhitespace = _dereq_(631);
          var _state = _dereq_(627);
          var _state2 = _interopRequireDefault(_state);
          var Token = function Token(state) {
            _classCallCheck(this, Token);
            this.type = state.type;
            this.value = state.value;
            this.start = state.start;
            this.end = state.end;
            this.loc = new _utilLocation.SourceLocation(state.startLoc, state.endLoc);
          };
          ;
          exports.Token = Token;
          var isRhino = typeof Packages === "object" && Object.prototype.toString.call(Packages) === "[object JavaPackage]";
          function tryCreateRegexp(src, flags, throwErrorStart) {
            try {
              return new RegExp(src, flags);
            } catch (e) {
              if (throwErrorStart !== undefined) {
                if (e instanceof SyntaxError)
                  this.raise(throwErrorStart, "Error parsing regular expression: " + e.message);
                this.raise(e);
              }
            }
          }
          var regexpUnicodeSupport = !!tryCreateRegexp("￿", "u");
          function codePointToString(code) {
            if (code <= 0xFFFF)
              return String.fromCharCode(code);
            return String.fromCharCode((code - 0x10000 >> 10) + 0xD800, (code - 0x10000 & 1023) + 0xDC00);
          }
          var Tokenizer = (function() {
            function Tokenizer(input) {
              _classCallCheck(this, Tokenizer);
              this.state = new _state2["default"]();
              this.state.init(input);
            }
            Tokenizer.prototype.next = function next() {
              this.state.tokens.push(new Token(this.state));
              this.state.lastTokEnd = this.state.end;
              this.state.lastTokStart = this.state.start;
              this.state.lastTokEndLoc = this.state.endLoc;
              this.state.lastTokStartLoc = this.state.startLoc;
              this.nextToken();
            };
            Tokenizer.prototype.eat = function eat(type) {
              if (this.match(type)) {
                this.next();
                return true;
              } else {
                return false;
              }
            };
            Tokenizer.prototype.match = function match(type) {
              return this.state.type === type;
            };
            Tokenizer.prototype.lookahead = function lookahead() {
              var old = this.state;
              this.state = old.clone();
              this.next();
              var curr = this.state.clone();
              this.state = old;
              return curr;
            };
            Tokenizer.prototype.setStrict = function setStrict(strict) {
              this.strict = strict;
              if (!this.match(_types.types.num) && !this.match(_types.types.string))
                return;
              this.state.pos = this.state.start;
              while (this.state.pos < this.state.lineStart) {
                this.state.lineStart = this.input.lastIndexOf("\n", this.state.lineStart - 2) + 1;
                --this.state.curLine;
              }
              this.nextToken();
            };
            Tokenizer.prototype.curContext = function curContext() {
              return this.state.context[this.state.context.length - 1];
            };
            Tokenizer.prototype.nextToken = function nextToken() {
              var curContext = this.curContext();
              if (!curContext || !curContext.preserveSpace)
                this.skipSpace();
              this.state.start = this.state.pos;
              this.state.startLoc = this.state.curPosition();
              if (this.state.pos >= this.input.length)
                return this.finishToken(_types.types.eof);
              if (curContext.override) {
                return curContext.override(this);
              } else {
                return this.readToken(this.fullCharCodeAtPos());
              }
            };
            Tokenizer.prototype.readToken = function readToken(code) {
              if (_utilIdentifier.isIdentifierStart(code, true) || code === 92)
                return this.readWord();
              return this.getTokenFromCode(code);
            };
            Tokenizer.prototype.fullCharCodeAtPos = function fullCharCodeAtPos() {
              var code = this.input.charCodeAt(this.state.pos);
              if (code <= 0xd7ff || code >= 0xe000)
                return code;
              var next = this.input.charCodeAt(this.state.pos + 1);
              return (code << 10) + next - 0x35fdc00;
            };
            Tokenizer.prototype.pushComment = function pushComment(block, text, start, end, startLoc, endLoc) {
              var comment = {
                type: block ? "CommentBlock" : "CommentLine",
                value: text,
                start: start,
                end: end,
                loc: new _utilLocation.SourceLocation(startLoc, endLoc),
                range: [start, end]
              };
              this.state.tokens.push(comment);
              this.state.comments.push(comment);
              this.addComment(comment);
            };
            Tokenizer.prototype.skipBlockComment = function skipBlockComment() {
              var startLoc = this.state.curPosition();
              var start = this.state.pos,
                  end = this.input.indexOf("*/", this.state.pos += 2);
              if (end === -1)
                this.raise(this.state.pos - 2, "Unterminated comment");
              this.state.pos = end + 2;
              _utilWhitespace.lineBreakG.lastIndex = start;
              var match = undefined;
              while ((match = _utilWhitespace.lineBreakG.exec(this.input)) && match.index < this.state.pos) {
                ++this.state.curLine;
                this.state.lineStart = match.index + match[0].length;
              }
              this.pushComment(true, this.input.slice(start + 2, end), start, this.state.pos, startLoc, this.state.curPosition());
            };
            Tokenizer.prototype.skipLineComment = function skipLineComment(startSkip) {
              var start = this.state.pos;
              var startLoc = this.state.curPosition();
              var ch = this.input.charCodeAt(this.state.pos += startSkip);
              while (this.state.pos < this.input.length && ch !== 10 && ch !== 13 && ch !== 8232 && ch !== 8233) {
                ++this.state.pos;
                ch = this.input.charCodeAt(this.state.pos);
              }
              this.pushComment(false, this.input.slice(start + startSkip, this.state.pos), start, this.state.pos, startLoc, this.state.curPosition());
            };
            Tokenizer.prototype.skipSpace = function skipSpace() {
              loop: while (this.state.pos < this.input.length) {
                var ch = this.input.charCodeAt(this.state.pos);
                switch (ch) {
                  case 32:
                  case 160:
                    ++this.state.pos;
                    break;
                  case 13:
                    if (this.input.charCodeAt(this.state.pos + 1) === 10) {
                      ++this.state.pos;
                    }
                  case 10:
                  case 8232:
                  case 8233:
                    ++this.state.pos;
                    ++this.state.curLine;
                    this.state.lineStart = this.state.pos;
                    break;
                  case 47:
                    switch (this.input.charCodeAt(this.state.pos + 1)) {
                      case 42:
                        this.skipBlockComment();
                        break;
                      case 47:
                        this.skipLineComment(2);
                        break;
                      default:
                        break loop;
                    }
                    break;
                  default:
                    if (ch > 8 && ch < 14 || ch >= 5760 && _utilWhitespace.nonASCIIwhitespace.test(String.fromCharCode(ch))) {
                      ++this.state.pos;
                    } else {
                      break loop;
                    }
                }
              }
            };
            Tokenizer.prototype.finishToken = function finishToken(type, val) {
              this.state.end = this.state.pos;
              this.state.endLoc = this.state.curPosition();
              var prevType = this.state.type;
              this.state.type = type;
              this.state.value = val;
              this.updateContext(prevType);
            };
            Tokenizer.prototype.readToken_dot = function readToken_dot() {
              var next = this.input.charCodeAt(this.state.pos + 1);
              if (next >= 48 && next <= 57) {
                return this.readNumber(true);
              }
              var next2 = this.input.charCodeAt(this.state.pos + 2);
              if (next === 46 && next2 === 46) {
                this.state.pos += 3;
                return this.finishToken(_types.types.ellipsis);
              } else {
                ++this.state.pos;
                return this.finishToken(_types.types.dot);
              }
            };
            Tokenizer.prototype.readToken_slash = function readToken_slash() {
              if (this.state.exprAllowed) {
                ++this.state.pos;
                return this.readRegexp();
              }
              var next = this.input.charCodeAt(this.state.pos + 1);
              if (next === 61) {
                return this.finishOp(_types.types.assign, 2);
              } else {
                return this.finishOp(_types.types.slash, 1);
              }
            };
            Tokenizer.prototype.readToken_mult_modulo = function readToken_mult_modulo(code) {
              var type = code === 42 ? _types.types.star : _types.types.modulo;
              var width = 1;
              var next = this.input.charCodeAt(this.state.pos + 1);
              if (next === 42 && this.options.features["es7.exponentiationOperator"]) {
                width++;
                next = this.input.charCodeAt(this.state.pos + 2);
                type = _types.types.exponent;
              }
              if (next === 61) {
                width++;
                type = _types.types.assign;
              }
              return this.finishOp(type, width);
            };
            Tokenizer.prototype.readToken_pipe_amp = function readToken_pipe_amp(code) {
              var next = this.input.charCodeAt(this.state.pos + 1);
              if (next === code)
                return this.finishOp(code === 124 ? _types.types.logicalOR : _types.types.logicalAND, 2);
              if (next === 61)
                return this.finishOp(_types.types.assign, 2);
              return this.finishOp(code === 124 ? _types.types.bitwiseOR : _types.types.bitwiseAND, 1);
            };
            Tokenizer.prototype.readToken_caret = function readToken_caret() {
              var next = this.input.charCodeAt(this.state.pos + 1);
              if (next === 61) {
                return this.finishOp(_types.types.assign, 2);
              } else {
                return this.finishOp(_types.types.bitwiseXOR, 1);
              }
            };
            Tokenizer.prototype.readToken_plus_min = function readToken_plus_min(code) {
              var next = this.input.charCodeAt(this.state.pos + 1);
              if (next === code) {
                if (next === 45 && this.input.charCodeAt(this.state.pos + 2) === 62 && _utilWhitespace.lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.pos))) {
                  this.skipLineComment(3);
                  this.skipSpace();
                  return this.nextToken();
                }
                return this.finishOp(_types.types.incDec, 2);
              }
              if (next === 61) {
                return this.finishOp(_types.types.assign, 2);
              } else {
                return this.finishOp(_types.types.plusMin, 1);
              }
            };
            Tokenizer.prototype.readToken_lt_gt = function readToken_lt_gt(code) {
              var next = this.input.charCodeAt(this.state.pos + 1);
              var size = 1;
              if (next === code) {
                size = code === 62 && this.input.charCodeAt(this.state.pos + 2) === 62 ? 3 : 2;
                if (this.input.charCodeAt(this.state.pos + size) === 61)
                  return this.finishOp(_types.types.assign, size + 1);
                return this.finishOp(_types.types.bitShift, size);
              }
              if (next === 33 && code === 60 && this.input.charCodeAt(this.state.pos + 2) === 45 && this.input.charCodeAt(this.state.pos + 3) === 45) {
                if (this.inModule)
                  this.unexpected();
                this.skipLineComment(4);
                this.skipSpace();
                return this.nextToken();
              }
              if (next === 61) {
                size = this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2;
              }
              return this.finishOp(_types.types.relational, size);
            };
            Tokenizer.prototype.readToken_eq_excl = function readToken_eq_excl(code) {
              var next = this.input.charCodeAt(this.state.pos + 1);
              if (next === 61)
                return this.finishOp(_types.types.equality, this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2);
              if (code === 61 && next === 62) {
                this.state.pos += 2;
                return this.finishToken(_types.types.arrow);
              }
              return this.finishOp(code === 61 ? _types.types.eq : _types.types.prefix, 1);
            };
            Tokenizer.prototype.getTokenFromCode = function getTokenFromCode(code) {
              switch (code) {
                case 46:
                  return this.readToken_dot();
                case 40:
                  ++this.state.pos;
                  return this.finishToken(_types.types.parenL);
                case 41:
                  ++this.state.pos;
                  return this.finishToken(_types.types.parenR);
                case 59:
                  ++this.state.pos;
                  return this.finishToken(_types.types.semi);
                case 44:
                  ++this.state.pos;
                  return this.finishToken(_types.types.comma);
                case 91:
                  ++this.state.pos;
                  return this.finishToken(_types.types.bracketL);
                case 93:
                  ++this.state.pos;
                  return this.finishToken(_types.types.bracketR);
                case 123:
                  ++this.state.pos;
                  return this.finishToken(_types.types.braceL);
                case 125:
                  ++this.state.pos;
                  return this.finishToken(_types.types.braceR);
                case 58:
                  if (this.options.features["es7.functionBind"] && this.input.charCodeAt(this.state.pos + 1) === 58) {
                    return this.finishOp(_types.types.doubleColon, 2);
                  } else {
                    ++this.state.pos;
                    return this.finishToken(_types.types.colon);
                  }
                case 63:
                  ++this.state.pos;
                  return this.finishToken(_types.types.question);
                case 64:
                  ++this.state.pos;
                  return this.finishToken(_types.types.at);
                case 96:
                  ++this.state.pos;
                  return this.finishToken(_types.types.backQuote);
                case 48:
                  var next = this.input.charCodeAt(this.state.pos + 1);
                  if (next === 120 || next === 88)
                    return this.readRadixNumber(16);
                  if (next === 111 || next === 79)
                    return this.readRadixNumber(8);
                  if (next === 98 || next === 66)
                    return this.readRadixNumber(2);
                case 49:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54:
                case 55:
                case 56:
                case 57:
                  return this.readNumber(false);
                case 34:
                case 39:
                  return this.readString(code);
                case 47:
                  return this.readToken_slash();
                case 37:
                case 42:
                  return this.readToken_mult_modulo(code);
                case 124:
                case 38:
                  return this.readToken_pipe_amp(code);
                case 94:
                  return this.readToken_caret();
                case 43:
                case 45:
                  return this.readToken_plus_min(code);
                case 60:
                case 62:
                  return this.readToken_lt_gt(code);
                case 61:
                case 33:
                  return this.readToken_eq_excl(code);
                case 126:
                  return this.finishOp(_types.types.prefix, 1);
              }
              this.raise(this.state.pos, "Unexpected character '" + codePointToString(code) + "'");
            };
            Tokenizer.prototype.finishOp = function finishOp(type, size) {
              var str = this.input.slice(this.state.pos, this.state.pos + size);
              this.state.pos += size;
              return this.finishToken(type, str);
            };
            Tokenizer.prototype.readRegexp = function readRegexp() {
              var _this = this;
              var escaped = undefined,
                  inClass = undefined,
                  start = this.state.pos;
              for (; ; ) {
                if (this.state.pos >= this.input.length)
                  this.raise(start, "Unterminated regular expression");
                var ch = this.input.charAt(this.state.pos);
                if (_utilWhitespace.lineBreak.test(ch)) {
                  this.raise(start, "Unterminated regular expression");
                }
                if (escaped) {
                  escaped = false;
                } else {
                  if (ch === "[") {
                    inClass = true;
                  } else if (ch === "]" && inClass) {
                    inClass = false;
                  } else if (ch === "/" && !inClass) {
                    break;
                  }
                  escaped = ch === "\\";
                }
                ++this.state.pos;
              }
              var content = this.input.slice(start, this.state.pos);
              ++this.state.pos;
              var mods = this.readWord1();
              var tmp = content;
              if (mods) {
                var validFlags = /^[gmsiyu]*$/;
                if (!validFlags.test(mods))
                  this.raise(start, "Invalid regular expression flag");
                if (mods.indexOf("u") >= 0 && !regexpUnicodeSupport) {
                  tmp = tmp.replace(/\\u\{([0-9a-fA-F]+)\}/g, function(match, code, offset) {
                    code = Number("0x" + code);
                    if (code > 0x10FFFF)
                      _this.raise(start + offset + 3, "Code point out of bounds");
                    return "x";
                  });
                  tmp = tmp.replace(/\\u([a-fA-F0-9]{4})|[\uD800-\uDBFF][\uDC00-\uDFFF]/g, "x");
                }
              }
              var value = null;
              if (!isRhino) {
                tryCreateRegexp.call(this, tmp, undefined, start);
                value = tryCreateRegexp.call(this, content, mods);
              }
              return this.finishToken(_types.types.regexp, {
                pattern: content,
                flags: mods,
                value: value
              });
            };
            Tokenizer.prototype.readInt = function readInt(radix, len) {
              var start = this.state.pos,
                  total = 0;
              for (var i = 0,
                  e = len == null ? Infinity : len; i < e; ++i) {
                var code = this.input.charCodeAt(this.state.pos),
                    val = undefined;
                if (code >= 97) {
                  val = code - 97 + 10;
                } else if (code >= 65) {
                  val = code - 65 + 10;
                } else if (code >= 48 && code <= 57) {
                  val = code - 48;
                } else {
                  val = Infinity;
                }
                if (val >= radix)
                  break;
                ++this.state.pos;
                total = total * radix + val;
              }
              if (this.state.pos === start || len != null && this.state.pos - start !== len)
                return null;
              return total;
            };
            Tokenizer.prototype.readRadixNumber = function readRadixNumber(radix) {
              this.state.pos += 2;
              var val = this.readInt(radix);
              if (val == null)
                this.raise(this.state.start + 2, "Expected number in radix " + radix);
              if (_utilIdentifier.isIdentifierStart(this.fullCharCodeAtPos()))
                this.raise(this.state.pos, "Identifier directly after number");
              return this.finishToken(_types.types.num, val);
            };
            Tokenizer.prototype.readNumber = function readNumber(startsWithDot) {
              var start = this.state.pos,
                  isFloat = false,
                  octal = this.input.charCodeAt(this.state.pos) === 48;
              if (!startsWithDot && this.readInt(10) === null)
                this.raise(start, "Invalid number");
              var next = this.input.charCodeAt(this.state.pos);
              if (next === 46) {
                ++this.state.pos;
                this.readInt(10);
                isFloat = true;
                next = this.input.charCodeAt(this.state.pos);
              }
              if (next === 69 || next === 101) {
                next = this.input.charCodeAt(++this.state.pos);
                if (next === 43 || next === 45)
                  ++this.state.pos;
                if (this.readInt(10) === null)
                  this.raise(start, "Invalid number");
                isFloat = true;
              }
              if (_utilIdentifier.isIdentifierStart(this.fullCharCodeAtPos()))
                this.raise(this.state.pos, "Identifier directly after number");
              var str = this.input.slice(start, this.state.pos),
                  val = undefined;
              if (isFloat) {
                val = parseFloat(str);
              } else if (!octal || str.length === 1) {
                val = parseInt(str, 10);
              } else if (/[89]/.test(str) || this.strict) {
                this.raise(start, "Invalid number");
              } else {
                val = parseInt(str, 8);
              }
              return this.finishToken(_types.types.num, val);
            };
            Tokenizer.prototype.readCodePoint = function readCodePoint() {
              var ch = this.input.charCodeAt(this.state.pos),
                  code = undefined;
              if (ch === 123) {
                var codePos = ++this.state.pos;
                code = this.readHexChar(this.input.indexOf("}", this.state.pos) - this.state.pos);
                ++this.state.pos;
                if (code > 0x10FFFF)
                  this.raise(codePos, "Code point out of bounds");
              } else {
                code = this.readHexChar(4);
              }
              return code;
            };
            Tokenizer.prototype.readString = function readString(quote) {
              var out = "",
                  chunkStart = ++this.state.pos;
              for (; ; ) {
                if (this.state.pos >= this.input.length)
                  this.raise(this.state.start, "Unterminated string constant");
                var ch = this.input.charCodeAt(this.state.pos);
                if (ch === quote)
                  break;
                if (ch === 92) {
                  out += this.input.slice(chunkStart, this.state.pos);
                  out += this.readEscapedChar(false);
                  chunkStart = this.state.pos;
                } else {
                  if (_utilWhitespace.isNewLine(ch))
                    this.raise(this.state.start, "Unterminated string constant");
                  ++this.state.pos;
                }
              }
              out += this.input.slice(chunkStart, this.state.pos++);
              return this.finishToken(_types.types.string, out);
            };
            Tokenizer.prototype.readTmplToken = function readTmplToken() {
              var out = "",
                  chunkStart = this.state.pos;
              for (; ; ) {
                if (this.state.pos >= this.input.length)
                  this.raise(this.state.start, "Unterminated template");
                var ch = this.input.charCodeAt(this.state.pos);
                if (ch === 96 || ch === 36 && this.input.charCodeAt(this.state.pos + 1) === 123) {
                  if (this.state.pos === this.state.start && this.match(_types.types.template)) {
                    if (ch === 36) {
                      this.state.pos += 2;
                      return this.finishToken(_types.types.dollarBraceL);
                    } else {
                      ++this.state.pos;
                      return this.finishToken(_types.types.backQuote);
                    }
                  }
                  out += this.input.slice(chunkStart, this.state.pos);
                  return this.finishToken(_types.types.template, out);
                }
                if (ch === 92) {
                  out += this.input.slice(chunkStart, this.state.pos);
                  out += this.readEscapedChar(true);
                  chunkStart = this.state.pos;
                } else if (_utilWhitespace.isNewLine(ch)) {
                  out += this.input.slice(chunkStart, this.state.pos);
                  ++this.state.pos;
                  switch (ch) {
                    case 13:
                      if (this.input.charCodeAt(this.state.pos) === 10)
                        ++this.state.pos;
                    case 10:
                      out += "\n";
                      break;
                    default:
                      out += String.fromCharCode(ch);
                      break;
                  }
                  ++this.state.curLine;
                  this.state.lineStart = this.state.pos;
                  chunkStart = this.state.pos;
                } else {
                  ++this.state.pos;
                }
              }
            };
            Tokenizer.prototype.readEscapedChar = function readEscapedChar(inTemplate) {
              var ch = this.input.charCodeAt(++this.state.pos);
              ++this.state.pos;
              switch (ch) {
                case 110:
                  return "\n";
                case 114:
                  return "\r";
                case 120:
                  return String.fromCharCode(this.readHexChar(2));
                case 117:
                  return codePointToString(this.readCodePoint());
                case 116:
                  return "\t";
                case 98:
                  return "\b";
                case 118:
                  return "\u000b";
                case 102:
                  return "\f";
                case 13:
                  if (this.input.charCodeAt(this.state.pos) === 10)
                    ++this.state.pos;
                case 10:
                  this.state.lineStart = this.state.pos;
                  ++this.state.curLine;
                  return "";
                default:
                  if (ch >= 48 && ch <= 55) {
                    var octalStr = this.input.substr(this.state.pos - 1, 3).match(/^[0-7]+/)[0];
                    var octal = parseInt(octalStr, 8);
                    if (octal > 255) {
                      octalStr = octalStr.slice(0, -1);
                      octal = parseInt(octalStr, 8);
                    }
                    if (octal > 0 && (this.strict || inTemplate)) {
                      this.raise(this.state.pos - 2, "Octal literal in strict mode");
                    }
                    this.state.pos += octalStr.length - 1;
                    return String.fromCharCode(octal);
                  }
                  return String.fromCharCode(ch);
              }
            };
            Tokenizer.prototype.readHexChar = function readHexChar(len) {
              var codePos = this.state.pos;
              var n = this.readInt(16, len);
              if (n === null)
                this.raise(codePos, "Bad character escape sequence");
              return n;
            };
            Tokenizer.prototype.readWord1 = function readWord1() {
              this.state.containsEsc = false;
              var word = "",
                  first = true,
                  chunkStart = this.state.pos;
              while (this.state.pos < this.input.length) {
                var ch = this.fullCharCodeAtPos();
                if (_utilIdentifier.isIdentifierChar(ch, true)) {
                  this.state.pos += ch <= 0xffff ? 1 : 2;
                } else if (ch === 92) {
                  this.state.containsEsc = true;
                  word += this.input.slice(chunkStart, this.state.pos);
                  var escStart = this.state.pos;
                  if (this.input.charCodeAt(++this.state.pos) !== 117) {
                    this.raise(this.state.pos, "Expecting Unicode escape sequence \\uXXXX");
                  }
                  ++this.state.pos;
                  var esc = this.readCodePoint();
                  if (!(first ? _utilIdentifier.isIdentifierStart : _utilIdentifier.isIdentifierChar)(esc, true)) {
                    this.raise(escStart, "Invalid Unicode escape");
                  }
                  word += codePointToString(esc);
                  chunkStart = this.state.pos;
                } else {
                  break;
                }
                first = false;
              }
              return word + this.input.slice(chunkStart, this.state.pos);
            };
            Tokenizer.prototype.readWord = function readWord() {
              var word = this.readWord1();
              var type = _types.types.name;
              if (!this.state.containsEsc && this.isKeyword(word))
                type = _types.keywords[word];
              return this.finishToken(type, word);
            };
            Tokenizer.prototype.braceIsBlock = function braceIsBlock(prevType) {
              if (prevType === _types.types.colon) {
                var _parent = this.curContext();
                if (_parent === _context.types.b_stat || _parent === _context.types.b_expr) {
                  return !_parent.isExpr;
                }
              }
              if (prevType === _types.types._return) {
                return _utilWhitespace.lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start));
              }
              if (prevType === _types.types._else || prevType === _types.types.semi || prevType === _types.types.eof || prevType === _types.types.parenR) {
                return true;
              }
              if (prevType === _types.types.braceL) {
                return this.curContext() === _context.types.b_stat;
              }
              return !this.state.exprAllowed;
            };
            Tokenizer.prototype.updateContext = function updateContext(prevType) {
              var update = undefined,
                  type = this.state.type;
              if (type.keyword && prevType === _types.types.dot) {
                this.state.exprAllowed = false;
              } else if (update = type.updateContext) {
                update.call(this, prevType);
              } else {
                this.state.exprAllowed = type.beforeExpr;
              }
            };
            return Tokenizer;
          })();
          exports["default"] = Tokenizer;
        }, {
          "625": 625,
          "627": 627,
          "628": 628,
          "629": 629,
          "630": 630,
          "631": 631
        }],
        627: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }
          var _utilLocation = _dereq_(630);
          var _context = _dereq_(625);
          var _types = _dereq_(628);
          var State = (function() {
            function State() {
              _classCallCheck(this, State);
            }
            State.prototype.init = function init(input) {
              this.input = input;
              this.potentialArrowAt = -1;
              this.inFunction = this.inGenerator = false;
              this.labels = [];
              this.decorators = [];
              this.tokens = [];
              this.comments = [];
              this.trailingComments = [];
              this.leadingComments = [];
              this.commentStack = [];
              this.pos = this.lineStart = 0;
              this.curLine = 1;
              this.type = _types.types.eof;
              this.value = null;
              this.start = this.end = this.pos;
              this.startLoc = this.endLoc = this.curPosition();
              this.lastTokEndLoc = this.lastTokStartLoc = null;
              this.lastTokStart = this.lastTokEnd = this.pos;
              this.context = [_context.types.b_stat];
              this.exprAllowed = true;
              this.containsEsc = false;
              return this;
            };
            State.prototype.curPosition = function curPosition() {
              return new _utilLocation.Position(this.curLine, this.pos - this.lineStart);
            };
            State.prototype.clone = function clone() {
              var state = new State();
              for (var key in this) {
                var val = this[key];
                if (Array.isArray(val))
                  val = val.slice();
                state[key] = val;
              }
              return state;
            };
            return State;
          })();
          exports["default"] = State;
          module.exports = exports["default"];
        }, {
          "625": 625,
          "628": 628,
          "630": 630
        }],
        628: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }
          var TokenType = function TokenType(label) {
            var conf = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
            _classCallCheck(this, TokenType);
            this.label = label;
            this.keyword = conf.keyword;
            this.beforeExpr = !!conf.beforeExpr;
            this.startsExpr = !!conf.startsExpr;
            this.rightAssociative = !!conf.rightAssociative;
            this.isLoop = !!conf.isLoop;
            this.isAssign = !!conf.isAssign;
            this.prefix = !!conf.prefix;
            this.postfix = !!conf.postfix;
            this.binop = conf.binop || null;
            this.updateContext = null;
          };
          exports.TokenType = TokenType;
          function binop(name, prec) {
            return new TokenType(name, {
              beforeExpr: true,
              binop: prec
            });
          }
          var beforeExpr = {beforeExpr: true},
              startsExpr = {startsExpr: true};
          var types = {
            num: new TokenType("num", startsExpr),
            regexp: new TokenType("regexp", startsExpr),
            string: new TokenType("string", startsExpr),
            name: new TokenType("name", startsExpr),
            eof: new TokenType("eof"),
            bracketL: new TokenType("[", {
              beforeExpr: true,
              startsExpr: true
            }),
            bracketR: new TokenType("]"),
            braceL: new TokenType("{", {
              beforeExpr: true,
              startsExpr: true
            }),
            braceR: new TokenType("}"),
            parenL: new TokenType("(", {
              beforeExpr: true,
              startsExpr: true
            }),
            parenR: new TokenType(")"),
            comma: new TokenType(",", beforeExpr),
            semi: new TokenType(";", beforeExpr),
            colon: new TokenType(":", beforeExpr),
            doubleColon: new TokenType("::", beforeExpr),
            dot: new TokenType("."),
            question: new TokenType("?", beforeExpr),
            arrow: new TokenType("=>", beforeExpr),
            template: new TokenType("template"),
            ellipsis: new TokenType("...", beforeExpr),
            backQuote: new TokenType("`", startsExpr),
            dollarBraceL: new TokenType("${", {
              beforeExpr: true,
              startsExpr: true
            }),
            at: new TokenType("@"),
            eq: new TokenType("=", {
              beforeExpr: true,
              isAssign: true
            }),
            assign: new TokenType("_=", {
              beforeExpr: true,
              isAssign: true
            }),
            incDec: new TokenType("++/--", {
              prefix: true,
              postfix: true,
              startsExpr: true
            }),
            prefix: new TokenType("prefix", {
              beforeExpr: true,
              prefix: true,
              startsExpr: true
            }),
            logicalOR: binop("||", 1),
            logicalAND: binop("&&", 2),
            bitwiseOR: binop("|", 3),
            bitwiseXOR: binop("^", 4),
            bitwiseAND: binop("&", 5),
            equality: binop("==/!=", 6),
            relational: binop("</>", 7),
            bitShift: binop("<</>>", 8),
            plusMin: new TokenType("+/-", {
              beforeExpr: true,
              binop: 9,
              prefix: true,
              startsExpr: true
            }),
            modulo: binop("%", 10),
            star: binop("*", 10),
            slash: binop("/", 10),
            exponent: new TokenType("**", {
              beforeExpr: true,
              binop: 11,
              rightAssociative: true
            })
          };
          exports.types = types;
          var keywords = {};
          exports.keywords = keywords;
          function kw(name) {
            var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
            options.keyword = name;
            keywords[name] = types["_" + name] = new TokenType(name, options);
          }
          kw("break");
          kw("case", beforeExpr);
          kw("catch");
          kw("continue");
          kw("debugger");
          kw("default", beforeExpr);
          kw("do", {isLoop: true});
          kw("else", beforeExpr);
          kw("finally");
          kw("for", {isLoop: true});
          kw("function", startsExpr);
          kw("if");
          kw("return", beforeExpr);
          kw("switch");
          kw("throw", beforeExpr);
          kw("try");
          kw("var");
          kw("let");
          kw("const");
          kw("while", {isLoop: true});
          kw("with");
          kw("new", {
            beforeExpr: true,
            startsExpr: true
          });
          kw("this", startsExpr);
          kw("super", startsExpr);
          kw("class");
          kw("extends", beforeExpr);
          kw("export");
          kw("import");
          kw("yield", {
            beforeExpr: true,
            startsExpr: true
          });
          kw("null", startsExpr);
          kw("true", startsExpr);
          kw("false", startsExpr);
          kw("in", {
            beforeExpr: true,
            binop: 7
          });
          kw("instanceof", {
            beforeExpr: true,
            binop: 7
          });
          kw("typeof", {
            beforeExpr: true,
            prefix: true,
            startsExpr: true
          });
          kw("void", {
            beforeExpr: true,
            prefix: true,
            startsExpr: true
          });
          kw("delete", {
            beforeExpr: true,
            prefix: true,
            startsExpr: true
          });
        }, {}],
        629: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          exports.isIdentifierStart = isIdentifierStart;
          exports.isIdentifierChar = isIdentifierChar;
          function makePredicate(words) {
            words = words.split(" ");
            return function(str) {
              return words.indexOf(str) >= 0;
            };
          }
          var reservedWords = {
            6: makePredicate("enum await"),
            strict: makePredicate("implements interface let package private protected public static yield"),
            strictBind: makePredicate("eval arguments")
          };
          exports.reservedWords = reservedWords;
          var isKeyword = makePredicate("break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this let const class extends export import yield super");
          exports.isKeyword = isKeyword;
          var nonASCIIidentifierStartChars = "ªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢲऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕ℘-ℝℤΩℨK-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞ々-〇〡-〩〱-〵〸-〼ぁ-ゖ゛-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞭꞰꞱꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭟꭤꭥꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ";
          var nonASCIIidentifierChars = "‌‍·̀-ͯ·҃-֑҇-ׇֽֿׁׂׅׄؐ-ًؚ-٩ٰۖ-ۜ۟-۪ۤۧۨ-ۭ۰-۹ܑܰ-݊ަ-ް߀-߉߫-߳ࠖ-࠙ࠛ-ࠣࠥ-ࠧࠩ-࡙࠭-࡛ࣤ-ःऺ-़ा-ॏ॑-ॗॢॣ०-९ঁ-ঃ়া-ৄেৈো-্ৗৢৣ০-৯ਁ-ਃ਼ਾ-ੂੇੈੋ-੍ੑ੦-ੱੵઁ-ઃ઼ા-ૅે-ૉો-્ૢૣ૦-૯ଁ-ଃ଼ା-ୄେୈୋ-୍ୖୗୢୣ୦-୯ஂா-ூெ-ைொ-்ௗ௦-௯ఀ-ఃా-ౄె-ైొ-్ౕౖౢౣ౦-౯ಁ-ಃ಼ಾ-ೄೆ-ೈೊ-್ೕೖೢೣ೦-೯ഁ-ഃാ-ൄെ-ൈൊ-്ൗൢൣ൦-൯ංඃ්ා-ුූෘ-ෟ෦-෯ෲෳัิ-ฺ็-๎๐-๙ັິ-ູົຼ່-ໍ໐-໙༘༙༠-༩༹༵༷༾༿ཱ-྄྆྇ྍ-ྗྙ-ྼ࿆ါ-ှ၀-၉ၖ-ၙၞ-ၠၢ-ၤၧ-ၭၱ-ၴႂ-ႍႏ-ႝ፝-፟፩-፱ᜒ-᜔ᜲ-᜴ᝒᝓᝲᝳ឴-៓៝០-៩᠋-᠍᠐-᠙ᢩᤠ-ᤫᤰ-᤻᥆-᥏ᦰ-ᧀᧈᧉ᧐-᧚ᨗ-ᨛᩕ-ᩞ᩠-᩿᩼-᪉᪐-᪙᪰-᪽ᬀ-ᬄ᬴-᭄᭐-᭙᭫-᭳ᮀ-ᮂᮡ-ᮭ᮰-᮹᯦-᯳ᰤ-᰷᱀-᱉᱐-᱙᳐-᳔᳒-᳨᳭ᳲ-᳴᳸᳹᷀-᷵᷼-᷿‿⁀⁔⃐-⃥⃜⃡-⃰⳯-⵿⳱ⷠ-〪ⷿ-゙゚〯꘠-꘩꙯ꙴ-꙽ꚟ꛰꛱ꠂ꠆ꠋꠣ-ꠧꢀꢁꢴ-꣄꣐-꣙꣠-꣱꤀-꤉ꤦ-꤭ꥇ-꥓ꦀ-ꦃ꦳-꧀꧐-꧙ꧥ꧰-꧹ꨩ-ꨶꩃꩌꩍ꩐-꩙ꩻ-ꩽꪰꪲ-ꪴꪷꪸꪾ꪿꫁ꫫ-ꫯꫵ꫶ꯣ-ꯪ꯬꯭꯰-꯹ﬞ︀-️︠-︭︳︴﹍-﹏０-９＿";
          var nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]");
          var nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");
          nonASCIIidentifierStartChars = nonASCIIidentifierChars = null;
          var astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 17, 26, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 99, 39, 9, 51, 157, 310, 10, 21, 11, 7, 153, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 98, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 26, 45, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 955, 52, 76, 44, 33, 24, 27, 35, 42, 34, 4, 0, 13, 47, 15, 3, 22, 0, 38, 17, 2, 24, 133, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 32, 4, 287, 47, 21, 1, 2, 0, 185, 46, 82, 47, 21, 0, 60, 42, 502, 63, 32, 0, 449, 56, 1288, 920, 104, 110, 2962, 1070, 13266, 568, 8, 30, 114, 29, 19, 47, 17, 3, 32, 20, 6, 18, 881, 68, 12, 0, 67, 12, 16481, 1, 3071, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 4149, 196, 1340, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42710, 42, 4148, 12, 221, 16355, 541];
          var astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 1306, 2, 54, 14, 32, 9, 16, 3, 46, 10, 54, 9, 7, 2, 37, 13, 2, 9, 52, 0, 13, 2, 49, 13, 16, 9, 83, 11, 168, 11, 6, 9, 8, 2, 57, 0, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 316, 19, 13, 9, 214, 6, 3, 8, 112, 16, 16, 9, 82, 12, 9, 9, 535, 9, 20855, 9, 135, 4, 60, 6, 26, 9, 1016, 45, 17, 3, 19723, 1, 5319, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 4305, 6, 792618, 239];
          function isInAstralSet(code, set) {
            var pos = 0x10000;
            for (var i = 0; i < set.length; i += 2) {
              pos += set[i];
              if (pos > code)
                return false;
              pos += set[i + 1];
              if (pos >= code)
                return true;
            }
          }
          function isIdentifierStart(code) {
            if (code < 65)
              return code === 36;
            if (code < 91)
              return true;
            if (code < 97)
              return code === 95;
            if (code < 123)
              return true;
            if (code <= 0xffff)
              return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));
            return isInAstralSet(code, astralIdentifierStartCodes);
          }
          function isIdentifierChar(code) {
            if (code < 48)
              return code === 36;
            if (code < 58)
              return true;
            if (code < 65)
              return false;
            if (code < 91)
              return true;
            if (code < 97)
              return code === 95;
            if (code < 123)
              return true;
            if (code <= 0xffff)
              return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));
            return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);
          }
        }, {}],
        630: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          exports.getLineInfo = getLineInfo;
          function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
              throw new TypeError("Cannot call a class as a function");
            }
          }
          var _whitespace = _dereq_(631);
          var Position = function Position(line, col) {
            _classCallCheck(this, Position);
            this.line = line;
            this.column = col;
          };
          exports.Position = Position;
          var SourceLocation = function SourceLocation(start, end) {
            _classCallCheck(this, SourceLocation);
            this.start = start;
            this.end = end;
          };
          ;
          exports.SourceLocation = SourceLocation;
          function getLineInfo(input, offset) {
            for (var line = 1,
                cur = 0; ; ) {
              _whitespace.lineBreakG.lastIndex = cur;
              var match = _whitespace.lineBreakG.exec(input);
              if (match && match.index < offset) {
                ++line;
                cur = match.index + match[0].length;
              } else {
                return new Position(line, offset - cur);
              }
            }
          }
        }, {"631": 631}],
        631: [function(_dereq_, module, exports) {
          "use strict";
          exports.__esModule = true;
          exports.isNewLine = isNewLine;
          var lineBreak = /\r\n?|\n|\u2028|\u2029/;
          exports.lineBreak = lineBreak;
          var lineBreakG = new RegExp(lineBreak.source, "g");
          exports.lineBreakG = lineBreakG;
          function isNewLine(code) {
            return code === 10 || code === 13 || code === 0x2028 || code === 0x2029;
          }
          var nonASCIIwhitespace = /[\u1680\u180e\u2000-\u200a\u202f\u205f\u3000\ufeff]/;
          exports.nonASCIIwhitespace = nonASCIIwhitespace;
        }, {}]
      }, {}, [14])(14);
    });
  })();
  return _retrieveGlobal();
});

System.registerDynamic("npm:babel-core@5.8.38.js", ["npm:babel-core@5.8.38/browser.js"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  module.exports = $__require('npm:babel-core@5.8.38/browser.js');
  return module.exports;
});

System.registerDynamic("npm:process@0.11.2/browser.js", [], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  var process = module.exports = {};
  var queue = [];
  var draining = false;
  var currentQueue;
  var queueIndex = -1;
  function cleanUpNextTick() {
    draining = false;
    if (currentQueue.length) {
      queue = currentQueue.concat(queue);
    } else {
      queueIndex = -1;
    }
    if (queue.length) {
      drainQueue();
    }
  }
  function drainQueue() {
    if (draining) {
      return;
    }
    var timeout = setTimeout(cleanUpNextTick);
    draining = true;
    var len = queue.length;
    while (len) {
      currentQueue = queue;
      queue = [];
      while (++queueIndex < len) {
        if (currentQueue) {
          currentQueue[queueIndex].run();
        }
      }
      queueIndex = -1;
      len = queue.length;
    }
    currentQueue = null;
    draining = false;
    clearTimeout(timeout);
  }
  process.nextTick = function(fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
      for (var i = 1; i < arguments.length; i++) {
        args[i - 1] = arguments[i];
      }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
      setTimeout(drainQueue, 0);
    }
  };
  function Item(fun, array) {
    this.fun = fun;
    this.array = array;
  }
  Item.prototype.run = function() {
    this.fun.apply(null, this.array);
  };
  process.title = 'browser';
  process.browser = true;
  process.env = {};
  process.argv = [];
  process.version = '';
  process.versions = {};
  function noop() {}
  process.on = noop;
  process.addListener = noop;
  process.once = noop;
  process.off = noop;
  process.removeListener = noop;
  process.removeAllListeners = noop;
  process.emit = noop;
  process.binding = function(name) {
    throw new Error('process.binding is not supported');
  };
  process.cwd = function() {
    return '/';
  };
  process.chdir = function(dir) {
    throw new Error('process.chdir is not supported');
  };
  process.umask = function() {
    return 0;
  };
  return module.exports;
});

System.registerDynamic("npm:process@0.11.2.js", ["npm:process@0.11.2/browser.js"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  module.exports = $__require('npm:process@0.11.2/browser.js');
  return module.exports;
});

System.registerDynamic("github:jspm/nodelibs-process@0.1.2/index.js", ["process"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  module.exports = System._nodeRequire ? process : $__require('process');
  return module.exports;
});

System.registerDynamic("github:jspm/nodelibs-process@0.1.2.js", ["github:jspm/nodelibs-process@0.1.2/index"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  module.exports = $__require('github:jspm/nodelibs-process@0.1.2/index');
  return module.exports;
});

System.registerDynamic("npm:core-js@2.3.0/client/shim.min.js", ["process"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  "format cjs";
  (function(process) {
    !function(b, c, a) {
      "use strict";
      !function(b) {
        function __webpack_require__(c) {
          if (a[c])
            return a[c].exports;
          var d = a[c] = {
            exports: {},
            id: c,
            loaded: !1
          };
          return b[c].call(d.exports, d, d.exports, __webpack_require__), d.loaded = !0, d.exports;
        }
        var a = {};
        return __webpack_require__.m = b, __webpack_require__.c = a, __webpack_require__.p = "", __webpack_require__(0);
      }([function(b, c, a) {
        a(1), a(50), a(51), a(52), a(54), a(55), a(58), a(59), a(60), a(61), a(62), a(63), a(64), a(65), a(66), a(68), a(70), a(72), a(74), a(77), a(78), a(79), a(83), a(87), a(88), a(89), a(90), a(92), a(93), a(94), a(95), a(96), a(98), a(100), a(101), a(102), a(104), a(105), a(106), a(108), a(109), a(110), a(112), a(113), a(114), a(115), a(116), a(117), a(118), a(119), a(120), a(121), a(122), a(123), a(124), a(125), a(127), a(131), a(132), a(133), a(134), a(138), a(140), a(141), a(142), a(143), a(144), a(145), a(146), a(147), a(148), a(149), a(150), a(151), a(152), a(153), a(159), a(160), a(162), a(163), a(164), a(168), a(169), a(170), a(171), a(172), a(174), a(175), a(176), a(177), a(180), a(182), a(183), a(184), a(186), a(188), a(190), a(191), a(192), a(194), a(195), a(196), a(197), a(203), a(206), a(207), a(209), a(210), a(211), a(212), a(213), a(214), a(215), a(216), a(217), a(218), a(219), a(220), a(222), a(223), a(224), a(225), a(226), a(227), a(228), a(229), a(231), a(234), a(235), a(238), a(239), a(240), a(241), a(242), a(243), a(244), a(245), a(246), a(247), a(248), a(250), a(251), a(252), a(253), a(254), a(255), a(256), a(257), a(259), a(260), a(262), a(263), a(264), a(265), a(268), a(269), a(270), a(271), a(272), a(273), a(274), a(275), a(277), a(278), a(279), a(280), a(281), a(282), a(283), a(284), a(285), a(286), a(287), b.exports = a(288);
      }, function(ca, ba, b) {
        var n = b(2),
            f = b(3),
            B = b(4),
            e = b(6),
            J = b(16),
            Z = b(20).KEY,
            H = b(5),
            I = b(21),
            A = b(22),
            aa = b(17),
            l = b(23),
            _ = b(24),
            $ = b(25),
            T = b(27),
            X = b(40),
            W = b(43),
            y = b(10),
            s = b(30),
            w = b(14),
            v = b(15),
            m = b(44),
            O = b(47),
            P = b(49),
            Q = b(9),
            V = b(28),
            M = P.f,
            h = Q.f,
            F = O.f,
            c = n.Symbol,
            t = n.JSON,
            q = t && t.stringify,
            g = "prototype",
            d = l("_hidden"),
            L = l("toPrimitive"),
            U = {}.propertyIsEnumerable,
            r = I("symbol-registry"),
            i = I("symbols"),
            j = Object[g],
            k = "function" == typeof c,
            C = n.QObject,
            D = !C || !C[g] || !C[g].findChild,
            x = B && H(function() {
              return 7 != m(h({}, "a", {get: function() {
                  return h(this, "a", {value: 7}).a;
                }})).a;
            }) ? function(c, a, d) {
              var b = M(j, a);
              b && delete j[a], h(c, a, d), b && c !== j && h(j, a, b);
            } : h,
            S = function(a) {
              var b = i[a] = m(c[g]);
              return b._k = a, b;
            },
            u = k && "symbol" == typeof c.iterator ? function(a) {
              return "symbol" == typeof a;
            } : function(a) {
              return a instanceof c;
            },
            z = function defineProperty(a, b, c) {
              return y(a), b = w(b, !0), y(c), f(i, b) ? (c.enumerable ? (f(a, d) && a[d][b] && (a[d][b] = !1), c = m(c, {enumerable: v(0, !1)})) : (f(a, d) || h(a, d, v(1, {})), a[d][b] = !0), x(a, b, c)) : h(a, b, c);
            },
            G = function defineProperties(a, b) {
              y(a);
              for (var c,
                  d = X(b = s(b)),
                  e = 0,
                  f = d.length; f > e; )
                z(a, c = d[e++], b[c]);
              return a;
            },
            Y = function create(b, c) {
              return c === a ? m(b) : G(m(b), c);
            },
            E = function propertyIsEnumerable(a) {
              var b = U.call(this, a = w(a, !0));
              return b || !f(this, a) || !f(i, a) || f(this, d) && this[d][a] ? b : !0;
            },
            R = function getOwnPropertyDescriptor(a, b) {
              var c = M(a = s(a), b = w(b, !0));
              return !c || !f(i, b) || f(a, d) && a[d][b] || (c.enumerable = !0), c;
            },
            N = function getOwnPropertyNames(g) {
              for (var a,
                  b = F(s(g)),
                  c = [],
                  e = 0; b.length > e; )
                f(i, a = b[e++]) || a == d || a == Z || c.push(a);
              return c;
            },
            K = function getOwnPropertySymbols(e) {
              for (var a,
                  b = F(s(e)),
                  c = [],
                  d = 0; b.length > d; )
                f(i, a = b[d++]) && c.push(i[a]);
              return c;
            };
        k || (c = function Symbol() {
          if (this instanceof c)
            throw TypeError("Symbol is not a constructor!");
          var b = aa(arguments.length > 0 ? arguments[0] : a);
          return B && D && x(j, b, {
            configurable: !0,
            set: function(a) {
              f(this, d) && f(this[d], b) && (this[d][b] = !1), x(this, b, v(1, a));
            }
          }), S(b);
        }, J(c[g], "toString", function toString() {
          return this._k;
        }), P.f = R, Q.f = z, b(48).f = O.f = N, b(42).f = E, b(41).f = K, B && !b(26) && J(j, "propertyIsEnumerable", E, !0), _.f = function(a) {
          return S(l(a));
        }), e(e.G + e.W + e.F * !k, {Symbol: c});
        for (var p = "hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),
            o = 0; p.length > o; )
          l(p[o++]);
        for (var p = V(l.store),
            o = 0; p.length > o; )
          $(p[o++]);
        e(e.S + e.F * !k, "Symbol", {
          "for": function(a) {
            return f(r, a += "") ? r[a] : r[a] = c(a);
          },
          keyFor: function keyFor(a) {
            if (u(a))
              return T(r, a);
            throw TypeError(a + " is not a symbol!");
          },
          useSetter: function() {
            D = !0;
          },
          useSimple: function() {
            D = !1;
          }
        }), e(e.S + e.F * !k, "Object", {
          create: Y,
          defineProperty: z,
          defineProperties: G,
          getOwnPropertyDescriptor: R,
          getOwnPropertyNames: N,
          getOwnPropertySymbols: K
        }), t && e(e.S + e.F * (!k || H(function() {
          var a = c();
          return "[null]" != q([a]) || "{}" != q({a: a}) || "{}" != q(Object(a));
        })), "JSON", {stringify: function stringify(e) {
            if (e !== a && !u(e)) {
              for (var b,
                  c,
                  d = [e],
                  f = 1; arguments.length > f; )
                d.push(arguments[f++]);
              return b = d[1], "function" == typeof b && (c = b), !c && W(b) || (b = function(b, a) {
                return c && (a = c.call(this, b, a)), u(a) ? void 0 : a;
              }), d[1] = b, q.apply(t, d);
            }
          }}), c[g][L] || b(8)(c[g], L, c[g].valueOf), A(c, "Symbol"), A(Math, "Math", !0), A(n.JSON, "JSON", !0);
      }, function(a, d) {
        var b = a.exports = "undefined" != typeof window && window.Math == Math ? window : "undefined" != typeof self && self.Math == Math ? self : Function("return this")();
        "number" == typeof c && (c = b);
      }, function(a, c) {
        var b = {}.hasOwnProperty;
        a.exports = function(a, c) {
          return b.call(a, c);
        };
      }, function(a, c, b) {
        a.exports = !b(5)(function() {
          return 7 != Object.defineProperty({}, "a", {get: function() {
              return 7;
            }}).a;
        });
      }, function(a, b) {
        a.exports = function(a) {
          try {
            return !!a();
          } catch (b) {
            return !0;
          }
        };
      }, function(h, k, d) {
        var c = d(2),
            e = d(7),
            i = d(8),
            j = d(16),
            g = d(18),
            f = "prototype",
            b = function(k, l, o) {
              var h,
                  p,
                  d,
                  t,
                  w = k & b.F,
                  q = k & b.G,
                  v = k & b.S,
                  s = k & b.P,
                  u = k & b.B,
                  m = q ? c : v ? c[l] || (c[l] = {}) : (c[l] || {})[f],
                  n = q ? e : e[l] || (e[l] = {}),
                  r = n[f] || (n[f] = {});
              q && (o = l);
              for (h in o)
                p = !w && m && m[h] !== a, d = (p ? m : o)[h], t = u && p ? g(d, c) : s && "function" == typeof d ? g(Function.call, d) : d, m && j(m, h, d, k & b.U), n[h] != d && i(n, h, t), s && r[h] != d && (r[h] = d);
            };
        c.core = e, b.F = 1, b.G = 2, b.S = 4, b.P = 8, b.B = 16, b.W = 32, b.U = 64, b.R = 128, h.exports = b;
      }, function(a, d) {
        var c = a.exports = {version: "2.3.0"};
        "number" == typeof b && (b = c);
      }, function(b, e, a) {
        var c = a(9),
            d = a(15);
        b.exports = a(4) ? function(a, b, e) {
          return c.f(a, b, d(1, e));
        } : function(a, b, c) {
          return a[b] = c, a;
        };
      }, function(g, c, a) {
        var b = a(10),
            d = a(12),
            e = a(14),
            f = Object.defineProperty;
        c.f = a(4) ? Object.defineProperty : function defineProperty(c, g, a) {
          if (b(c), g = e(g, !0), b(a), d)
            try {
              return f(c, g, a);
            } catch (h) {}
          if ("get" in a || "set" in a)
            throw TypeError("Accessors not supported!");
          return "value" in a && (c[g] = a.value), c;
        };
      }, function(a, d, b) {
        var c = b(11);
        a.exports = function(a) {
          if (!c(a))
            throw TypeError(a + " is not an object!");
          return a;
        };
      }, function(a, b) {
        a.exports = function(a) {
          return "object" == typeof a ? null !== a : "function" == typeof a;
        };
      }, function(b, c, a) {
        b.exports = !a(4) && !a(5)(function() {
          return 7 != Object.defineProperty(a(13)("div"), "a", {get: function() {
              return 7;
            }}).a;
        });
      }, function(d, f, b) {
        var c = b(11),
            a = b(2).document,
            e = c(a) && c(a.createElement);
        d.exports = function(b) {
          return e ? a.createElement(b) : {};
        };
      }, function(b, d, c) {
        var a = c(11);
        b.exports = function(b, e) {
          if (!a(b))
            return b;
          var c,
              d;
          if (e && "function" == typeof(c = b.toString) && !a(d = c.call(b)))
            return d;
          if ("function" == typeof(c = b.valueOf) && !a(d = c.call(b)))
            return d;
          if (!e && "function" == typeof(c = b.toString) && !a(d = c.call(b)))
            return d;
          throw TypeError("Can't convert object to primitive value");
        };
      }, function(a, b) {
        a.exports = function(a, b) {
          return {
            enumerable: !(1 & a),
            configurable: !(2 & a),
            writable: !(4 & a),
            value: b
          };
        };
      }, function(g, j, a) {
        var h = a(2),
            b = a(8),
            f = a(3),
            c = a(17)("src"),
            d = "toString",
            e = Function[d],
            i = ("" + e).split(d);
        a(7).inspectSource = function(a) {
          return e.call(a);
        }, (g.exports = function(d, a, e, j) {
          var g = "function" == typeof e;
          g && (f(e, "name") || b(e, "name", a)), d[a] !== e && (g && (f(e, c) || b(e, c, d[a] ? "" + d[a] : i.join(String(a)))), d === h ? d[a] = e : j ? d[a] ? d[a] = e : b(d, a, e) : (delete d[a], b(d, a, e)));
        })(Function.prototype, d, function toString() {
          return "function" == typeof this && this[c] || e.call(this);
        });
      }, function(b, e) {
        var c = 0,
            d = Math.random();
        b.exports = function(b) {
          return "Symbol(".concat(b === a ? "" : b, ")_", (++c + d).toString(36));
        };
      }, function(b, e, c) {
        var d = c(19);
        b.exports = function(b, c, e) {
          if (d(b), c === a)
            return b;
          switch (e) {
            case 1:
              return function(a) {
                return b.call(c, a);
              };
            case 2:
              return function(a, d) {
                return b.call(c, a, d);
              };
            case 3:
              return function(a, d, e) {
                return b.call(c, a, d, e);
              };
          }
          return function() {
            return b.apply(c, arguments);
          };
        };
      }, function(a, b) {
        a.exports = function(a) {
          if ("function" != typeof a)
            throw TypeError(a + " is not a function!");
          return a;
        };
      }, function(k, o, b) {
        var a = b(17)("meta"),
            i = b(11),
            d = b(3),
            g = b(9).f,
            f = 0,
            c = Object.isExtensible || function() {
              return !0;
            },
            j = !b(5)(function() {
              return c(Object.preventExtensions({}));
            }),
            e = function(b) {
              g(b, a, {value: {
                  i: "O" + ++f,
                  w: {}
                }});
            },
            l = function(b, f) {
              if (!i(b))
                return "symbol" == typeof b ? b : ("string" == typeof b ? "S" : "P") + b;
              if (!d(b, a)) {
                if (!c(b))
                  return "F";
                if (!f)
                  return "E";
                e(b);
              }
              return b[a].i;
            },
            m = function(b, f) {
              if (!d(b, a)) {
                if (!c(b))
                  return !0;
                if (!f)
                  return !1;
                e(b);
              }
              return b[a].w;
            },
            h = function(b) {
              return j && n.NEED && c(b) && !d(b, a) && e(b), b;
            },
            n = k.exports = {
              KEY: a,
              NEED: !1,
              fastKey: l,
              getWeak: m,
              onFreeze: h
            };
      }, function(d, f, e) {
        var a = e(2),
            b = "__core-js_shared__",
            c = a[b] || (a[b] = {});
        d.exports = function(a) {
          return c[a] || (c[a] = {});
        };
      }, function(c, f, a) {
        var d = a(9).f,
            e = a(3),
            b = a(23)("toStringTag");
        c.exports = function(a, c, f) {
          a && !e(a = f ? a : a.prototype, b) && d(a, b, {
            configurable: !0,
            value: c
          });
        };
      }, function(e, h, a) {
        var b = a(21)("wks"),
            f = a(17),
            c = a(2).Symbol,
            d = "function" == typeof c,
            g = e.exports = function(a) {
              return b[a] || (b[a] = d && c[a] || (d ? c : f)("Symbol." + a));
            };
        g.store = b;
      }, function(c, a, b) {
        a.f = b(23);
      }, function(c, h, a) {
        var d = a(2),
            b = a(7),
            e = a(26),
            f = a(24),
            g = a(9).f;
        c.exports = function(a) {
          var c = b.Symbol || (b.Symbol = e ? {} : d.Symbol || {});
          "_" == a.charAt(0) || a in c || g(c, a, {value: f.f(a)});
        };
      }, function(a, b) {
        a.exports = !1;
      }, function(b, e, a) {
        var c = a(28),
            d = a(30);
        b.exports = function(g, h) {
          for (var a,
              b = d(g),
              e = c(b),
              i = e.length,
              f = 0; i > f; )
            if (b[a = e[f++]] === h)
              return a;
        };
      }, function(b, e, a) {
        var c = a(29),
            d = a(39);
        b.exports = Object.keys || function keys(a) {
          return c(a, d);
        };
      }, function(c, g, a) {
        var b = a(3),
            d = a(30),
            e = a(34)(!1),
            f = a(38)("IE_PROTO");
        c.exports = function(j, h) {
          var a,
              g = d(j),
              i = 0,
              c = [];
          for (a in g)
            a != f && b(g, a) && c.push(a);
          for (; h.length > i; )
            b(g, a = h[i++]) && (~e(c, a) || c.push(a));
          return c;
        };
      }, function(b, e, a) {
        var c = a(31),
            d = a(33);
        b.exports = function(a) {
          return c(d(a));
        };
      }, function(a, d, b) {
        var c = b(32);
        a.exports = Object("z").propertyIsEnumerable(0) ? Object : function(a) {
          return "String" == c(a) ? a.split("") : Object(a);
        };
      }, function(a, c) {
        var b = {}.toString;
        a.exports = function(a) {
          return b.call(a).slice(8, -1);
        };
      }, function(b, c) {
        b.exports = function(b) {
          if (b == a)
            throw TypeError("Can't call method on  " + b);
          return b;
        };
      }, function(b, f, a) {
        var c = a(30),
            d = a(35),
            e = a(37);
        b.exports = function(a) {
          return function(j, g, k) {
            var h,
                f = c(j),
                i = d(f.length),
                b = e(k, i);
            if (a && g != g) {
              for (; i > b; )
                if (h = f[b++], h != h)
                  return !0;
            } else
              for (; i > b; b++)
                if ((a || b in f) && f[b] === g)
                  return a || b || 0;
            return !a && -1;
          };
        };
      }, function(a, e, b) {
        var c = b(36),
            d = Math.min;
        a.exports = function(a) {
          return a > 0 ? d(c(a), 9007199254740991) : 0;
        };
      }, function(a, d) {
        var b = Math.ceil,
            c = Math.floor;
        a.exports = function(a) {
          return isNaN(a = +a) ? 0 : (a > 0 ? c : b)(a);
        };
      }, function(a, f, b) {
        var c = b(36),
            d = Math.max,
            e = Math.min;
        a.exports = function(a, b) {
          return a = c(a), 0 > a ? d(a + b, 0) : e(a, b);
        };
      }, function(c, e, a) {
        var b = a(21)("keys"),
            d = a(17);
        c.exports = function(a) {
          return b[a] || (b[a] = d(a));
        };
      }, function(a, b) {
        a.exports = "constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",");
      }, function(b, f, a) {
        var c = a(28),
            d = a(41),
            e = a(42);
        b.exports = function(a) {
          var b = c(a),
              f = d.f;
          if (f)
            for (var g,
                h = f(a),
                j = e.f,
                i = 0; h.length > i; )
              j.call(a, g = h[i++]) && b.push(g);
          return b;
        };
      }, function(b, a) {
        a.f = Object.getOwnPropertySymbols;
      }, function(b, a) {
        a.f = {}.propertyIsEnumerable;
      }, function(a, d, b) {
        var c = b(32);
        a.exports = Array.isArray || function isArray(a) {
          return "Array" == c(a);
        };
      }, function(g, k, b) {
        var h = b(10),
            i = b(45),
            f = b(39),
            j = b(38)("IE_PROTO"),
            d = function() {},
            e = "prototype",
            c = function() {
              var a,
                  d = b(13)("iframe"),
                  g = f.length,
                  h = ">";
              for (d.style.display = "none", b(46).appendChild(d), d.src = "javascript:", a = d.contentWindow.document, a.open(), a.write("<script>document.F=Object</script" + h), a.close(), c = a.F; g--; )
                delete c[e][f[g]];
              return c();
            };
        g.exports = Object.create || function create(f, g) {
          var b;
          return null !== f ? (d[e] = h(f), b = new d, d[e] = null, b[j] = f) : b = c(), g === a ? b : i(b, g);
        };
      }, function(b, f, a) {
        var c = a(9),
            d = a(10),
            e = a(28);
        b.exports = a(4) ? Object.defineProperties : function defineProperties(a, b) {
          d(a);
          for (var f,
              g = e(b),
              i = g.length,
              h = 0; i > h; )
            c.f(a, f = g[h++], b[f]);
          return a;
        };
      }, function(a, c, b) {
        a.exports = b(2).document && document.documentElement;
      }, function(d, h, a) {
        var e = a(30),
            b = a(48).f,
            f = {}.toString,
            c = "object" == typeof window && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [],
            g = function(a) {
              try {
                return b(a);
              } catch (d) {
                return c.slice();
              }
            };
        d.exports.f = function getOwnPropertyNames(a) {
          return c && "[object Window]" == f.call(a) ? g(a) : b(e(a));
        };
      }, function(e, b, a) {
        var c = a(29),
            d = a(39).concat("length", "prototype");
        b.f = Object.getOwnPropertyNames || function getOwnPropertyNames(a) {
          return c(a, d);
        };
      }, function(j, c, a) {
        var d = a(42),
            e = a(15),
            f = a(30),
            g = a(14),
            h = a(3),
            i = a(12),
            b = Object.getOwnPropertyDescriptor;
        c.f = a(4) ? b : function getOwnPropertyDescriptor(a, c) {
          if (a = f(a), c = g(c, !0), i)
            try {
              return b(a, c);
            } catch (j) {}
          return h(a, c) ? e(!d.f.call(a, c), a[c]) : void 0;
        };
      }, function(c, d, a) {
        var b = a(6);
        b(b.S + b.F * !a(4), "Object", {defineProperty: a(9).f});
      }, function(c, d, a) {
        var b = a(6);
        b(b.S + b.F * !a(4), "Object", {defineProperties: a(45)});
      }, function(d, e, a) {
        var b = a(30),
            c = a(49).f;
        a(53)("getOwnPropertyDescriptor", function() {
          return function getOwnPropertyDescriptor(a, d) {
            return c(b(a), d);
          };
        });
      }, function(c, f, a) {
        var b = a(6),
            d = a(7),
            e = a(5);
        c.exports = function(a, g) {
          var c = (d.Object || {})[a] || Object[a],
              f = {};
          f[a] = g(c), b(b.S + b.F * e(function() {
            c(1);
          }), "Object", f);
        };
      }, function(c, d, a) {
        var b = a(6);
        b(b.S, "Object", {create: a(44)});
      }, function(d, e, a) {
        var b = a(56),
            c = a(57);
        a(53)("getPrototypeOf", function() {
          return function getPrototypeOf(a) {
            return c(b(a));
          };
        });
      }, function(a, d, b) {
        var c = b(33);
        a.exports = function(a) {
          return Object(c(a));
        };
      }, function(c, g, a) {
        var d = a(3),
            e = a(56),
            b = a(38)("IE_PROTO"),
            f = Object.prototype;
        c.exports = Object.getPrototypeOf || function(a) {
          return a = e(a), d(a, b) ? a[b] : "function" == typeof a.constructor && a instanceof a.constructor ? a.constructor.prototype : a instanceof Object ? f : null;
        };
      }, function(d, e, a) {
        var b = a(56),
            c = a(28);
        a(53)("keys", function() {
          return function keys(a) {
            return c(b(a));
          };
        });
      }, function(b, c, a) {
        a(53)("getOwnPropertyNames", function() {
          return a(47).f;
        });
      }, function(d, e, a) {
        var b = a(11),
            c = a(20).onFreeze;
        a(53)("freeze", function(a) {
          return function freeze(d) {
            return a && b(d) ? a(c(d)) : d;
          };
        });
      }, function(d, e, a) {
        var b = a(11),
            c = a(20).onFreeze;
        a(53)("seal", function(a) {
          return function seal(d) {
            return a && b(d) ? a(c(d)) : d;
          };
        });
      }, function(d, e, a) {
        var b = a(11),
            c = a(20).onFreeze;
        a(53)("preventExtensions", function(a) {
          return function preventExtensions(d) {
            return a && b(d) ? a(c(d)) : d;
          };
        });
      }, function(c, d, a) {
        var b = a(11);
        a(53)("isFrozen", function(a) {
          return function isFrozen(c) {
            return b(c) ? a ? a(c) : !1 : !0;
          };
        });
      }, function(c, d, a) {
        var b = a(11);
        a(53)("isSealed", function(a) {
          return function isSealed(c) {
            return b(c) ? a ? a(c) : !1 : !0;
          };
        });
      }, function(c, d, a) {
        var b = a(11);
        a(53)("isExtensible", function(a) {
          return function isExtensible(c) {
            return b(c) ? a ? a(c) : !0 : !1;
          };
        });
      }, function(c, d, b) {
        var a = b(6);
        a(a.S + a.F, "Object", {assign: b(67)});
      }, function(d, i, a) {
        var c = a(28),
            e = a(41),
            f = a(42),
            g = a(56),
            h = a(31),
            b = Object.assign;
        d.exports = !b || a(5)(function() {
          var a = {},
              c = {},
              d = Symbol(),
              e = "abcdefghijklmnopqrst";
          return a[d] = 7, e.split("").forEach(function(a) {
            c[a] = a;
          }), 7 != b({}, a)[d] || Object.keys(b({}, c)).join("") != e;
        }) ? function assign(n, q) {
          for (var i = g(n),
              o = arguments.length,
              k = 1,
              d = e.f,
              m = f.f; o > k; )
            for (var b,
                a = h(arguments[k++]),
                l = d ? c(a).concat(d(a)) : c(a),
                p = l.length,
                j = 0; p > j; )
              m.call(a, b = l[j++]) && (i[b] = a[b]);
          return i;
        } : b;
      }, function(c, d, a) {
        var b = a(6);
        b(b.S, "Object", {is: a(69)});
      }, function(a, b) {
        a.exports = Object.is || function is(a, b) {
          return a === b ? 0 !== a || 1 / a === 1 / b : a != a && b != b;
        };
      }, function(c, d, a) {
        var b = a(6);
        b(b.S, "Object", {setPrototypeOf: a(71).set});
      }, function(d, g, b) {
        var e = b(11),
            f = b(10),
            c = function(b, a) {
              if (f(b), !e(a) && null !== a)
                throw TypeError(a + ": can't set as prototype!");
            };
        d.exports = {
          set: Object.setPrototypeOf || ("__proto__" in {} ? function(e, a, d) {
            try {
              d = b(18)(Function.call, b(49).f(Object.prototype, "__proto__").set, 2), d(e, []), a = !(e instanceof Array);
            } catch (f) {
              a = !0;
            }
            return function setPrototypeOf(b, e) {
              return c(b, e), a ? b.__proto__ = e : d(b, e), b;
            };
          }({}, !1) : a),
          check: c
        };
      }, function(d, e, a) {
        var c = a(73),
            b = {};
        b[a(23)("toStringTag")] = "z", b + "" != "[object z]" && a(16)(Object.prototype, "toString", function toString() {
          return "[object " + c(this) + "]";
        }, !0);
      }, function(d, h, c) {
        var b = c(32),
            e = c(23)("toStringTag"),
            f = "Arguments" == b(function() {
              return arguments;
            }()),
            g = function(a, b) {
              try {
                return a[b];
              } catch (c) {}
            };
        d.exports = function(d) {
          var c,
              h,
              i;
          return d === a ? "Undefined" : null === d ? "Null" : "string" == typeof(h = g(c = Object(d), e)) ? h : f ? b(c) : "Object" == (i = b(c)) && "function" == typeof c.callee ? "Arguments" : i;
        };
      }, function(c, d, a) {
        var b = a(6);
        b(b.P, "Function", {bind: a(75)});
      }, function(d, i, a) {
        var e = a(19),
            f = a(11),
            g = a(76),
            c = [].slice,
            b = {},
            h = function(e, a, f) {
              if (!(a in b)) {
                for (var d = [],
                    c = 0; a > c; c++)
                  d[c] = "a[" + c + "]";
                b[a] = Function("F,a", "return new F(" + d.join(",") + ")");
              }
              return b[a](e, f);
            };
        d.exports = Function.bind || function bind(d) {
          var a = e(this),
              i = c.call(arguments, 1),
              b = function() {
                var e = i.concat(c.call(arguments));
                return this instanceof b ? h(a, e.length, e) : g(a, e, d);
              };
          return f(a.prototype) && (b.prototype = a.prototype), b;
        };
      }, function(b, c) {
        b.exports = function(c, b, d) {
          var e = d === a;
          switch (b.length) {
            case 0:
              return e ? c() : c.call(d);
            case 1:
              return e ? c(b[0]) : c.call(d, b[0]);
            case 2:
              return e ? c(b[0], b[1]) : c.call(d, b[0], b[1]);
            case 3:
              return e ? c(b[0], b[1], b[2]) : c.call(d, b[0], b[1], b[2]);
            case 4:
              return e ? c(b[0], b[1], b[2], b[3]) : c.call(d, b[0], b[1], b[2], b[3]);
          }
          return c.apply(d, b);
        };
      }, function(i, j, a) {
        var c = a(9).f,
            e = a(15),
            f = a(3),
            d = Function.prototype,
            g = /^\s*function ([^ (]*)/,
            b = "name",
            h = Object.isExtensible || function() {
              return !0;
            };
        b in d || a(4) && c(d, b, {
          configurable: !0,
          get: function() {
            try {
              var a = this,
                  d = ("" + a).match(g)[1];
              return f(a, b) || !h(a) || c(a, b, e(5, d)), d;
            } catch (i) {
              return "";
            }
          }
        });
      }, function(f, g, a) {
        var b = a(11),
            e = a(57),
            c = a(23)("hasInstance"),
            d = Function.prototype;
        c in d || a(9).f(d, c, {value: function(a) {
            if ("function" != typeof this || !b(a))
              return !1;
            if (!b(this.prototype))
              return a instanceof this;
            for (; a = e(a); )
              if (this.prototype === a)
                return !0;
            return !1;
          }});
      }, function(w, v, b) {
        var k = b(2),
            j = b(3),
            i = b(32),
            n = b(80),
            o = b(14),
            p = b(5),
            q = b(48).f,
            t = b(49).f,
            u = b(9).f,
            m = b(81).trim,
            c = "Number",
            a = k[c],
            d = a,
            f = a.prototype,
            r = i(b(44)(f)) == c,
            s = "trim" in String.prototype,
            l = function(i) {
              var a = o(i, !1);
              if ("string" == typeof a && a.length > 2) {
                a = s ? a.trim() : m(a, 3);
                var b,
                    c,
                    d,
                    e = a.charCodeAt(0);
                if (43 === e || 45 === e) {
                  if (b = a.charCodeAt(2), 88 === b || 120 === b)
                    return NaN;
                } else if (48 === e) {
                  switch (a.charCodeAt(1)) {
                    case 66:
                    case 98:
                      c = 2, d = 49;
                      break;
                    case 79:
                    case 111:
                      c = 8, d = 55;
                      break;
                    default:
                      return +a;
                  }
                  for (var f,
                      g = a.slice(2),
                      h = 0,
                      j = g.length; j > h; h++)
                    if (f = g.charCodeAt(h), 48 > f || f > d)
                      return NaN;
                  return parseInt(g, c);
                }
              }
              return +a;
            };
        if (!a(" 0o1") || !a("0b1") || a("+0x1")) {
          a = function Number(g) {
            var e = 1 > arguments.length ? 0 : g,
                b = this;
            return b instanceof a && (r ? p(function() {
              f.valueOf.call(b);
            }) : i(b) != c) ? n(new d(l(e)), b, a) : l(e);
          };
          for (var e,
              h = b(4) ? q(d) : "MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","),
              g = 0; h.length > g; g++)
            j(d, e = h[g]) && !j(a, e) && u(a, e, t(d, e));
          a.prototype = f, f.constructor = a, b(16)(k, c, a);
        }
      }, function(c, e, a) {
        var d = a(11),
            b = a(71).set;
        c.exports = function(e, g, f) {
          var a,
              c = g.constructor;
          return c !== f && "function" == typeof c && (a = c.prototype) !== f.prototype && d(a) && b && b(e, a), e;
        };
      }, function(g, m, a) {
        var d = a(6),
            h = a(33),
            i = a(5),
            c = a(82),
            b = "[" + c + "]",
            f = "​",
            j = RegExp("^" + b + b + "*"),
            k = RegExp(b + b + "*$"),
            e = function(a, h, e) {
              var b = {},
                  g = i(function() {
                    return !!c[a]() || f[a]() != f;
                  }),
                  j = b[a] = g ? h(l) : c[a];
              e && (b[e] = j), d(d.P + d.F * g, "String", b);
            },
            l = e.trim = function(a, b) {
              return a = String(h(a)), 1 & b && (a = a.replace(j, "")), 2 & b && (a = a.replace(k, "")), a;
            };
        g.exports = e;
      }, function(a, b) {
        a.exports = "	\n\x0B\f\r   ᠎             　\u2028\u2029\ufeff";
      }, function(q, p, c) {
        var f = c(6),
            n = (c(84), c(36)),
            o = c(85),
            g = c(86),
            j = 1..toFixed,
            i = Math.floor,
            a = [0, 0, 0, 0, 0, 0],
            k = "Number.toFixed: incorrect invocation!",
            e = "0",
            d = function(d, e) {
              for (var c = -1,
                  b = e; ++c < 6; )
                b += d * a[c], a[c] = b % 1e7, b = i(b / 1e7);
            },
            h = function(d) {
              for (var c = 6,
                  b = 0; --c >= 0; )
                b += a[c], a[c] = i(b / d), b = b % d * 1e7;
            },
            l = function() {
              for (var c = 6,
                  b = ""; --c >= 0; )
                if ("" !== b || 0 === c || 0 !== a[c]) {
                  var d = String(a[c]);
                  b = "" === b ? d : b + g.call(e, 7 - d.length) + d;
                }
              return b;
            },
            b = function(a, c, d) {
              return 0 === c ? d : c % 2 === 1 ? b(a, c - 1, d * a) : b(a * a, c / 2, d);
            },
            m = function(c) {
              for (var b = 0,
                  a = c; a >= 4096; )
                b += 12, a /= 4096;
              for (; a >= 2; )
                b += 1, a /= 2;
              return b;
            };
        f(f.P + f.F * (!!j && ("0.000" !== 8e-5.toFixed(3) || "1" !== .9.toFixed(0) || "1.25" !== 1.255.toFixed(2) || "1000000000000000128" !== 0xde0b6b3a7640080.toFixed(0)) || !c(5)(function() {
          j.call({});
        })), "Number", {toFixed: function toFixed(s) {
            var f,
                q,
                j,
                p,
                a = o(this, k),
                i = n(s),
                r = "",
                c = e;
            if (0 > i || i > 20)
              throw RangeError(k);
            if (a != a)
              return "NaN";
            if (-1e21 >= a || a >= 1e21)
              return String(a);
            if (0 > a && (r = "-", a = -a), a > 1e-21)
              if (f = m(a * b(2, 69, 1)) - 69, q = 0 > f ? a * b(2, -f, 1) : a / b(2, f, 1), q *= 4503599627370496, f = 52 - f, f > 0) {
                for (d(0, q), j = i; j >= 7; )
                  d(1e7, 0), j -= 7;
                for (d(b(10, j, 1), 0), j = f - 1; j >= 23; )
                  h(1 << 23), j -= 23;
                h(1 << j), d(1, 1), h(2), c = l();
              } else
                d(0, q), d(1 << -f, 0), c = l() + g.call(e, i);
            return i > 0 ? (p = c.length, c = r + (i >= p ? "0." + g.call(e, i - p) + c : c.slice(0, p - i) + "." + c.slice(p - i))) : c = r + c, c;
          }});
      }, function(b, c) {
        b.exports = function(b, d, e, c) {
          if (!(b instanceof d) || c !== a && c in b)
            throw TypeError(e + ": incorrect invocation!");
          return b;
        };
      }, function(a, d, b) {
        var c = b(32);
        a.exports = function(a, b) {
          if ("number" != typeof a && "Number" != c(a))
            throw TypeError(b);
          return +a;
        };
      }, function(b, e, a) {
        var c = a(36),
            d = a(33);
        b.exports = function repeat(f) {
          var b = String(d(this)),
              e = "",
              a = c(f);
          if (0 > a || a == 1 / 0)
            throw RangeError("Count can't be negative");
          for (; a > 0; (a >>>= 1) && (b += b))
            1 & a && (e += b);
          return e;
        };
      }, function(g, h, c) {
        var d = c(6),
            e = c(5),
            f = c(85),
            b = 1..toPrecision;
        d(d.P + d.F * (e(function() {
          return "1" !== b.call(1, a);
        }) || !e(function() {
          b.call({});
        })), "Number", {toPrecision: function toPrecision(c) {
            var d = f(this, "Number#toPrecision: incorrect invocation!");
            return c === a ? b.call(d) : b.call(d, c);
          }});
      }, function(c, d, b) {
        var a = b(6);
        a(a.S, "Number", {EPSILON: Math.pow(2, -52)});
      }, function(d, e, a) {
        var b = a(6),
            c = a(2).isFinite;
        b(b.S, "Number", {isFinite: function isFinite(a) {
            return "number" == typeof a && c(a);
          }});
      }, function(c, d, a) {
        var b = a(6);
        b(b.S, "Number", {isInteger: a(91)});
      }, function(a, e, b) {
        var c = b(11),
            d = Math.floor;
        a.exports = function isInteger(a) {
          return !c(a) && isFinite(a) && d(a) === a;
        };
      }, function(c, d, b) {
        var a = b(6);
        a(a.S, "Number", {isNaN: function isNaN(a) {
            return a != a;
          }});
      }, function(e, f, a) {
        var b = a(6),
            c = a(91),
            d = Math.abs;
        b(b.S, "Number", {isSafeInteger: function isSafeInteger(a) {
            return c(a) && d(a) <= 9007199254740991;
          }});
      }, function(c, d, b) {
        var a = b(6);
        a(a.S, "Number", {MAX_SAFE_INTEGER: 9007199254740991});
      }, function(c, d, b) {
        var a = b(6);
        a(a.S, "Number", {MIN_SAFE_INTEGER: -9007199254740991});
      }, function(d, e, b) {
        var a = b(6),
            c = b(97);
        a(a.S + a.F * (Number.parseFloat != c), "Number", {parseFloat: c});
      }, function(c, e, a) {
        var b = a(2).parseFloat,
            d = a(81).trim;
        c.exports = 1 / b(a(82) + "-0") !== -(1 / 0) ? function parseFloat(e) {
          var a = d(String(e), 3),
              c = b(a);
          return 0 === c && "-" == a.charAt(0) ? -0 : c;
        } : b;
      }, function(d, e, b) {
        var a = b(6),
            c = b(99);
        a(a.S + a.F * (Number.parseInt != c), "Number", {parseInt: c});
      }, function(d, g, b) {
        var a = b(2).parseInt,
            e = b(81).trim,
            c = b(82),
            f = /^[\-+]?0[xX]/;
        d.exports = 8 !== a(c + "08") || 22 !== a(c + "0x16") ? function parseInt(c, d) {
          var b = e(String(c), 3);
          return a(b, d >>> 0 || (f.test(b) ? 16 : 10));
        } : a;
      }, function(d, e, b) {
        var a = b(6),
            c = b(99);
        a(a.G + a.F * (parseInt != c), {parseInt: c});
      }, function(d, e, b) {
        var a = b(6),
            c = b(97);
        a(a.G + a.F * (parseFloat != c), {parseFloat: c});
      }, function(f, g, c) {
        var a = c(6),
            e = c(103),
            d = Math.sqrt,
            b = Math.acosh;
        a(a.S + a.F * !(b && 710 == Math.floor(b(Number.MAX_VALUE)) && b(1 / 0) == 1 / 0), "Math", {acosh: function acosh(a) {
            return (a = +a) < 1 ? NaN : a > 94906265.62425156 ? Math.log(a) + Math.LN2 : e(a - 1 + d(a - 1) * d(a + 1));
          }});
      }, function(a, b) {
        a.exports = Math.log1p || function log1p(a) {
          return (a = +a) > -1e-8 && 1e-8 > a ? a - a * a / 2 : Math.log(1 + a);
        };
      }, function(d, e, c) {
        function asinh(a) {
          return isFinite(a = +a) && 0 != a ? 0 > a ? -asinh(-a) : Math.log(a + Math.sqrt(a * a + 1)) : a;
        }
        var a = c(6),
            b = Math.asinh;
        a(a.S + a.F * !(b && 1 / b(0) > 0), "Math", {asinh: asinh});
      }, function(d, e, c) {
        var a = c(6),
            b = Math.atanh;
        a(a.S + a.F * !(b && 1 / b(-0) < 0), "Math", {atanh: function atanh(a) {
            return 0 == (a = +a) ? a : Math.log((1 + a) / (1 - a)) / 2;
          }});
      }, function(d, e, a) {
        var b = a(6),
            c = a(107);
        b(b.S, "Math", {cbrt: function cbrt(a) {
            return c(a = +a) * Math.pow(Math.abs(a), 1 / 3);
          }});
      }, function(a, b) {
        a.exports = Math.sign || function sign(a) {
          return 0 == (a = +a) || a != a ? a : 0 > a ? -1 : 1;
        };
      }, function(c, d, b) {
        var a = b(6);
        a(a.S, "Math", {clz32: function clz32(a) {
            return (a >>>= 0) ? 31 - Math.floor(Math.log(a + .5) * Math.LOG2E) : 32;
          }});
      }, function(d, e, c) {
        var a = c(6),
            b = Math.exp;
        a(a.S, "Math", {cosh: function cosh(a) {
            return (b(a = +a) + b(-a)) / 2;
          }});
      }, function(d, e, b) {
        var a = b(6),
            c = b(111);
        a(a.S + a.F * (c != Math.expm1), "Math", {expm1: c});
      }, function(b, c) {
        var a = Math.expm1;
        b.exports = !a || a(10) > 22025.465794806718 || a(10) < 22025.465794806718 || -2e-17 != a(-2e-17) ? function expm1(a) {
          return 0 == (a = +a) ? a : a > -1e-6 && 1e-6 > a ? a + a * a / 2 : Math.exp(a) - 1;
        } : a;
      }, function(k, j, e) {
        var f = e(6),
            g = e(107),
            a = Math.pow,
            d = a(2, -52),
            b = a(2, -23),
            i = a(2, 127) * (2 - b),
            c = a(2, -126),
            h = function(a) {
              return a + 1 / d - 1 / d;
            };
        f(f.S, "Math", {fround: function fround(k) {
            var f,
                a,
                e = Math.abs(k),
                j = g(k);
            return c > e ? j * h(e / c / b) * c * b : (f = (1 + b / d) * e, a = f - (f - e), a > i || a != a ? j * (1 / 0) : j * a);
          }});
      }, function(d, e, b) {
        var a = b(6),
            c = Math.abs;
        a(a.S, "Math", {hypot: function hypot(h, i) {
            for (var a,
                b,
                e = 0,
                f = 0,
                g = arguments.length,
                d = 0; g > f; )
              a = c(arguments[f++]), a > d ? (b = d / a, e = e * b * b + 1, d = a) : a > 0 ? (b = a / d, e += b * b) : e += a;
            return d === 1 / 0 ? 1 / 0 : d * Math.sqrt(e);
          }});
      }, function(d, e, b) {
        var a = b(6),
            c = Math.imul;
        a(a.S + a.F * b(5)(function() {
          return -5 != c(4294967295, 5) || 2 != c.length;
        }), "Math", {imul: function imul(f, g) {
            var a = 65535,
                b = +f,
                c = +g,
                d = a & b,
                e = a & c;
            return 0 | d * e + ((a & b >>> 16) * e + d * (a & c >>> 16) << 16 >>> 0);
          }});
      }, function(c, d, b) {
        var a = b(6);
        a(a.S, "Math", {log10: function log10(a) {
            return Math.log(a) / Math.LN10;
          }});
      }, function(c, d, a) {
        var b = a(6);
        b(b.S, "Math", {log1p: a(103)});
      }, function(c, d, b) {
        var a = b(6);
        a(a.S, "Math", {log2: function log2(a) {
            return Math.log(a) / Math.LN2;
          }});
      }, function(c, d, a) {
        var b = a(6);
        b(b.S, "Math", {sign: a(107)});
      }, function(e, f, a) {
        var b = a(6),
            c = a(111),
            d = Math.exp;
        b(b.S + b.F * a(5)(function() {
          return -2e-17 != !Math.sinh(-2e-17);
        }), "Math", {sinh: function sinh(a) {
            return Math.abs(a = +a) < 1 ? (c(a) - c(-a)) / 2 : (d(a - 1) - d(-a - 1)) * (Math.E / 2);
          }});
      }, function(e, f, a) {
        var b = a(6),
            c = a(111),
            d = Math.exp;
        b(b.S, "Math", {tanh: function tanh(a) {
            var b = c(a = +a),
                e = c(-a);
            return b == 1 / 0 ? 1 : e == 1 / 0 ? -1 : (b - e) / (d(a) + d(-a));
          }});
      }, function(c, d, b) {
        var a = b(6);
        a(a.S, "Math", {trunc: function trunc(a) {
            return (a > 0 ? Math.floor : Math.ceil)(a);
          }});
      }, function(f, g, b) {
        var a = b(6),
            e = b(37),
            c = String.fromCharCode,
            d = String.fromCodePoint;
        a(a.S + a.F * (!!d && 1 != d.length), "String", {fromCodePoint: function fromCodePoint(g) {
            for (var a,
                b = [],
                f = arguments.length,
                d = 0; f > d; ) {
              if (a = +arguments[d++], e(a, 1114111) !== a)
                throw RangeError(a + " is not a valid code point");
              b.push(65536 > a ? c(a) : c(((a -= 65536) >> 10) + 55296, a % 1024 + 56320));
            }
            return b.join("");
          }});
      }, function(e, f, a) {
        var b = a(6),
            c = a(30),
            d = a(35);
        b(b.S, "String", {raw: function raw(f) {
            for (var e = c(f.raw),
                g = d(e.length),
                h = arguments.length,
                b = [],
                a = 0; g > a; )
              b.push(String(e[a++])), h > a && b.push(String(arguments[a]));
            return b.join("");
          }});
      }, function(b, c, a) {
        a(81)("trim", function(a) {
          return function trim() {
            return a(this, 3);
          };
        });
      }, function(d, e, a) {
        var b = a(6),
            c = a(126)(!1);
        b(b.P, "String", {codePointAt: function codePointAt(a) {
            return c(this, a);
          }});
      }, function(c, f, b) {
        var d = b(36),
            e = b(33);
        c.exports = function(b) {
          return function(j, k) {
            var f,
                h,
                g = String(e(j)),
                c = d(k),
                i = g.length;
            return 0 > c || c >= i ? b ? "" : a : (f = g.charCodeAt(c), 55296 > f || f > 56319 || c + 1 === i || (h = g.charCodeAt(c + 1)) < 56320 || h > 57343 ? b ? g.charAt(c) : f : b ? g.slice(c, c + 2) : (f - 55296 << 10) + (h - 56320) + 65536);
          };
        };
      }, function(h, i, b) {
        var c = b(6),
            e = b(35),
            g = b(128),
            d = "endsWith",
            f = ""[d];
        c(c.P + c.F * b(130)(d), "String", {endsWith: function endsWith(i) {
            var b = g(this, i, d),
                j = arguments.length > 1 ? arguments[1] : a,
                k = e(b.length),
                c = j === a ? k : Math.min(e(j), k),
                h = String(i);
            return f ? f.call(b, h, c) : b.slice(c - h.length, c) === h;
          }});
      }, function(b, e, a) {
        var c = a(129),
            d = a(33);
        b.exports = function(a, b, e) {
          if (c(b))
            throw TypeError("String#" + e + " doesn't accept regex!");
          return String(d(a));
        };
      }, function(c, g, b) {
        var d = b(11),
            e = b(32),
            f = b(23)("match");
        c.exports = function(b) {
          var c;
          return d(b) && ((c = b[f]) !== a ? !!c : "RegExp" == e(b));
        };
      }, function(a, d, b) {
        var c = b(23)("match");
        a.exports = function(b) {
          var a = /./;
          try {
            "/./"[b](a);
          } catch (d) {
            try {
              return a[c] = !1, !"/./"[b](a);
            } catch (e) {}
          }
          return !0;
        };
      }, function(f, g, b) {
        var c = b(6),
            e = b(128),
            d = "includes";
        c(c.P + c.F * b(130)(d), "String", {includes: function includes(b) {
            return !!~e(this, b, d).indexOf(b, arguments.length > 1 ? arguments[1] : a);
          }});
      }, function(c, d, a) {
        var b = a(6);
        b(b.P, "String", {repeat: a(86)});
      }, function(h, i, b) {
        var c = b(6),
            f = b(35),
            g = b(128),
            d = "startsWith",
            e = ""[d];
        c(c.P + c.F * b(130)(d), "String", {startsWith: function startsWith(i) {
            var b = g(this, i, d),
                c = f(Math.min(arguments.length > 1 ? arguments[1] : a, b.length)),
                h = String(i);
            return e ? e.call(b, h, c) : b.slice(c, c + h.length) === h;
          }});
      }, function(d, e, b) {
        var c = b(126)(!0);
        b(135)(String, "String", function(a) {
          this._t = String(a), this._i = 0;
        }, function() {
          var b,
              d = this._t,
              e = this._i;
          return e >= d.length ? {
            value: a,
            done: !0
          } : (b = c(d, e), this._i += b.length, {
            value: b,
            done: !1
          });
        });
      }, function(q, s, b) {
        var h = b(26),
            e = b(6),
            o = b(16),
            i = b(8),
            n = b(3),
            j = b(136),
            r = b(137),
            l = b(22),
            m = b(57),
            c = b(23)("iterator"),
            f = !([].keys && "next" in [].keys()),
            p = "@@iterator",
            k = "keys",
            d = "values",
            g = function() {
              return this;
            };
        q.exports = function(C, w, x, H, s, G, D) {
          r(x, w, H);
          var v,
              z,
              u,
              y = function(a) {
                if (!f && a in b)
                  return b[a];
                switch (a) {
                  case k:
                    return function keys() {
                      return new x(this, a);
                    };
                  case d:
                    return function values() {
                      return new x(this, a);
                    };
                }
                return function entries() {
                  return new x(this, a);
                };
              },
              E = w + " Iterator",
              A = s == d,
              B = !1,
              b = C.prototype,
              t = b[c] || b[p] || s && b[s],
              q = t || y(s),
              I = s ? A ? y("entries") : q : a,
              F = "Array" == w ? b.entries || t : t;
          if (F && (u = m(F.call(new C)), u !== Object.prototype && (l(u, E, !0), h || n(u, c) || i(u, c, g))), A && t && t.name !== d && (B = !0, q = function values() {
            return t.call(this);
          }), h && !D || !f && !B && b[c] || i(b, c, q), j[w] = q, j[E] = g, s)
            if (v = {
              values: A ? q : y(d),
              keys: G ? q : y(k),
              entries: I
            }, D)
              for (z in v)
                z in b || o(b, z, v[z]);
            else
              e(e.P + e.F * (f || B), w, v);
          return v;
        };
      }, function(a, b) {
        a.exports = {};
      }, function(c, g, a) {
        var d = a(44),
            e = a(15),
            f = a(22),
            b = {};
        a(8)(b, a(23)("iterator"), function() {
          return this;
        }), c.exports = function(a, c, g) {
          a.prototype = d(b, {next: e(1, g)}), f(a, c + " Iterator");
        };
      }, function(b, c, a) {
        a(139)("anchor", function(a) {
          return function anchor(b) {
            return a(this, "a", "name", b);
          };
        });
      }, function(c, h, a) {
        var b = a(6),
            d = a(5),
            e = a(33),
            f = /"/g,
            g = function(d, a, b, g) {
              var h = String(e(d)),
                  c = "<" + a;
              return "" !== b && (c += " " + b + '="' + String(g).replace(f, "&quot;") + '"'), c + ">" + h + "</" + a + ">";
            };
        c.exports = function(a, e) {
          var c = {};
          c[a] = e(g), b(b.P + b.F * d(function() {
            var b = ""[a]('"');
            return b !== b.toLowerCase() || b.split('"').length > 3;
          }), "String", c);
        };
      }, function(b, c, a) {
        a(139)("big", function(a) {
          return function big() {
            return a(this, "big", "", "");
          };
        });
      }, function(b, c, a) {
        a(139)("blink", function(a) {
          return function blink() {
            return a(this, "blink", "", "");
          };
        });
      }, function(b, c, a) {
        a(139)("bold", function(a) {
          return function bold() {
            return a(this, "b", "", "");
          };
        });
      }, function(b, c, a) {
        a(139)("fixed", function(a) {
          return function fixed() {
            return a(this, "tt", "", "");
          };
        });
      }, function(b, c, a) {
        a(139)("fontcolor", function(a) {
          return function fontcolor(b) {
            return a(this, "font", "color", b);
          };
        });
      }, function(b, c, a) {
        a(139)("fontsize", function(a) {
          return function fontsize(b) {
            return a(this, "font", "size", b);
          };
        });
      }, function(b, c, a) {
        a(139)("italics", function(a) {
          return function italics() {
            return a(this, "i", "", "");
          };
        });
      }, function(b, c, a) {
        a(139)("link", function(a) {
          return function link(b) {
            return a(this, "a", "href", b);
          };
        });
      }, function(b, c, a) {
        a(139)("small", function(a) {
          return function small() {
            return a(this, "small", "", "");
          };
        });
      }, function(b, c, a) {
        a(139)("strike", function(a) {
          return function strike() {
            return a(this, "strike", "", "");
          };
        });
      }, function(b, c, a) {
        a(139)("sub", function(a) {
          return function sub() {
            return a(this, "sub", "", "");
          };
        });
      }, function(b, c, a) {
        a(139)("sup", function(a) {
          return function sup() {
            return a(this, "sup", "", "");
          };
        });
      }, function(c, d, a) {
        var b = a(6);
        b(b.S, "Array", {isArray: a(43)});
      }, function(l, k, b) {
        var g = b(18),
            c = b(6),
            e = b(56),
            h = b(154),
            i = b(155),
            j = b(35),
            d = b(156),
            f = b(157);
        c(c.S + c.F * !b(158)(function(a) {
          Array.from(a);
        }), "Array", {from: function from(t) {
            var o,
                c,
                m,
                n,
                k = e(t),
                p = "function" == typeof this ? this : Array,
                s = arguments.length,
                l = s > 1 ? arguments[1] : a,
                q = l !== a,
                b = 0,
                r = f(k);
            if (q && (l = g(l, s > 2 ? arguments[2] : a, 2)), r == a || p == Array && i(r))
              for (o = j(k.length), c = new p(o); o > b; b++)
                d(c, b, q ? l(k[b], b) : k[b]);
            else
              for (n = r.call(k), c = new p; !(m = n.next()).done; b++)
                d(c, b, q ? h(n, l, [m.value, b], !0) : m.value);
            return c.length = b, c;
          }});
      }, function(c, e, d) {
        var b = d(10);
        c.exports = function(d, e, c, g) {
          try {
            return g ? e(b(c)[0], c[1]) : e(c);
          } catch (h) {
            var f = d["return"];
            throw f !== a && b(f.call(d)), h;
          }
        };
      }, function(c, g, b) {
        var d = b(136),
            e = b(23)("iterator"),
            f = Array.prototype;
        c.exports = function(b) {
          return b !== a && (d.Array === b || f[e] === b);
        };
      }, function(b, e, a) {
        var c = a(9),
            d = a(15);
        b.exports = function(a, b, e) {
          b in a ? c.f(a, b, d(0, e)) : a[b] = e;
        };
      }, function(c, g, b) {
        var d = b(73),
            e = b(23)("iterator"),
            f = b(136);
        c.exports = b(7).getIteratorMethod = function(b) {
          return b != a ? b[e] || b["@@iterator"] || f[d(b)] : void 0;
        };
      }, function(d, f, e) {
        var a = e(23)("iterator"),
            b = !1;
        try {
          var c = [7][a]();
          c["return"] = function() {
            b = !0;
          }, Array.from(c, function() {
            throw 2;
          });
        } catch (g) {}
        d.exports = function(f, g) {
          if (!g && !b)
            return !1;
          var d = !1;
          try {
            var c = [7],
                e = c[a]();
            e.next = function() {
              return {done: d = !0};
            }, c[a] = function() {
              return e;
            }, f(c);
          } catch (h) {}
          return d;
        };
      }, function(d, e, a) {
        var b = a(6),
            c = a(156);
        b(b.S + b.F * a(5)(function() {
          function F() {}
          return !(Array.of.call(F) instanceof F);
        }), "Array", {of: function of() {
            for (var a = 0,
                b = arguments.length,
                d = new ("function" == typeof this ? this : Array)(b); b > a; )
              c(d, a, arguments[a++]);
            return d.length = b, d;
          }});
      }, function(f, g, b) {
        var c = b(6),
            e = b(30),
            d = [].join;
        c(c.P + c.F * (b(31) != Object || !b(161)(d)), "Array", {join: function join(b) {
            return d.call(e(this), b === a ? "," : b);
          }});
      }, function(a, d, b) {
        var c = b(5);
        a.exports = function(a, b) {
          return !!a && c(function() {
            b ? a.call(null, function() {}, 1) : a.call(null);
          });
        };
      }, function(i, j, b) {
        var c = b(6),
            d = b(46),
            h = b(32),
            e = b(37),
            f = b(35),
            g = [].slice;
        c(c.P + c.F * b(5)(function() {
          d && g.call(d);
        }), "Array", {slice: function slice(j, b) {
            var d = f(this.length),
                k = h(this);
            if (b = b === a ? d : b, "Array" == k)
              return g.call(this, j, b);
            for (var i = e(j, d),
                n = e(b, d),
                l = f(n - i),
                m = Array(l),
                c = 0; l > c; c++)
              m[c] = "String" == k ? this.charAt(i + c) : this[i + c];
            return m;
          }});
      }, function(i, j, b) {
        var c = b(6),
            h = b(19),
            e = b(56),
            f = b(5),
            d = [].sort,
            g = [1, 2, 3];
        c(c.P + c.F * (f(function() {
          g.sort(a);
        }) || !f(function() {
          g.sort(null);
        }) || !b(161)(d)), "Array", {sort: function sort(b) {
            return b === a ? d.call(e(this)) : d.call(e(this), h(b));
          }});
      }, function(e, f, a) {
        var b = a(6),
            c = a(165)(0),
            d = a(161)([].forEach, !0);
        b(b.P + b.F * !d, "Array", {forEach: function forEach(a) {
            return c(this, a, arguments[1]);
          }});
      }, function(c, i, b) {
        var d = b(18),
            e = b(31),
            f = b(56),
            g = b(35),
            h = b(166);
        c.exports = function(b, l) {
          var i = 1 == b,
              m = 2 == b,
              n = 3 == b,
              c = 4 == b,
              j = 6 == b,
              o = 5 == b || j,
              k = l || h;
          return function(p, v, x) {
            for (var l,
                r,
                u = f(p),
                s = e(u),
                w = d(v, x, 3),
                t = g(s.length),
                h = 0,
                q = i ? k(p, t) : m ? k(p, 0) : a; t > h; h++)
              if ((o || h in s) && (l = s[h], r = w(l, h, u), b))
                if (i)
                  q[h] = r;
                else if (r)
                  switch (b) {
                    case 3:
                      return !0;
                    case 5:
                      return l;
                    case 6:
                      return h;
                    case 2:
                      q.push(l);
                  }
                else if (c)
                  return !1;
            return j ? -1 : n || c ? c : q;
          };
        };
      }, function(a, d, b) {
        var c = b(167);
        a.exports = function(a, b) {
          return new (c(a))(b);
        };
      }, function(d, g, b) {
        var e = b(11),
            c = b(43),
            f = b(23)("species");
        d.exports = function(d) {
          var b;
          return c(d) && (b = d.constructor, "function" != typeof b || b !== Array && !c(b.prototype) || (b = a), e(b) && (b = b[f], null === b && (b = a))), b === a ? Array : b;
        };
      }, function(d, e, a) {
        var b = a(6),
            c = a(165)(1);
        b(b.P + b.F * !a(161)([].map, !0), "Array", {map: function map(a) {
            return c(this, a, arguments[1]);
          }});
      }, function(d, e, a) {
        var b = a(6),
            c = a(165)(2);
        b(b.P + b.F * !a(161)([].filter, !0), "Array", {filter: function filter(a) {
            return c(this, a, arguments[1]);
          }});
      }, function(d, e, a) {
        var b = a(6),
            c = a(165)(3);
        b(b.P + b.F * !a(161)([].some, !0), "Array", {some: function some(a) {
            return c(this, a, arguments[1]);
          }});
      }, function(d, e, a) {
        var b = a(6),
            c = a(165)(4);
        b(b.P + b.F * !a(161)([].every, !0), "Array", {every: function every(a) {
            return c(this, a, arguments[1]);
          }});
      }, function(d, e, a) {
        var b = a(6),
            c = a(173);
        b(b.P + b.F * !a(161)([].reduce, !0), "Array", {reduce: function reduce(a) {
            return c(this, a, arguments.length, arguments[1], !1);
          }});
      }, function(b, g, a) {
        var c = a(19),
            d = a(56),
            e = a(31),
            f = a(35);
        b.exports = function(m, l, n, b, g) {
          c(l);
          var i = d(m),
              h = e(i),
              j = f(i.length),
              a = g ? j - 1 : 0,
              k = g ? -1 : 1;
          if (2 > n)
            for (; ; ) {
              if (a in h) {
                b = h[a], a += k;
                break;
              }
              if (a += k, g ? 0 > a : a >= j)
                throw TypeError("Reduce of empty array with no initial value");
            }
          for (; g ? a >= 0 : j > a; a += k)
            a in h && (b = l(b, h[a], a, i));
          return b;
        };
      }, function(d, e, a) {
        var b = a(6),
            c = a(173);
        b(b.P + b.F * !a(161)([].reduceRight, !0), "Array", {reduceRight: function reduceRight(a) {
            return c(this, a, arguments.length, arguments[1], !0);
          }});
      }, function(f, g, a) {
        var b = a(6),
            e = a(34)(!1),
            c = [].indexOf,
            d = !!c && 1 / [1].indexOf(1, -0) < 0;
        b(b.P + b.F * (d || !a(161)(c)), "Array", {indexOf: function indexOf(a) {
            return d ? c.apply(this, arguments) || 0 : e(this, a, arguments[1]);
          }});
      }, function(h, i, a) {
        var b = a(6),
            e = a(30),
            f = a(36),
            g = a(35),
            c = [].lastIndexOf,
            d = !!c && 1 / [1].lastIndexOf(1, -0) < 0;
        b(b.P + b.F * (d || !a(161)(c)), "Array", {lastIndexOf: function lastIndexOf(i) {
            if (d)
              return c.apply(this, arguments) || 0;
            var b = e(this),
                h = g(b.length),
                a = h - 1;
            for (arguments.length > 1 && (a = Math.min(a, f(arguments[1]))), 0 > a && (a = h + a); a >= 0; a--)
              if (a in b && b[a] === i)
                return a || 0;
            return -1;
          }});
      }, function(c, d, a) {
        var b = a(6);
        b(b.P, "Array", {copyWithin: a(178)}), a(179)("copyWithin");
      }, function(d, g, b) {
        var e = b(56),
            c = b(37),
            f = b(35);
        d.exports = [].copyWithin || function copyWithin(l, m) {
          var g = e(this),
              h = f(g.length),
              b = c(l, h),
              d = c(m, h),
              k = arguments.length > 2 ? arguments[2] : a,
              i = Math.min((k === a ? h : c(k, h)) - d, h - b),
              j = 1;
          for (b > d && d + i > b && (j = -1, d += i - 1, b += i - 1); i-- > 0; )
            d in g ? g[b] = g[d] : delete g[b], b += j, d += j;
          return g;
        };
      }, function(e, f, d) {
        var b = d(23)("unscopables"),
            c = Array.prototype;
        c[b] == a && d(8)(c, b, {}), e.exports = function(a) {
          c[b][a] = !0;
        };
      }, function(c, d, a) {
        var b = a(6);
        b(b.P, "Array", {fill: a(181)}), a(179)("fill");
      }, function(d, g, b) {
        var e = b(56),
            c = b(37),
            f = b(35);
        d.exports = function fill(j) {
          for (var b = e(this),
              d = f(b.length),
              g = arguments.length,
              h = c(g > 1 ? arguments[1] : a, d),
              i = g > 2 ? arguments[2] : a,
              k = i === a ? d : c(i, d); k > h; )
            b[h++] = j;
          return b;
        };
      }, function(g, h, b) {
        var c = b(6),
            f = b(165)(5),
            d = "find",
            e = !0;
        d in [] && Array(1)[d](function() {
          e = !1;
        }), c(c.P + c.F * e, "Array", {find: function find(b) {
            return f(this, b, arguments.length > 1 ? arguments[1] : a);
          }}), b(179)(d);
      }, function(g, h, b) {
        var c = b(6),
            f = b(165)(6),
            d = "findIndex",
            e = !0;
        d in [] && Array(1)[d](function() {
          e = !1;
        }), c(c.P + c.F * e, "Array", {findIndex: function findIndex(b) {
            return f(this, b, arguments.length > 1 ? arguments[1] : a);
          }}), b(179)(d);
      }, function(f, h, b) {
        var d = b(179),
            c = b(185),
            e = b(136),
            g = b(30);
        f.exports = b(135)(Array, "Array", function(a, b) {
          this._t = g(a), this._i = 0, this._k = b;
        }, function() {
          var d = this._t,
              e = this._k,
              b = this._i++;
          return !d || b >= d.length ? (this._t = a, c(1)) : "keys" == e ? c(0, b) : "values" == e ? c(0, d[b]) : c(0, [b, d[b]]);
        }, "values"), e.Arguments = e.Array, d("keys"), d("values"), d("entries");
      }, function(a, b) {
        a.exports = function(a, b) {
          return {
            value: b,
            done: !!a
          };
        };
      }, function(b, c, a) {
        a(187)("Array");
      }, function(c, g, a) {
        var d = a(2),
            e = a(9),
            f = a(4),
            b = a(23)("species");
        c.exports = function(c) {
          var a = d[c];
          f && a && !a[b] && e.f(a, b, {
            configurable: !0,
            get: function() {
              return this;
            }
          });
        };
      }, function(s, r, c) {
        var i = c(2),
            q = c(80),
            o = c(9).f,
            n = c(48).f,
            m = c(129),
            l = c(189),
            b = i.RegExp,
            e = b,
            g = b.prototype,
            d = /a/g,
            f = /a/g,
            k = new b(d) !== d;
        if (c(4) && (!k || c(5)(function() {
          return f[c(23)("match")] = !1, b(d) != d || b(f) == f || "/a/i" != b(d, "i");
        }))) {
          b = function RegExp(c, f) {
            var i = this instanceof b,
                d = m(c),
                h = f === a;
            return !i && d && c.constructor === b && h ? c : q(k ? new e(d && !h ? c.source : c, f) : e((d = c instanceof b) ? c.source : c, d && h ? l.call(c) : f), i ? this : g, b);
          };
          for (var p = (function(a) {
            a in b || o(b, a, {
              configurable: !0,
              get: function() {
                return e[a];
              },
              set: function(b) {
                e[a] = b;
              }
            });
          }),
              j = n(e),
              h = 0; j.length > h; )
            p(j[h++]);
          g.constructor = b, b.prototype = g, c(16)(i, "RegExp", b);
        }
        c(187)("RegExp");
      }, function(a, d, b) {
        var c = b(10);
        a.exports = function() {
          var b = c(this),
              a = "";
          return b.global && (a += "g"), b.ignoreCase && (a += "i"), b.multiline && (a += "m"), b.unicode && (a += "u"), b.sticky && (a += "y"), a;
        };
      }, function(i, j, b) {
        b(191);
        var f = b(10),
            g = b(189),
            h = b(4),
            c = "toString",
            d = /./[c],
            e = function(a) {
              b(16)(RegExp.prototype, c, a, !0);
            };
        b(5)(function() {
          return "/a/b" != d.call({
            source: "a",
            flags: "b"
          });
        }) ? e(function toString() {
          var b = f(this);
          return "/".concat(b.source, "/", "flags" in b ? b.flags : !h && b instanceof RegExp ? g.call(b) : a);
        }) : d.name != c && e(function toString() {
          return d.call(this);
        });
      }, function(b, c, a) {
        a(4) && "g" != /./g.flags && a(9).f(RegExp.prototype, "flags", {
          configurable: !0,
          get: a(189)
        });
      }, function(c, d, b) {
        b(193)("match", 1, function(c, b, d) {
          return [function match(d) {
            var e = c(this),
                f = d == a ? a : d[b];
            return f !== a ? f.call(d, e) : new RegExp(d)[b](String(e));
          }, d];
        });
      }, function(b, h, a) {
        var c = a(8),
            d = a(16),
            e = a(5),
            f = a(33),
            g = a(23);
        b.exports = function(a, j, k) {
          var b = g(a),
              h = k(f, b, ""[a]),
              l = h[0],
              i = h[1];
          e(function() {
            var c = {};
            return c[b] = function() {
              return 7;
            }, 7 != ""[a](c);
          }) && (d(String.prototype, a, l), c(RegExp.prototype, b, 2 == j ? function(a, b) {
            return i.call(a, this, b);
          } : function(a) {
            return i.call(a, this);
          }));
        };
      }, function(c, d, b) {
        b(193)("replace", 2, function(c, d, b) {
          return [function replace(e, f) {
            var g = c(this),
                h = e == a ? a : e[d];
            return h !== a ? h.call(e, g, f) : b.call(String(g), e, f);
          }, b];
        });
      }, function(c, d, b) {
        b(193)("search", 1, function(c, b, d) {
          return [function search(d) {
            var e = c(this),
                f = d == a ? a : d[b];
            return f !== a ? f.call(d, e) : new RegExp(d)[b](String(e));
          }, d];
        });
      }, function(c, d, b) {
        b(193)("split", 2, function(i, j, e) {
          var k = b(129),
              f = e,
              l = [].push,
              d = "split",
              c = "length",
              g = "lastIndex";
          if ("c" == "abbc"[d](/(b)*/)[1] || 4 != "test"[d](/(?:)/, -1)[c] || 2 != "ab"[d](/(?:ab)*/)[c] || 4 != "."[d](/(.?)(.?)/)[c] || "."[d](/()()/)[c] > 1 || ""[d](/.?/)[c]) {
            var h = /()??/.exec("")[1] === a;
            e = function(d, o) {
              var i = String(this);
              if (d === a && 0 === o)
                return [];
              if (!k(d))
                return f.call(i, d, o);
              var s,
                  b,
                  p,
                  t,
                  n,
                  e = [],
                  r = (d.ignoreCase ? "i" : "") + (d.multiline ? "m" : "") + (d.unicode ? "u" : "") + (d.sticky ? "y" : ""),
                  m = 0,
                  q = o === a ? 4294967295 : o >>> 0,
                  j = new RegExp(d.source, r + "g");
              for (h || (s = new RegExp("^" + j.source + "$(?!\\s)", r)); (b = j.exec(i)) && (p = b.index + b[0][c], !(p > m && (e.push(i.slice(m, b.index)), !h && b[c] > 1 && b[0].replace(s, function() {
                for (n = 1; arguments[c] - 2 > n; n++)
                  arguments[n] === a && (b[n] = a);
              }), b[c] > 1 && i[c] > b.index && l.apply(e, b.slice(1)), t = b[0][c], m = p, e[c] >= q))); )
                j[g] === b.index && j[g]++;
              return m === i[c] ? !t && j.test("") || e.push("") : e.push(i.slice(m)), e[c] > q ? e.slice(0, q) : e;
            };
          } else
            "0"[d](a, 0)[c] && (e = function(b, c) {
              return b === a && 0 === c ? [] : f.call(this, b, c);
            });
          return [function split(b, c) {
            var d = i(this),
                f = b == a ? a : b[j];
            return f !== a ? f.call(b, d, c) : e.call(String(d), b, c);
          }, e];
        });
      }, function(K, J, b) {
        var m,
            v,
            w,
            E = b(26),
            e = b(2),
            g = b(18),
            D = b(73),
            c = b(6),
            I = b(11),
            s = (b(10), b(19)),
            C = b(84),
            x = b(198),
            G = (b(71).set, b(199)),
            B = b(200).set,
            u = b(201)(),
            f = "Promise",
            t = e.TypeError,
            n = e.process,
            d = e[f],
            n = e.process,
            k = "process" == D(n),
            l = function() {},
            j = !!function() {
              try {
                var a = d.resolve(1),
                    c = (a.constructor = {})[b(23)("species")] = function(a) {
                      a(l, l);
                    };
                return (k || "function" == typeof PromiseRejectionEvent) && a.then(l) instanceof c;
              } catch (e) {}
            }(),
            z = function(a, b) {
              return a === b || a === d && b === w;
            },
            A = function(a) {
              var b;
              return I(a) && "function" == typeof(b = a.then) ? b : !1;
            },
            i = function(a) {
              return z(d, a) ? new y(a) : new v(a);
            },
            y = v = function(d) {
              var b,
                  c;
              this.promise = new d(function(d, e) {
                if (b !== a || c !== a)
                  throw t("Bad Promise constructor");
                b = d, c = e;
              }), this.resolve = s(b), this.reject = s(c);
            },
            p = function(a) {
              try {
                a();
              } catch (b) {
                return {error: b};
              }
            },
            q = function(a, c) {
              if (!a._n) {
                a._n = !0;
                var b = a._c;
                u(function() {
                  for (var d = a._v,
                      e = 1 == a._s,
                      f = 0,
                      g = function(b) {
                        var c,
                            i,
                            h = e ? b.ok : b.fail,
                            j = b.resolve,
                            f = b.reject,
                            g = b.domain;
                        try {
                          h ? (e || (2 == a._h && H(a), a._h = 1), h === !0 ? c = d : (g && g.enter(), c = h(d), g && g.exit()), c === b.promise ? f(t("Promise-chain cycle")) : (i = A(c)) ? i.call(c, j, f) : j(c)) : f(d);
                        } catch (k) {
                          f(k);
                        }
                      }; b.length > f; )
                    g(b[f++]);
                  a._c = [], a._n = !1, c && !a._h && F(a);
                });
              }
            },
            F = function(b) {
              B.call(e, function() {
                var c,
                    g,
                    d,
                    f = b._v;
                if (o(b) && (c = p(function() {
                  k ? n.emit("unhandledRejection", f, b) : (g = e.onunhandledrejection) ? g({
                    promise: b,
                    reason: f
                  }) : (d = e.console) && d.error && d.error("Unhandled promise rejection", f);
                }), b._h = k || o(b) ? 2 : 1), b._a = a, c)
                  throw c.error;
              });
            },
            o = function(a) {
              if (1 == a._h)
                return !1;
              for (var b,
                  c = a._a || a._c,
                  d = 0; c.length > d; )
                if (b = c[d++], b.fail || !o(b.promise))
                  return !1;
              return !0;
            },
            H = function(a) {
              B.call(e, function() {
                var b;
                k ? n.emit("rejectionHandled", a) : (b = e.onrejectionhandled) && b({
                  promise: a,
                  reason: a._v
                });
              });
            },
            h = function(b) {
              var a = this;
              a._d || (a._d = !0, a = a._w || a, a._v = b, a._s = 2, a._a || (a._a = a._c.slice()), q(a, !0));
            },
            r = function(b) {
              var c,
                  a = this;
              if (!a._d) {
                a._d = !0, a = a._w || a;
                try {
                  if (a === b)
                    throw t("Promise can't be resolved itself");
                  (c = A(b)) ? u(function() {
                    var d = {
                      _w: a,
                      _d: !1
                    };
                    try {
                      c.call(b, g(r, d, 1), g(h, d, 1));
                    } catch (e) {
                      h.call(d, e);
                    }
                  }) : (a._v = b, a._s = 1, q(a, !1));
                } catch (d) {
                  h.call({
                    _w: a,
                    _d: !1
                  }, d);
                }
              }
            };
        j || (d = function Promise(a) {
          C(this, d, f, "_h"), s(a), m.call(this);
          try {
            a(g(r, this, 1), g(h, this, 1));
          } catch (b) {
            h.call(this, b);
          }
        }, m = function Promise(b) {
          this._c = [], this._a = a, this._s = 0, this._d = !1, this._v = a, this._h = 0, this._n = !1;
        }, m.prototype = b(202)(d.prototype, {
          then: function then(c, e) {
            var b = i(G(this, d));
            return b.ok = "function" == typeof c ? c : !0, b.fail = "function" == typeof e && e, b.domain = k ? n.domain : a, this._c.push(b), this._a && this._a.push(b), this._s && q(this, !1), b.promise;
          },
          "catch": function(b) {
            return this.then(a, b);
          }
        }), y = function() {
          var a = new m;
          this.promise = a, this.resolve = g(r, a, 1), this.reject = g(h, a, 1);
        }), c(c.G + c.W + c.F * !j, {Promise: d}), b(22)(d, f), b(187)(f), w = b(7)[f], c(c.S + c.F * !j, f, {reject: function reject(b) {
            var a = i(this),
                c = a.reject;
            return c(b), a.promise;
          }}), c(c.S + c.F * (E || !j), f, {resolve: function resolve(a) {
            if (a instanceof d && z(a.constructor, this))
              return a;
            var b = i(this),
                c = b.resolve;
            return c(a), b.promise;
          }}), c(c.S + c.F * !(j && b(158)(function(a) {
          d.all(a)["catch"](l);
        })), f, {
          all: function all(g) {
            var c = this,
                b = i(c),
                d = b.resolve,
                e = b.reject,
                f = p(function() {
                  var b = [],
                      h = 0,
                      f = 1;
                  x(g, !1, function(i) {
                    var j = h++,
                        g = !1;
                    b.push(a), f++, c.resolve(i).then(function(a) {
                      g || (g = !0, b[j] = a, --f || d(b));
                    }, e);
                  }), --f || d(b);
                });
            return f && e(f.error), b.promise;
          },
          race: function race(e) {
            var b = this,
                a = i(b),
                c = a.reject,
                d = p(function() {
                  x(e, !1, function(d) {
                    b.resolve(d).then(a.resolve, c);
                  });
                });
            return d && c(d.error), a.promise;
          }
        });
      }, function(b, i, a) {
        var c = a(18),
            d = a(154),
            e = a(155),
            f = a(10),
            g = a(35),
            h = a(157);
        b.exports = function(a, j, q, o, p) {
          var n,
              i,
              k,
              l = p ? function() {
                return a;
              } : h(a),
              m = c(q, o, j ? 2 : 1),
              b = 0;
          if ("function" != typeof l)
            throw TypeError(a + " is not iterable!");
          if (e(l))
            for (n = g(a.length); n > b; b++)
              j ? m(f(i = a[b])[0], i[1]) : m(a[b]);
          else
            for (k = l.call(a); !(i = k.next()).done; )
              d(k, m, i.value, j);
        };
      }, function(d, g, b) {
        var c = b(10),
            e = b(19),
            f = b(23)("species");
        d.exports = function(g, h) {
          var b,
              d = c(g).constructor;
          return d === a || (b = c(d)[f]) == a ? h : e(b);
        };
      }, function(s, t, b) {
        var c,
            g,
            f,
            k = b(18),
            r = b(76),
            n = b(46),
            p = b(13),
            a = b(2),
            l = a.process,
            h = a.setImmediate,
            i = a.clearImmediate,
            o = a.MessageChannel,
            j = 0,
            d = {},
            q = "onreadystatechange",
            e = function() {
              var a = +this;
              if (d.hasOwnProperty(a)) {
                var b = d[a];
                delete d[a], b();
              }
            },
            m = function(a) {
              e.call(a.data);
            };
        h && i || (h = function setImmediate(a) {
          for (var b = [],
              e = 1; arguments.length > e; )
            b.push(arguments[e++]);
          return d[++j] = function() {
            r("function" == typeof a ? a : Function(a), b);
          }, c(j), j;
        }, i = function clearImmediate(a) {
          delete d[a];
        }, "process" == b(32)(l) ? c = function(a) {
          l.nextTick(k(e, a, 1));
        } : o ? (g = new o, f = g.port2, g.port1.onmessage = m, c = k(f.postMessage, f, 1)) : a.addEventListener && "function" == typeof postMessage && !a.importScripts ? (c = function(b) {
          a.postMessage(b + "", "*");
        }, a.addEventListener("message", m, !1)) : c = q in p("script") ? function(a) {
          n.appendChild(p("script"))[q] = function() {
            n.removeChild(this), e.call(a);
          };
        } : function(a) {
          setTimeout(k(e, a, 1), 0);
        }), s.exports = {
          set: h,
          clear: i
        };
      }, function(h, j, c) {
        var b = c(2),
            i = c(200).set,
            f = b.MutationObserver || b.WebKitMutationObserver,
            d = b.process,
            e = b.Promise,
            g = "process" == c(32)(d);
        h.exports = function() {
          var c,
              j,
              h,
              k = function() {
                var b,
                    e;
                for (g && (b = d.domain) && b.exit(); c; ) {
                  e = c.fn, c = c.next;
                  try {
                    e();
                  } catch (f) {
                    throw c ? h() : j = a, f;
                  }
                }
                j = a, b && b.enter();
              };
          if (g)
            h = function() {
              d.nextTick(k);
            };
          else if (f) {
            var l = !0,
                m = document.createTextNode("");
            new f(k).observe(m, {characterData: !0}), h = function() {
              m.data = l = !l;
            };
          } else if (e && e.resolve) {
            var n = e.resolve();
            h = function() {
              n.then(k);
            };
          } else
            h = function() {
              i.call(b, k);
            };
          return function(d) {
            var b = {
              fn: d,
              next: a
            };
            j && (j.next = b), c || (c = b, h()), j = b;
          };
        };
      }, function(a, d, b) {
        var c = b(16);
        a.exports = function(a, b, e) {
          for (var d in b)
            c(a, d, b[d], e);
          return a;
        };
      }, function(d, e, c) {
        var b = c(204);
        d.exports = c(205)("Map", function(b) {
          return function Map() {
            return b(this, arguments.length > 0 ? arguments[0] : a);
          };
        }, {
          get: function get(c) {
            var a = b.getEntry(this, c);
            return a && a.v;
          },
          set: function set(a, c) {
            return b.def(this, 0 === a ? 0 : a, c);
          }
        }, b, !0);
      }, function(i, r, b) {
        var j = b(9).f,
            m = b(44),
            o = (b(8), b(202)),
            p = b(18),
            f = b(84),
            q = b(33),
            k = b(198),
            l = b(135),
            e = b(185),
            n = b(187),
            g = b(4),
            h = b(20).fastKey,
            c = g ? "_s" : "size",
            d = function(b, c) {
              var a,
                  d = h(c);
              if ("F" !== d)
                return b._i[d];
              for (a = b._f; a; a = a.n)
                if (a.k == c)
                  return a;
            };
        i.exports = {
          getConstructor: function(e, h, i, l) {
            var b = e(function(d, e) {
              f(d, b, h, "_i"), d._i = m(null), d._f = a, d._l = a, d[c] = 0, e != a && k(e, i, d[l], d);
            });
            return o(b.prototype, {
              clear: function clear() {
                for (var d = this,
                    e = d._i,
                    b = d._f; b; b = b.n)
                  b.r = !0, b.p && (b.p = b.p.n = a), delete e[b.i];
                d._f = d._l = a, d[c] = 0;
              },
              "delete": function(g) {
                var b = this,
                    a = d(b, g);
                if (a) {
                  var e = a.n,
                      f = a.p;
                  delete b._i[a.i], a.r = !0, f && (f.n = e), e && (e.p = f), b._f == a && (b._f = e), b._l == a && (b._l = f), b[c]--;
                }
                return !!a;
              },
              forEach: function forEach(d) {
                f(this, b, "forEach");
                for (var c,
                    e = p(d, arguments.length > 1 ? arguments[1] : a, 3); c = c ? c.n : this._f; )
                  for (e(c.v, c.k, this); c && c.r; )
                    c = c.p;
              },
              has: function has(a) {
                return !!d(this, a);
              }
            }), g && j(b.prototype, "size", {get: function() {
                return q(this[c]);
              }}), b;
          },
          def: function(b, f, j) {
            var g,
                i,
                e = d(b, f);
            return e ? e.v = j : (b._l = e = {
              i: i = h(f, !0),
              k: f,
              v: j,
              p: g = b._l,
              n: a,
              r: !1
            }, b._f || (b._f = e), g && (g.n = e), b[c]++, "F" !== i && (b._i[i] = e)), b;
          },
          getEntry: d,
          setStrong: function(d, b, c) {
            l(d, b, function(b, c) {
              this._t = b, this._k = c, this._l = a;
            }, function() {
              for (var c = this,
                  d = c._k,
                  b = c._l; b && b.r; )
                b = b.p;
              return c._t && (c._l = b = b ? b.n : c._t._f) ? "keys" == d ? e(0, b.k) : "values" == d ? e(0, b.v) : e(0, [b.k, b.v]) : (c._t = a, e(1));
            }, c ? "entries" : "values", !c, !0), n(b);
          }
        };
      }, function(m, p, b) {
        var l = b(2),
            c = b(6),
            g = b(16),
            h = b(202),
            f = b(20),
            j = b(198),
            k = b(84),
            d = b(11),
            e = b(5),
            n = b(158),
            i = b(22),
            o = b(80);
        m.exports = function(q, y, A, x, r, m) {
          var u = l[q],
              b = u,
              s = r ? "set" : "add",
              p = b && b.prototype,
              w = {},
              t = function(b) {
                var c = p[b];
                g(p, b, "delete" == b ? function(a) {
                  return m && !d(a) ? !1 : c.call(this, 0 === a ? 0 : a);
                } : "has" == b ? function has(a) {
                  return m && !d(a) ? !1 : c.call(this, 0 === a ? 0 : a);
                } : "get" == b ? function get(b) {
                  return m && !d(b) ? a : c.call(this, 0 === b ? 0 : b);
                } : "add" == b ? function add(a) {
                  return c.call(this, 0 === a ? 0 : a), this;
                } : function set(a, b) {
                  return c.call(this, 0 === a ? 0 : a, b), this;
                });
              };
          if ("function" == typeof b && (m || p.forEach && !e(function() {
            (new b).entries().next();
          }))) {
            var v = new b,
                B = v[s](m ? {} : -0, 1) != v,
                C = e(function() {
                  v.has(1);
                }),
                D = n(function(a) {
                  new b(a);
                }),
                z = !m && e(function() {
                  for (var c = new b,
                      a = 5; a--; )
                    c[s](a, a);
                  return !c.has(-0);
                });
            D || (b = y(function(d, e) {
              k(d, b, q);
              var c = o(new u, d, b);
              return e != a && j(e, r, c[s], c), c;
            }), b.prototype = p, p.constructor = b), (C || z) && (t("delete"), t("has"), r && t("get")), (z || B) && t(s), m && p.clear && delete p.clear;
          } else
            b = x.getConstructor(y, q, r, s), h(b.prototype, A), f.NEED = !0;
          return i(b, q), w[q] = b, c(c.G + c.W + c.F * (b != u), w), m || x.setStrong(b, q, r), b;
        };
      }, function(d, e, b) {
        var c = b(204);
        d.exports = b(205)("Set", function(b) {
          return function Set() {
            return b(this, arguments.length > 0 ? arguments[0] : a);
          };
        }, {add: function add(a) {
            return c.def(this, a = 0 === a ? 0 : a, a);
          }}, c);
      }, function(q, r, b) {
        var d,
            p = b(165)(0),
            o = b(16),
            h = b(20),
            n = b(67),
            c = b(208),
            j = b(11),
            k = (b(3), h.getWeak),
            l = Object.isExtensible,
            m = c.ufstore,
            i = {},
            g = function(b) {
              return function WeakMap() {
                return b(this, arguments.length > 0 ? arguments[0] : a);
              };
            },
            f = {
              get: function get(b) {
                if (j(b)) {
                  var c = k(b);
                  return c === !0 ? m(this).get(b) : c ? c[this._i] : a;
                }
              },
              set: function set(a, b) {
                return c.def(this, a, b);
              }
            },
            e = q.exports = b(205)("WeakMap", g, f, c, !0, !0);
        7 != (new e).set((Object.freeze || Object)(i), 7).get(i) && (d = c.getConstructor(g), n(d.prototype, f), h.NEED = !0, p(["delete", "has", "get", "set"], function(a) {
          var b = e.prototype,
              c = b[a];
          o(b, a, function(b, e) {
            if (j(b) && !l(b)) {
              this._f || (this._f = new d);
              var f = this._f[a](b, e);
              return "set" == a ? this : f;
            }
            return c.call(this, b, e);
          });
        }));
      }, function(j, r, b) {
        var l = b(202),
            e = b(20).getWeak,
            k = b(10),
            f = b(11),
            p = b(84),
            q = b(198),
            h = b(165),
            i = b(3),
            m = h(5),
            n = h(6),
            o = 0,
            c = function(a) {
              return a._l || (a._l = new g);
            },
            g = function() {
              this.a = [];
            },
            d = function(a, b) {
              return m(a.a, function(a) {
                return a[0] === b;
              });
            };
        g.prototype = {
          get: function(b) {
            var a = d(this, b);
            return a ? a[1] : void 0;
          },
          has: function(a) {
            return !!d(this, a);
          },
          set: function(a, b) {
            var c = d(this, a);
            c ? c[1] = b : this.a.push([a, b]);
          },
          "delete": function(b) {
            var a = n(this.a, function(a) {
              return a[0] === b;
            });
            return ~a && this.a.splice(a, 1), !!~a;
          }
        }, j.exports = {
          getConstructor: function(d, g, h, j) {
            var b = d(function(c, d) {
              p(c, b, g, "_i"), c._i = o++, c._l = a, d != a && q(d, h, c[j], c);
            });
            return l(b.prototype, {
              "delete": function(b) {
                if (!f(b))
                  return !1;
                var a = e(b);
                return a === !0 ? c(this)["delete"](b) : a && i(a, this._i) && delete a[this._i];
              },
              has: function has(a) {
                if (!f(a))
                  return !1;
                var b = e(a);
                return b === !0 ? c(this).has(a) : b && i(b, this._i);
              }
            }), b;
          },
          def: function(a, b, d) {
            var f = e(k(b), !0);
            return f === !0 ? c(a).set(b, d) : f[a._i] = d, a;
          },
          ufstore: c
        };
      }, function(d, e, b) {
        var c = b(208);
        b(205)("WeakSet", function(b) {
          return function WeakSet() {
            return b(this, arguments.length > 0 ? arguments[0] : a);
          };
        }, {add: function add(a) {
            return c.def(this, a, !0);
          }}, c, !1, !0);
      }, function(d, e, b) {
        var a = b(6),
            c = Function.apply;
        a(a.S, "Reflect", {apply: function apply(a, b, d) {
            return c.call(a, b, d);
          }});
      }, function(i, j, b) {
        var c = b(6),
            f = b(44),
            d = b(19),
            g = b(10),
            e = b(11),
            h = b(75);
        c(c.S + c.F * b(5)(function() {
          function F() {}
          return !(Reflect.construct(function() {}, [], F) instanceof F);
        }), "Reflect", {construct: function construct(c, b) {
            d(c);
            var j = 3 > arguments.length ? c : d(arguments[2]);
            if (c == j) {
              if (b != a)
                switch (g(b).length) {
                  case 0:
                    return new c;
                  case 1:
                    return new c(b[0]);
                  case 2:
                    return new c(b[0], b[1]);
                  case 3:
                    return new c(b[0], b[1], b[2]);
                  case 4:
                    return new c(b[0], b[1], b[2], b[3]);
                }
              var i = [null];
              return i.push.apply(i, b), new (h.apply(c, i));
            }
            var k = j.prototype,
                l = f(e(k) ? k : Object.prototype),
                m = Function.apply.call(c, l, b);
            return e(m) ? m : l;
          }});
      }, function(f, g, a) {
        var c = a(9),
            b = a(6),
            d = a(10),
            e = a(14);
        b(b.S + b.F * a(5)(function() {
          Reflect.defineProperty(c.f({}, 1, {value: 1}), 1, {value: 2});
        }), "Reflect", {defineProperty: function defineProperty(b, a, f) {
            d(b), a = e(a, !0), d(f);
            try {
              return c.f(b, a, f), !0;
            } catch (g) {
              return !1;
            }
          }});
      }, function(e, f, a) {
        var b = a(6),
            c = a(49).f,
            d = a(10);
        b(b.S, "Reflect", {deleteProperty: function deleteProperty(a, b) {
            var e = c(d(a), b);
            return e && !e.configurable ? !1 : delete a[b];
          }});
      }, function(f, g, b) {
        var c = b(6),
            e = b(10),
            d = function(a) {
              this._t = e(a), this._i = 0;
              var b,
                  c = this._k = [];
              for (b in a)
                c.push(b);
            };
        b(137)(d, "Object", function() {
          var c,
              b = this,
              d = b._k;
          do
            if (b._i >= d.length)
              return {
                value: a,
                done: !0
              };
 while (!((c = d[b._i++]) in b._t));
          return {
            value: c,
            done: !1
          };
        }), c(c.S, "Reflect", {enumerate: function enumerate(a) {
            return new d(a);
          }});
      }, function(i, j, b) {
        function get(b, i) {
          var c,
              k,
              j = 3 > arguments.length ? b : arguments[2];
          return h(b) === j ? b[i] : (c = d.f(b, i)) ? f(c, "value") ? c.value : c.get !== a ? c.get.call(j) : a : g(k = e(b)) ? get(k, i, j) : void 0;
        }
        var d = b(49),
            e = b(57),
            f = b(3),
            c = b(6),
            g = b(11),
            h = b(10);
        c(c.S, "Reflect", {get: get});
      }, function(e, f, a) {
        var c = a(49),
            b = a(6),
            d = a(10);
        b(b.S, "Reflect", {getOwnPropertyDescriptor: function getOwnPropertyDescriptor(a, b) {
            return c.f(d(a), b);
          }});
      }, function(e, f, a) {
        var b = a(6),
            c = a(57),
            d = a(10);
        b(b.S, "Reflect", {getPrototypeOf: function getPrototypeOf(a) {
            return c(d(a));
          }});
      }, function(c, d, b) {
        var a = b(6);
        a(a.S, "Reflect", {has: function has(a, b) {
            return b in a;
          }});
      }, function(e, f, a) {
        var b = a(6),
            d = a(10),
            c = Object.isExtensible;
        b(b.S, "Reflect", {isExtensible: function isExtensible(a) {
            return d(a), c ? c(a) : !0;
          }});
      }, function(c, d, a) {
        var b = a(6);
        b(b.S, "Reflect", {ownKeys: a(221)});
      }, function(c, g, a) {
        var d = a(48),
            e = a(41),
            f = a(10),
            b = a(2).Reflect;
        c.exports = b && b.ownKeys || function ownKeys(a) {
          var b = d.f(f(a)),
              c = e.f;
          return c ? b.concat(c(a)) : b;
        };
      }, function(e, f, a) {
        var b = a(6),
            d = a(10),
            c = Object.preventExtensions;
        b(b.S, "Reflect", {preventExtensions: function preventExtensions(a) {
            d(a);
            try {
              return c && c(a), !0;
            } catch (b) {
              return !1;
            }
          }});
      }, function(l, k, b) {
        function set(l, k, m) {
          var n,
              o,
              e = 4 > arguments.length ? l : arguments[3],
              b = d.f(g(l), k);
          if (!b) {
            if (c(o = j(l)))
              return set(o, k, m, e);
            b = f(0);
          }
          return h(b, "value") ? b.writable !== !1 && c(e) ? (n = d.f(e, k) || f(0), n.value = m, i.f(e, k, n), !0) : !1 : b.set === a ? !1 : (b.set.call(e, m), !0);
        }
        var i = b(9),
            d = b(49),
            j = b(57),
            h = b(3),
            e = b(6),
            f = b(15),
            g = b(10),
            c = b(11);
        e(e.S, "Reflect", {set: set});
      }, function(d, e, b) {
        var c = b(6),
            a = b(71);
        a && c(c.S, "Reflect", {setPrototypeOf: function setPrototypeOf(b, c) {
            a.check(b, c);
            try {
              return a.set(b, c), !0;
            } catch (d) {
              return !1;
            }
          }});
      }, function(c, d, b) {
        var a = b(6);
        a(a.S, "Date", {now: function() {
            return (new Date).getTime();
          }});
      }, function(e, f, a) {
        var b = a(6),
            c = a(56),
            d = a(14);
        b(b.P + b.F * a(5)(function() {
          return null !== new Date(NaN).toJSON() || 1 !== Date.prototype.toJSON.call({toISOString: function() {
              return 1;
            }});
        }), "Date", {toJSON: function toJSON(e) {
            var a = c(this),
                b = d(a);
            return "number" != typeof b || isFinite(b) ? a.toISOString() : null;
          }});
      }, function(f, g, c) {
        var b = c(6),
            d = c(5),
            e = Date.prototype.getTime,
            a = function(a) {
              return a > 9 ? a : "0" + a;
            };
        b(b.P + b.F * (d(function() {
          return "0385-07-25T07:06:39.999Z" != new Date(-5e13 - 1).toISOString();
        }) || !d(function() {
          new Date(NaN).toISOString();
        })), "Date", {toISOString: function toISOString() {
            if (!isFinite(e.call(this)))
              throw RangeError("Invalid time value");
            var b = this,
                c = b.getUTCFullYear(),
                d = b.getUTCMilliseconds(),
                f = 0 > c ? "-" : c > 9999 ? "+" : "";
            return f + ("00000" + Math.abs(c)).slice(f ? -6 : -4) + "-" + a(b.getUTCMonth() + 1) + "-" + a(b.getUTCDate()) + "T" + a(b.getUTCHours()) + ":" + a(b.getUTCMinutes()) + ":" + a(b.getUTCSeconds()) + "." + (d > 99 ? d : "0" + a(d)) + "Z";
          }});
      }, function(g, h, d) {
        var a = Date.prototype,
            b = "Invalid Date",
            c = "toString",
            e = a[c],
            f = a.getTime;
        new Date(NaN) + "" != b && d(16)(a, c, function toString() {
          var a = f.call(this);
          return a === a ? e.call(this) : b;
        });
      }, function(d, e, a) {
        var b = a(23)("toPrimitive"),
            c = Date.prototype;
        b in c || a(8)(c, b, a(230));
      }, function(c, f, a) {
        var d = a(10),
            e = a(14),
            b = "number";
        c.exports = function(a) {
          if ("string" !== a && a !== b && "default" !== a)
            throw TypeError("Incorrect hint");
          return e(d(this), a != b);
        };
      }, function(s, r, b) {
        var c = b(6),
            f = b(232),
            j = b(233),
            g = b(10),
            m = b(37),
            n = b(35),
            p = b(11),
            i = (b(23)("typed_array"), b(2).ArrayBuffer),
            q = b(199),
            d = j.ArrayBuffer,
            k = j.DataView,
            l = f.ABV && i.isView,
            h = d.prototype.slice,
            o = f.VIEW,
            e = "ArrayBuffer";
        c(c.G + c.W + c.F * (i !== d), {ArrayBuffer: d}), c(c.S + c.F * !f.CONSTR, e, {isView: function isView(a) {
            return l && l(a) || p(a) && o in a;
          }}), c(c.P + c.U + c.F * b(5)(function() {
          return !new d(2).slice(1, a).byteLength;
        }), e, {slice: function slice(f, b) {
            if (h !== a && b === a)
              return h.call(g(this), f);
            for (var c = g(this).byteLength,
                e = m(f, c),
                i = m(b === a ? c : b, c),
                j = new (q(this, d))(n(i - e)),
                l = new k(this),
                o = new k(j),
                p = 0; i > e; )
              o.setUint8(p++, l.getUint8(e++));
            return j;
          }}), b(187)(e);
      }, function(k, n, a) {
        for (var b,
            c = a(2),
            e = a(8),
            f = a(17),
            d = f("typed_array"),
            g = f("view"),
            h = !(!c.ArrayBuffer || !c.DataView),
            i = h,
            j = 0,
            l = 9,
            m = "Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array".split(","); l > j; )
          (b = c[m[j++]]) ? (e(b.prototype, d, !0), e(b.prototype, g, !0)) : i = !1;
        k.exports = {
          ABV: h,
          CONSTR: i,
          TYPED: d,
          VIEW: g
        };
      }, function(da, F, c) {
        var m = c(2),
            q = c(4),
            aa = c(26),
            O = c(232),
            N = c(8),
            M = c(202),
            E = c(5),
            u = c(84),
            t = c(36),
            Q = c(35),
            ca = c(48).f,
            W = c(9).f,
            $ = c(181),
            D = c(22),
            r = "ArrayBuffer",
            k = "DataView",
            h = "prototype",
            G = "Wrong length!",
            B = "Wrong index!",
            b = m[r],
            d = m[k],
            j = m.Math,
            l = m.RangeError,
            s = m.Infinity,
            n = b,
            ba = j.abs,
            e = j.pow,
            X = j.floor,
            Y = j.log,
            Z = j.LN2,
            A = "buffer",
            v = "byteLength",
            C = "byteOffset",
            w = q ? "_b" : A,
            i = q ? "_l" : v,
            x = q ? "_o" : C,
            z = function(a, c, l) {
              var b,
                  d,
                  g,
                  h = Array(l),
                  i = 8 * l - c - 1,
                  j = (1 << i) - 1,
                  f = j >> 1,
                  m = 23 === c ? e(2, -24) - e(2, -77) : 0,
                  k = 0,
                  n = 0 > a || 0 === a && 0 > 1 / a ? 1 : 0;
              for (a = ba(a), a != a || a === s ? (d = a != a ? 1 : 0, b = j) : (b = X(Y(a) / Z), a * (g = e(2, -b)) < 1 && (b--, g *= 2), a += b + f >= 1 ? m / g : m * e(2, 1 - f), a * g >= 2 && (b++, g /= 2), b + f >= j ? (d = 0, b = j) : b + f >= 1 ? (d = (a * g - 1) * e(2, c), b += f) : (d = a * e(2, f - 1) * e(2, c), b = 0)); c >= 8; h[k++] = 255 & d, d /= 256, c -= 8)
                ;
              for (b = b << c | d, i += c; i > 0; h[k++] = 255 & b, b /= 256, i -= 8)
                ;
              return h[--k] |= 128 * n, h;
            },
            H = function(h, g, k) {
              var c,
                  j = 8 * k - g - 1,
                  l = (1 << j) - 1,
                  i = l >> 1,
                  b = j - 7,
                  d = k - 1,
                  f = h[d--],
                  a = 127 & f;
              for (f >>= 7; b > 0; a = 256 * a + h[d], d--, b -= 8)
                ;
              for (c = a & (1 << -b) - 1, a >>= -b, b += g; b > 0; c = 256 * c + h[d], d--, b -= 8)
                ;
              if (0 === a)
                a = 1 - i;
              else {
                if (a === l)
                  return c ? NaN : f ? -s : s;
                c += e(2, g), a -= i;
              }
              return (f ? -1 : 1) * c * e(2, a - g);
            },
            I = function(a) {
              return a[3] << 24 | a[2] << 16 | a[1] << 8 | a[0];
            },
            J = function(a) {
              return [255 & a];
            },
            K = function(a) {
              return [255 & a, a >> 8 & 255];
            },
            L = function(a) {
              return [255 & a, a >> 8 & 255, a >> 16 & 255, a >> 24 & 255];
            },
            U = function(a) {
              return z(a, 52, 8);
            },
            V = function(a) {
              return z(a, 23, 4);
            },
            o = function(a, b, c) {
              W(a[h], b, {get: function() {
                  return this[c];
                }});
            },
            g = function(b, c, g, h) {
              var d = +g,
                  a = t(d);
              if (d != a || 0 > a || a + c > b[i])
                throw l(B);
              var j = b[w]._b,
                  e = a + b[x],
                  f = j.slice(e, e + c);
              return h ? f : f.reverse();
            },
            f = function(c, d, j, h, f, g) {
              var e = +j,
                  b = t(e);
              if (e != b || 0 > b || b + d > c[i])
                throw l(B);
              for (var k = c[w]._b,
                  m = b + c[x],
                  n = h(+f),
                  a = 0; d > a; a++)
                k[m + a] = n[g ? a : d - a - 1];
            },
            P = function(d, e) {
              u(d, b, r);
              var a = +e,
                  c = Q(a);
              if (a != c)
                throw l(G);
              return c;
            };
        if (O.ABV) {
          if (!E(function() {
            new b;
          }) || !E(function() {
            new b(.5);
          })) {
            b = function ArrayBuffer(a) {
              return new n(P(this, a));
            };
            for (var y,
                _ = b[h] = n[h],
                R = ca(n),
                S = 0; R.length > S; )
              (y = R[S++]) in b || N(b, y, n[y]);
            aa || (_.constructor = b);
          }
          var p = new d(new b(2)),
              T = d[h].setInt8;
          p.setInt8(0, 2147483648), p.setInt8(1, 2147483649), !p.getInt8(0) && p.getInt8(1) || M(d[h], {
            setInt8: function setInt8(a, b) {
              T.call(this, a, b << 24 >> 24);
            },
            setUint8: function setUint8(a, b) {
              T.call(this, a, b << 24 >> 24);
            }
          }, !0);
        } else
          b = function ArrayBuffer(b) {
            var a = P(this, b);
            this._b = $.call(Array(a), 0), this[i] = a;
          }, d = function DataView(f, h, c) {
            u(this, d, k), u(f, b, k);
            var g = f[i],
                e = t(h);
            if (0 > e || e > g)
              throw l("Wrong offset!");
            if (c = c === a ? g - e : Q(c), e + c > g)
              throw l(G);
            this[w] = f, this[x] = e, this[i] = c;
          }, q && (o(b, v, "_l"), o(d, A, "_b"), o(d, v, "_l"), o(d, C, "_o")), M(d[h], {
            getInt8: function getInt8(a) {
              return g(this, 1, a)[0] << 24 >> 24;
            },
            getUint8: function getUint8(a) {
              return g(this, 1, a)[0];
            },
            getInt16: function getInt16(b) {
              var a = g(this, 2, b, arguments[1]);
              return (a[1] << 8 | a[0]) << 16 >> 16;
            },
            getUint16: function getUint16(b) {
              var a = g(this, 2, b, arguments[1]);
              return a[1] << 8 | a[0];
            },
            getInt32: function getInt32(a) {
              return I(g(this, 4, a, arguments[1]));
            },
            getUint32: function getUint32(a) {
              return I(g(this, 4, a, arguments[1])) >>> 0;
            },
            getFloat32: function getFloat32(a) {
              return H(g(this, 4, a, arguments[1]), 23, 4);
            },
            getFloat64: function getFloat64(a) {
              return H(g(this, 8, a, arguments[1]), 52, 8);
            },
            setInt8: function setInt8(a, b) {
              f(this, 1, a, J, b);
            },
            setUint8: function setUint8(a, b) {
              f(this, 1, a, J, b);
            },
            setInt16: function setInt16(a, b) {
              f(this, 2, a, K, b, arguments[2]);
            },
            setUint16: function setUint16(a, b) {
              f(this, 2, a, K, b, arguments[2]);
            },
            setInt32: function setInt32(a, b) {
              f(this, 4, a, L, b, arguments[2]);
            },
            setUint32: function setUint32(a, b) {
              f(this, 4, a, L, b, arguments[2]);
            },
            setFloat32: function setFloat32(a, b) {
              f(this, 4, a, V, b, arguments[2]);
            },
            setFloat64: function setFloat64(a, b) {
              f(this, 8, a, U, b, arguments[2]);
            }
          });
        D(b, r), D(d, k), N(d[h], O.VIEW, !0), F[r] = b, F[k] = d;
      }, function(c, d, b) {
        var a = b(6);
        a(a.G + a.W + a.F * !b(232).ABV, {DataView: b(233).DataView});
      }, function(b, c, a) {
        a(236)("Int8", 1, function(a) {
          return function Int8Array(b, c, d) {
            return a(this, b, c, d);
          };
        });
      }, function(N, Wa, b) {
        if (b(4)) {
          var T = b(26),
              y = b(2),
              h = b(5),
              c = b(6),
              x = b(232),
              ca = b(233),
              Ka = b(18),
              da = b(84),
              Ha = b(15),
              e = b(8),
              D = b(202),
              Ga = (b(91), b(36)),
              q = b(35),
              fa = b(37),
              ia = b(14),
              s = b(3),
              ya = b(69),
              ka = b(73),
              j = b(11),
              ma = b(56),
              ta = b(155),
              sa = b(44),
              ra = b(57),
              B = b(48).f,
              Ra = (b(237), b(157)),
              Y = b(17),
              V = b(23),
              i = b(165),
              U = b(34),
              H = b(199),
              I = b(184),
              Sa = b(136),
              Ta = b(158),
              Qa = b(187),
              Va = b(181),
              qa = b(178),
              O = b(9),
              P = b(49),
              p = O.f,
              Ua = P.f,
              k = y.RangeError,
              J = y.TypeError,
              l = y.Uint8Array,
              E = "ArrayBuffer",
              W = "Shared" + E,
              X = "BYTES_PER_ELEMENT",
              r = "prototype",
              g = Array[r],
              C = ca.ArrayBuffer,
              Pa = ca.DataView,
              aa = i(0),
              Oa = i(2),
              La = i(3),
              Ja = i(4),
              Ia = i(5),
              oa = i(6),
              Ea = U(!0),
              Ca = U(!1),
              Aa = I.values,
              xa = I.keys,
              wa = I.entries,
              va = g.lastIndexOf,
              ua = g.reduce,
              pa = g.reduceRight,
              na = g.join,
              Fa = g.sort,
              M = g.slice,
              o = g.toString,
              K = g.toLocaleString,
              G = V("iterator"),
              t = V("toStringTag"),
              la = Y("typed_constructor"),
              w = Y("def_constructor"),
              ja = x.CONSTR,
              m = x.TYPED,
              za = x.VIEW,
              n = "Wrong length!",
              Ba = i(1, function(a, b) {
                return u(H(a, a[w]), b);
              }),
              ha = h(function() {
                return 1 === new l(new Uint16Array([1]).buffer)[0];
              }),
              Da = !!l && !!l[r].set && h(function() {
                new l(1).set({});
              }),
              ga = function(b, d) {
                if (b === a)
                  throw J(n);
                var e = +b,
                    c = q(b);
                if (d && !ya(e, c))
                  throw k(n);
                return c;
              },
              A = function(b, c) {
                var a = Ga(b);
                if (0 > a || a % c)
                  throw k("Wrong offset!");
                return a;
              },
              d = function(a) {
                if (j(a) && m in a)
                  return a;
                throw J(a + " is not a typed array!");
              },
              u = function(a, b) {
                if (!(j(a) && la in a))
                  throw J("It is not a typed array constructor!");
                return new a(b);
              },
              ea = function(a, b) {
                return F(H(a, a[w]), b);
              },
              F = function(e, b) {
                for (var a = 0,
                    c = b.length,
                    d = u(e, c); c > a; )
                  d[a] = b[a++];
                return d;
              },
              v = function(a, b, c) {
                p(a, b, {get: function() {
                    return this._d[c];
                  }});
              },
              L = function from(m) {
                var b,
                    f,
                    g,
                    h,
                    j,
                    i,
                    c = ma(m),
                    k = arguments.length,
                    d = k > 1 ? arguments[1] : a,
                    l = d !== a,
                    e = Ra(c);
                if (e != a && !ta(e)) {
                  for (i = e.call(c), g = [], b = 0; !(j = i.next()).done; b++)
                    g.push(j.value);
                  c = g;
                }
                for (l && k > 2 && (d = Ka(d, arguments[2], 2)), b = 0, f = q(c.length), h = u(this, f); f > b; b++)
                  h[b] = l ? d(c[b], b) : c[b];
                return h;
              },
              Ma = function of() {
                for (var a = 0,
                    b = arguments.length,
                    c = u(this, b); b > a; )
                  c[a] = arguments[a++];
                return c;
              },
              Na = !!l && h(function() {
                K.call(new l(1));
              }),
              ba = function toLocaleString() {
                return K.apply(Na ? M.call(d(this)) : d(this), arguments);
              },
              _ = {
                copyWithin: function copyWithin(b, c) {
                  return qa.call(d(this), b, c, arguments.length > 2 ? arguments[2] : a);
                },
                every: function every(b) {
                  return Ja(d(this), b, arguments.length > 1 ? arguments[1] : a);
                },
                fill: function fill(a) {
                  return Va.apply(d(this), arguments);
                },
                filter: function filter(b) {
                  return ea(this, Oa(d(this), b, arguments.length > 1 ? arguments[1] : a));
                },
                find: function find(b) {
                  return Ia(d(this), b, arguments.length > 1 ? arguments[1] : a);
                },
                findIndex: function findIndex(b) {
                  return oa(d(this), b, arguments.length > 1 ? arguments[1] : a);
                },
                forEach: function forEach(b) {
                  aa(d(this), b, arguments.length > 1 ? arguments[1] : a);
                },
                indexOf: function indexOf(b) {
                  return Ca(d(this), b, arguments.length > 1 ? arguments[1] : a);
                },
                includes: function includes(b) {
                  return Ea(d(this), b, arguments.length > 1 ? arguments[1] : a);
                },
                join: function join(a) {
                  return na.apply(d(this), arguments);
                },
                lastIndexOf: function lastIndexOf(a) {
                  return va.apply(d(this), arguments);
                },
                map: function map(b) {
                  return Ba(d(this), b, arguments.length > 1 ? arguments[1] : a);
                },
                reduce: function reduce(a) {
                  return ua.apply(d(this), arguments);
                },
                reduceRight: function reduceRight(a) {
                  return pa.apply(d(this), arguments);
                },
                reverse: function reverse() {
                  for (var e,
                      a = this,
                      b = d(a).length,
                      f = Math.floor(b / 2),
                      c = 0; f > c; )
                    e = a[c], a[c++] = a[--b], a[b] = e;
                  return a;
                },
                some: function some(b) {
                  return La(d(this), b, arguments.length > 1 ? arguments[1] : a);
                },
                sort: function sort(a) {
                  return Fa.call(d(this), a);
                },
                subarray: function subarray(g, e) {
                  var b = d(this),
                      c = b.length,
                      f = fa(g, c);
                  return new (H(b, b[w]))(b.buffer, b.byteOffset + f * b.BYTES_PER_ELEMENT, q((e === a ? c : fa(e, c)) - f));
                }
              },
              $ = function slice(a, b) {
                return ea(this, M.call(d(this), a, b));
              },
              Z = function set(f) {
                d(this);
                var b = A(arguments[1], 1),
                    g = this.length,
                    c = ma(f),
                    e = q(c.length),
                    a = 0;
                if (e + b > g)
                  throw k(n);
                for (; e > a; )
                  this[b + a] = c[a++];
              },
              z = {
                entries: function entries() {
                  return wa.call(d(this));
                },
                keys: function keys() {
                  return xa.call(d(this));
                },
                values: function values() {
                  return Aa.call(d(this));
                }
              },
              S = function(b, a) {
                return j(b) && b[m] && "symbol" != typeof a && a in b && String(+a) == String(a);
              },
              R = function getOwnPropertyDescriptor(b, a) {
                return S(b, a = ia(a, !0)) ? Ha(2, b[a]) : Ua(b, a);
              },
              Q = function defineProperty(b, c, a) {
                return !(S(b, c = ia(c, !0)) && j(a) && s(a, "value")) || s(a, "get") || s(a, "set") || a.configurable || s(a, "writable") && !a.writable || s(a, "enumerable") && !a.enumerable ? p(b, c, a) : (b[c] = a.value, b);
              };
          ja || (P.f = R, O.f = Q), c(c.S + c.F * !ja, "Object", {
            getOwnPropertyDescriptor: R,
            defineProperty: Q
          }), h(function() {
            o.call({});
          }) && (o = K = function toString() {
            return na.call(this);
          });
          var f = D({}, _);
          D(f, z), e(f, G, z.values), D(f, {
            slice: $,
            set: Z,
            constructor: function() {},
            toString: o,
            toLocaleString: ba
          }), v(f, "buffer", "b"), v(f, "byteOffset", "o"), v(f, "byteLength", "l"), v(f, "length", "e"), p(f, t, {get: function() {
              return this[m];
            }}), N.exports = function(v, i, I, s) {
            s = !!s;
            var d = v + (s ? "Clamped" : "") + "Array",
                S = "Uint8Array" != d,
                R = "get" + v,
                N = "set" + v,
                b = y[d],
                l = b || {},
                K = b && ra(b),
                M = !b || !x.ABV,
                J = {},
                g = b && b[r],
                O = function(b, c) {
                  var a = b._d;
                  return a.v[R](c * i + a.o, ha);
                },
                P = function(c, d, a) {
                  var b = c._d;
                  s && (a = (a = Math.round(a)) < 0 ? 0 : a > 255 ? 255 : 255 & a), b.v[N](d * i + b.o, a, ha);
                },
                Q = function(b, a) {
                  p(b, a, {
                    get: function() {
                      return O(this, a);
                    },
                    set: function(b) {
                      return P(this, a, b);
                    },
                    enumerable: !0
                  });
                };
            M ? (b = I(function(o, c, u, r) {
              da(o, b, d, "_d");
              var l,
                  f,
                  g,
                  s,
                  t = 0,
                  h = 0;
              if (j(c)) {
                if (!(c instanceof C || (s = ka(c)) == E || s == W))
                  return m in c ? F(b, c) : L.call(b, c);
                l = c, h = A(u, i);
                var p = c.byteLength;
                if (r === a) {
                  if (p % i)
                    throw k(n);
                  if (f = p - h, 0 > f)
                    throw k(n);
                } else if (f = q(r) * i, f + h > p)
                  throw k(n);
                g = f / i;
              } else
                g = ga(c, !0), f = g * i, l = new C(f);
              for (e(o, "_d", {
                b: l,
                o: h,
                l: f,
                e: g,
                v: new Pa(l)
              }); g > t; )
                Q(o, t++);
            }), g = b[r] = sa(f), e(g, "constructor", b)) : Ta(function(a) {
              new b(null), new b(a);
            }, !0) || (b = I(function(h, c, e, f) {
              da(h, b, d);
              var g;
              return j(c) ? c instanceof C || (g = ka(c)) == E || g == W ? f !== a ? new l(c, A(e, i), f) : e !== a ? new l(c, A(e, i)) : new l(c) : m in c ? F(b, c) : L.call(b, c) : new l(ga(c, S));
            }), aa(K !== Function.prototype ? B(l).concat(B(K)) : B(l), function(a) {
              a in b || e(b, a, l[a]);
            }), b[r] = g, T || (g.constructor = b));
            var u = g[G],
                D = !!u && ("values" == u.name || u.name == a),
                H = z.values;
            e(b, la, !0), e(g, m, d), e(g, za, !0), e(g, w, b), (s ? new b(1)[t] == d : t in g) || p(g, t, {get: function() {
                return d;
              }}), J[d] = b, c(c.G + c.W + c.F * (b != l), J), c(c.S, d, {
              BYTES_PER_ELEMENT: i,
              from: L,
              of: Ma
            }), X in g || e(g, X, i), c(c.P, d, _), Qa(d), c(c.P + c.F * Da, d, {set: Z}), c(c.P + c.F * !D, d, z), c(c.P + c.F * (g.toString != o), d, {toString: o}), c(c.P + c.F * h(function() {
              new b(1).slice();
            }), d, {slice: $}), c(c.P + c.F * (h(function() {
              return [1, 2].toLocaleString() != new b([1, 2]).toLocaleString();
            }) || !h(function() {
              g.toLocaleString.call([1, 2]);
            })), d, {toLocaleString: ba}), Sa[d] = D ? u : H, T || D || e(g, G, H);
          };
        } else
          N.exports = function() {};
      }, function(c, g, b) {
        var d = b(73),
            e = b(23)("iterator"),
            f = b(136);
        c.exports = b(7).isIterable = function(c) {
          var b = Object(c);
          return b[e] !== a || "@@iterator" in b || f.hasOwnProperty(d(b));
        };
      }, function(b, c, a) {
        a(236)("Uint8", 1, function(a) {
          return function Uint8Array(b, c, d) {
            return a(this, b, c, d);
          };
        });
      }, function(b, c, a) {
        a(236)("Uint8", 1, function(a) {
          return function Uint8ClampedArray(b, c, d) {
            return a(this, b, c, d);
          };
        }, !0);
      }, function(b, c, a) {
        a(236)("Int16", 2, function(a) {
          return function Int16Array(b, c, d) {
            return a(this, b, c, d);
          };
        });
      }, function(b, c, a) {
        a(236)("Uint16", 2, function(a) {
          return function Uint16Array(b, c, d) {
            return a(this, b, c, d);
          };
        });
      }, function(b, c, a) {
        a(236)("Int32", 4, function(a) {
          return function Int32Array(b, c, d) {
            return a(this, b, c, d);
          };
        });
      }, function(b, c, a) {
        a(236)("Uint32", 4, function(a) {
          return function Uint32Array(b, c, d) {
            return a(this, b, c, d);
          };
        });
      }, function(b, c, a) {
        a(236)("Float32", 4, function(a) {
          return function Float32Array(b, c, d) {
            return a(this, b, c, d);
          };
        });
      }, function(b, c, a) {
        a(236)("Float64", 8, function(a) {
          return function Float64Array(b, c, d) {
            return a(this, b, c, d);
          };
        });
      }, function(e, f, b) {
        var c = b(6),
            d = b(34)(!0);
        c(c.P, "Array", {includes: function includes(b) {
            return d(this, b, arguments.length > 1 ? arguments[1] : a);
          }}), b(179)("includes");
      }, function(d, e, a) {
        var b = a(6),
            c = a(126)(!0);
        b(b.P, "String", {at: function at(a) {
            return c(this, a);
          }});
      }, function(e, f, b) {
        var c = b(6),
            d = b(249);
        c(c.P, "String", {padStart: function padStart(b) {
            return d(this, b, arguments.length > 1 ? arguments[1] : a, !0);
          }});
      }, function(c, g, b) {
        var d = b(35),
            e = b(86),
            f = b(33);
        c.exports = function(l, m, i, n) {
          var c = String(f(l)),
              j = c.length,
              g = i === a ? " " : String(i),
              k = d(m);
          if (j >= k || "" == g)
            return c;
          var h = k - j,
              b = e.call(g, Math.ceil(h / g.length));
          return b.length > h && (b = b.slice(0, h)), n ? b + c : c + b;
        };
      }, function(e, f, b) {
        var c = b(6),
            d = b(249);
        c(c.P, "String", {padEnd: function padEnd(b) {
            return d(this, b, arguments.length > 1 ? arguments[1] : a, !1);
          }});
      }, function(b, c, a) {
        a(81)("trimLeft", function(a) {
          return function trimLeft() {
            return a(this, 1);
          };
        }, "trimStart");
      }, function(b, c, a) {
        a(81)("trimRight", function(a) {
          return function trimRight() {
            return a(this, 2);
          };
        }, "trimEnd");
      }, function(i, j, a) {
        var b = a(6),
            d = a(33),
            e = a(35),
            f = a(129),
            g = a(189),
            h = RegExp.prototype,
            c = function(a, b) {
              this._r = a, this._s = b;
            };
        a(137)(c, "RegExp String", function next() {
          var a = this._r.exec(this._s);
          return {
            value: a,
            done: null === a
          };
        }), b(b.P, "String", {matchAll: function matchAll(a) {
            if (d(this), !f(a))
              throw TypeError(a + " is not a regexp!");
            var j = String(this),
                b = "flags" in h ? String(a.flags) : g.call(a),
                i = new RegExp(a.source, ~b.indexOf("g") ? b : "g" + b);
            return i.lastIndex = e(a.lastIndex), new c(i, j);
          }});
      }, function(b, c, a) {
        a(25)("asyncIterator");
      }, function(b, c, a) {
        a(25)("observable");
      }, function(g, h, a) {
        var b = a(6),
            c = a(221),
            d = a(30),
            e = a(49),
            f = a(156);
        b(b.S, "Object", {getOwnPropertyDescriptors: function getOwnPropertyDescriptors(j) {
            for (var a,
                b = d(j),
                k = e.f,
                g = c(b),
                h = {},
                i = 0; g.length > i; )
              f(h, a = g[i++], k(b, a));
            return h;
          }});
      }, function(d, e, a) {
        var b = a(6),
            c = a(258)(!1);
        b(b.S, "Object", {values: function values(a) {
            return c(a);
          }});
      }, function(b, f, a) {
        var c = a(28),
            d = a(30),
            e = a(42).f;
        b.exports = function(a) {
          return function(j) {
            for (var b,
                f = d(j),
                g = c(f),
                k = g.length,
                h = 0,
                i = []; k > h; )
              e.call(f, b = g[h++]) && i.push(a ? [b, f[b]] : f[b]);
            return i;
          };
        };
      }, function(d, e, a) {
        var b = a(6),
            c = a(258)(!0);
        b(b.S, "Object", {entries: function entries(a) {
            return c(a);
          }});
      }, function(f, g, a) {
        var b = a(6),
            c = a(56),
            d = a(19),
            e = a(9);
        a(4) && b(b.P + a(261), "Object", {__defineGetter__: function __defineGetter__(a, b) {
            e.f(c(this), a, {
              get: d(b),
              enumerable: !0,
              configurable: !0
            });
          }});
      }, function(b, c, a) {
        b.exports = a(26) || !a(5)(function() {
          var b = Math.random();
          __defineSetter__.call(null, b, function() {}), delete a(2)[b];
        });
      }, function(f, g, a) {
        var b = a(6),
            c = a(56),
            d = a(19),
            e = a(9);
        a(4) && b(b.P + a(261), "Object", {__defineSetter__: function __defineSetter__(a, b) {
            e.f(c(this), a, {
              set: d(b),
              enumerable: !0,
              configurable: !0
            });
          }});
      }, function(g, h, a) {
        var b = a(6),
            c = a(56),
            d = a(14),
            e = a(57),
            f = a(49).f;
        a(4) && b(b.P + a(261), "Object", {__lookupGetter__: function __lookupGetter__(g) {
            var b,
                a = c(this),
                h = d(g, !0);
            do
              if (b = f(a, h))
                return b.get;
 while (a = e(a));
          }});
      }, function(g, h, a) {
        var b = a(6),
            c = a(56),
            d = a(14),
            e = a(57),
            f = a(49).f;
        a(4) && b(b.P + a(261), "Object", {__lookupSetter__: function __lookupSetter__(g) {
            var b,
                a = c(this),
                h = d(g, !0);
            do
              if (b = f(a, h))
                return b.set;
 while (a = e(a));
          }});
      }, function(c, d, b) {
        var a = b(6);
        a(a.P + a.R, "Map", {toJSON: b(266)("Map")});
      }, function(b, e, a) {
        var c = a(73),
            d = a(267);
        b.exports = function(a) {
          return function toJSON() {
            if (c(this) != a)
              throw TypeError(a + "#toJSON isn't generic");
            return d(this);
          };
        };
      }, function(a, d, b) {
        var c = b(198);
        a.exports = function(b, d) {
          var a = [];
          return c(b, !1, a.push, a, d), a;
        };
      }, function(c, d, b) {
        var a = b(6);
        a(a.P + a.R, "Set", {toJSON: b(266)("Set")});
      }, function(c, d, a) {
        var b = a(6);
        b(b.S, "System", {global: a(2)});
      }, function(d, e, a) {
        var b = a(6),
            c = a(32);
        b(b.S, "Error", {isError: function isError(a) {
            return "Error" === c(a);
          }});
      }, function(c, d, b) {
        var a = b(6);
        a(a.S, "Math", {iaddh: function iaddh(c, d, e, f) {
            var a = c >>> 0,
                g = d >>> 0,
                b = e >>> 0;
            return g + (f >>> 0) + ((a & b | (a | b) & ~(a + b >>> 0)) >>> 31) | 0;
          }});
      }, function(c, d, b) {
        var a = b(6);
        a(a.S, "Math", {isubh: function isubh(c, d, e, f) {
            var a = c >>> 0,
                g = d >>> 0,
                b = e >>> 0;
            return g - (f >>> 0) - ((~a & b | ~(a ^ b) & a - b >>> 0) >>> 31) | 0;
          }});
      }, function(c, d, b) {
        var a = b(6);
        a(a.S, "Math", {imulh: function imulh(i, j) {
            var a = 65535,
                e = +i,
                b = +j,
                g = e & a,
                h = b & a,
                f = e >> 16,
                c = b >> 16,
                d = (f * h >>> 0) + (g * h >>> 16);
            return f * c + (d >> 16) + ((g * c >>> 0) + (d & a) >> 16);
          }});
      }, function(c, d, b) {
        var a = b(6);
        a(a.S, "Math", {umulh: function umulh(i, j) {
            var a = 65535,
                e = +i,
                b = +j,
                g = e & a,
                h = b & a,
                f = e >>> 16,
                c = b >>> 16,
                d = (f * h >>> 0) + (g * h >>> 16);
            return f * c + (d >>> 16) + ((g * c >>> 0) + (d & a) >>> 16);
          }});
      }, function(f, g, b) {
        var a = b(276),
            c = b(10),
            d = a.key,
            e = a.set;
        a.exp({defineMetadata: function defineMetadata(a, b, f, g) {
            e(a, b, c(f), d(g));
          }});
      }, function(h, o, c) {
        var e = c(203),
            f = c(6),
            g = c(21)("metadata"),
            d = g.store || (g.store = new (c(207))),
            b = function(f, g, h) {
              var b = d.get(f);
              if (!b) {
                if (!h)
                  return a;
                d.set(f, b = new e);
              }
              var c = b.get(g);
              if (!c) {
                if (!h)
                  return a;
                b.set(g, c = new e);
              }
              return c;
            },
            j = function(d, e, f) {
              var c = b(e, f, !1);
              return c === a ? !1 : c.has(d);
            },
            k = function(d, e, f) {
              var c = b(e, f, !1);
              return c === a ? a : c.get(d);
            },
            l = function(a, c, d, e) {
              b(d, e, !0).set(a, c);
            },
            m = function(d, e) {
              var a = b(d, e, !1),
                  c = [];
              return a && a.forEach(function(b, a) {
                c.push(a);
              }), c;
            },
            i = function(b) {
              return b === a || "symbol" == typeof b ? b : String(b);
            },
            n = function(a) {
              f(f.S, "Reflect", a);
            };
        h.exports = {
          store: d,
          map: b,
          has: j,
          get: k,
          set: l,
          keys: m,
          key: i,
          exp: n
        };
      }, function(h, i, c) {
        var b = c(276),
            e = c(10),
            f = b.key,
            g = b.map,
            d = b.store;
        b.exp({deleteMetadata: function deleteMetadata(j, b) {
            var h = 3 > arguments.length ? a : f(arguments[2]),
                c = g(e(b), h, !1);
            if (c === a || !c["delete"](j))
              return !1;
            if (c.size)
              return !0;
            var i = d.get(b);
            return i["delete"](h), !!i.size || d["delete"](b);
          }});
      }, function(j, k, c) {
        var b = c(276),
            e = c(10),
            f = c(57),
            g = b.has,
            h = b.get,
            i = b.key,
            d = function(b, c, e) {
              var j = g(b, c, e);
              if (j)
                return h(b, c, e);
              var i = f(c);
              return null !== i ? d(b, i, e) : a;
            };
        b.exp({getMetadata: function getMetadata(b, c) {
            return d(b, e(c), 3 > arguments.length ? a : i(arguments[2]));
          }});
      }, function(l, k, b) {
        var e = b(206),
            f = b(267),
            c = b(276),
            g = b(10),
            h = b(57),
            i = c.keys,
            j = c.key,
            d = function(c, g) {
              var a = i(c, g),
                  j = h(c);
              if (null === j)
                return a;
              var b = d(j, g);
              return b.length ? a.length ? f(new e(a.concat(b))) : b : a;
            };
        c.exp({getMetadataKeys: function getMetadataKeys(b) {
            return d(g(b), 2 > arguments.length ? a : j(arguments[1]));
          }});
      }, function(g, h, c) {
        var b = c(276),
            d = c(10),
            e = b.get,
            f = b.key;
        b.exp({getOwnMetadata: function getOwnMetadata(b, c) {
            return e(b, d(c), 3 > arguments.length ? a : f(arguments[2]));
          }});
      }, function(g, h, c) {
        var b = c(276),
            d = c(10),
            e = b.keys,
            f = b.key;
        b.exp({getOwnMetadataKeys: function getOwnMetadataKeys(b) {
            return e(d(b), 2 > arguments.length ? a : f(arguments[1]));
          }});
      }, function(i, j, b) {
        var c = b(276),
            e = b(10),
            f = b(57),
            g = c.has,
            h = c.key,
            d = function(a, b, c) {
              var h = g(a, b, c);
              if (h)
                return !0;
              var e = f(b);
              return null !== e ? d(a, e, c) : !1;
            };
        c.exp({hasMetadata: function hasMetadata(b, c) {
            return d(b, e(c), 3 > arguments.length ? a : h(arguments[2]));
          }});
      }, function(g, h, c) {
        var b = c(276),
            d = c(10),
            e = b.has,
            f = b.key;
        b.exp({hasOwnMetadata: function hasOwnMetadata(b, c) {
            return e(b, d(c), 3 > arguments.length ? a : f(arguments[2]));
          }});
      }, function(h, i, b) {
        var c = b(276),
            d = b(10),
            e = b(19),
            f = c.key,
            g = c.set;
        c.exp({metadata: function metadata(b, c) {
            return function decorator(i, h) {
              g(b, c, (h !== a ? d : e)(i), f(h));
            };
          }});
      }, function(f, g, a) {
        var b = a(6),
            d = a(201)(),
            c = a(2).process,
            e = "process" == a(32)(c);
        b(b.G, {asap: function asap(a) {
            var b = e && c.domain;
            d(b ? b.bind(a) : a);
          }});
      }, function(d, e, b) {
        var a = b(6),
            c = b(200);
        a(a.G + a.B, {
          setImmediate: c.set,
          clearImmediate: c.clear
        });
      }, function(r, q, b) {
        for (var j = b(184),
            p = b(16),
            o = b(2),
            g = b(8),
            h = b(136),
            i = b(23),
            f = i("iterator"),
            k = i("toStringTag"),
            l = h.Array,
            n = ["NodeList", "DOMTokenList", "MediaList", "StyleSheetList", "CSSRuleList"],
            e = 0; 5 > e; e++) {
          var c,
              d = n[e],
              m = o[d],
              a = m && m.prototype;
          if (a) {
            a[f] || g(a, f, l), a[k] || g(a, k, d), h[d] = l;
            for (c in j)
              a[c] || p(a, c, j[c], !0);
          }
        }
      }, function(i, j, a) {
        var c = a(2),
            b = a(6),
            g = a(76),
            h = a(289),
            d = c.navigator,
            e = !!d && /MSIE .\./.test(d.userAgent),
            f = function(a) {
              return e ? function(b, c) {
                return a(g(h, [].slice.call(arguments, 2), "function" == typeof b ? b : Function(b)), c);
              } : a;
            };
        b(b.G + b.B + b.F * e, {
          setTimeout: f(c.setTimeout),
          setInterval: f(c.setInterval)
        });
      }, function(c, f, a) {
        var d = a(290),
            b = a(76),
            e = a(19);
        c.exports = function() {
          for (var h = e(this),
              a = arguments.length,
              c = Array(a),
              f = 0,
              i = d._,
              g = !1; a > f; )
            (c[f] = arguments[f++]) === i && (g = !0);
          return function() {
            var d,
                j = this,
                k = arguments.length,
                e = 0,
                f = 0;
            if (!g && !k)
              return b(h, c, j);
            if (d = c.slice(), g)
              for (; a > e; e++)
                d[e] === i && (d[e] = arguments[f++]);
            for (; k > f; )
              d.push(arguments[f++]);
            return b(h, d, j);
          };
        };
      }, function(a, c, b) {
        a.exports = b(2);
      }]), "undefined" != typeof module && module.exports ? module.exports = b : "function" == typeof define && define.amd ? define(function() {
        return b;
      }) : c.core = b;
    }(1, 1);
  })($__require('process'));
  return module.exports;
});

System.registerDynamic("npm:core-js@2.3.0.js", ["npm:core-js@2.3.0/client/shim.min"], true, function($__require, exports, module) {
  ;
  var define,
      global = this,
      GLOBAL = this;
  module.exports = $__require('npm:core-js@2.3.0/client/shim.min');
  return module.exports;
});
